import { getFiltersConstraints } from '../../../src/providers/lazy-loading/paramsToQuery';
describe('getFiltersConstraints', function () {
    it('should return where filter with array-contains-any operator when filter value is array', function () {
        var filters = { fieldA: ['valueA'] };
        var result = getFiltersConstraints(filters);
        expect(result.length).toEqual(1);
        var queryConstraint = result[0];
        expect(queryConstraint.type).toEqual('where');
        // @ts-ignore
        expect(queryConstraint['_op']).toEqual('array-contains-any');
    });
    it('should return two where filters when filter value is string', function () {
        var filters = { fieldA: 'valueA' };
        var result = getFiltersConstraints(filters);
        expect(result.length).toEqual(2);
        var queryConstraintGte = result[0];
        var queryConstraintLt = result[1];
        expect(queryConstraintGte.type).toEqual('where');
        expect(queryConstraintLt.type).toEqual('where');
        // @ts-ignore
        expect(queryConstraintGte['_op']).toEqual('>=');
        // @ts-ignore
        expect(queryConstraintLt['_op']).toEqual('<');
    });
    it('should return where filter with == operator when field value is number', function () {
        var filters = { fieldA: 1 };
        var result = getFiltersConstraints(filters);
        expect(result.length).toEqual(1);
        var queryConstraint = result[0];
        expect(queryConstraint.type).toEqual('where');
        // @ts-ignore
        expect(queryConstraint['_op']).toEqual('==');
    });
    it('should return where filter with == operator when field value is boolean', function () {
        var filters = { fieldA: false };
        var result = getFiltersConstraints(filters);
        expect(result.length).toEqual(1);
        var queryConstraint = result[0];
        expect(queryConstraint.type).toEqual('where');
        // @ts-ignore
        expect(queryConstraint['_op']).toEqual('==');
    });
});
//# sourceMappingURL=paramsToQuery.spec.js.map