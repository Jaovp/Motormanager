import {
  init_tslib_es6,
  tslib_es6_exports
} from "./chunk-5XXOMXNY.js";
import {
  build_exports,
  init_build
} from "./chunk-MIQOKXLL.js";
import {
  __commonJS,
  __toCommonJS
} from "./chunk-ROME4SDB.js";

// node_modules/lodash/lodash.js
var require_lodash = __commonJS({
  "node_modules/lodash/lodash.js"(exports, module) {
    (function() {
      var undefined2;
      var VERSION = "4.17.21";
      var LARGE_ARRAY_SIZE = 200;
      var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var MAX_MEMOIZE_SIZE = 500;
      var PLACEHOLDER = "__lodash_placeholder__";
      var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
      var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
      var HOT_COUNT = 800, HOT_SPAN = 16;
      var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
      var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
      var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
      var wrapFlags = [
        ["ary", WRAP_ARY_FLAG],
        ["bind", WRAP_BIND_FLAG],
        ["bindKey", WRAP_BIND_KEY_FLAG],
        ["curry", WRAP_CURRY_FLAG],
        ["curryRight", WRAP_CURRY_RIGHT_FLAG],
        ["flip", WRAP_FLIP_FLAG],
        ["partial", WRAP_PARTIAL_FLAG],
        ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
        ["rearg", WRAP_REARG_FLAG]
      ];
      var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
      var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
      var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
      var reTrimStart = /^\s+/;
      var reWhitespace = /\s/;
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
      var reEscapeChar = /\\(\\)?/g;
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      var reFlags = /\w*$/;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsOctal = /^0o[0-7]+$/i;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var reNoMatch = /($^)/;
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['’]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reApos = RegExp(rsApos, "g");
      var reComboMark = RegExp(rsCombo, "g");
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
        rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
        rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
        rsUpper + "+" + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join("|"), "g");
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var contextProps = [
        "Array",
        "Buffer",
        "DataView",
        "Date",
        "Error",
        "Float32Array",
        "Float64Array",
        "Function",
        "Int8Array",
        "Int16Array",
        "Int32Array",
        "Map",
        "Math",
        "Object",
        "Promise",
        "RegExp",
        "Set",
        "String",
        "Symbol",
        "TypeError",
        "Uint8Array",
        "Uint8ClampedArray",
        "Uint16Array",
        "Uint32Array",
        "WeakMap",
        "_",
        "clearTimeout",
        "isFinite",
        "parseInt",
        "setTimeout"
      ];
      var templateCounter = -1;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
      var deburredLetters = {
        // Latin-1 Supplement block.
        "À": "A",
        "Á": "A",
        "Â": "A",
        "Ã": "A",
        "Ä": "A",
        "Å": "A",
        "à": "a",
        "á": "a",
        "â": "a",
        "ã": "a",
        "ä": "a",
        "å": "a",
        "Ç": "C",
        "ç": "c",
        "Ð": "D",
        "ð": "d",
        "È": "E",
        "É": "E",
        "Ê": "E",
        "Ë": "E",
        "è": "e",
        "é": "e",
        "ê": "e",
        "ë": "e",
        "Ì": "I",
        "Í": "I",
        "Î": "I",
        "Ï": "I",
        "ì": "i",
        "í": "i",
        "î": "i",
        "ï": "i",
        "Ñ": "N",
        "ñ": "n",
        "Ò": "O",
        "Ó": "O",
        "Ô": "O",
        "Õ": "O",
        "Ö": "O",
        "Ø": "O",
        "ò": "o",
        "ó": "o",
        "ô": "o",
        "õ": "o",
        "ö": "o",
        "ø": "o",
        "Ù": "U",
        "Ú": "U",
        "Û": "U",
        "Ü": "U",
        "ù": "u",
        "ú": "u",
        "û": "u",
        "ü": "u",
        "Ý": "Y",
        "ý": "y",
        "ÿ": "y",
        "Æ": "Ae",
        "æ": "ae",
        "Þ": "Th",
        "þ": "th",
        "ß": "ss",
        // Latin Extended-A block.
        "Ā": "A",
        "Ă": "A",
        "Ą": "A",
        "ā": "a",
        "ă": "a",
        "ą": "a",
        "Ć": "C",
        "Ĉ": "C",
        "Ċ": "C",
        "Č": "C",
        "ć": "c",
        "ĉ": "c",
        "ċ": "c",
        "č": "c",
        "Ď": "D",
        "Đ": "D",
        "ď": "d",
        "đ": "d",
        "Ē": "E",
        "Ĕ": "E",
        "Ė": "E",
        "Ę": "E",
        "Ě": "E",
        "ē": "e",
        "ĕ": "e",
        "ė": "e",
        "ę": "e",
        "ě": "e",
        "Ĝ": "G",
        "Ğ": "G",
        "Ġ": "G",
        "Ģ": "G",
        "ĝ": "g",
        "ğ": "g",
        "ġ": "g",
        "ģ": "g",
        "Ĥ": "H",
        "Ħ": "H",
        "ĥ": "h",
        "ħ": "h",
        "Ĩ": "I",
        "Ī": "I",
        "Ĭ": "I",
        "Į": "I",
        "İ": "I",
        "ĩ": "i",
        "ī": "i",
        "ĭ": "i",
        "į": "i",
        "ı": "i",
        "Ĵ": "J",
        "ĵ": "j",
        "Ķ": "K",
        "ķ": "k",
        "ĸ": "k",
        "Ĺ": "L",
        "Ļ": "L",
        "Ľ": "L",
        "Ŀ": "L",
        "Ł": "L",
        "ĺ": "l",
        "ļ": "l",
        "ľ": "l",
        "ŀ": "l",
        "ł": "l",
        "Ń": "N",
        "Ņ": "N",
        "Ň": "N",
        "Ŋ": "N",
        "ń": "n",
        "ņ": "n",
        "ň": "n",
        "ŋ": "n",
        "Ō": "O",
        "Ŏ": "O",
        "Ő": "O",
        "ō": "o",
        "ŏ": "o",
        "ő": "o",
        "Ŕ": "R",
        "Ŗ": "R",
        "Ř": "R",
        "ŕ": "r",
        "ŗ": "r",
        "ř": "r",
        "Ś": "S",
        "Ŝ": "S",
        "Ş": "S",
        "Š": "S",
        "ś": "s",
        "ŝ": "s",
        "ş": "s",
        "š": "s",
        "Ţ": "T",
        "Ť": "T",
        "Ŧ": "T",
        "ţ": "t",
        "ť": "t",
        "ŧ": "t",
        "Ũ": "U",
        "Ū": "U",
        "Ŭ": "U",
        "Ů": "U",
        "Ű": "U",
        "Ų": "U",
        "ũ": "u",
        "ū": "u",
        "ŭ": "u",
        "ů": "u",
        "ű": "u",
        "ų": "u",
        "Ŵ": "W",
        "ŵ": "w",
        "Ŷ": "Y",
        "ŷ": "y",
        "Ÿ": "Y",
        "Ź": "Z",
        "Ż": "Z",
        "Ž": "Z",
        "ź": "z",
        "ż": "z",
        "ž": "z",
        "Ĳ": "IJ",
        "ĳ": "ij",
        "Œ": "Oe",
        "œ": "oe",
        "ŉ": "'n",
        "ſ": "s"
      };
      var htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
      };
      var htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
      };
      var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
      };
      var freeParseFloat = parseFloat, freeParseInt = parseInt;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          var value = array[index];
          setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
      }
      function arrayEach(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;
        while (length--) {
          if (iteratee(array[length], length, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEvery(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (!predicate(array[index], index, array)) {
            return false;
          }
        }
        return true;
      }
      function arrayFilter(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
      }
      function arrayIncludesWith(array, value, comparator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (comparator(value, array[index])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }
      function arrayPush(array, values) {
        var index = -1, length = values.length, offset = array.length;
        while (++index < length) {
          array[offset + index] = values[index];
        }
        return array;
      }
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1, length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
      }
      function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array[length], length, array);
        }
        return accumulator;
      }
      function arraySome(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
      var asciiSize = baseProperty("length");
      function asciiToArray(string) {
        return string.split("");
      }
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection2) {
          if (predicate(value, key, collection2)) {
            result = key;
            return false;
          }
        });
        return result;
      }
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }
      function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
      }
      function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (comparator(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? baseSum(array, iteratee) / length : NAN;
      }
      function baseProperty(key) {
        return function(object) {
          return object == null ? undefined2 : object[key];
        };
      }
      function basePropertyOf(object) {
        return function(key) {
          return object == null ? undefined2 : object[key];
        };
      }
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index, collection2) {
          accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
        });
        return accumulator;
      }
      function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while (length--) {
          array[length] = array[length].value;
        }
        return array;
      }
      function baseSum(array, iteratee) {
        var result, index = -1, length = array.length;
        while (++index < length) {
          var current = iteratee(array[index]);
          if (current !== undefined2) {
            result = result === undefined2 ? current : result + current;
          }
        }
        return result;
      }
      function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }
      function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
          return [key, object[key]];
        });
      }
      function baseTrim(string) {
        return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      function baseValues(object, props) {
        return arrayMap(props, function(key) {
          return object[key];
        });
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length = strSymbols.length;
        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function countHolders(array, placeholder) {
        var length = array.length, result = 0;
        while (length--) {
          if (array[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
      function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
      }
      function getValue(object, key) {
        return object == null ? undefined2 : object[key];
      }
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }
      function iteratorToArray(iterator) {
        var data, result = [];
        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }
      function mapToArray(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      function replaceHolders(array, placeholder) {
        var index = -1, length = array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (value === placeholder || value === PLACEHOLDER) {
            array[index] = PLACEHOLDER;
            result[resIndex++] = index;
          }
        }
        return result;
      }
      function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
      function setToPairs(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = [value, value];
        });
        return result;
      }
      function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }
      function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
          if (array[index] === value) {
            return index;
          }
        }
        return index;
      }
      function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
      }
      function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
      }
      function trimmedEndIndex(string) {
        var index = string.length;
        while (index-- && reWhitespace.test(string.charAt(index))) {
        }
        return index;
      }
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
      function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string)) {
          ++result;
        }
        return result;
      }
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }
      var runInContext = function runInContext2(context) {
        context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
        var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
        var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
        var coreJsData = context["__core-js_shared__"];
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey = function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
          return uid ? "Symbol(src)_1." + uid : "";
        }();
        var nativeObjectToString = objectProto.toString;
        var objectCtorString = funcToString.call(Object2);
        var oldDash = root._;
        var reIsNative = RegExp2(
          "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
        );
        var Buffer = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
        var defineProperty = function() {
          try {
            var func = getNative(Object2, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e) {
          }
        }();
        var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
        var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
        var DataView2 = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
        var metaMap = WeakMap2 && new WeakMap2();
        var realNames = {};
        var dataViewCtorString = toSource(DataView2), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
        var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
        function lodash(value) {
          if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty.call(value, "__wrapped__")) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
        var baseCreate = function() {
          function object() {
          }
          return function(proto) {
            if (!isObject(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result2 = new object();
            object.prototype = undefined2;
            return result2;
          };
        }();
        function baseLodash() {
        }
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined2;
        }
        lodash.templateSettings = {
          /**
           * Used to detect `data` property values to be HTML-escaped.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "escape": reEscape,
          /**
           * Used to detect code to be evaluated.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "evaluate": reEvaluate,
          /**
           * Used to detect `data` property values to inject.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "interpolate": reInterpolate,
          /**
           * Used to reference the data object in the template text.
           *
           * @memberOf _.templateSettings
           * @type {string}
           */
          "variable": "",
          /**
           * Used to import variables into the compiled template.
           *
           * @memberOf _.templateSettings
           * @type {Object}
           */
          "imports": {
            /**
             * A reference to the `lodash` function.
             *
             * @memberOf _.templateSettings.imports
             * @type {Function}
             */
            "_": lodash
          }
        };
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
        function lazyClone() {
          var result2 = new LazyWrapper(this.__wrapped__);
          result2.__actions__ = copyArray(this.__actions__);
          result2.__dir__ = this.__dir__;
          result2.__filtered__ = this.__filtered__;
          result2.__iteratees__ = copyArray(this.__iteratees__);
          result2.__takeCount__ = this.__takeCount__;
          result2.__views__ = copyArray(this.__views__);
          return result2;
        }
        function lazyReverse() {
          if (this.__filtered__) {
            var result2 = new LazyWrapper(this);
            result2.__dir__ = -1;
            result2.__filtered__ = true;
          } else {
            result2 = this.clone();
            result2.__dir__ *= -1;
          }
          return result2;
        }
        function lazyValue() {
          var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
          if (!isArr || !isRight && arrLength == length && takeCount == length) {
            return baseWrapperValue(array, this.__actions__);
          }
          var result2 = [];
          outer:
            while (length-- && resIndex < takeCount) {
              index += dir;
              var iterIndex = -1, value = array[index];
              while (++iterIndex < iterLength) {
                var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
                if (type == LAZY_MAP_FLAG) {
                  value = computed;
                } else if (!computed) {
                  if (type == LAZY_FILTER_FLAG) {
                    continue outer;
                  } else {
                    break outer;
                  }
                }
              }
              result2[resIndex++] = value;
            }
          return result2;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
        function hashDelete(key) {
          var result2 = this.has(key) && delete this.__data__[key];
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result2 = data[key];
            return result2 === HASH_UNDEFINED ? undefined2 : result2;
          }
          return hasOwnProperty.call(data, key) ? data[key] : undefined2;
        }
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? data[key] !== undefined2 : hasOwnProperty.call(data, key);
        }
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
          return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          return index < 0 ? undefined2 : data[index][1];
        }
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            "hash": new Hash(),
            "map": new (Map2 || ListCache)(),
            "string": new Hash()
          };
        }
        function mapCacheDelete(key) {
          var result2 = getMapData(this, key)["delete"](key);
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
          var data = getMapData(this, key), size2 = data.size;
          data.set(key, value);
          this.size += data.size == size2 ? 0 : 1;
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values2) {
          var index = -1, length = values2 == null ? 0 : values2.length;
          this.__data__ = new MapCache();
          while (++index < length) {
            this.add(values2[index]);
          }
        }
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }
        function stackDelete(key) {
          var data = this.__data__, result2 = data["delete"](key);
          this.size = data.size;
          return result2;
        }
        function stackGet(key) {
          return this.__data__.get(key);
        }
        function stackHas(key) {
          return this.__data__.has(key);
        }
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
          for (var key in value) {
            if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
            (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
            isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
            isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
            isIndex(key, length)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function arraySample(array) {
          var length = array.length;
          return length ? array[baseRandom(0, length - 1)] : undefined2;
        }
        function arraySampleSize(array, n) {
          return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }
        function arrayShuffle(array) {
          return shuffleSelf(copyArray(array));
        }
        function assignMergeValue(object, key, value) {
          if (value !== undefined2 && !eq(object[key], value) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assocIndexOf(array, key) {
          var length = array.length;
          while (length--) {
            if (eq(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        function baseAggregator(collection, setter, iteratee2, accumulator) {
          baseEach(collection, function(value, key, collection2) {
            setter(accumulator, value, iteratee2(value), collection2);
          });
          return accumulator;
        }
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }
        function baseAssignValue(object, key, value) {
          if (key == "__proto__" && defineProperty) {
            defineProperty(object, key, {
              "configurable": true,
              "enumerable": true,
              "value": value,
              "writable": true
            });
          } else {
            object[key] = value;
          }
        }
        function baseAt(object, paths) {
          var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
          while (++index < length) {
            result2[index] = skip ? undefined2 : get(object, paths[index]);
          }
          return result2;
        }
        function baseClamp(number, lower, upper) {
          if (number === number) {
            if (upper !== undefined2) {
              number = number <= upper ? number : upper;
            }
            if (lower !== undefined2) {
              number = number >= lower ? number : lower;
            }
          }
          return number;
        }
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
          if (customizer) {
            result2 = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result2 !== undefined2) {
            return result2;
          }
          if (!isObject(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result2 = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result2);
            }
          } else {
            var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || isFunc && !object) {
              result2 = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result2 = initCloneByTag(value, tag, isDeep);
            }
          }
          stack || (stack = new Stack());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result2);
          if (isSet(value)) {
            value.forEach(function(subValue) {
              result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key2) {
              result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
          }
          var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
          var props = isArr ? undefined2 : keysFunc(value);
          arrayEach(props || value, function(subValue, key2) {
            if (props) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
          return result2;
        }
        function baseConforms(source) {
          var props = keys(source);
          return function(object) {
            return baseConformsTo(object, source, props);
          };
        }
        function baseConformsTo(object, source, props) {
          var length = props.length;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (length--) {
            var key = props[length], predicate = source[key], value = object[key];
            if (value === undefined2 && !(key in object) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }
        function baseDelay(func, wait, args) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return setTimeout2(function() {
            func.apply(undefined2, args);
          }, wait);
        }
        function baseDifference(array, values2, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
          if (!length) {
            return result2;
          }
          if (iteratee2) {
            values2 = arrayMap(values2, baseUnary(iteratee2));
          }
          if (comparator) {
            includes2 = arrayIncludesWith;
            isCommon = false;
          } else if (values2.length >= LARGE_ARRAY_SIZE) {
            includes2 = cacheHas;
            isCommon = false;
            values2 = new SetCache(values2);
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 == null ? value : iteratee2(value);
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var valuesIndex = valuesLength;
                while (valuesIndex--) {
                  if (values2[valuesIndex] === computed) {
                    continue outer;
                  }
                }
                result2.push(value);
              } else if (!includes2(values2, computed, comparator)) {
                result2.push(value);
              }
            }
          return result2;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
          var result2 = true;
          baseEach(collection, function(value, index, collection2) {
            result2 = !!predicate(value, index, collection2);
            return result2;
          });
          return result2;
        }
        function baseExtremum(array, iteratee2, comparator) {
          var index = -1, length = array.length;
          while (++index < length) {
            var value = array[index], current = iteratee2(value);
            if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
              var computed = current, result2 = value;
            }
          }
          return result2;
        }
        function baseFill(array, value, start, end) {
          var length = array.length;
          start = toInteger(start);
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end === undefined2 || end > length ? length : toInteger(end);
          if (end < 0) {
            end += length;
          }
          end = start > end ? 0 : toLength(end);
          while (start < end) {
            array[start++] = value;
          }
          return array;
        }
        function baseFilter(collection, predicate) {
          var result2 = [];
          baseEach(collection, function(value, index, collection2) {
            if (predicate(value, index, collection2)) {
              result2.push(value);
            }
          });
          return result2;
        }
        function baseFlatten(array, depth, predicate, isStrict, result2) {
          var index = -1, length = array.length;
          predicate || (predicate = isFlattenable);
          result2 || (result2 = []);
          while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result2);
              } else {
                arrayPush(result2, value);
              }
            } else if (!isStrict) {
              result2[result2.length] = value;
            }
          }
          return result2;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object, iteratee2) {
          return object && baseFor(object, iteratee2, keys);
        }
        function baseForOwnRight(object, iteratee2) {
          return object && baseForRight(object, iteratee2, keys);
        }
        function baseFunctions(object, props) {
          return arrayFilter(props, function(key) {
            return isFunction(object[key]);
          });
        }
        function baseGet(object, path) {
          path = castPath(path, object);
          var index = 0, length = path.length;
          while (object != null && index < length) {
            object = object[toKey(path[index++])];
          }
          return index && index == length ? object : undefined2;
        }
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result2 = keysFunc(object);
          return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
        }
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined2 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
        }
        function baseGt(value, other) {
          return value > other;
        }
        function baseHas(object, key) {
          return object != null && hasOwnProperty.call(object, key);
        }
        function baseHasIn(object, key) {
          return object != null && key in Object2(object);
        }
        function baseInRange(number, start, end) {
          return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }
        function baseIntersection(arrays, iteratee2, comparator) {
          var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
          while (othIndex--) {
            var array = arrays[othIndex];
            if (othIndex && iteratee2) {
              array = arrayMap(array, baseUnary(iteratee2));
            }
            maxLength = nativeMin(array.length, maxLength);
            caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
          }
          array = arrays[0];
          var index = -1, seen = caches[0];
          outer:
            while (++index < length && result2.length < maxLength) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                othIndex = othLength;
                while (--othIndex) {
                  var cache = caches[othIndex];
                  if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                    continue outer;
                  }
                }
                if (seen) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseInverter(object, setter, iteratee2, accumulator) {
          baseForOwn(object, function(value, key, object2) {
            setter(accumulator, iteratee2(value), key, object2);
          });
          return accumulator;
        }
        function baseInvoke(object, path, args) {
          path = castPath(path, object);
          object = parent(object, path);
          var func = object == null ? object : object[toKey(last(path))];
          return func == null ? undefined2 : apply(func, object, args);
        }
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack());
            return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack());
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack());
          return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object, source, matchData, customizer) {
          var index = matchData.length, length = index, noCustomizer = !customizer;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (index--) {
            var data = matchData[index];
            if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0], objValue = object[key], srcValue = data[1];
            if (noCustomizer && data[2]) {
              if (objValue === undefined2 && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack();
              if (customizer) {
                var result2 = customizer(objValue, srcValue, key, object, source, stack);
              }
              if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                return false;
              }
            }
          }
          return true;
        }
        function baseIsNative(value) {
          if (!isObject(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
          return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        function baseIteratee(value) {
          if (typeof value == "function") {
            return value;
          }
          if (value == null) {
            return identity;
          }
          if (typeof value == "object") {
            return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
          }
          return property(value);
        }
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result2 = [];
          for (var key in Object2(object)) {
            if (hasOwnProperty.call(object, key) && key != "constructor") {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseKeysIn(object) {
          if (!isObject(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object), result2 = [];
          for (var key in object) {
            if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseLt(value, other) {
          return value < other;
        }
        function baseMap(collection, iteratee2) {
          var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value, key, collection2) {
            result2[++index] = iteratee2(value, key, collection2);
          });
          return result2;
        }
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function(object) {
            var objValue = get(object, path);
            return objValue === undefined2 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack());
            if (isObject(srcValue)) {
              baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
            } else {
              var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
              if (newValue === undefined2) {
                newValue = srcValue;
              }
              assignMergeValue(object, key, newValue);
            }
          }, keysIn);
        }
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
          var isCommon = newValue === undefined2;
          if (isCommon) {
            var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject(objValue) || isFunction(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack["delete"](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }
        function baseNth(array, n) {
          var length = array.length;
          if (!length) {
            return;
          }
          n += n < 0 ? length : 0;
          return isIndex(n, length) ? array[n] : undefined2;
        }
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function(iteratee2) {
              if (isArray(iteratee2)) {
                return function(value) {
                  return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                };
              }
              return iteratee2;
            });
          } else {
            iteratees = [identity];
          }
          var index = -1;
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          var result2 = baseMap(collection, function(value, key, collection2) {
            var criteria = arrayMap(iteratees, function(iteratee2) {
              return iteratee2(value);
            });
            return { "criteria": criteria, "index": ++index, "value": value };
          });
          return baseSortBy(result2, function(object, other) {
            return compareMultiple(object, other, orders);
          });
        }
        function basePick(object, paths) {
          return basePickBy(object, paths, function(value, path) {
            return hasIn(object, path);
          });
        }
        function basePickBy(object, paths, predicate) {
          var index = -1, length = paths.length, result2 = {};
          while (++index < length) {
            var path = paths[index], value = baseGet(object, path);
            if (predicate(value, path)) {
              baseSet(result2, castPath(path, object), value);
            }
          }
          return result2;
        }
        function basePropertyDeep(path) {
          return function(object) {
            return baseGet(object, path);
          };
        }
        function basePullAll(array, values2, iteratee2, comparator) {
          var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array;
          if (array === values2) {
            values2 = copyArray(values2);
          }
          if (iteratee2) {
            seen = arrayMap(array, baseUnary(iteratee2));
          }
          while (++index < length) {
            var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
            while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
              if (seen !== array) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array, fromIndex, 1);
            }
          }
          return array;
        }
        function basePullAt(array, indexes) {
          var length = array ? indexes.length : 0, lastIndex = length - 1;
          while (length--) {
            var index = indexes[length];
            if (length == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex(index)) {
                splice.call(array, index, 1);
              } else {
                baseUnset(array, index);
              }
            }
          }
          return array;
        }
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start, end, step, fromRight) {
          var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
          while (length--) {
            result2[fromRight ? length : ++index] = start;
            start += step;
          }
          return result2;
        }
        function baseRepeat(string, n) {
          var result2 = "";
          if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
            return result2;
          }
          do {
            if (n % 2) {
              result2 += string;
            }
            n = nativeFloor(n / 2);
            if (n) {
              string += string;
            }
          } while (n);
          return result2;
        }
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity), func + "");
        }
        function baseSample(collection) {
          return arraySample(values(collection));
        }
        function baseSampleSize(collection, n) {
          var array = values(collection);
          return shuffleSelf(array, baseClamp(n, 0, array.length));
        }
        function baseSet(object, path, value, customizer) {
          if (!isObject(object)) {
            return object;
          }
          path = castPath(path, object);
          var index = -1, length = path.length, lastIndex = length - 1, nested = object;
          while (nested != null && ++index < length) {
            var key = toKey(path[index]), newValue = value;
            if (key === "__proto__" || key === "constructor" || key === "prototype") {
              return object;
            }
            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined2;
              if (newValue === undefined2) {
                newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object;
        }
        var baseSetData = !metaMap ? identity : function(func, data) {
          metaMap.set(func, data);
          return func;
        };
        var baseSetToString = !defineProperty ? identity : function(func, string) {
          return defineProperty(func, "toString", {
            "configurable": true,
            "enumerable": false,
            "value": constant(string),
            "writable": true
          });
        };
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }
        function baseSlice(array, start, end) {
          var index = -1, length = array.length;
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : end - start >>> 0;
          start >>>= 0;
          var result2 = Array2(length);
          while (++index < length) {
            result2[index] = array[index + start];
          }
          return result2;
        }
        function baseSome(collection, predicate) {
          var result2;
          baseEach(collection, function(value, index, collection2) {
            result2 = predicate(value, index, collection2);
            return !result2;
          });
          return !!result2;
        }
        function baseSortedIndex(array, value, retHighest) {
          var low = 0, high = array == null ? low : array.length;
          if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = low + high >>> 1, computed = array[mid];
              if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array, value, identity, retHighest);
        }
        function baseSortedIndexBy(array, value, iteratee2, retHighest) {
          var low = 0, high = array == null ? 0 : array.length;
          if (high === 0) {
            return 0;
          }
          value = iteratee2(value);
          var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
          while (low < high) {
            var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? computed <= value : computed < value;
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array, iteratee2) {
          var index = -1, length = array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
            if (!index || !eq(computed, seen)) {
              var seen = computed;
              result2[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result2;
        }
        function baseToNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }
        function baseToString(value) {
          if (typeof value == "string") {
            return value;
          }
          if (isArray(value)) {
            return arrayMap(value, baseToString) + "";
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function baseUniq(array, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
          if (comparator) {
            isCommon = false;
            includes2 = arrayIncludesWith;
          } else if (length >= LARGE_ARRAY_SIZE) {
            var set2 = iteratee2 ? null : createSet(array);
            if (set2) {
              return setToArray(set2);
            }
            isCommon = false;
            includes2 = cacheHas;
            seen = new SetCache();
          } else {
            seen = iteratee2 ? [] : result2;
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var seenIndex = seen.length;
                while (seenIndex--) {
                  if (seen[seenIndex] === computed) {
                    continue outer;
                  }
                }
                if (iteratee2) {
                  seen.push(computed);
                }
                result2.push(value);
              } else if (!includes2(seen, computed, comparator)) {
                if (seen !== result2) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseUnset(object, path) {
          path = castPath(path, object);
          object = parent(object, path);
          return object == null || delete object[toKey(last(path))];
        }
        function baseUpdate(object, path, updater, customizer) {
          return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }
        function baseWhile(array, predicate, isDrop, fromRight) {
          var length = array.length, index = fromRight ? length : -1;
          while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
          }
          return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        function baseWrapperValue(value, actions) {
          var result2 = value;
          if (result2 instanceof LazyWrapper) {
            result2 = result2.value();
          }
          return arrayReduce(actions, function(result3, action) {
            return action.func.apply(action.thisArg, arrayPush([result3], action.args));
          }, result2);
        }
        function baseXor(arrays, iteratee2, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index = -1, result2 = Array2(length);
          while (++index < length) {
            var array = arrays[index], othIndex = -1;
            while (++othIndex < length) {
              if (othIndex != index) {
                result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
        }
        function baseZipObject(props, values2, assignFunc) {
          var index = -1, length = props.length, valsLength = values2.length, result2 = {};
          while (++index < length) {
            var value = index < valsLength ? values2[index] : undefined2;
            assignFunc(result2, props[index], value);
          }
          return result2;
        }
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
          return typeof value == "function" ? value : identity;
        }
        function castPath(value, object) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object) ? [value] : stringToPath(toString(value));
        }
        var castRest = baseRest;
        function castSlice(array, start, end) {
          var length = array.length;
          end = end === undefined2 ? length : end;
          return !start && end >= length ? array : baseSlice(array, start, end);
        }
        var clearTimeout2 = ctxClearTimeout || function(id) {
          return root.clearTimeout(id);
        };
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
          buffer.copy(result2);
          return result2;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
          return result2;
        }
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        function cloneRegExp(regexp) {
          var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result2.lastIndex = regexp.lastIndex;
          return result2;
        }
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
            var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
            if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
              return 1;
            }
            if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }
        function compareMultiple(object, other, orders) {
          var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
          while (++index < length) {
            var result2 = compareAscending(objCriteria[index], othCriteria[index]);
            if (result2) {
              if (index >= ordersLength) {
                return result2;
              }
              var order = orders[index];
              return result2 * (order == "desc" ? -1 : 1);
            }
          }
          return object.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
          while (++leftIndex < leftLength) {
            result2[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result2[leftIndex++] = args[argsIndex++];
          }
          return result2;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
          while (++argsIndex < rangeLength) {
            result2[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result2[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result2;
        }
        function copyArray(source, array) {
          var index = -1, length = source.length;
          array || (array = Array2(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});
          var index = -1, length = props.length;
          while (++index < length) {
            var key = props[index];
            var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
            if (newValue === undefined2) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }
        function createAggregator(setter, initializer) {
          return function(collection, iteratee2) {
            var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
            return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
          };
        }
        function createAssigner(assigner) {
          return baseRest(function(object, sources) {
            var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
            customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined2 : customizer;
              length = 1;
            }
            object = Object2(object);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object, source, index, customizer);
              }
            }
            return object;
          });
        }
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee2) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee2);
            }
            var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
            while (fromRight ? index-- : ++index < length) {
              if (iteratee2(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
        function createBaseFor(fromRight) {
          return function(object, iteratee2, keysFunc) {
            var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee2(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return fn.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
        function createCaseFirst(methodName) {
          return function(string) {
            string = toString(string);
            var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
            var chr = strSymbols ? strSymbols[0] : string.charAt(0);
            var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
            return chr[methodName]() + trailing;
          };
        }
        function createCompounder(callback) {
          return function(string) {
            return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
          };
        }
        function createCtor(Ctor) {
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
            return isObject(result2) ? result2 : thisBinding;
          };
        }
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
            while (index--) {
              args[index] = arguments[index];
            }
            var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
            length -= holders.length;
            if (length < arity) {
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                undefined2,
                args,
                holders,
                undefined2,
                undefined2,
                arity - length
              );
            }
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return apply(fn, this, args);
          }
          return wrapper;
        }
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object2(collection);
            if (!isArrayLike(collection)) {
              var iteratee2 = getIteratee(predicate, 3);
              collection = keys(collection);
              predicate = function(key) {
                return iteratee2(iterable[key], key, iterable);
              };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined2;
          };
        }
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func = funcs[index];
              if (typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length;
            while (++index < length) {
              func = funcs[index];
              var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
              if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments, value = args[0];
              if (wrapper && args.length == 1 && isArray(value)) {
                return wrapper.plant(value).value();
              }
              var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
              while (++index2 < length) {
                result2 = funcs[index2].call(this, result2);
              }
              return result2;
            };
          });
        }
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length;
            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                thisArg,
                args,
                newHolders,
                argPos,
                ary2,
                arity - length
              );
            }
            var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary2 < length) {
              args.length = ary2;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn = Ctor || createCtor(fn);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }
        function createInverter(setter, toIteratee) {
          return function(object, iteratee2) {
            return baseInverter(object, setter, toIteratee(iteratee2), {});
          };
        }
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result2;
            if (value === undefined2 && other === undefined2) {
              return defaultValue;
            }
            if (value !== undefined2) {
              result2 = value;
            }
            if (other !== undefined2) {
              if (result2 === undefined2) {
                return other;
              }
              if (typeof value == "string" || typeof other == "string") {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result2 = operator(value, other);
            }
            return result2;
          };
        }
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee2) {
                return apply(iteratee2, thisArg, args);
              });
            });
          });
        }
        function createPadding(length, chars) {
          chars = chars === undefined2 ? " " : baseToString(chars);
          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
          return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
        }
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
        function createRange(fromRight) {
          return function(start, end, step) {
            if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
              end = step = undefined2;
            }
            start = toFinite(start);
            if (end === undefined2) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            step = step === undefined2 ? start < end ? 1 : -1 : toFinite(step);
            return baseRange(start, end, step, fromRight);
          };
        }
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value == "string" && typeof other == "string")) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func,
            bitmask,
            thisArg,
            newPartials,
            newHolders,
            newPartialsRight,
            newHoldersRight,
            argPos,
            ary2,
            arity
          ];
          var result2 = wrapFunc.apply(undefined2, newData);
          if (isLaziable(func)) {
            setData(result2, newData);
          }
          result2.placeholder = placeholder;
          return setWrapToString(result2, func, bitmask);
        }
        function createRound(methodName) {
          var func = Math2[methodName];
          return function(number, precision) {
            number = toNumber(number);
            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision && nativeIsFinite(number)) {
              var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
              pair = (toString(value) + "e").split("e");
              return +(pair[0] + "e" + (+pair[1] - precision));
            }
            return func(number);
          };
        }
        var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values2) {
          return new Set2(values2);
        };
        function createToPairs(keysFunc) {
          return function(object) {
            var tag = getTag(object);
            if (tag == mapTag) {
              return mapToArray(object);
            }
            if (tag == setTag) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined2;
          }
          ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
          arity = arity === undefined2 ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials, holdersRight = holders;
            partials = holders = undefined2;
          }
          var data = isBindKey ? undefined2 : getData(func);
          var newData = [
            func,
            bitmask,
            thisArg,
            partials,
            holders,
            partialsRight,
            holdersRight,
            argPos,
            ary2,
            arity
          ];
          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result2 = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result2 = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result2 = createPartial(func, bitmask, thisArg, partials);
          } else {
            result2 = createHybrid.apply(undefined2, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result2, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
          if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
            return srcValue;
          }
          return objValue;
        }
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
          if (isObject(objValue) && isObject(srcValue)) {
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
            stack["delete"](srcValue);
          }
          return objValue;
        }
        function customOmitClone(value) {
          return isPlainObject(value) ? undefined2 : value;
        }
        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var arrStacked = stack.get(array);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array;
          }
          var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
          stack.set(array, other);
          stack.set(other, array);
          while (++index < arrLength) {
            var arrValue = array[index], othValue = other[index];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
            }
            if (compared !== undefined2) {
              if (compared) {
                continue;
              }
              result2 = false;
              break;
            }
            if (seen) {
              if (!arraySome(other, function(othValue2, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
                result2 = false;
                break;
              }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              result2 = false;
              break;
            }
          }
          stack["delete"](array);
          stack["delete"](other);
          return result2;
        }
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;
            case arrayBufferTag:
              if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                return false;
              }
              return true;
            case boolTag:
            case dateTag:
            case numberTag:
              return eq(+object, +other);
            case errorTag:
              return object.name == other.name && object.message == other.message;
            case regexpTag:
            case stringTag:
              return object == other + "";
            case mapTag:
              var convert = mapToArray;
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);
              if (object.size != other.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
              stack.set(object, other);
              var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
              stack["delete"](object);
              return result2;
            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
              return false;
            }
          }
          var objStacked = stack.get(object);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object;
          }
          var result2 = true;
          stack.set(object, other);
          stack.set(other, object);
          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key], othValue = other[key];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
            }
            if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
              result2 = false;
              break;
            }
            skipCtor || (skipCtor = key == "constructor");
          }
          if (result2 && !skipCtor) {
            var objCtor = object.constructor, othCtor = other.constructor;
            if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
              result2 = false;
            }
          }
          stack["delete"](object);
          stack["delete"](other);
          return result2;
        }
        function flatRest(func) {
          return setToString(overRest(func, undefined2, flatten), func + "");
        }
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        var getData = !metaMap ? noop : function(func) {
          return metaMap.get(func);
        };
        function getFuncName(func) {
          var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty.call(realNames, result2) ? array.length : 0;
          while (length--) {
            var data = array[length], otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result2;
        }
        function getHolder(func) {
          var object = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
          return object.placeholder;
        }
        function getIteratee() {
          var result2 = lodash.iteratee || iteratee;
          result2 = result2 === iteratee ? baseIteratee : result2;
          return arguments.length ? result2(arguments[0], arguments[1]) : result2;
        }
        function getMapData(map2, key) {
          var data = map2.__data__;
          return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        function getMatchData(object) {
          var result2 = keys(object), length = result2.length;
          while (length--) {
            var key = result2[length], value = object[key];
            result2[length] = [key, value, isStrictComparable(value)];
          }
          return result2;
        }
        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined2;
        }
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
          try {
            value[symToStringTag] = undefined2;
            var unmasked = true;
          } catch (e) {
          }
          var result2 = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result2;
        }
        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
          if (object == null) {
            return [];
          }
          object = Object2(object);
          return arrayFilter(nativeGetSymbols(object), function(symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
          var result2 = [];
          while (object) {
            arrayPush(result2, getSymbols(object));
            object = getPrototype(object);
          }
          return result2;
        };
        var getTag = baseGetTag;
        if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
          getTag = function(value) {
            var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result2;
          };
        }
        function getView(start, end, transforms) {
          var index = -1, length = transforms.length;
          while (++index < length) {
            var data = transforms[index], size2 = data.size;
            switch (data.type) {
              case "drop":
                start += size2;
                break;
              case "dropRight":
                end -= size2;
                break;
              case "take":
                end = nativeMin(end, start + size2);
                break;
              case "takeRight":
                start = nativeMax(start, end - size2);
                break;
            }
          }
          return { "start": start, "end": end };
        }
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }
        function hasPath(object, path, hasFunc) {
          path = castPath(path, object);
          var index = -1, length = path.length, result2 = false;
          while (++index < length) {
            var key = toKey(path[index]);
            if (!(result2 = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result2 || ++index != length) {
            return result2;
          }
          length = object == null ? 0 : object.length;
          return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
        }
        function initCloneArray(array) {
          var length = array.length, result2 = new array.constructor(length);
          if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
            result2.index = array.index;
            result2.input = array.input;
          }
          return result2;
        }
        function initCloneObject(object) {
          return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);
            case boolTag:
            case dateTag:
              return new Ctor(+object);
            case dataViewTag:
              return cloneDataView(object, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object, isDeep);
            case mapTag:
              return new Ctor();
            case numberTag:
            case stringTag:
              return new Ctor(object);
            case regexpTag:
              return cloneRegExp(object);
            case setTag:
              return new Ctor();
            case symbolTag:
              return cloneSymbol(object);
          }
        }
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
          details = details.join(length > 2 ? ", " : " ");
          return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
        }
        function isFlattenable(value) {
          return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;
          return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
        }
        function isIterateeCall(value, index, object) {
          if (!isObject(object)) {
            return false;
          }
          var type = typeof index;
          if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
            return eq(object[index], value);
          }
          return false;
        }
        function isKey(value, object) {
          if (isArray(value)) {
            return false;
          }
          var type = typeof value;
          if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
        }
        function isKeyable(value) {
          var type = typeof value;
          return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
        }
        function isLaziable(func) {
          var funcName = getFuncName(func), other = lodash[funcName];
          if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }
        var isMaskable = coreJsData ? isFunction : stubFalse;
        function isPrototype(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
          return value === proto;
        }
        function isStrictComparable(value) {
          return value === value && !isObject(value);
        }
        function matchesStrictComparable(key, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
          };
        }
        function memoizeCapped(func) {
          var result2 = memoize(func, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });
          var cache = result2.cache;
          return result2;
        }
        function mergeData(data, source) {
          var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
          var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
          if (!(isCommon || isCombo)) {
            return data;
          }
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          value = source[7];
          if (value) {
            data[7] = value;
          }
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          if (data[9] == null) {
            data[9] = source[9];
          }
          data[0] = source[0];
          data[1] = newBitmask;
          return data;
        }
        function nativeKeysIn(object) {
          var result2 = [];
          if (object != null) {
            for (var key in Object2(object)) {
              result2.push(key);
            }
          }
          return result2;
        }
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }
        function overRest(func, start, transform2) {
          start = nativeMax(start === undefined2 ? func.length - 1 : start, 0);
          return function() {
            var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array2(length);
            while (++index < length) {
              array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array2(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform2(array);
            return apply(func, this, otherArgs);
          };
        }
        function parent(object, path) {
          return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }
        function reorder(array, indexes) {
          var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
          while (length--) {
            var index = indexes[length];
            array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
          }
          return array;
        }
        function safeGet(object, key) {
          if (key === "constructor" && typeof object[key] === "function") {
            return;
          }
          if (key == "__proto__") {
            return;
          }
          return object[key];
        }
        var setData = shortOut(baseSetData);
        var setTimeout2 = ctxSetTimeout || function(func, wait) {
          return root.setTimeout(func, wait);
        };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
          var source = reference + "";
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        function shortOut(func) {
          var count = 0, lastCalled = 0;
          return function() {
            var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined2, arguments);
          };
        }
        function shuffleSelf(array, size2) {
          var index = -1, length = array.length, lastIndex = length - 1;
          size2 = size2 === undefined2 ? length : size2;
          while (++index < size2) {
            var rand = baseRandom(index, lastIndex), value = array[rand];
            array[rand] = array[index];
            array[index] = value;
          }
          array.length = size2;
          return array;
        }
        var stringToPath = memoizeCapped(function(string) {
          var result2 = [];
          if (string.charCodeAt(0) === 46) {
            result2.push("");
          }
          string.replace(rePropName, function(match, number, quote, subString) {
            result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
          });
          return result2;
        });
        function toKey(value) {
          if (typeof value == "string" || isSymbol(value)) {
            return value;
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {
            }
            try {
              return func + "";
            } catch (e) {
            }
          }
          return "";
        }
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = "_." + pair[0];
            if (bitmask & pair[1] && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result2.__actions__ = copyArray(wrapper.__actions__);
          result2.__index__ = wrapper.__index__;
          result2.__values__ = wrapper.__values__;
          return result2;
        }
        function chunk(array, size2, guard) {
          if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined2) {
            size2 = 1;
          } else {
            size2 = nativeMax(toInteger(size2), 0);
          }
          var length = array == null ? 0 : array.length;
          if (!length || size2 < 1) {
            return [];
          }
          var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
          while (index < length) {
            result2[resIndex++] = baseSlice(array, index, index += size2);
          }
          return result2;
        }
        function compact(array) {
          var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index];
            if (value) {
              result2[resIndex++] = value;
            }
          }
          return result2;
        }
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array2(length - 1), array = arguments[0], index = length;
          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
        }
        var difference = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
        });
        var differenceBy = baseRest(function(array, values2) {
          var iteratee2 = last(values2);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
        });
        var differenceWith = baseRest(function(array, values2) {
          var comparator = last(values2);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined2;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
        });
        function drop(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function dropRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function dropRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
        }
        function dropWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
        }
        function fill(array, value, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
            start = 0;
            end = length;
          }
          return baseFill(array, value, start, end);
        }
        function findIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index);
        }
        function findLastIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length - 1;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }
        function flatten(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, 1) : [];
        }
        function flattenDeep(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, INFINITY) : [];
        }
        function flattenDepth(array, depth) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(array, depth);
        }
        function fromPairs(pairs) {
          var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
          while (++index < length) {
            var pair = pairs[index];
            result2[pair[0]] = pair[1];
          }
          return result2;
        }
        function head(array) {
          return array && array.length ? array[0] : undefined2;
        }
        function indexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseIndexOf(array, value, index);
        }
        function initial(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 0, -1) : [];
        }
        var intersection = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersectionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          if (iteratee2 === last(mapped)) {
            iteratee2 = undefined2;
          } else {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
        });
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          if (comparator) {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
        });
        function join(array, separator) {
          return array == null ? "" : nativeJoin.call(array, separator);
        }
        function last(array) {
          var length = array == null ? 0 : array.length;
          return length ? array[length - 1] : undefined2;
        }
        function lastIndexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
        }
        function nth(array, n) {
          return array && array.length ? baseNth(array, toInteger(n)) : undefined2;
        }
        var pull = baseRest(pullAll);
        function pullAll(array, values2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
        }
        function pullAllBy(array, values2, iteratee2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
        }
        function pullAllWith(array, values2, comparator) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined2, comparator) : array;
        }
        var pullAt = flatRest(function(array, indexes) {
          var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
          basePullAt(array, arrayMap(indexes, function(index) {
            return isIndex(index, length) ? +index : index;
          }).sort(compareAscending));
          return result2;
        });
        function remove(array, predicate) {
          var result2 = [];
          if (!(array && array.length)) {
            return result2;
          }
          var index = -1, indexes = [], length = array.length;
          predicate = getIteratee(predicate, 3);
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result2.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array, indexes);
          return result2;
        }
        function reverse(array) {
          return array == null ? array : nativeReverse.call(array);
        }
        function slice(array, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
            start = 0;
            end = length;
          } else {
            start = start == null ? 0 : toInteger(start);
            end = end === undefined2 ? length : toInteger(end);
          }
          return baseSlice(array, start, end);
        }
        function sortedIndex(array, value) {
          return baseSortedIndex(array, value);
        }
        function sortedIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
        }
        function sortedIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value);
            if (index < length && eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedLastIndex(array, value) {
          return baseSortedIndex(array, value, true);
        }
        function sortedLastIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
        }
        function sortedLastIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value, true) - 1;
            if (eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedUniq(array) {
          return array && array.length ? baseSortedUniq(array) : [];
        }
        function sortedUniqBy(array, iteratee2) {
          return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function tail(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 1, length) : [];
        }
        function take(array, n, guard) {
          if (!(array && array.length)) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function takeRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function takeRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
        }
        function takeWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
        }
        var union = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
        });
        var unionWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
        });
        function uniq(array) {
          return array && array.length ? baseUniq(array) : [];
        }
        function uniqBy(array, iteratee2) {
          return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function uniqWith(array, comparator) {
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return array && array.length ? baseUniq(array, undefined2, comparator) : [];
        }
        function unzip(array) {
          if (!(array && array.length)) {
            return [];
          }
          var length = 0;
          array = arrayFilter(array, function(group) {
            if (isArrayLikeObject(group)) {
              length = nativeMax(group.length, length);
              return true;
            }
          });
          return baseTimes(length, function(index) {
            return arrayMap(array, baseProperty(index));
          });
        }
        function unzipWith(array, iteratee2) {
          if (!(array && array.length)) {
            return [];
          }
          var result2 = unzip(array);
          if (iteratee2 == null) {
            return result2;
          }
          return arrayMap(result2, function(group) {
            return apply(iteratee2, undefined2, group);
          });
        }
        var without = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
        });
        var xor = baseRest(function(arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
        });
        var xorWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
        });
        var zip = baseRest(unzip);
        function zipObject(props, values2) {
          return baseZipObject(props || [], values2 || [], assignValue);
        }
        function zipObjectDeep(props, values2) {
          return baseZipObject(props || [], values2 || [], baseSet);
        }
        var zipWith = baseRest(function(arrays) {
          var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
          iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
          return unzipWith(arrays, iteratee2);
        });
        function chain(value) {
          var result2 = lodash(value);
          result2.__chain__ = true;
          return result2;
        }
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }
        function thru(value, interceptor) {
          return interceptor(value);
        }
        var wrapperAt = flatRest(function(paths) {
          var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
            return baseAt(object, paths);
          };
          if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length ? 1 : 0));
          value.__actions__.push({
            "func": thru,
            "args": [interceptor],
            "thisArg": undefined2
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array) {
            if (length && !array.length) {
              array.push(undefined2);
            }
            return array;
          });
        });
        function wrapperChain() {
          return chain(this);
        }
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
          if (this.__values__ === undefined2) {
            this.__values__ = toArray(this.value());
          }
          var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
          return { "done": done, "value": value };
        }
        function wrapperToIterator() {
          return this;
        }
        function wrapperPlant(value) {
          var result2, parent2 = this;
          while (parent2 instanceof baseLodash) {
            var clone2 = wrapperClone(parent2);
            clone2.__index__ = 0;
            clone2.__values__ = undefined2;
            if (result2) {
              previous.__wrapped__ = clone2;
            } else {
              result2 = clone2;
            }
            var previous = clone2;
            parent2 = parent2.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result2;
        }
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              "func": thru,
              "args": [reverse],
              "thisArg": undefined2
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            ++result2[key];
          } else {
            baseAssignValue(result2, key, 1);
          }
        });
        function every(collection, predicate, guard) {
          var func = isArray(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        function filter(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }
        var find = createFind(findIndex);
        var findLast = createFind(findLastIndex);
        function flatMap(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), 1);
        }
        function flatMapDeep(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), INFINITY);
        }
        function flatMapDepth(collection, iteratee2, depth) {
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(map(collection, iteratee2), depth);
        }
        function forEach(collection, iteratee2) {
          var func = isArray(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function forEachRight(collection, iteratee2) {
          var func = isArray(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee2, 3));
        }
        var groupBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            result2[key].push(value);
          } else {
            baseAssignValue(result2, key, [value]);
          }
        });
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function(collection, path, args) {
          var index = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value) {
            result2[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
          });
          return result2;
        });
        var keyBy = createAggregator(function(result2, value, key) {
          baseAssignValue(result2, key, value);
        });
        function map(collection, iteratee2) {
          var func = isArray(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined2 : orders;
          if (!isArray(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(function(result2, value, key) {
          result2[key ? 0 : 1].push(value);
        }, function() {
          return [[], []];
        });
        function reduce(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
        }
        function reduceRight(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
        }
        function reject(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }
        function sample(collection) {
          var func = isArray(collection) ? arraySample : baseSample;
          return func(collection);
        }
        function sampleSize(collection, n, guard) {
          if (guard ? isIterateeCall(collection, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          var func = isArray(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n);
        }
        function shuffle(collection) {
          var func = isArray(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString(collection) ? stringSize(collection) : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }
        function some(collection, predicate, guard) {
          var func = isArray(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now = ctxNow || function() {
          return root.Date.now();
        };
        function after(n, func) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n < 1) {
              return func.apply(this, arguments);
            }
          };
        }
        function ary(func, n, guard) {
          n = guard ? undefined2 : n;
          n = func && n == null ? func.length : n;
          return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n);
        }
        function before(n, func) {
          var result2;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n > 0) {
              result2 = func.apply(this, arguments);
            }
            if (n <= 1) {
              func = undefined2;
            }
            return result2;
          };
        }
        var bind = baseRest(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });
        var bindKey = baseRest(function(object, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object, partials, holders);
        });
        function curry(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curry.placeholder;
          return result2;
        }
        function curryRight(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curryRight.placeholder;
          return result2;
        }
        function debounce(func, wait, options) {
          var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject(options)) {
            leading = !!options.leading;
            maxing = "maxWait" in options;
            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          function invokeFunc(time) {
            var args = lastArgs, thisArg = lastThis;
            lastArgs = lastThis = undefined2;
            lastInvokeTime = time;
            result2 = func.apply(thisArg, args);
            return result2;
          }
          function leadingEdge(time) {
            lastInvokeTime = time;
            timerId = setTimeout2(timerExpired, wait);
            return leading ? invokeFunc(time) : result2;
          }
          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
            return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
          }
          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
            return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
          }
          function timerExpired() {
            var time = now();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            timerId = setTimeout2(timerExpired, remainingWait(time));
          }
          function trailingEdge(time) {
            timerId = undefined2;
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined2;
            return result2;
          }
          function cancel() {
            if (timerId !== undefined2) {
              clearTimeout2(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined2;
          }
          function flush() {
            return timerId === undefined2 ? result2 : trailingEdge(now());
          }
          function debounced() {
            var time = now(), isInvoking = shouldInvoke(time);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;
            if (isInvoking) {
              if (timerId === undefined2) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                clearTimeout2(timerId);
                timerId = setTimeout2(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined2) {
              timerId = setTimeout2(timerExpired, wait);
            }
            return result2;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }
        var defer = baseRest(function(func, args) {
          return baseDelay(func, 1, args);
        });
        var delay = baseRest(function(func, wait, args) {
          return baseDelay(func, toNumber(wait) || 0, args);
        });
        function flip(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }
        function memoize(func, resolver) {
          if (typeof func != "function" || resolver != null && typeof resolver != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
            if (cache.has(key)) {
              return cache.get(key);
            }
            var result2 = func.apply(this, args);
            memoized.cache = cache.set(key, result2) || cache;
            return result2;
          };
          memoized.cache = new (memoize.Cache || MapCache)();
          return memoized;
        }
        memoize.Cache = MapCache;
        function negate(predicate) {
          if (typeof predicate != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
        function once(func) {
          return before(2, func);
        }
        var overArgs = castRest(function(func, transforms) {
          transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index = -1, length = nativeMin(args.length, funcsLength);
            while (++index < length) {
              args[index] = transforms[index].call(this, args[index]);
            }
            return apply(func, this, args);
          });
        });
        var partial = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
        });
        var partialRight = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
        });
        var rearg = flatRest(function(func, indexes) {
          return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
        });
        function rest(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start === undefined2 ? start : toInteger(start);
          return baseRest(func, start);
        }
        function spread(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start == null ? 0 : nativeMax(toInteger(start), 0);
          return baseRest(function(args) {
            var array = args[start], otherArgs = castSlice(args, 0, start);
            if (array) {
              arrayPush(otherArgs, array);
            }
            return apply(func, this, otherArgs);
          });
        }
        function throttle(func, wait, options) {
          var leading = true, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          if (isObject(options)) {
            leading = "leading" in options ? !!options.leading : leading;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          return debounce(func, wait, {
            "leading": leading,
            "maxWait": wait,
            "trailing": trailing
          });
        }
        function unary(func) {
          return ary(func, 1);
        }
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray(value) ? value : [value];
        }
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        function conformsTo(object, source) {
          return source == null || baseConformsTo(object, source, keys(source));
        }
        function eq(value, other) {
          return value === other || value !== value && other !== other;
        }
        var gt = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function(value, other) {
          return value >= other;
        });
        var isArguments = baseIsArguments(function() {
          return arguments;
        }()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        var isArray = Array2.isArray;
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }
        function isBoolean(value) {
          return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement(value) {
          return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty.call(value, key)) {
              return false;
            }
          }
          return true;
        }
        function isEqual(value, other) {
          return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          var result2 = customizer ? customizer(value, other) : undefined2;
          return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
        }
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
        }
        function isFinite2(value) {
          return typeof value == "number" && nativeIsFinite(value);
        }
        function isFunction(value) {
          if (!isObject(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        function isInteger(value) {
          return typeof value == "number" && value == toInteger(value);
        }
        function isLength(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject(value) {
          var type = typeof value;
          return value != null && (type == "object" || type == "function");
        }
        function isObjectLike(value) {
          return value != null && typeof value == "object";
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch(object, source) {
          return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        function isMatchWith(object, source, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        function isNaN2(value) {
          return isNumber(value) && value != +value;
        }
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error2(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
        function isNull(value) {
          return value === null;
        }
        function isNil(value) {
          return value == null;
        }
        function isNumber(value) {
          return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
          return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
          return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString(value) {
          return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        function isSymbol(value) {
          return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        function isUndefined(value) {
          return value === undefined2;
        }
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        var lt = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function(value, other) {
          return value <= other;
        });
        function toArray(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
          return func(value);
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger(value) {
          var result2 = toFinite(value), remainder = result2 % 1;
          return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
        }
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject(value)) {
            var other = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
          return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        function toString(value) {
          return value == null ? "" : baseToString(value);
        }
        var assign = createAssigner(function(object, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
              assignValue(object, key, source[key]);
            }
          }
        });
        var assignIn = createAssigner(function(object, source) {
          copyObject(source, keysIn(source), object);
        });
        var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object, customizer);
        });
        var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keys(source), object, customizer);
        });
        var at = flatRest(baseAt);
        function create(prototype, properties) {
          var result2 = baseCreate(prototype);
          return properties == null ? result2 : baseAssign(result2, properties);
        }
        var defaults = baseRest(function(object, sources) {
          object = Object2(object);
          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined2;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }
          while (++index < length) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;
            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object[key];
              if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
                object[key] = source[key];
              }
            }
          }
          return object;
        });
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined2, customDefaultsMerge);
          return apply(mergeWith, undefined2, args);
        });
        function findKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        function forIn(object, iteratee2) {
          return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forInRight(object, iteratee2) {
          return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forOwn(object, iteratee2) {
          return object && baseForOwn(object, getIteratee(iteratee2, 3));
        }
        function forOwnRight(object, iteratee2) {
          return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
        }
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys(object));
        }
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        function get(object, path, defaultValue) {
          var result2 = object == null ? undefined2 : baseGet(object, path);
          return result2 === undefined2 ? defaultValue : result2;
        }
        function has(object, path) {
          return object != null && hasPath(object, path, baseHas);
        }
        function hasIn(object, path) {
          return object != null && hasPath(object, path, baseHasIn);
        }
        var invert = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          result2[value] = key;
        }, constant(identity));
        var invertBy = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          if (hasOwnProperty.call(result2, value)) {
            result2[value].push(key);
          } else {
            result2[value] = [key];
          }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        function keysIn(object) {
          return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        function mapKeys(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, iteratee2(value, key, object2), value);
          });
          return result2;
        }
        function mapValues(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, key, iteratee2(value, key, object2));
          });
          return result2;
        }
        var merge = createAssigner(function(object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });
        var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
          baseMerge(object, source, srcIndex, customizer);
        });
        var omit = flatRest(function(object, paths) {
          var result2 = {};
          if (object == null) {
            return result2;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path) {
            path = castPath(path, object);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject(object, getAllKeysIn(object), result2);
          if (isDeep) {
            result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result2, paths[length]);
          }
          return result2;
        });
        function omitBy(object, predicate) {
          return pickBy(object, negate(getIteratee(predicate)));
        }
        var pick = flatRest(function(object, paths) {
          return object == null ? {} : basePick(object, paths);
        });
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object, props, function(value, path) {
            return predicate(value, path[0]);
          });
        }
        function result(object, path, defaultValue) {
          path = castPath(path, object);
          var index = -1, length = path.length;
          if (!length) {
            length = 1;
            object = undefined2;
          }
          while (++index < length) {
            var value = object == null ? undefined2 : object[toKey(path[index])];
            if (value === undefined2) {
              index = length;
              value = defaultValue;
            }
            object = isFunction(value) ? value.call(object) : value;
          }
          return object;
        }
        function set(object, path, value) {
          return object == null ? object : baseSet(object, path, value);
        }
        function setWith(object, path, value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseSet(object, path, value, customizer);
        }
        var toPairs = createToPairs(keys);
        var toPairsIn = createToPairs(keysIn);
        function transform(object, iteratee2, accumulator) {
          var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
          iteratee2 = getIteratee(iteratee2, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor() : [];
            } else if (isObject(object)) {
              accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
            } else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
            return iteratee2(accumulator, value, index, object2);
          });
          return accumulator;
        }
        function unset(object, path) {
          return object == null ? true : baseUnset(object, path);
        }
        function update(object, path, updater) {
          return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }
        function updateWith(object, path, updater, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }
        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn(object));
        }
        function clamp(number, lower, upper) {
          if (upper === undefined2) {
            upper = lower;
            lower = undefined2;
          }
          if (upper !== undefined2) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined2) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number), lower, upper);
        }
        function inRange(number, start, end) {
          start = toFinite(start);
          if (end === undefined2) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          number = toNumber(number);
          return baseInRange(number, start, end);
        }
        function random(lower, upper, floating) {
          if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
            upper = floating = undefined2;
          }
          if (floating === undefined2) {
            if (typeof upper == "boolean") {
              floating = upper;
              upper = undefined2;
            } else if (typeof lower == "boolean") {
              floating = lower;
              lower = undefined2;
            }
          }
          if (lower === undefined2 && upper === undefined2) {
            lower = 0;
            upper = 1;
          } else {
            lower = toFinite(lower);
            if (upper === undefined2) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
          }
          return baseRandom(lower, upper);
        }
        var camelCase = createCompounder(function(result2, word, index) {
          word = word.toLowerCase();
          return result2 + (index ? capitalize(word) : word);
        });
        function capitalize(string) {
          return upperFirst(toString(string).toLowerCase());
        }
        function deburr(string) {
          string = toString(string);
          return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        function endsWith(string, target, position) {
          string = toString(string);
          target = baseToString(target);
          var length = string.length;
          position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
          var end = position;
          position -= target.length;
          return position >= 0 && string.slice(position, end) == target;
        }
        function escape(string) {
          string = toString(string);
          return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        function escapeRegExp(string) {
          string = toString(string);
          return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
        }
        var kebabCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "-" : "") + word.toLowerCase();
        });
        var lowerCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst("toLowerCase");
        function pad(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          if (!length || strLength >= length) {
            return string;
          }
          var mid = (length - strLength) / 2;
          return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
        }
        function padEnd(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
        }
        function padStart(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
        }
        function parseInt2(string, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
        }
        function repeat(string, n, guard) {
          if (guard ? isIterateeCall(string, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          return baseRepeat(toString(string), n);
        }
        function replace() {
          var args = arguments, string = toString(args[0]);
          return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "_" : "") + word.toLowerCase();
        });
        function split(string, separator, limit) {
          if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
            separator = limit = undefined2;
          }
          limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string = toString(string);
          if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string)) {
              return castSlice(stringToArray(string), 0, limit);
            }
          }
          return string.split(separator, limit);
        }
        var startCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + upperFirst(word);
        });
        function startsWith(string, target, position) {
          string = toString(string);
          position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
          target = baseToString(target);
          return string.slice(position, position + target.length) == target;
        }
        function template(string, options, guard) {
          var settings = lodash.templateSettings;
          if (guard && isIterateeCall(string, options, guard)) {
            options = undefined2;
          }
          string = toString(string);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
          var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
          var reDelimiters = RegExp2(
            (options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
            "g"
          );
          var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
          string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
            interpolateValue || (interpolateValue = esTemplateValue);
            source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index = offset + match.length;
            return match;
          });
          source += "';\n";
          var variable = hasOwnProperty.call(options, "variable") && options.variable;
          if (!variable) {
            source = "with (obj) {\n" + source + "\n}\n";
          } else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
          }
          source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
          source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
          var result2 = attempt(function() {
            return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
          });
          result2.source = source;
          if (isError(result2)) {
            throw result2;
          }
          return result2;
        }
        function toLower(value) {
          return toString(value).toLowerCase();
        }
        function toUpper(value) {
          return toString(value).toUpperCase();
        }
        function trim(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return baseTrim(string);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start, end).join("");
        }
        function trimEnd(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.slice(0, trimmedEndIndex(string) + 1);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
          return castSlice(strSymbols, 0, end).join("");
        }
        function trimStart(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.replace(reTrimStart, "");
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
          return castSlice(strSymbols, start).join("");
        }
        function truncate(string, options) {
          var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
          if (isObject(options)) {
            var separator = "separator" in options ? options.separator : separator;
            length = "length" in options ? toInteger(options.length) : length;
            omission = "omission" in options ? baseToString(options.omission) : omission;
          }
          string = toString(string);
          var strLength = string.length;
          if (hasUnicode(string)) {
            var strSymbols = stringToArray(string);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
          if (separator === undefined2) {
            return result2 + omission;
          }
          if (strSymbols) {
            end += result2.length - end;
          }
          if (isRegExp(separator)) {
            if (string.slice(end).search(separator)) {
              var match, substring = result2;
              if (!separator.global) {
                separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
              }
              separator.lastIndex = 0;
              while (match = separator.exec(substring)) {
                var newEnd = match.index;
              }
              result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
            }
          } else if (string.indexOf(baseToString(separator), end) != end) {
            var index = result2.lastIndexOf(separator);
            if (index > -1) {
              result2 = result2.slice(0, index);
            }
          }
          return result2 + omission;
        }
        function unescape(string) {
          string = toString(string);
          return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        var upperCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toUpperCase();
        });
        var upperFirst = createCaseFirst("toUpperCase");
        function words(string, pattern, guard) {
          string = toString(string);
          pattern = guard ? undefined2 : pattern;
          if (pattern === undefined2) {
            return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
          }
          return string.match(pattern) || [];
        }
        var attempt = baseRest(function(func, args) {
          try {
            return apply(func, undefined2, args);
          } catch (e) {
            return isError(e) ? e : new Error2(e);
          }
        });
        var bindAll = flatRest(function(object, methodNames) {
          arrayEach(methodNames, function(key) {
            key = toKey(key);
            baseAssignValue(object, key, bind(object[key], object));
          });
          return object;
        });
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
          pairs = !length ? [] : arrayMap(pairs, function(pair) {
            if (typeof pair[1] != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return [toIteratee(pair[0]), pair[1]];
          });
          return baseRest(function(args) {
            var index = -1;
            while (++index < length) {
              var pair = pairs[index];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant(value) {
          return function() {
            return value;
          };
        }
        function defaultTo(value, defaultValue) {
          return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity(value) {
          return value;
        }
        function iteratee(func) {
          return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        function matches(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path, srcValue) {
          return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        var method = baseRest(function(path, args) {
          return function(object) {
            return baseInvoke(object, path, args);
          };
        });
        var methodOf = baseRest(function(object, args) {
          return function(path) {
            return baseInvoke(object, path, args);
          };
        });
        function mixin(object, source, options) {
          var props = keys(source), methodNames = baseFunctions(source, props);
          if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys(source));
          }
          var chain2 = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object);
          arrayEach(methodNames, function(methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
              object.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain2 || chainAll) {
                  var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                  actions.push({ "func": func, "args": arguments, "thisArg": object });
                  result2.__chain__ = chainAll;
                  return result2;
                }
                return func.apply(object, arrayPush([this.value()], arguments));
              };
            }
          });
          return object;
        }
        function noConflict() {
          if (root._ === this) {
            root._ = oldDash;
          }
          return this;
        }
        function noop() {
        }
        function nthArg(n) {
          n = toInteger(n);
          return baseRest(function(args) {
            return baseNth(args, n);
          });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path) {
          return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
        function propertyOf(object) {
          return function(path) {
            return object == null ? undefined2 : baseGet(object, path);
          };
        }
        var range = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
          return [];
        }
        function stubFalse() {
          return false;
        }
        function stubObject() {
          return {};
        }
        function stubString() {
          return "";
        }
        function stubTrue() {
          return true;
        }
        function times(n, iteratee2) {
          n = toInteger(n);
          if (n < 1 || n > MAX_SAFE_INTEGER) {
            return [];
          }
          var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
          iteratee2 = getIteratee(iteratee2);
          n -= MAX_ARRAY_LENGTH;
          var result2 = baseTimes(length, iteratee2);
          while (++index < n) {
            iteratee2(index);
          }
          return result2;
        }
        function toPath(value) {
          if (isArray(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
        }
        function uniqueId(prefix) {
          var id = ++idCounter;
          return toString(prefix) + id;
        }
        var add = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);
        var ceil = createRound("ceil");
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);
        var floor = createRound("floor");
        function max(array) {
          return array && array.length ? baseExtremum(array, identity, baseGt) : undefined2;
        }
        function maxBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
        }
        function mean(array) {
          return baseMean(array, identity);
        }
        function meanBy(array, iteratee2) {
          return baseMean(array, getIteratee(iteratee2, 2));
        }
        function min(array) {
          return array && array.length ? baseExtremum(array, identity, baseLt) : undefined2;
        }
        function minBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
        }
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
        var round = createRound("round");
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
        function sum(array) {
          return array && array.length ? baseSum(array, identity) : 0;
        }
        function sumBy(array, iteratee2) {
          return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
        }
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        mixin(lodash, lodash);
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite2;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN2;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt2;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext2;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, function() {
          var source = {};
          baseForOwn(lodash, function(func, methodName) {
            if (!hasOwnProperty.call(lodash.prototype, methodName)) {
              source[methodName] = func;
            }
          });
          return source;
        }(), { "chain": false });
        lodash.VERSION = VERSION;
        arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
          lodash[methodName].placeholder = lodash;
        });
        arrayEach(["drop", "take"], function(methodName, index) {
          LazyWrapper.prototype[methodName] = function(n) {
            n = n === undefined2 ? 1 : nativeMax(toInteger(n), 0);
            var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
            if (result2.__filtered__) {
              result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
            } else {
              result2.__views__.push({
                "size": nativeMin(n, MAX_ARRAY_LENGTH),
                "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
              });
            }
            return result2;
          };
          LazyWrapper.prototype[methodName + "Right"] = function(n) {
            return this.reverse()[methodName](n).reverse();
          };
        });
        arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
          var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
          LazyWrapper.prototype[methodName] = function(iteratee2) {
            var result2 = this.clone();
            result2.__iteratees__.push({
              "iteratee": getIteratee(iteratee2, 3),
              "type": type
            });
            result2.__filtered__ = result2.__filtered__ || isFilter;
            return result2;
          };
        });
        arrayEach(["head", "last"], function(methodName, index) {
          var takeName = "take" + (index ? "Right" : "");
          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });
        arrayEach(["initial", "tail"], function(methodName, index) {
          var dropName = "drop" + (index ? "" : "Right");
          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });
        LazyWrapper.prototype.compact = function() {
          return this.filter(identity);
        };
        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
          if (typeof path == "function") {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path, args);
          });
        });
        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start, end) {
          start = toInteger(start);
          var result2 = this;
          if (result2.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result2);
          }
          if (start < 0) {
            result2 = result2.takeRight(-start);
          } else if (start) {
            result2 = result2.drop(start);
          }
          if (end !== undefined2) {
            end = toInteger(end);
            result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
          }
          return result2;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
          if (!lodashFunc) {
            return;
          }
          lodash.prototype[methodName] = function() {
            var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
            var interceptor = function(value2) {
              var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
              return isTaker && chainAll ? result3[0] : result3;
            };
            if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result2 = func.apply(value, args);
              result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
              return new LodashWrapper(result2, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result2 = this.thru(interceptor);
            return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
          };
        });
        arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
          var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
          lodash.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func.apply(isArray(value) ? value : [], args);
            }
            return this[chainName](function(value2) {
              return func.apply(isArray(value2) ? value2 : [], args);
            });
          };
        });
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + "";
            if (!hasOwnProperty.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({ "name": methodName, "func": lodashFunc });
          }
        });
        realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
          "name": "wrapper",
          "func": undefined2
        }];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) {
          lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
      };
      var _ = runInContext();
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        root._ = _;
        define(function() {
          return _;
        });
      } else if (freeModule) {
        (freeModule.exports = _)._ = _;
        freeExports._ = _;
      } else {
        root._ = _;
      }
    }).call(exports);
  }
});

// node_modules/@firebase/util/dist/index.cjs.js
var require_index_cjs = __commonJS({
  "node_modules/@firebase/util/dist/index.cjs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CONSTANTS = {
      /**
       * @define {boolean} Whether this is the client Node.js SDK.
       */
      NODE_CLIENT: false,
      /**
       * @define {boolean} Whether this is the Admin Node.js SDK.
       */
      NODE_ADMIN: false,
      /**
       * Firebase SDK Version
       */
      SDK_VERSION: "${JSCORE_VERSION}"
    };
    var assert = function(assertion, message) {
      if (!assertion) {
        throw assertionError(message);
      }
    };
    var assertionError = function(message) {
      return new Error("Firebase Database (" + CONSTANTS.SDK_VERSION + ") INTERNAL ASSERT FAILED: " + message);
    };
    var stringToByteArray$1 = function(str) {
      const out = [];
      let p = 0;
      for (let i = 0; i < str.length; i++) {
        let c = str.charCodeAt(i);
        if (c < 128) {
          out[p++] = c;
        } else if (c < 2048) {
          out[p++] = c >> 6 | 192;
          out[p++] = c & 63 | 128;
        } else if ((c & 64512) === 55296 && i + 1 < str.length && (str.charCodeAt(i + 1) & 64512) === 56320) {
          c = 65536 + ((c & 1023) << 10) + (str.charCodeAt(++i) & 1023);
          out[p++] = c >> 18 | 240;
          out[p++] = c >> 12 & 63 | 128;
          out[p++] = c >> 6 & 63 | 128;
          out[p++] = c & 63 | 128;
        } else {
          out[p++] = c >> 12 | 224;
          out[p++] = c >> 6 & 63 | 128;
          out[p++] = c & 63 | 128;
        }
      }
      return out;
    };
    var byteArrayToString = function(bytes) {
      const out = [];
      let pos = 0, c = 0;
      while (pos < bytes.length) {
        const c1 = bytes[pos++];
        if (c1 < 128) {
          out[c++] = String.fromCharCode(c1);
        } else if (c1 > 191 && c1 < 224) {
          const c2 = bytes[pos++];
          out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
        } else if (c1 > 239 && c1 < 365) {
          const c2 = bytes[pos++];
          const c3 = bytes[pos++];
          const c4 = bytes[pos++];
          const u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 65536;
          out[c++] = String.fromCharCode(55296 + (u >> 10));
          out[c++] = String.fromCharCode(56320 + (u & 1023));
        } else {
          const c2 = bytes[pos++];
          const c3 = bytes[pos++];
          out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
        }
      }
      return out.join("");
    };
    var base64 = {
      /**
       * Maps bytes to characters.
       */
      byteToCharMap_: null,
      /**
       * Maps characters to bytes.
       */
      charToByteMap_: null,
      /**
       * Maps bytes to websafe characters.
       * @private
       */
      byteToCharMapWebSafe_: null,
      /**
       * Maps websafe characters to bytes.
       * @private
       */
      charToByteMapWebSafe_: null,
      /**
       * Our default alphabet, shared between
       * ENCODED_VALS and ENCODED_VALS_WEBSAFE
       */
      ENCODED_VALS_BASE: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
      /**
       * Our default alphabet. Value 64 (=) is special; it means "nothing."
       */
      get ENCODED_VALS() {
        return this.ENCODED_VALS_BASE + "+/=";
      },
      /**
       * Our websafe alphabet.
       */
      get ENCODED_VALS_WEBSAFE() {
        return this.ENCODED_VALS_BASE + "-_.";
      },
      /**
       * Whether this browser supports the atob and btoa functions. This extension
       * started at Mozilla but is now implemented by many browsers. We use the
       * ASSUME_* variables to avoid pulling in the full useragent detection library
       * but still allowing the standard per-browser compilations.
       *
       */
      HAS_NATIVE_SUPPORT: typeof atob === "function",
      /**
       * Base64-encode an array of bytes.
       *
       * @param input An array of bytes (numbers with
       *     value in [0, 255]) to encode.
       * @param webSafe Boolean indicating we should use the
       *     alternative alphabet.
       * @return The base64 encoded string.
       */
      encodeByteArray(input, webSafe) {
        if (!Array.isArray(input)) {
          throw Error("encodeByteArray takes an array as a parameter");
        }
        this.init_();
        const byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;
        const output = [];
        for (let i = 0; i < input.length; i += 3) {
          const byte1 = input[i];
          const haveByte2 = i + 1 < input.length;
          const byte2 = haveByte2 ? input[i + 1] : 0;
          const haveByte3 = i + 2 < input.length;
          const byte3 = haveByte3 ? input[i + 2] : 0;
          const outByte1 = byte1 >> 2;
          const outByte2 = (byte1 & 3) << 4 | byte2 >> 4;
          let outByte3 = (byte2 & 15) << 2 | byte3 >> 6;
          let outByte4 = byte3 & 63;
          if (!haveByte3) {
            outByte4 = 64;
            if (!haveByte2) {
              outByte3 = 64;
            }
          }
          output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
        }
        return output.join("");
      },
      /**
       * Base64-encode a string.
       *
       * @param input A string to encode.
       * @param webSafe If true, we should use the
       *     alternative alphabet.
       * @return The base64 encoded string.
       */
      encodeString(input, webSafe) {
        if (this.HAS_NATIVE_SUPPORT && !webSafe) {
          return btoa(input);
        }
        return this.encodeByteArray(stringToByteArray$1(input), webSafe);
      },
      /**
       * Base64-decode a string.
       *
       * @param input to decode.
       * @param webSafe True if we should use the
       *     alternative alphabet.
       * @return string representing the decoded value.
       */
      decodeString(input, webSafe) {
        if (this.HAS_NATIVE_SUPPORT && !webSafe) {
          return atob(input);
        }
        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
      },
      /**
       * Base64-decode a string.
       *
       * In base-64 decoding, groups of four characters are converted into three
       * bytes.  If the encoder did not apply padding, the input length may not
       * be a multiple of 4.
       *
       * In this case, the last group will have fewer than 4 characters, and
       * padding will be inferred.  If the group has one or two characters, it decodes
       * to one byte.  If the group has three characters, it decodes to two bytes.
       *
       * @param input Input to decode.
       * @param webSafe True if we should use the web-safe alphabet.
       * @return bytes representing the decoded value.
       */
      decodeStringToByteArray(input, webSafe) {
        this.init_();
        const charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;
        const output = [];
        for (let i = 0; i < input.length; ) {
          const byte1 = charToByteMap[input.charAt(i++)];
          const haveByte2 = i < input.length;
          const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
          ++i;
          const haveByte3 = i < input.length;
          const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
          ++i;
          const haveByte4 = i < input.length;
          const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
          ++i;
          if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
            throw new DecodeBase64StringError();
          }
          const outByte1 = byte1 << 2 | byte2 >> 4;
          output.push(outByte1);
          if (byte3 !== 64) {
            const outByte2 = byte2 << 4 & 240 | byte3 >> 2;
            output.push(outByte2);
            if (byte4 !== 64) {
              const outByte3 = byte3 << 6 & 192 | byte4;
              output.push(outByte3);
            }
          }
        }
        return output;
      },
      /**
       * Lazy static initialization function. Called before
       * accessing any of the static map variables.
       * @private
       */
      init_() {
        if (!this.byteToCharMap_) {
          this.byteToCharMap_ = {};
          this.charToByteMap_ = {};
          this.byteToCharMapWebSafe_ = {};
          this.charToByteMapWebSafe_ = {};
          for (let i = 0; i < this.ENCODED_VALS.length; i++) {
            this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
            this.charToByteMap_[this.byteToCharMap_[i]] = i;
            this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
            this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
            if (i >= this.ENCODED_VALS_BASE.length) {
              this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
              this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
            }
          }
        }
      }
    };
    var DecodeBase64StringError = class extends Error {
      constructor() {
        super(...arguments);
        this.name = "DecodeBase64StringError";
      }
    };
    var base64Encode = function(str) {
      const utf8Bytes = stringToByteArray$1(str);
      return base64.encodeByteArray(utf8Bytes, true);
    };
    var base64urlEncodeWithoutPadding = function(str) {
      return base64Encode(str).replace(/\./g, "");
    };
    var base64Decode = function(str) {
      try {
        return base64.decodeString(str, true);
      } catch (e) {
        console.error("base64Decode failed: ", e);
      }
      return null;
    };
    function deepCopy(value) {
      return deepExtend(void 0, value);
    }
    function deepExtend(target, source) {
      if (!(source instanceof Object)) {
        return source;
      }
      switch (source.constructor) {
        case Date:
          const dateValue = source;
          return new Date(dateValue.getTime());
        case Object:
          if (target === void 0) {
            target = {};
          }
          break;
        case Array:
          target = [];
          break;
        default:
          return source;
      }
      for (const prop in source) {
        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {
          continue;
        }
        target[prop] = deepExtend(target[prop], source[prop]);
      }
      return target;
    }
    function isValidKey(key) {
      return key !== "__proto__";
    }
    function getGlobal() {
      if (typeof self !== "undefined") {
        return self;
      }
      if (typeof window !== "undefined") {
        return window;
      }
      if (typeof global !== "undefined") {
        return global;
      }
      throw new Error("Unable to locate global object.");
    }
    var getDefaultsFromGlobal = () => getGlobal().__FIREBASE_DEFAULTS__;
    var getDefaultsFromEnvVariable = () => {
      if (typeof process === "undefined" || typeof process.env === "undefined") {
        return;
      }
      const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;
      if (defaultsJsonString) {
        return JSON.parse(defaultsJsonString);
      }
    };
    var getDefaultsFromCookie = () => {
      if (typeof document === "undefined") {
        return;
      }
      let match;
      try {
        match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);
      } catch (e) {
        return;
      }
      const decoded = match && base64Decode(match[1]);
      return decoded && JSON.parse(decoded);
    };
    var getDefaults = () => {
      try {
        return getDefaultsFromGlobal() || getDefaultsFromEnvVariable() || getDefaultsFromCookie();
      } catch (e) {
        console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);
        return;
      }
    };
    var getDefaultEmulatorHost = (productName) => {
      var _a, _b;
      return (_b = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.emulatorHosts) === null || _b === void 0 ? void 0 : _b[productName];
    };
    var getDefaultEmulatorHostnameAndPort = (productName) => {
      const host = getDefaultEmulatorHost(productName);
      if (!host) {
        return void 0;
      }
      const separatorIndex = host.lastIndexOf(":");
      if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {
        throw new Error(`Invalid host ${host} with no separate hostname and port!`);
      }
      const port = parseInt(host.substring(separatorIndex + 1), 10);
      if (host[0] === "[") {
        return [host.substring(1, separatorIndex - 1), port];
      } else {
        return [host.substring(0, separatorIndex), port];
      }
    };
    var getDefaultAppConfig = () => {
      var _a;
      return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.config;
    };
    var getExperimentalSetting = (name) => {
      var _a;
      return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a[`_${name}`];
    };
    var Deferred = class {
      constructor() {
        this.reject = () => {
        };
        this.resolve = () => {
        };
        this.promise = new Promise((resolve, reject) => {
          this.resolve = resolve;
          this.reject = reject;
        });
      }
      /**
       * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
       * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
       * and returns a node-style callback which will resolve or reject the Deferred's promise.
       */
      wrapCallback(callback) {
        return (error, value) => {
          if (error) {
            this.reject(error);
          } else {
            this.resolve(value);
          }
          if (typeof callback === "function") {
            this.promise.catch(() => {
            });
            if (callback.length === 1) {
              callback(error);
            } else {
              callback(error, value);
            }
          }
        };
      }
    };
    function createMockUserToken(token, projectId) {
      if (token.uid) {
        throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');
      }
      const header = {
        alg: "none",
        type: "JWT"
      };
      const project = projectId || "demo-project";
      const iat = token.iat || 0;
      const sub = token.sub || token.user_id;
      if (!sub) {
        throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");
      }
      const payload = Object.assign({
        // Set all required fields to decent defaults
        iss: `https://securetoken.google.com/${project}`,
        aud: project,
        iat,
        exp: iat + 3600,
        auth_time: iat,
        sub,
        user_id: sub,
        firebase: {
          sign_in_provider: "custom",
          identities: {}
        }
      }, token);
      const signature = "";
      return [
        base64urlEncodeWithoutPadding(JSON.stringify(header)),
        base64urlEncodeWithoutPadding(JSON.stringify(payload)),
        signature
      ].join(".");
    }
    function getUA() {
      if (typeof navigator !== "undefined" && typeof navigator["userAgent"] === "string") {
        return navigator["userAgent"];
      } else {
        return "";
      }
    }
    function isMobileCordova() {
      return typeof window !== "undefined" && // @ts-ignore Setting up an broadly applicable index signature for Window
      // just to deal with this case would probably be a bad idea.
      !!(window["cordova"] || window["phonegap"] || window["PhoneGap"]) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA());
    }
    function isNode() {
      var _a;
      const forceEnvironment = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.forceEnvironment;
      if (forceEnvironment === "node") {
        return true;
      } else if (forceEnvironment === "browser") {
        return false;
      }
      try {
        return Object.prototype.toString.call(global.process) === "[object process]";
      } catch (e) {
        return false;
      }
    }
    function isBrowser() {
      return typeof self === "object" && self.self === self;
    }
    function isBrowserExtension() {
      const runtime = typeof chrome === "object" ? chrome.runtime : typeof browser === "object" ? browser.runtime : void 0;
      return typeof runtime === "object" && runtime.id !== void 0;
    }
    function isReactNative() {
      return typeof navigator === "object" && navigator["product"] === "ReactNative";
    }
    function isElectron() {
      return getUA().indexOf("Electron/") >= 0;
    }
    function isIE() {
      const ua = getUA();
      return ua.indexOf("MSIE ") >= 0 || ua.indexOf("Trident/") >= 0;
    }
    function isUWP() {
      return getUA().indexOf("MSAppHost/") >= 0;
    }
    function isNodeSdk() {
      return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
    }
    function isSafari() {
      return !isNode() && navigator.userAgent.includes("Safari") && !navigator.userAgent.includes("Chrome");
    }
    function isIndexedDBAvailable() {
      try {
        return typeof indexedDB === "object";
      } catch (e) {
        return false;
      }
    }
    function validateIndexedDBOpenable() {
      return new Promise((resolve, reject) => {
        try {
          let preExist = true;
          const DB_CHECK_NAME = "validate-browser-context-for-indexeddb-analytics-module";
          const request = self.indexedDB.open(DB_CHECK_NAME);
          request.onsuccess = () => {
            request.result.close();
            if (!preExist) {
              self.indexedDB.deleteDatabase(DB_CHECK_NAME);
            }
            resolve(true);
          };
          request.onupgradeneeded = () => {
            preExist = false;
          };
          request.onerror = () => {
            var _a;
            reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || "");
          };
        } catch (error) {
          reject(error);
        }
      });
    }
    function areCookiesEnabled() {
      if (typeof navigator === "undefined" || !navigator.cookieEnabled) {
        return false;
      }
      return true;
    }
    var ERROR_NAME = "FirebaseError";
    var FirebaseError = class _FirebaseError extends Error {
      constructor(code, message, customData) {
        super(message);
        this.code = code;
        this.customData = customData;
        this.name = ERROR_NAME;
        Object.setPrototypeOf(this, _FirebaseError.prototype);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, ErrorFactory.prototype.create);
        }
      }
    };
    var ErrorFactory = class {
      constructor(service, serviceName, errors) {
        this.service = service;
        this.serviceName = serviceName;
        this.errors = errors;
      }
      create(code, ...data) {
        const customData = data[0] || {};
        const fullCode = `${this.service}/${code}`;
        const template = this.errors[code];
        const message = template ? replaceTemplate(template, customData) : "Error";
        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;
        const error = new FirebaseError(fullCode, fullMessage, customData);
        return error;
      }
    };
    function replaceTemplate(template, data) {
      return template.replace(PATTERN, (_, key) => {
        const value = data[key];
        return value != null ? String(value) : `<${key}?>`;
      });
    }
    var PATTERN = /\{\$([^}]+)}/g;
    function jsonEval(str) {
      return JSON.parse(str);
    }
    function stringify(data) {
      return JSON.stringify(data);
    }
    var decode = function(token) {
      let header = {}, claims = {}, data = {}, signature = "";
      try {
        const parts = token.split(".");
        header = jsonEval(base64Decode(parts[0]) || "");
        claims = jsonEval(base64Decode(parts[1]) || "");
        signature = parts[2];
        data = claims["d"] || {};
        delete claims["d"];
      } catch (e) {
      }
      return {
        header,
        claims,
        data,
        signature
      };
    };
    var isValidTimestamp = function(token) {
      const claims = decode(token).claims;
      const now = Math.floor((/* @__PURE__ */ new Date()).getTime() / 1e3);
      let validSince = 0, validUntil = 0;
      if (typeof claims === "object") {
        if (claims.hasOwnProperty("nbf")) {
          validSince = claims["nbf"];
        } else if (claims.hasOwnProperty("iat")) {
          validSince = claims["iat"];
        }
        if (claims.hasOwnProperty("exp")) {
          validUntil = claims["exp"];
        } else {
          validUntil = validSince + 86400;
        }
      }
      return !!now && !!validSince && !!validUntil && now >= validSince && now <= validUntil;
    };
    var issuedAtTime = function(token) {
      const claims = decode(token).claims;
      if (typeof claims === "object" && claims.hasOwnProperty("iat")) {
        return claims["iat"];
      }
      return null;
    };
    var isValidFormat = function(token) {
      const decoded = decode(token), claims = decoded.claims;
      return !!claims && typeof claims === "object" && claims.hasOwnProperty("iat");
    };
    var isAdmin = function(token) {
      const claims = decode(token).claims;
      return typeof claims === "object" && claims["admin"] === true;
    };
    function contains(obj, key) {
      return Object.prototype.hasOwnProperty.call(obj, key);
    }
    function safeGet(obj, key) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        return obj[key];
      } else {
        return void 0;
      }
    }
    function isEmpty(obj) {
      for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          return false;
        }
      }
      return true;
    }
    function map(obj, fn, contextObj) {
      const res = {};
      for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          res[key] = fn.call(contextObj, obj[key], key, obj);
        }
      }
      return res;
    }
    function deepEqual(a, b) {
      if (a === b) {
        return true;
      }
      const aKeys = Object.keys(a);
      const bKeys = Object.keys(b);
      for (const k of aKeys) {
        if (!bKeys.includes(k)) {
          return false;
        }
        const aProp = a[k];
        const bProp = b[k];
        if (isObject(aProp) && isObject(bProp)) {
          if (!deepEqual(aProp, bProp)) {
            return false;
          }
        } else if (aProp !== bProp) {
          return false;
        }
      }
      for (const k of bKeys) {
        if (!aKeys.includes(k)) {
          return false;
        }
      }
      return true;
    }
    function isObject(thing) {
      return thing !== null && typeof thing === "object";
    }
    function promiseWithTimeout(promise, timeInMS = 2e3) {
      const deferredPromise = new Deferred();
      setTimeout(() => deferredPromise.reject("timeout!"), timeInMS);
      promise.then(deferredPromise.resolve, deferredPromise.reject);
      return deferredPromise.promise;
    }
    function querystring(querystringParams) {
      const params = [];
      for (const [key, value] of Object.entries(querystringParams)) {
        if (Array.isArray(value)) {
          value.forEach((arrayVal) => {
            params.push(encodeURIComponent(key) + "=" + encodeURIComponent(arrayVal));
          });
        } else {
          params.push(encodeURIComponent(key) + "=" + encodeURIComponent(value));
        }
      }
      return params.length ? "&" + params.join("&") : "";
    }
    function querystringDecode(querystring2) {
      const obj = {};
      const tokens = querystring2.replace(/^\?/, "").split("&");
      tokens.forEach((token) => {
        if (token) {
          const [key, value] = token.split("=");
          obj[decodeURIComponent(key)] = decodeURIComponent(value);
        }
      });
      return obj;
    }
    function extractQuerystring(url) {
      const queryStart = url.indexOf("?");
      if (!queryStart) {
        return "";
      }
      const fragmentStart = url.indexOf("#", queryStart);
      return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : void 0);
    }
    var Sha1 = class {
      constructor() {
        this.chain_ = [];
        this.buf_ = [];
        this.W_ = [];
        this.pad_ = [];
        this.inbuf_ = 0;
        this.total_ = 0;
        this.blockSize = 512 / 8;
        this.pad_[0] = 128;
        for (let i = 1; i < this.blockSize; ++i) {
          this.pad_[i] = 0;
        }
        this.reset();
      }
      reset() {
        this.chain_[0] = 1732584193;
        this.chain_[1] = 4023233417;
        this.chain_[2] = 2562383102;
        this.chain_[3] = 271733878;
        this.chain_[4] = 3285377520;
        this.inbuf_ = 0;
        this.total_ = 0;
      }
      /**
       * Internal compress helper function.
       * @param buf Block to compress.
       * @param offset Offset of the block in the buffer.
       * @private
       */
      compress_(buf, offset) {
        if (!offset) {
          offset = 0;
        }
        const W = this.W_;
        if (typeof buf === "string") {
          for (let i = 0; i < 16; i++) {
            W[i] = buf.charCodeAt(offset) << 24 | buf.charCodeAt(offset + 1) << 16 | buf.charCodeAt(offset + 2) << 8 | buf.charCodeAt(offset + 3);
            offset += 4;
          }
        } else {
          for (let i = 0; i < 16; i++) {
            W[i] = buf[offset] << 24 | buf[offset + 1] << 16 | buf[offset + 2] << 8 | buf[offset + 3];
            offset += 4;
          }
        }
        for (let i = 16; i < 80; i++) {
          const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
          W[i] = (t << 1 | t >>> 31) & 4294967295;
        }
        let a = this.chain_[0];
        let b = this.chain_[1];
        let c = this.chain_[2];
        let d = this.chain_[3];
        let e = this.chain_[4];
        let f, k;
        for (let i = 0; i < 80; i++) {
          if (i < 40) {
            if (i < 20) {
              f = d ^ b & (c ^ d);
              k = 1518500249;
            } else {
              f = b ^ c ^ d;
              k = 1859775393;
            }
          } else {
            if (i < 60) {
              f = b & c | d & (b | c);
              k = 2400959708;
            } else {
              f = b ^ c ^ d;
              k = 3395469782;
            }
          }
          const t = (a << 5 | a >>> 27) + f + e + k + W[i] & 4294967295;
          e = d;
          d = c;
          c = (b << 30 | b >>> 2) & 4294967295;
          b = a;
          a = t;
        }
        this.chain_[0] = this.chain_[0] + a & 4294967295;
        this.chain_[1] = this.chain_[1] + b & 4294967295;
        this.chain_[2] = this.chain_[2] + c & 4294967295;
        this.chain_[3] = this.chain_[3] + d & 4294967295;
        this.chain_[4] = this.chain_[4] + e & 4294967295;
      }
      update(bytes, length) {
        if (bytes == null) {
          return;
        }
        if (length === void 0) {
          length = bytes.length;
        }
        const lengthMinusBlock = length - this.blockSize;
        let n = 0;
        const buf = this.buf_;
        let inbuf = this.inbuf_;
        while (n < length) {
          if (inbuf === 0) {
            while (n <= lengthMinusBlock) {
              this.compress_(bytes, n);
              n += this.blockSize;
            }
          }
          if (typeof bytes === "string") {
            while (n < length) {
              buf[inbuf] = bytes.charCodeAt(n);
              ++inbuf;
              ++n;
              if (inbuf === this.blockSize) {
                this.compress_(buf);
                inbuf = 0;
                break;
              }
            }
          } else {
            while (n < length) {
              buf[inbuf] = bytes[n];
              ++inbuf;
              ++n;
              if (inbuf === this.blockSize) {
                this.compress_(buf);
                inbuf = 0;
                break;
              }
            }
          }
        }
        this.inbuf_ = inbuf;
        this.total_ += length;
      }
      /** @override */
      digest() {
        const digest = [];
        let totalBits = this.total_ * 8;
        if (this.inbuf_ < 56) {
          this.update(this.pad_, 56 - this.inbuf_);
        } else {
          this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
        }
        for (let i = this.blockSize - 1; i >= 56; i--) {
          this.buf_[i] = totalBits & 255;
          totalBits /= 256;
        }
        this.compress_(this.buf_);
        let n = 0;
        for (let i = 0; i < 5; i++) {
          for (let j = 24; j >= 0; j -= 8) {
            digest[n] = this.chain_[i] >> j & 255;
            ++n;
          }
        }
        return digest;
      }
    };
    function createSubscribe(executor, onNoObservers) {
      const proxy = new ObserverProxy(executor, onNoObservers);
      return proxy.subscribe.bind(proxy);
    }
    var ObserverProxy = class {
      /**
       * @param executor Function which can make calls to a single Observer
       *     as a proxy.
       * @param onNoObservers Callback when count of Observers goes to zero.
       */
      constructor(executor, onNoObservers) {
        this.observers = [];
        this.unsubscribes = [];
        this.observerCount = 0;
        this.task = Promise.resolve();
        this.finalized = false;
        this.onNoObservers = onNoObservers;
        this.task.then(() => {
          executor(this);
        }).catch((e) => {
          this.error(e);
        });
      }
      next(value) {
        this.forEachObserver((observer) => {
          observer.next(value);
        });
      }
      error(error) {
        this.forEachObserver((observer) => {
          observer.error(error);
        });
        this.close(error);
      }
      complete() {
        this.forEachObserver((observer) => {
          observer.complete();
        });
        this.close();
      }
      /**
       * Subscribe function that can be used to add an Observer to the fan-out list.
       *
       * - We require that no event is sent to a subscriber sychronously to their
       *   call to subscribe().
       */
      subscribe(nextOrObserver, error, complete) {
        let observer;
        if (nextOrObserver === void 0 && error === void 0 && complete === void 0) {
          throw new Error("Missing Observer.");
        }
        if (implementsAnyMethods(nextOrObserver, [
          "next",
          "error",
          "complete"
        ])) {
          observer = nextOrObserver;
        } else {
          observer = {
            next: nextOrObserver,
            error,
            complete
          };
        }
        if (observer.next === void 0) {
          observer.next = noop;
        }
        if (observer.error === void 0) {
          observer.error = noop;
        }
        if (observer.complete === void 0) {
          observer.complete = noop;
        }
        const unsub = this.unsubscribeOne.bind(this, this.observers.length);
        if (this.finalized) {
          this.task.then(() => {
            try {
              if (this.finalError) {
                observer.error(this.finalError);
              } else {
                observer.complete();
              }
            } catch (e) {
            }
            return;
          });
        }
        this.observers.push(observer);
        return unsub;
      }
      // Unsubscribe is synchronous - we guarantee that no events are sent to
      // any unsubscribed Observer.
      unsubscribeOne(i) {
        if (this.observers === void 0 || this.observers[i] === void 0) {
          return;
        }
        delete this.observers[i];
        this.observerCount -= 1;
        if (this.observerCount === 0 && this.onNoObservers !== void 0) {
          this.onNoObservers(this);
        }
      }
      forEachObserver(fn) {
        if (this.finalized) {
          return;
        }
        for (let i = 0; i < this.observers.length; i++) {
          this.sendOne(i, fn);
        }
      }
      // Call the Observer via one of it's callback function. We are careful to
      // confirm that the observe has not been unsubscribed since this asynchronous
      // function had been queued.
      sendOne(i, fn) {
        this.task.then(() => {
          if (this.observers !== void 0 && this.observers[i] !== void 0) {
            try {
              fn(this.observers[i]);
            } catch (e) {
              if (typeof console !== "undefined" && console.error) {
                console.error(e);
              }
            }
          }
        });
      }
      close(err) {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        if (err !== void 0) {
          this.finalError = err;
        }
        this.task.then(() => {
          this.observers = void 0;
          this.onNoObservers = void 0;
        });
      }
    };
    function async(fn, onError) {
      return (...args) => {
        Promise.resolve(true).then(() => {
          fn(...args);
        }).catch((error) => {
          if (onError) {
            onError(error);
          }
        });
      };
    }
    function implementsAnyMethods(obj, methods) {
      if (typeof obj !== "object" || obj === null) {
        return false;
      }
      for (const method of methods) {
        if (method in obj && typeof obj[method] === "function") {
          return true;
        }
      }
      return false;
    }
    function noop() {
    }
    var validateArgCount = function(fnName, minCount, maxCount, argCount) {
      let argError;
      if (argCount < minCount) {
        argError = "at least " + minCount;
      } else if (argCount > maxCount) {
        argError = maxCount === 0 ? "none" : "no more than " + maxCount;
      }
      if (argError) {
        const error = fnName + " failed: Was called with " + argCount + (argCount === 1 ? " argument." : " arguments.") + " Expects " + argError + ".";
        throw new Error(error);
      }
    };
    function errorPrefix(fnName, argName) {
      return `${fnName} failed: ${argName} argument `;
    }
    function validateNamespace(fnName, namespace, optional) {
      if (optional && !namespace) {
        return;
      }
      if (typeof namespace !== "string") {
        throw new Error(errorPrefix(fnName, "namespace") + "must be a valid firebase namespace.");
      }
    }
    function validateCallback(fnName, argumentName, callback, optional) {
      if (optional && !callback) {
        return;
      }
      if (typeof callback !== "function") {
        throw new Error(errorPrefix(fnName, argumentName) + "must be a valid function.");
      }
    }
    function validateContextObject(fnName, argumentName, context, optional) {
      if (optional && !context) {
        return;
      }
      if (typeof context !== "object" || context === null) {
        throw new Error(errorPrefix(fnName, argumentName) + "must be a valid context object.");
      }
    }
    var stringToByteArray = function(str) {
      const out = [];
      let p = 0;
      for (let i = 0; i < str.length; i++) {
        let c = str.charCodeAt(i);
        if (c >= 55296 && c <= 56319) {
          const high = c - 55296;
          i++;
          assert(i < str.length, "Surrogate pair missing trail surrogate.");
          const low = str.charCodeAt(i) - 56320;
          c = 65536 + (high << 10) + low;
        }
        if (c < 128) {
          out[p++] = c;
        } else if (c < 2048) {
          out[p++] = c >> 6 | 192;
          out[p++] = c & 63 | 128;
        } else if (c < 65536) {
          out[p++] = c >> 12 | 224;
          out[p++] = c >> 6 & 63 | 128;
          out[p++] = c & 63 | 128;
        } else {
          out[p++] = c >> 18 | 240;
          out[p++] = c >> 12 & 63 | 128;
          out[p++] = c >> 6 & 63 | 128;
          out[p++] = c & 63 | 128;
        }
      }
      return out;
    };
    var stringLength = function(str) {
      let p = 0;
      for (let i = 0; i < str.length; i++) {
        const c = str.charCodeAt(i);
        if (c < 128) {
          p++;
        } else if (c < 2048) {
          p += 2;
        } else if (c >= 55296 && c <= 56319) {
          p += 4;
          i++;
        } else {
          p += 3;
        }
      }
      return p;
    };
    var uuidv4 = function() {
      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
        const r = Math.random() * 16 | 0, v = c === "x" ? r : r & 3 | 8;
        return v.toString(16);
      });
    };
    var DEFAULT_INTERVAL_MILLIS = 1e3;
    var DEFAULT_BACKOFF_FACTOR = 2;
    var MAX_VALUE_MILLIS = 4 * 60 * 60 * 1e3;
    var RANDOM_FACTOR = 0.5;
    function calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {
      const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);
      const randomWait = Math.round(
        // A fraction of the backoff value to add/subtract.
        // Deviation: changes multiplication order to improve readability.
        RANDOM_FACTOR * currBaseValue * // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines
        // if we add or subtract.
        (Math.random() - 0.5) * 2
      );
      return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);
    }
    function ordinal(i) {
      if (!Number.isFinite(i)) {
        return `${i}`;
      }
      return i + indicator(i);
    }
    function indicator(i) {
      i = Math.abs(i);
      const cent = i % 100;
      if (cent >= 10 && cent <= 20) {
        return "th";
      }
      const dec = i % 10;
      if (dec === 1) {
        return "st";
      }
      if (dec === 2) {
        return "nd";
      }
      if (dec === 3) {
        return "rd";
      }
      return "th";
    }
    function getModularInstance(service) {
      if (service && service._delegate) {
        return service._delegate;
      } else {
        return service;
      }
    }
    exports.CONSTANTS = CONSTANTS;
    exports.DecodeBase64StringError = DecodeBase64StringError;
    exports.Deferred = Deferred;
    exports.ErrorFactory = ErrorFactory;
    exports.FirebaseError = FirebaseError;
    exports.MAX_VALUE_MILLIS = MAX_VALUE_MILLIS;
    exports.RANDOM_FACTOR = RANDOM_FACTOR;
    exports.Sha1 = Sha1;
    exports.areCookiesEnabled = areCookiesEnabled;
    exports.assert = assert;
    exports.assertionError = assertionError;
    exports.async = async;
    exports.base64 = base64;
    exports.base64Decode = base64Decode;
    exports.base64Encode = base64Encode;
    exports.base64urlEncodeWithoutPadding = base64urlEncodeWithoutPadding;
    exports.calculateBackoffMillis = calculateBackoffMillis;
    exports.contains = contains;
    exports.createMockUserToken = createMockUserToken;
    exports.createSubscribe = createSubscribe;
    exports.decode = decode;
    exports.deepCopy = deepCopy;
    exports.deepEqual = deepEqual;
    exports.deepExtend = deepExtend;
    exports.errorPrefix = errorPrefix;
    exports.extractQuerystring = extractQuerystring;
    exports.getDefaultAppConfig = getDefaultAppConfig;
    exports.getDefaultEmulatorHost = getDefaultEmulatorHost;
    exports.getDefaultEmulatorHostnameAndPort = getDefaultEmulatorHostnameAndPort;
    exports.getDefaults = getDefaults;
    exports.getExperimentalSetting = getExperimentalSetting;
    exports.getGlobal = getGlobal;
    exports.getModularInstance = getModularInstance;
    exports.getUA = getUA;
    exports.isAdmin = isAdmin;
    exports.isBrowser = isBrowser;
    exports.isBrowserExtension = isBrowserExtension;
    exports.isElectron = isElectron;
    exports.isEmpty = isEmpty;
    exports.isIE = isIE;
    exports.isIndexedDBAvailable = isIndexedDBAvailable;
    exports.isMobileCordova = isMobileCordova;
    exports.isNode = isNode;
    exports.isNodeSdk = isNodeSdk;
    exports.isReactNative = isReactNative;
    exports.isSafari = isSafari;
    exports.isUWP = isUWP;
    exports.isValidFormat = isValidFormat;
    exports.isValidTimestamp = isValidTimestamp;
    exports.issuedAtTime = issuedAtTime;
    exports.jsonEval = jsonEval;
    exports.map = map;
    exports.ordinal = ordinal;
    exports.promiseWithTimeout = promiseWithTimeout;
    exports.querystring = querystring;
    exports.querystringDecode = querystringDecode;
    exports.safeGet = safeGet;
    exports.stringLength = stringLength;
    exports.stringToByteArray = stringToByteArray;
    exports.stringify = stringify;
    exports.uuidv4 = uuidv4;
    exports.validateArgCount = validateArgCount;
    exports.validateCallback = validateCallback;
    exports.validateContextObject = validateContextObject;
    exports.validateIndexedDBOpenable = validateIndexedDBOpenable;
    exports.validateNamespace = validateNamespace;
  }
});

// node_modules/@firebase/component/dist/index.cjs.js
var require_index_cjs2 = __commonJS({
  "node_modules/@firebase/component/dist/index.cjs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var util = require_index_cjs();
    var Component = (
      /** @class */
      function() {
        function Component2(name, instanceFactory, type) {
          this.name = name;
          this.instanceFactory = instanceFactory;
          this.type = type;
          this.multipleInstances = false;
          this.serviceProps = {};
          this.instantiationMode = "LAZY";
          this.onInstanceCreated = null;
        }
        Component2.prototype.setInstantiationMode = function(mode) {
          this.instantiationMode = mode;
          return this;
        };
        Component2.prototype.setMultipleInstances = function(multipleInstances) {
          this.multipleInstances = multipleInstances;
          return this;
        };
        Component2.prototype.setServiceProps = function(props) {
          this.serviceProps = props;
          return this;
        };
        Component2.prototype.setInstanceCreatedCallback = function(callback) {
          this.onInstanceCreated = callback;
          return this;
        };
        return Component2;
      }()
    );
    var DEFAULT_ENTRY_NAME = "[DEFAULT]";
    var Provider = (
      /** @class */
      function() {
        function Provider2(name, container) {
          this.name = name;
          this.container = container;
          this.component = null;
          this.instances = /* @__PURE__ */ new Map();
          this.instancesDeferred = /* @__PURE__ */ new Map();
          this.instancesOptions = /* @__PURE__ */ new Map();
          this.onInitCallbacks = /* @__PURE__ */ new Map();
        }
        Provider2.prototype.get = function(identifier) {
          var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
          if (!this.instancesDeferred.has(normalizedIdentifier)) {
            var deferred = new util.Deferred();
            this.instancesDeferred.set(normalizedIdentifier, deferred);
            if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {
              try {
                var instance = this.getOrInitializeService({
                  instanceIdentifier: normalizedIdentifier
                });
                if (instance) {
                  deferred.resolve(instance);
                }
              } catch (e) {
              }
            }
          }
          return this.instancesDeferred.get(normalizedIdentifier).promise;
        };
        Provider2.prototype.getImmediate = function(options) {
          var _a;
          var normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);
          var optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;
          if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {
            try {
              return this.getOrInitializeService({
                instanceIdentifier: normalizedIdentifier
              });
            } catch (e) {
              if (optional) {
                return null;
              } else {
                throw e;
              }
            }
          } else {
            if (optional) {
              return null;
            } else {
              throw Error("Service ".concat(this.name, " is not available"));
            }
          }
        };
        Provider2.prototype.getComponent = function() {
          return this.component;
        };
        Provider2.prototype.setComponent = function(component) {
          var e_1, _a;
          if (component.name !== this.name) {
            throw Error("Mismatching Component ".concat(component.name, " for Provider ").concat(this.name, "."));
          }
          if (this.component) {
            throw Error("Component for ".concat(this.name, " has already been provided"));
          }
          this.component = component;
          if (!this.shouldAutoInitialize()) {
            return;
          }
          if (isComponentEager(component)) {
            try {
              this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });
            } catch (e) {
            }
          }
          try {
            for (var _b = tslib.__values(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
              var _d = tslib.__read(_c.value, 2), instanceIdentifier = _d[0], instanceDeferred = _d[1];
              var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
              try {
                var instance = this.getOrInitializeService({
                  instanceIdentifier: normalizedIdentifier
                });
                instanceDeferred.resolve(instance);
              } catch (e) {
              }
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a = _b.return))
                _a.call(_b);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
        };
        Provider2.prototype.clearInstance = function(identifier) {
          if (identifier === void 0) {
            identifier = DEFAULT_ENTRY_NAME;
          }
          this.instancesDeferred.delete(identifier);
          this.instancesOptions.delete(identifier);
          this.instances.delete(identifier);
        };
        Provider2.prototype.delete = function() {
          return tslib.__awaiter(this, void 0, void 0, function() {
            var services;
            return tslib.__generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  services = Array.from(this.instances.values());
                  return [4, Promise.all(tslib.__spreadArray(tslib.__spreadArray([], tslib.__read(services.filter(function(service) {
                    return "INTERNAL" in service;
                  }).map(function(service) {
                    return service.INTERNAL.delete();
                  })), false), tslib.__read(services.filter(function(service) {
                    return "_delete" in service;
                  }).map(function(service) {
                    return service._delete();
                  })), false))];
                case 1:
                  _a.sent();
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        Provider2.prototype.isComponentSet = function() {
          return this.component != null;
        };
        Provider2.prototype.isInitialized = function(identifier) {
          if (identifier === void 0) {
            identifier = DEFAULT_ENTRY_NAME;
          }
          return this.instances.has(identifier);
        };
        Provider2.prototype.getOptions = function(identifier) {
          if (identifier === void 0) {
            identifier = DEFAULT_ENTRY_NAME;
          }
          return this.instancesOptions.get(identifier) || {};
        };
        Provider2.prototype.initialize = function(opts) {
          var e_2, _a;
          if (opts === void 0) {
            opts = {};
          }
          var _b = opts.options, options = _b === void 0 ? {} : _b;
          var normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);
          if (this.isInitialized(normalizedIdentifier)) {
            throw Error("".concat(this.name, "(").concat(normalizedIdentifier, ") has already been initialized"));
          }
          if (!this.isComponentSet()) {
            throw Error("Component ".concat(this.name, " has not been registered yet"));
          }
          var instance = this.getOrInitializeService({
            instanceIdentifier: normalizedIdentifier,
            options
          });
          try {
            for (var _c = tslib.__values(this.instancesDeferred.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {
              var _e = tslib.__read(_d.value, 2), instanceIdentifier = _e[0], instanceDeferred = _e[1];
              var normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
              if (normalizedIdentifier === normalizedDeferredIdentifier) {
                instanceDeferred.resolve(instance);
              }
            }
          } catch (e_2_1) {
            e_2 = { error: e_2_1 };
          } finally {
            try {
              if (_d && !_d.done && (_a = _c.return))
                _a.call(_c);
            } finally {
              if (e_2)
                throw e_2.error;
            }
          }
          return instance;
        };
        Provider2.prototype.onInit = function(callback, identifier) {
          var _a;
          var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
          var existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : /* @__PURE__ */ new Set();
          existingCallbacks.add(callback);
          this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);
          var existingInstance = this.instances.get(normalizedIdentifier);
          if (existingInstance) {
            callback(existingInstance, normalizedIdentifier);
          }
          return function() {
            existingCallbacks.delete(callback);
          };
        };
        Provider2.prototype.invokeOnInitCallbacks = function(instance, identifier) {
          var e_3, _a;
          var callbacks = this.onInitCallbacks.get(identifier);
          if (!callbacks) {
            return;
          }
          try {
            for (var callbacks_1 = tslib.__values(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()) {
              var callback = callbacks_1_1.value;
              try {
                callback(instance, identifier);
              } catch (_b) {
              }
            }
          } catch (e_3_1) {
            e_3 = { error: e_3_1 };
          } finally {
            try {
              if (callbacks_1_1 && !callbacks_1_1.done && (_a = callbacks_1.return))
                _a.call(callbacks_1);
            } finally {
              if (e_3)
                throw e_3.error;
            }
          }
        };
        Provider2.prototype.getOrInitializeService = function(_a) {
          var instanceIdentifier = _a.instanceIdentifier, _b = _a.options, options = _b === void 0 ? {} : _b;
          var instance = this.instances.get(instanceIdentifier);
          if (!instance && this.component) {
            instance = this.component.instanceFactory(this.container, {
              instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),
              options
            });
            this.instances.set(instanceIdentifier, instance);
            this.instancesOptions.set(instanceIdentifier, options);
            this.invokeOnInitCallbacks(instance, instanceIdentifier);
            if (this.component.onInstanceCreated) {
              try {
                this.component.onInstanceCreated(this.container, instanceIdentifier, instance);
              } catch (_c) {
              }
            }
          }
          return instance || null;
        };
        Provider2.prototype.normalizeInstanceIdentifier = function(identifier) {
          if (identifier === void 0) {
            identifier = DEFAULT_ENTRY_NAME;
          }
          if (this.component) {
            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;
          } else {
            return identifier;
          }
        };
        Provider2.prototype.shouldAutoInitialize = function() {
          return !!this.component && this.component.instantiationMode !== "EXPLICIT";
        };
        return Provider2;
      }()
    );
    function normalizeIdentifierForFactory(identifier) {
      return identifier === DEFAULT_ENTRY_NAME ? void 0 : identifier;
    }
    function isComponentEager(component) {
      return component.instantiationMode === "EAGER";
    }
    var ComponentContainer = (
      /** @class */
      function() {
        function ComponentContainer2(name) {
          this.name = name;
          this.providers = /* @__PURE__ */ new Map();
        }
        ComponentContainer2.prototype.addComponent = function(component) {
          var provider = this.getProvider(component.name);
          if (provider.isComponentSet()) {
            throw new Error("Component ".concat(component.name, " has already been registered with ").concat(this.name));
          }
          provider.setComponent(component);
        };
        ComponentContainer2.prototype.addOrOverwriteComponent = function(component) {
          var provider = this.getProvider(component.name);
          if (provider.isComponentSet()) {
            this.providers.delete(component.name);
          }
          this.addComponent(component);
        };
        ComponentContainer2.prototype.getProvider = function(name) {
          if (this.providers.has(name)) {
            return this.providers.get(name);
          }
          var provider = new Provider(name, this);
          this.providers.set(name, provider);
          return provider;
        };
        ComponentContainer2.prototype.getProviders = function() {
          return Array.from(this.providers.values());
        };
        return ComponentContainer2;
      }()
    );
    exports.Component = Component;
    exports.ComponentContainer = ComponentContainer;
    exports.Provider = Provider;
  }
});

// node_modules/@firebase/logger/dist/index.cjs.js
var require_index_cjs3 = __commonJS({
  "node_modules/@firebase/logger/dist/index.cjs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var _a;
    var instances = [];
    exports.LogLevel = void 0;
    (function(LogLevel) {
      LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
      LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
      LogLevel[LogLevel["INFO"] = 2] = "INFO";
      LogLevel[LogLevel["WARN"] = 3] = "WARN";
      LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
      LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
    })(exports.LogLevel || (exports.LogLevel = {}));
    var levelStringToEnum = {
      "debug": exports.LogLevel.DEBUG,
      "verbose": exports.LogLevel.VERBOSE,
      "info": exports.LogLevel.INFO,
      "warn": exports.LogLevel.WARN,
      "error": exports.LogLevel.ERROR,
      "silent": exports.LogLevel.SILENT
    };
    var defaultLogLevel = exports.LogLevel.INFO;
    var ConsoleMethod = (_a = {}, _a[exports.LogLevel.DEBUG] = "log", _a[exports.LogLevel.VERBOSE] = "log", _a[exports.LogLevel.INFO] = "info", _a[exports.LogLevel.WARN] = "warn", _a[exports.LogLevel.ERROR] = "error", _a);
    var defaultLogHandler = function(instance, logType) {
      var args = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
      }
      if (logType < instance.logLevel) {
        return;
      }
      var now = (/* @__PURE__ */ new Date()).toISOString();
      var method = ConsoleMethod[logType];
      if (method) {
        console[method].apply(console, tslib.__spreadArray(["[".concat(now, "]  ").concat(instance.name, ":")], args, false));
      } else {
        throw new Error("Attempted to log a message with an invalid logType (value: ".concat(logType, ")"));
      }
    };
    var Logger = (
      /** @class */
      function() {
        function Logger2(name) {
          this.name = name;
          this._logLevel = defaultLogLevel;
          this._logHandler = defaultLogHandler;
          this._userLogHandler = null;
          instances.push(this);
        }
        Object.defineProperty(Logger2.prototype, "logLevel", {
          get: function() {
            return this._logLevel;
          },
          set: function(val) {
            if (!(val in exports.LogLevel)) {
              throw new TypeError('Invalid value "'.concat(val, '" assigned to `logLevel`'));
            }
            this._logLevel = val;
          },
          enumerable: false,
          configurable: true
        });
        Logger2.prototype.setLogLevel = function(val) {
          this._logLevel = typeof val === "string" ? levelStringToEnum[val] : val;
        };
        Object.defineProperty(Logger2.prototype, "logHandler", {
          get: function() {
            return this._logHandler;
          },
          set: function(val) {
            if (typeof val !== "function") {
              throw new TypeError("Value assigned to `logHandler` must be a function");
            }
            this._logHandler = val;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Logger2.prototype, "userLogHandler", {
          get: function() {
            return this._userLogHandler;
          },
          set: function(val) {
            this._userLogHandler = val;
          },
          enumerable: false,
          configurable: true
        });
        Logger2.prototype.debug = function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          this._userLogHandler && this._userLogHandler.apply(this, tslib.__spreadArray([this, exports.LogLevel.DEBUG], args, false));
          this._logHandler.apply(this, tslib.__spreadArray([this, exports.LogLevel.DEBUG], args, false));
        };
        Logger2.prototype.log = function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          this._userLogHandler && this._userLogHandler.apply(this, tslib.__spreadArray([this, exports.LogLevel.VERBOSE], args, false));
          this._logHandler.apply(this, tslib.__spreadArray([this, exports.LogLevel.VERBOSE], args, false));
        };
        Logger2.prototype.info = function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          this._userLogHandler && this._userLogHandler.apply(this, tslib.__spreadArray([this, exports.LogLevel.INFO], args, false));
          this._logHandler.apply(this, tslib.__spreadArray([this, exports.LogLevel.INFO], args, false));
        };
        Logger2.prototype.warn = function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          this._userLogHandler && this._userLogHandler.apply(this, tslib.__spreadArray([this, exports.LogLevel.WARN], args, false));
          this._logHandler.apply(this, tslib.__spreadArray([this, exports.LogLevel.WARN], args, false));
        };
        Logger2.prototype.error = function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          this._userLogHandler && this._userLogHandler.apply(this, tslib.__spreadArray([this, exports.LogLevel.ERROR], args, false));
          this._logHandler.apply(this, tslib.__spreadArray([this, exports.LogLevel.ERROR], args, false));
        };
        return Logger2;
      }()
    );
    function setLogLevel(level) {
      instances.forEach(function(inst) {
        inst.setLogLevel(level);
      });
    }
    function setUserLogHandler(logCallback, options) {
      var _loop_1 = function(instance2) {
        var customLogLevel = null;
        if (options && options.level) {
          customLogLevel = levelStringToEnum[options.level];
        }
        if (logCallback === null) {
          instance2.userLogHandler = null;
        } else {
          instance2.userLogHandler = function(instance3, level) {
            var args = [];
            for (var _i2 = 2; _i2 < arguments.length; _i2++) {
              args[_i2 - 2] = arguments[_i2];
            }
            var message = args.map(function(arg) {
              if (arg == null) {
                return null;
              } else if (typeof arg === "string") {
                return arg;
              } else if (typeof arg === "number" || typeof arg === "boolean") {
                return arg.toString();
              } else if (arg instanceof Error) {
                return arg.message;
              } else {
                try {
                  return JSON.stringify(arg);
                } catch (ignored) {
                  return null;
                }
              }
            }).filter(function(arg) {
              return arg;
            }).join(" ");
            if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance3.logLevel)) {
              logCallback({
                level: exports.LogLevel[level].toLowerCase(),
                message,
                args,
                type: instance3.name
              });
            }
          };
        }
      };
      for (var _i = 0, instances_1 = instances; _i < instances_1.length; _i++) {
        var instance = instances_1[_i];
        _loop_1(instance);
      }
    }
    exports.Logger = Logger;
    exports.setLogLevel = setLogLevel;
    exports.setUserLogHandler = setUserLogHandler;
  }
});

// node_modules/@firebase/app/dist/index.cjs.js
var require_index_cjs4 = __commonJS({
  "node_modules/@firebase/app/dist/index.cjs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var component = require_index_cjs2();
    var tslib = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var logger$1 = require_index_cjs3();
    var util = require_index_cjs();
    var idb = (init_build(), __toCommonJS(build_exports));
    var PlatformLoggerServiceImpl = (
      /** @class */
      function() {
        function PlatformLoggerServiceImpl2(container) {
          this.container = container;
        }
        PlatformLoggerServiceImpl2.prototype.getPlatformInfoString = function() {
          var providers = this.container.getProviders();
          return providers.map(function(provider) {
            if (isVersionServiceProvider(provider)) {
              var service = provider.getImmediate();
              return "".concat(service.library, "/").concat(service.version);
            } else {
              return null;
            }
          }).filter(function(logString) {
            return logString;
          }).join(" ");
        };
        return PlatformLoggerServiceImpl2;
      }()
    );
    function isVersionServiceProvider(provider) {
      var component2 = provider.getComponent();
      return (component2 === null || component2 === void 0 ? void 0 : component2.type) === "VERSION";
    }
    var name$o = "@firebase/app";
    var version$1 = "0.9.13";
    var logger = new logger$1.Logger("@firebase/app");
    var name$n = "@firebase/app-compat";
    var name$m = "@firebase/analytics-compat";
    var name$l = "@firebase/analytics";
    var name$k = "@firebase/app-check-compat";
    var name$j = "@firebase/app-check";
    var name$i = "@firebase/auth";
    var name$h = "@firebase/auth-compat";
    var name$g = "@firebase/database";
    var name$f = "@firebase/database-compat";
    var name$e = "@firebase/functions";
    var name$d = "@firebase/functions-compat";
    var name$c = "@firebase/installations";
    var name$b = "@firebase/installations-compat";
    var name$a = "@firebase/messaging";
    var name$9 = "@firebase/messaging-compat";
    var name$8 = "@firebase/performance";
    var name$7 = "@firebase/performance-compat";
    var name$6 = "@firebase/remote-config";
    var name$5 = "@firebase/remote-config-compat";
    var name$4 = "@firebase/storage";
    var name$3 = "@firebase/storage-compat";
    var name$2 = "@firebase/firestore";
    var name$1 = "@firebase/firestore-compat";
    var name = "firebase";
    var version = "9.23.0";
    var _a$1;
    var DEFAULT_ENTRY_NAME = "[DEFAULT]";
    var PLATFORM_LOG_STRING = (_a$1 = {}, _a$1[name$o] = "fire-core", _a$1[name$n] = "fire-core-compat", _a$1[name$l] = "fire-analytics", _a$1[name$m] = "fire-analytics-compat", _a$1[name$j] = "fire-app-check", _a$1[name$k] = "fire-app-check-compat", _a$1[name$i] = "fire-auth", _a$1[name$h] = "fire-auth-compat", _a$1[name$g] = "fire-rtdb", _a$1[name$f] = "fire-rtdb-compat", _a$1[name$e] = "fire-fn", _a$1[name$d] = "fire-fn-compat", _a$1[name$c] = "fire-iid", _a$1[name$b] = "fire-iid-compat", _a$1[name$a] = "fire-fcm", _a$1[name$9] = "fire-fcm-compat", _a$1[name$8] = "fire-perf", _a$1[name$7] = "fire-perf-compat", _a$1[name$6] = "fire-rc", _a$1[name$5] = "fire-rc-compat", _a$1[name$4] = "fire-gcs", _a$1[name$3] = "fire-gcs-compat", _a$1[name$2] = "fire-fst", _a$1[name$1] = "fire-fst-compat", _a$1["fire-js"] = "fire-js", _a$1[name] = "fire-js-all", _a$1);
    var _apps = /* @__PURE__ */ new Map();
    var _components = /* @__PURE__ */ new Map();
    function _addComponent(app, component2) {
      try {
        app.container.addComponent(component2);
      } catch (e) {
        logger.debug("Component ".concat(component2.name, " failed to register with FirebaseApp ").concat(app.name), e);
      }
    }
    function _addOrOverwriteComponent(app, component2) {
      app.container.addOrOverwriteComponent(component2);
    }
    function _registerComponent(component2) {
      var e_1, _a2;
      var componentName = component2.name;
      if (_components.has(componentName)) {
        logger.debug("There were multiple attempts to register component ".concat(componentName, "."));
        return false;
      }
      _components.set(componentName, component2);
      try {
        for (var _b = tslib.__values(_apps.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
          var app = _c.value;
          _addComponent(app, component2);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return))
            _a2.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return true;
    }
    function _getProvider(app, name2) {
      var heartbeatController = app.container.getProvider("heartbeat").getImmediate({ optional: true });
      if (heartbeatController) {
        void heartbeatController.triggerHeartbeat();
      }
      return app.container.getProvider(name2);
    }
    function _removeServiceInstance(app, name2, instanceIdentifier) {
      if (instanceIdentifier === void 0) {
        instanceIdentifier = DEFAULT_ENTRY_NAME;
      }
      _getProvider(app, name2).clearInstance(instanceIdentifier);
    }
    function _clearComponents() {
      _components.clear();
    }
    var _a;
    var ERRORS = (_a = {}, _a[
      "no-app"
      /* AppError.NO_APP */
    ] = "No Firebase App '{$appName}' has been created - call initializeApp() first", _a[
      "bad-app-name"
      /* AppError.BAD_APP_NAME */
    ] = "Illegal App name: '{$appName}", _a[
      "duplicate-app"
      /* AppError.DUPLICATE_APP */
    ] = "Firebase App named '{$appName}' already exists with different options or config", _a[
      "app-deleted"
      /* AppError.APP_DELETED */
    ] = "Firebase App named '{$appName}' already deleted", _a[
      "no-options"
      /* AppError.NO_OPTIONS */
    ] = "Need to provide options, when not being deployed to hosting via source.", _a[
      "invalid-app-argument"
      /* AppError.INVALID_APP_ARGUMENT */
    ] = "firebase.{$appName}() takes either no argument or a Firebase App instance.", _a[
      "invalid-log-argument"
      /* AppError.INVALID_LOG_ARGUMENT */
    ] = "First argument to `onLog` must be null or a function.", _a[
      "idb-open"
      /* AppError.IDB_OPEN */
    ] = "Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.", _a[
      "idb-get"
      /* AppError.IDB_GET */
    ] = "Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.", _a[
      "idb-set"
      /* AppError.IDB_WRITE */
    ] = "Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.", _a[
      "idb-delete"
      /* AppError.IDB_DELETE */
    ] = "Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.", _a);
    var ERROR_FACTORY = new util.ErrorFactory("app", "Firebase", ERRORS);
    var FirebaseAppImpl = (
      /** @class */
      function() {
        function FirebaseAppImpl2(options, config, container) {
          var _this = this;
          this._isDeleted = false;
          this._options = tslib.__assign({}, options);
          this._config = tslib.__assign({}, config);
          this._name = config.name;
          this._automaticDataCollectionEnabled = config.automaticDataCollectionEnabled;
          this._container = container;
          this.container.addComponent(new component.Component(
            "app",
            function() {
              return _this;
            },
            "PUBLIC"
            /* ComponentType.PUBLIC */
          ));
        }
        Object.defineProperty(FirebaseAppImpl2.prototype, "automaticDataCollectionEnabled", {
          get: function() {
            this.checkDestroyed();
            return this._automaticDataCollectionEnabled;
          },
          set: function(val) {
            this.checkDestroyed();
            this._automaticDataCollectionEnabled = val;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(FirebaseAppImpl2.prototype, "name", {
          get: function() {
            this.checkDestroyed();
            return this._name;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(FirebaseAppImpl2.prototype, "options", {
          get: function() {
            this.checkDestroyed();
            return this._options;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(FirebaseAppImpl2.prototype, "config", {
          get: function() {
            this.checkDestroyed();
            return this._config;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(FirebaseAppImpl2.prototype, "container", {
          get: function() {
            return this._container;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(FirebaseAppImpl2.prototype, "isDeleted", {
          get: function() {
            return this._isDeleted;
          },
          set: function(val) {
            this._isDeleted = val;
          },
          enumerable: false,
          configurable: true
        });
        FirebaseAppImpl2.prototype.checkDestroyed = function() {
          if (this.isDeleted) {
            throw ERROR_FACTORY.create("app-deleted", { appName: this._name });
          }
        };
        return FirebaseAppImpl2;
      }()
    );
    var SDK_VERSION = version;
    function initializeApp(_options, rawConfig) {
      var e_1, _a2;
      if (rawConfig === void 0) {
        rawConfig = {};
      }
      var options = _options;
      if (typeof rawConfig !== "object") {
        var name_1 = rawConfig;
        rawConfig = { name: name_1 };
      }
      var config = tslib.__assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);
      var name2 = config.name;
      if (typeof name2 !== "string" || !name2) {
        throw ERROR_FACTORY.create("bad-app-name", {
          appName: String(name2)
        });
      }
      options || (options = util.getDefaultAppConfig());
      if (!options) {
        throw ERROR_FACTORY.create(
          "no-options"
          /* AppError.NO_OPTIONS */
        );
      }
      var existingApp = _apps.get(name2);
      if (existingApp) {
        if (util.deepEqual(options, existingApp.options) && util.deepEqual(config, existingApp.config)) {
          return existingApp;
        } else {
          throw ERROR_FACTORY.create("duplicate-app", { appName: name2 });
        }
      }
      var container = new component.ComponentContainer(name2);
      try {
        for (var _b = tslib.__values(_components.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
          var component$1 = _c.value;
          container.addComponent(component$1);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return))
            _a2.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      var newApp = new FirebaseAppImpl(options, config, container);
      _apps.set(name2, newApp);
      return newApp;
    }
    function getApp(name2) {
      if (name2 === void 0) {
        name2 = DEFAULT_ENTRY_NAME;
      }
      var app = _apps.get(name2);
      if (!app && name2 === DEFAULT_ENTRY_NAME && util.getDefaultAppConfig()) {
        return initializeApp();
      }
      if (!app) {
        throw ERROR_FACTORY.create("no-app", { appName: name2 });
      }
      return app;
    }
    function getApps() {
      return Array.from(_apps.values());
    }
    function deleteApp(app) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var name2;
        return tslib.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              name2 = app.name;
              if (!_apps.has(name2))
                return [3, 2];
              _apps.delete(name2);
              return [4, Promise.all(app.container.getProviders().map(function(provider) {
                return provider.delete();
              }))];
            case 1:
              _a2.sent();
              app.isDeleted = true;
              _a2.label = 2;
            case 2:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }
    function registerVersion(libraryKeyOrName, version2, variant) {
      var _a2;
      var library = (_a2 = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a2 !== void 0 ? _a2 : libraryKeyOrName;
      if (variant) {
        library += "-".concat(variant);
      }
      var libraryMismatch = library.match(/\s|\//);
      var versionMismatch = version2.match(/\s|\//);
      if (libraryMismatch || versionMismatch) {
        var warning = [
          'Unable to register library "'.concat(library, '" with version "').concat(version2, '":')
        ];
        if (libraryMismatch) {
          warning.push('library name "'.concat(library, '" contains illegal characters (whitespace or "/")'));
        }
        if (libraryMismatch && versionMismatch) {
          warning.push("and");
        }
        if (versionMismatch) {
          warning.push('version name "'.concat(version2, '" contains illegal characters (whitespace or "/")'));
        }
        logger.warn(warning.join(" "));
        return;
      }
      _registerComponent(new component.Component(
        "".concat(library, "-version"),
        function() {
          return { library, version: version2 };
        },
        "VERSION"
        /* ComponentType.VERSION */
      ));
    }
    function onLog(logCallback, options) {
      if (logCallback !== null && typeof logCallback !== "function") {
        throw ERROR_FACTORY.create(
          "invalid-log-argument"
          /* AppError.INVALID_LOG_ARGUMENT */
        );
      }
      logger$1.setUserLogHandler(logCallback, options);
    }
    function setLogLevel(logLevel) {
      logger$1.setLogLevel(logLevel);
    }
    var DB_NAME = "firebase-heartbeat-database";
    var DB_VERSION = 1;
    var STORE_NAME = "firebase-heartbeat-store";
    var dbPromise = null;
    function getDbPromise() {
      if (!dbPromise) {
        dbPromise = idb.openDB(DB_NAME, DB_VERSION, {
          upgrade: function(db, oldVersion) {
            switch (oldVersion) {
              case 0:
                db.createObjectStore(STORE_NAME);
            }
          }
        }).catch(function(e) {
          throw ERROR_FACTORY.create("idb-open", {
            originalErrorMessage: e.message
          });
        });
      }
      return dbPromise;
    }
    function readHeartbeatsFromIndexedDB(app) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var db, result, e_1, idbGetError;
        return tslib.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              _a2.trys.push([0, 3, , 4]);
              return [4, getDbPromise()];
            case 1:
              db = _a2.sent();
              return [4, db.transaction(STORE_NAME).objectStore(STORE_NAME).get(computeKey(app))];
            case 2:
              result = _a2.sent();
              return [2, result];
            case 3:
              e_1 = _a2.sent();
              if (e_1 instanceof util.FirebaseError) {
                logger.warn(e_1.message);
              } else {
                idbGetError = ERROR_FACTORY.create("idb-get", {
                  originalErrorMessage: e_1 === null || e_1 === void 0 ? void 0 : e_1.message
                });
                logger.warn(idbGetError.message);
              }
              return [3, 4];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }
    function writeHeartbeatsToIndexedDB(app, heartbeatObject) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var db, tx, objectStore, e_2, idbGetError;
        return tslib.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              _a2.trys.push([0, 4, , 5]);
              return [4, getDbPromise()];
            case 1:
              db = _a2.sent();
              tx = db.transaction(STORE_NAME, "readwrite");
              objectStore = tx.objectStore(STORE_NAME);
              return [4, objectStore.put(heartbeatObject, computeKey(app))];
            case 2:
              _a2.sent();
              return [4, tx.done];
            case 3:
              _a2.sent();
              return [3, 5];
            case 4:
              e_2 = _a2.sent();
              if (e_2 instanceof util.FirebaseError) {
                logger.warn(e_2.message);
              } else {
                idbGetError = ERROR_FACTORY.create("idb-set", {
                  originalErrorMessage: e_2 === null || e_2 === void 0 ? void 0 : e_2.message
                });
                logger.warn(idbGetError.message);
              }
              return [3, 5];
            case 5:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }
    function computeKey(app) {
      return "".concat(app.name, "!").concat(app.options.appId);
    }
    var MAX_HEADER_BYTES = 1024;
    var STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1e3;
    var HeartbeatServiceImpl = (
      /** @class */
      function() {
        function HeartbeatServiceImpl2(container) {
          var _this = this;
          this.container = container;
          this._heartbeatsCache = null;
          var app = this.container.getProvider("app").getImmediate();
          this._storage = new HeartbeatStorageImpl(app);
          this._heartbeatsCachePromise = this._storage.read().then(function(result) {
            _this._heartbeatsCache = result;
            return result;
          });
        }
        HeartbeatServiceImpl2.prototype.triggerHeartbeat = function() {
          return tslib.__awaiter(this, void 0, void 0, function() {
            var platformLogger, agent, date, _a2;
            return tslib.__generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  platformLogger = this.container.getProvider("platform-logger").getImmediate();
                  agent = platformLogger.getPlatformInfoString();
                  date = getUTCDateString();
                  if (!(this._heartbeatsCache === null))
                    return [3, 2];
                  _a2 = this;
                  return [4, this._heartbeatsCachePromise];
                case 1:
                  _a2._heartbeatsCache = _b.sent();
                  _b.label = 2;
                case 2:
                  if (this._heartbeatsCache.lastSentHeartbeatDate === date || this._heartbeatsCache.heartbeats.some(function(singleDateHeartbeat) {
                    return singleDateHeartbeat.date === date;
                  })) {
                    return [
                      2
                      /*return*/
                    ];
                  } else {
                    this._heartbeatsCache.heartbeats.push({ date, agent });
                  }
                  this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(function(singleDateHeartbeat) {
                    var hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();
                    var now = Date.now();
                    return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;
                  });
                  return [2, this._storage.overwrite(this._heartbeatsCache)];
              }
            });
          });
        };
        HeartbeatServiceImpl2.prototype.getHeartbeatsHeader = function() {
          return tslib.__awaiter(this, void 0, void 0, function() {
            var date, _a2, heartbeatsToSend, unsentEntries, headerString;
            return tslib.__generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  if (!(this._heartbeatsCache === null))
                    return [3, 2];
                  return [4, this._heartbeatsCachePromise];
                case 1:
                  _b.sent();
                  _b.label = 2;
                case 2:
                  if (this._heartbeatsCache === null || this._heartbeatsCache.heartbeats.length === 0) {
                    return [2, ""];
                  }
                  date = getUTCDateString();
                  _a2 = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats), heartbeatsToSend = _a2.heartbeatsToSend, unsentEntries = _a2.unsentEntries;
                  headerString = util.base64urlEncodeWithoutPadding(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));
                  this._heartbeatsCache.lastSentHeartbeatDate = date;
                  if (!(unsentEntries.length > 0))
                    return [3, 4];
                  this._heartbeatsCache.heartbeats = unsentEntries;
                  return [4, this._storage.overwrite(this._heartbeatsCache)];
                case 3:
                  _b.sent();
                  return [3, 5];
                case 4:
                  this._heartbeatsCache.heartbeats = [];
                  void this._storage.overwrite(this._heartbeatsCache);
                  _b.label = 5;
                case 5:
                  return [2, headerString];
              }
            });
          });
        };
        return HeartbeatServiceImpl2;
      }()
    );
    function getUTCDateString() {
      var today = /* @__PURE__ */ new Date();
      return today.toISOString().substring(0, 10);
    }
    function extractHeartbeatsForHeader(heartbeatsCache, maxSize) {
      var e_1, _a2;
      if (maxSize === void 0) {
        maxSize = MAX_HEADER_BYTES;
      }
      var heartbeatsToSend = [];
      var unsentEntries = heartbeatsCache.slice();
      var _loop_1 = function(singleDateHeartbeat2) {
        var heartbeatEntry = heartbeatsToSend.find(function(hb) {
          return hb.agent === singleDateHeartbeat2.agent;
        });
        if (!heartbeatEntry) {
          heartbeatsToSend.push({
            agent: singleDateHeartbeat2.agent,
            dates: [singleDateHeartbeat2.date]
          });
          if (countBytes(heartbeatsToSend) > maxSize) {
            heartbeatsToSend.pop();
            return "break";
          }
        } else {
          heartbeatEntry.dates.push(singleDateHeartbeat2.date);
          if (countBytes(heartbeatsToSend) > maxSize) {
            heartbeatEntry.dates.pop();
            return "break";
          }
        }
        unsentEntries = unsentEntries.slice(1);
      };
      try {
        for (var heartbeatsCache_1 = tslib.__values(heartbeatsCache), heartbeatsCache_1_1 = heartbeatsCache_1.next(); !heartbeatsCache_1_1.done; heartbeatsCache_1_1 = heartbeatsCache_1.next()) {
          var singleDateHeartbeat = heartbeatsCache_1_1.value;
          var state_1 = _loop_1(singleDateHeartbeat);
          if (state_1 === "break")
            break;
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (heartbeatsCache_1_1 && !heartbeatsCache_1_1.done && (_a2 = heartbeatsCache_1.return))
            _a2.call(heartbeatsCache_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return {
        heartbeatsToSend,
        unsentEntries
      };
    }
    var HeartbeatStorageImpl = (
      /** @class */
      function() {
        function HeartbeatStorageImpl2(app) {
          this.app = app;
          this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();
        }
        HeartbeatStorageImpl2.prototype.runIndexedDBEnvironmentCheck = function() {
          return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(_a2) {
              if (!util.isIndexedDBAvailable()) {
                return [2, false];
              } else {
                return [2, util.validateIndexedDBOpenable().then(function() {
                  return true;
                }).catch(function() {
                  return false;
                })];
              }
            });
          });
        };
        HeartbeatStorageImpl2.prototype.read = function() {
          return tslib.__awaiter(this, void 0, void 0, function() {
            var canUseIndexedDB, idbHeartbeatObject;
            return tslib.__generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  return [4, this._canUseIndexedDBPromise];
                case 1:
                  canUseIndexedDB = _a2.sent();
                  if (!!canUseIndexedDB)
                    return [3, 2];
                  return [2, { heartbeats: [] }];
                case 2:
                  return [4, readHeartbeatsFromIndexedDB(this.app)];
                case 3:
                  idbHeartbeatObject = _a2.sent();
                  return [2, idbHeartbeatObject || { heartbeats: [] }];
              }
            });
          });
        };
        HeartbeatStorageImpl2.prototype.overwrite = function(heartbeatsObject) {
          var _a2;
          return tslib.__awaiter(this, void 0, void 0, function() {
            var canUseIndexedDB, existingHeartbeatsObject;
            return tslib.__generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  return [4, this._canUseIndexedDBPromise];
                case 1:
                  canUseIndexedDB = _b.sent();
                  if (!!canUseIndexedDB)
                    return [3, 2];
                  return [
                    2
                    /*return*/
                  ];
                case 2:
                  return [4, this.read()];
                case 3:
                  existingHeartbeatsObject = _b.sent();
                  return [2, writeHeartbeatsToIndexedDB(this.app, {
                    lastSentHeartbeatDate: (_a2 = heartbeatsObject.lastSentHeartbeatDate) !== null && _a2 !== void 0 ? _a2 : existingHeartbeatsObject.lastSentHeartbeatDate,
                    heartbeats: heartbeatsObject.heartbeats
                  })];
              }
            });
          });
        };
        HeartbeatStorageImpl2.prototype.add = function(heartbeatsObject) {
          var _a2;
          return tslib.__awaiter(this, void 0, void 0, function() {
            var canUseIndexedDB, existingHeartbeatsObject;
            return tslib.__generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  return [4, this._canUseIndexedDBPromise];
                case 1:
                  canUseIndexedDB = _b.sent();
                  if (!!canUseIndexedDB)
                    return [3, 2];
                  return [
                    2
                    /*return*/
                  ];
                case 2:
                  return [4, this.read()];
                case 3:
                  existingHeartbeatsObject = _b.sent();
                  return [2, writeHeartbeatsToIndexedDB(this.app, {
                    lastSentHeartbeatDate: (_a2 = heartbeatsObject.lastSentHeartbeatDate) !== null && _a2 !== void 0 ? _a2 : existingHeartbeatsObject.lastSentHeartbeatDate,
                    heartbeats: tslib.__spreadArray(tslib.__spreadArray([], tslib.__read(existingHeartbeatsObject.heartbeats), false), tslib.__read(heartbeatsObject.heartbeats), false)
                  })];
              }
            });
          });
        };
        return HeartbeatStorageImpl2;
      }()
    );
    function countBytes(heartbeatsCache) {
      return util.base64urlEncodeWithoutPadding(
        // heartbeatsCache wrapper properties
        JSON.stringify({ version: 2, heartbeats: heartbeatsCache })
      ).length;
    }
    function registerCoreComponents(variant) {
      _registerComponent(new component.Component(
        "platform-logger",
        function(container) {
          return new PlatformLoggerServiceImpl(container);
        },
        "PRIVATE"
        /* ComponentType.PRIVATE */
      ));
      _registerComponent(new component.Component(
        "heartbeat",
        function(container) {
          return new HeartbeatServiceImpl(container);
        },
        "PRIVATE"
        /* ComponentType.PRIVATE */
      ));
      registerVersion(name$o, version$1, variant);
      registerVersion(name$o, version$1, "cjs5");
      registerVersion("fire-js", "");
    }
    registerCoreComponents("node");
    Object.defineProperty(exports, "FirebaseError", {
      enumerable: true,
      get: function() {
        return util.FirebaseError;
      }
    });
    exports.SDK_VERSION = SDK_VERSION;
    exports._DEFAULT_ENTRY_NAME = DEFAULT_ENTRY_NAME;
    exports._addComponent = _addComponent;
    exports._addOrOverwriteComponent = _addOrOverwriteComponent;
    exports._apps = _apps;
    exports._clearComponents = _clearComponents;
    exports._components = _components;
    exports._getProvider = _getProvider;
    exports._registerComponent = _registerComponent;
    exports._removeServiceInstance = _removeServiceInstance;
    exports.deleteApp = deleteApp;
    exports.getApp = getApp;
    exports.getApps = getApps;
    exports.initializeApp = initializeApp;
    exports.onLog = onLog;
    exports.registerVersion = registerVersion;
    exports.setLogLevel = setLogLevel;
  }
});

// node_modules/@firebase/storage/dist/index.cjs.js
var require_index_cjs5 = __commonJS({
  "node_modules/@firebase/storage/dist/index.cjs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var app = require_index_cjs4();
    var util = require_index_cjs();
    var component = require_index_cjs2();
    var DEFAULT_HOST = "firebasestorage.googleapis.com";
    var CONFIG_STORAGE_BUCKET_KEY = "storageBucket";
    var DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1e3;
    var DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1e3;
    var DEFAULT_MIN_SLEEP_TIME_MILLIS = 1e3;
    var StorageError = class _StorageError extends util.FirebaseError {
      /**
       * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and
       *  added to the end of the message.
       * @param message  - Error message.
       * @param status_ - Corresponding HTTP Status Code
       */
      constructor(code, message, status_ = 0) {
        super(prependCode(code), `Firebase Storage: ${message} (${prependCode(code)})`);
        this.status_ = status_;
        this.customData = { serverResponse: null };
        this._baseMessage = this.message;
        Object.setPrototypeOf(this, _StorageError.prototype);
      }
      get status() {
        return this.status_;
      }
      set status(status) {
        this.status_ = status;
      }
      /**
       * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.
       */
      _codeEquals(code) {
        return prependCode(code) === this.code;
      }
      /**
       * Optional response message that was added by the server.
       */
      get serverResponse() {
        return this.customData.serverResponse;
      }
      set serverResponse(serverResponse) {
        this.customData.serverResponse = serverResponse;
        if (this.customData.serverResponse) {
          this.message = `${this._baseMessage}
${this.customData.serverResponse}`;
        } else {
          this.message = this._baseMessage;
        }
      }
    };
    exports.StorageErrorCode = void 0;
    (function(StorageErrorCode) {
      StorageErrorCode["UNKNOWN"] = "unknown";
      StorageErrorCode["OBJECT_NOT_FOUND"] = "object-not-found";
      StorageErrorCode["BUCKET_NOT_FOUND"] = "bucket-not-found";
      StorageErrorCode["PROJECT_NOT_FOUND"] = "project-not-found";
      StorageErrorCode["QUOTA_EXCEEDED"] = "quota-exceeded";
      StorageErrorCode["UNAUTHENTICATED"] = "unauthenticated";
      StorageErrorCode["UNAUTHORIZED"] = "unauthorized";
      StorageErrorCode["UNAUTHORIZED_APP"] = "unauthorized-app";
      StorageErrorCode["RETRY_LIMIT_EXCEEDED"] = "retry-limit-exceeded";
      StorageErrorCode["INVALID_CHECKSUM"] = "invalid-checksum";
      StorageErrorCode["CANCELED"] = "canceled";
      StorageErrorCode["INVALID_EVENT_NAME"] = "invalid-event-name";
      StorageErrorCode["INVALID_URL"] = "invalid-url";
      StorageErrorCode["INVALID_DEFAULT_BUCKET"] = "invalid-default-bucket";
      StorageErrorCode["NO_DEFAULT_BUCKET"] = "no-default-bucket";
      StorageErrorCode["CANNOT_SLICE_BLOB"] = "cannot-slice-blob";
      StorageErrorCode["SERVER_FILE_WRONG_SIZE"] = "server-file-wrong-size";
      StorageErrorCode["NO_DOWNLOAD_URL"] = "no-download-url";
      StorageErrorCode["INVALID_ARGUMENT"] = "invalid-argument";
      StorageErrorCode["INVALID_ARGUMENT_COUNT"] = "invalid-argument-count";
      StorageErrorCode["APP_DELETED"] = "app-deleted";
      StorageErrorCode["INVALID_ROOT_OPERATION"] = "invalid-root-operation";
      StorageErrorCode["INVALID_FORMAT"] = "invalid-format";
      StorageErrorCode["INTERNAL_ERROR"] = "internal-error";
      StorageErrorCode["UNSUPPORTED_ENVIRONMENT"] = "unsupported-environment";
    })(exports.StorageErrorCode || (exports.StorageErrorCode = {}));
    function prependCode(code) {
      return "storage/" + code;
    }
    function unknown() {
      const message = "An unknown error occurred, please check the error payload for server response.";
      return new StorageError(exports.StorageErrorCode.UNKNOWN, message);
    }
    function objectNotFound(path) {
      return new StorageError(exports.StorageErrorCode.OBJECT_NOT_FOUND, "Object '" + path + "' does not exist.");
    }
    function quotaExceeded(bucket) {
      return new StorageError(exports.StorageErrorCode.QUOTA_EXCEEDED, "Quota for bucket '" + bucket + "' exceeded, please view quota on https://firebase.google.com/pricing/.");
    }
    function unauthenticated() {
      const message = "User is not authenticated, please authenticate using Firebase Authentication and try again.";
      return new StorageError(exports.StorageErrorCode.UNAUTHENTICATED, message);
    }
    function unauthorizedApp() {
      return new StorageError(exports.StorageErrorCode.UNAUTHORIZED_APP, "This app does not have permission to access Firebase Storage on this project.");
    }
    function unauthorized(path) {
      return new StorageError(exports.StorageErrorCode.UNAUTHORIZED, "User does not have permission to access '" + path + "'.");
    }
    function retryLimitExceeded() {
      return new StorageError(exports.StorageErrorCode.RETRY_LIMIT_EXCEEDED, "Max retry time for operation exceeded, please try again.");
    }
    function canceled() {
      return new StorageError(exports.StorageErrorCode.CANCELED, "User canceled the upload/download.");
    }
    function invalidUrl(url) {
      return new StorageError(exports.StorageErrorCode.INVALID_URL, "Invalid URL '" + url + "'.");
    }
    function invalidDefaultBucket(bucket) {
      return new StorageError(exports.StorageErrorCode.INVALID_DEFAULT_BUCKET, "Invalid default bucket '" + bucket + "'.");
    }
    function noDefaultBucket() {
      return new StorageError(exports.StorageErrorCode.NO_DEFAULT_BUCKET, "No default bucket found. Did you set the '" + CONFIG_STORAGE_BUCKET_KEY + "' property when initializing the app?");
    }
    function cannotSliceBlob() {
      return new StorageError(exports.StorageErrorCode.CANNOT_SLICE_BLOB, "Cannot slice blob for upload. Please retry the upload.");
    }
    function serverFileWrongSize() {
      return new StorageError(exports.StorageErrorCode.SERVER_FILE_WRONG_SIZE, "Server recorded incorrect upload file size, please retry the upload.");
    }
    function noDownloadURL() {
      return new StorageError(exports.StorageErrorCode.NO_DOWNLOAD_URL, "The given file does not have any download URLs.");
    }
    function missingPolyFill(polyFill) {
      return new StorageError(exports.StorageErrorCode.UNSUPPORTED_ENVIRONMENT, `${polyFill} is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.`);
    }
    function invalidArgument(message) {
      return new StorageError(exports.StorageErrorCode.INVALID_ARGUMENT, message);
    }
    function appDeleted() {
      return new StorageError(exports.StorageErrorCode.APP_DELETED, "The Firebase app was deleted.");
    }
    function invalidRootOperation(name2) {
      return new StorageError(exports.StorageErrorCode.INVALID_ROOT_OPERATION, "The operation '" + name2 + "' cannot be performed on a root reference, create a non-root reference using child, such as .child('file.png').");
    }
    function invalidFormat(format, message) {
      return new StorageError(exports.StorageErrorCode.INVALID_FORMAT, "String does not match format '" + format + "': " + message);
    }
    function internalError(message) {
      throw new StorageError(exports.StorageErrorCode.INTERNAL_ERROR, "Internal error: " + message);
    }
    var Location = class _Location {
      constructor(bucket, path) {
        this.bucket = bucket;
        this.path_ = path;
      }
      get path() {
        return this.path_;
      }
      get isRoot() {
        return this.path.length === 0;
      }
      fullServerUrl() {
        const encode = encodeURIComponent;
        return "/b/" + encode(this.bucket) + "/o/" + encode(this.path);
      }
      bucketOnlyServerUrl() {
        const encode = encodeURIComponent;
        return "/b/" + encode(this.bucket) + "/o";
      }
      static makeFromBucketSpec(bucketString, host) {
        let bucketLocation;
        try {
          bucketLocation = _Location.makeFromUrl(bucketString, host);
        } catch (e) {
          return new _Location(bucketString, "");
        }
        if (bucketLocation.path === "") {
          return bucketLocation;
        } else {
          throw invalidDefaultBucket(bucketString);
        }
      }
      static makeFromUrl(url, host) {
        let location = null;
        const bucketDomain = "([A-Za-z0-9.\\-_]+)";
        function gsModify(loc) {
          if (loc.path.charAt(loc.path.length - 1) === "/") {
            loc.path_ = loc.path_.slice(0, -1);
          }
        }
        const gsPath = "(/(.*))?$";
        const gsRegex = new RegExp("^gs://" + bucketDomain + gsPath, "i");
        const gsIndices = { bucket: 1, path: 3 };
        function httpModify(loc) {
          loc.path_ = decodeURIComponent(loc.path);
        }
        const version2 = "v[A-Za-z0-9_]+";
        const firebaseStorageHost = host.replace(/[.]/g, "\\.");
        const firebaseStoragePath = "(/([^?#]*).*)?$";
        const firebaseStorageRegExp = new RegExp(`^https?://${firebaseStorageHost}/${version2}/b/${bucketDomain}/o${firebaseStoragePath}`, "i");
        const firebaseStorageIndices = { bucket: 1, path: 3 };
        const cloudStorageHost = host === DEFAULT_HOST ? "(?:storage.googleapis.com|storage.cloud.google.com)" : host;
        const cloudStoragePath = "([^?#]*)";
        const cloudStorageRegExp = new RegExp(`^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`, "i");
        const cloudStorageIndices = { bucket: 1, path: 2 };
        const groups = [
          { regex: gsRegex, indices: gsIndices, postModify: gsModify },
          {
            regex: firebaseStorageRegExp,
            indices: firebaseStorageIndices,
            postModify: httpModify
          },
          {
            regex: cloudStorageRegExp,
            indices: cloudStorageIndices,
            postModify: httpModify
          }
        ];
        for (let i = 0; i < groups.length; i++) {
          const group = groups[i];
          const captures = group.regex.exec(url);
          if (captures) {
            const bucketValue = captures[group.indices.bucket];
            let pathValue = captures[group.indices.path];
            if (!pathValue) {
              pathValue = "";
            }
            location = new _Location(bucketValue, pathValue);
            group.postModify(location);
            break;
          }
        }
        if (location == null) {
          throw invalidUrl(url);
        }
        return location;
      }
    };
    var FailRequest = class {
      constructor(error) {
        this.promise_ = Promise.reject(error);
      }
      /** @inheritDoc */
      getPromise() {
        return this.promise_;
      }
      /** @inheritDoc */
      cancel(_appDelete = false) {
      }
    };
    function start(doRequest, backoffCompleteCb, timeout) {
      let waitSeconds = 1;
      let retryTimeoutId = null;
      let globalTimeoutId = null;
      let hitTimeout = false;
      let cancelState = 0;
      function canceled2() {
        return cancelState === 2;
      }
      let triggeredCallback = false;
      function triggerCallback(...args) {
        if (!triggeredCallback) {
          triggeredCallback = true;
          backoffCompleteCb.apply(null, args);
        }
      }
      function callWithDelay(millis) {
        retryTimeoutId = setTimeout(() => {
          retryTimeoutId = null;
          doRequest(responseHandler, canceled2());
        }, millis);
      }
      function clearGlobalTimeout() {
        if (globalTimeoutId) {
          clearTimeout(globalTimeoutId);
        }
      }
      function responseHandler(success, ...args) {
        if (triggeredCallback) {
          clearGlobalTimeout();
          return;
        }
        if (success) {
          clearGlobalTimeout();
          triggerCallback.call(null, success, ...args);
          return;
        }
        const mustStop = canceled2() || hitTimeout;
        if (mustStop) {
          clearGlobalTimeout();
          triggerCallback.call(null, success, ...args);
          return;
        }
        if (waitSeconds < 64) {
          waitSeconds *= 2;
        }
        let waitMillis;
        if (cancelState === 1) {
          cancelState = 2;
          waitMillis = 0;
        } else {
          waitMillis = (waitSeconds + Math.random()) * 1e3;
        }
        callWithDelay(waitMillis);
      }
      let stopped = false;
      function stop2(wasTimeout) {
        if (stopped) {
          return;
        }
        stopped = true;
        clearGlobalTimeout();
        if (triggeredCallback) {
          return;
        }
        if (retryTimeoutId !== null) {
          if (!wasTimeout) {
            cancelState = 2;
          }
          clearTimeout(retryTimeoutId);
          callWithDelay(0);
        } else {
          if (!wasTimeout) {
            cancelState = 1;
          }
        }
      }
      callWithDelay(0);
      globalTimeoutId = setTimeout(() => {
        hitTimeout = true;
        stop2(true);
      }, timeout);
      return stop2;
    }
    function stop(id) {
      id(false);
    }
    function isJustDef(p) {
      return p !== void 0;
    }
    function isFunction(p) {
      return typeof p === "function";
    }
    function isNonArrayObject(p) {
      return typeof p === "object" && !Array.isArray(p);
    }
    function isString(p) {
      return typeof p === "string" || p instanceof String;
    }
    function isNativeBlob(p) {
      return isNativeBlobDefined() && p instanceof Blob;
    }
    function isNativeBlobDefined() {
      return typeof Blob !== "undefined" && !util.isNode();
    }
    function validateNumber(argument, minValue, maxValue, value) {
      if (value < minValue) {
        throw invalidArgument(`Invalid value for '${argument}'. Expected ${minValue} or greater.`);
      }
      if (value > maxValue) {
        throw invalidArgument(`Invalid value for '${argument}'. Expected ${maxValue} or less.`);
      }
    }
    function makeUrl(urlPart, host, protocol) {
      let origin = host;
      if (protocol == null) {
        origin = `https://${host}`;
      }
      return `${protocol}://${origin}/v0${urlPart}`;
    }
    function makeQueryString(params) {
      const encode = encodeURIComponent;
      let queryPart = "?";
      for (const key in params) {
        if (params.hasOwnProperty(key)) {
          const nextPart = encode(key) + "=" + encode(params[key]);
          queryPart = queryPart + nextPart + "&";
        }
      }
      queryPart = queryPart.slice(0, -1);
      return queryPart;
    }
    var ErrorCode;
    (function(ErrorCode2) {
      ErrorCode2[ErrorCode2["NO_ERROR"] = 0] = "NO_ERROR";
      ErrorCode2[ErrorCode2["NETWORK_ERROR"] = 1] = "NETWORK_ERROR";
      ErrorCode2[ErrorCode2["ABORT"] = 2] = "ABORT";
    })(ErrorCode || (ErrorCode = {}));
    function isRetryStatusCode(status, additionalRetryCodes) {
      const isFiveHundredCode = status >= 500 && status < 600;
      const extraRetryCodes = [
        // Request Timeout: web server didn't receive full request in time.
        408,
        // Too Many Requests: you're getting rate-limited, basically.
        429
      ];
      const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;
      const isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;
      return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;
    }
    var NetworkRequest = class {
      constructor(url_, method_, headers_, body_, successCodes_, additionalRetryCodes_, callback_, errorCallback_, timeout_, progressCallback_, connectionFactory_, retry = true) {
        this.url_ = url_;
        this.method_ = method_;
        this.headers_ = headers_;
        this.body_ = body_;
        this.successCodes_ = successCodes_;
        this.additionalRetryCodes_ = additionalRetryCodes_;
        this.callback_ = callback_;
        this.errorCallback_ = errorCallback_;
        this.timeout_ = timeout_;
        this.progressCallback_ = progressCallback_;
        this.connectionFactory_ = connectionFactory_;
        this.retry = retry;
        this.pendingConnection_ = null;
        this.backoffId_ = null;
        this.canceled_ = false;
        this.appDelete_ = false;
        this.promise_ = new Promise((resolve, reject) => {
          this.resolve_ = resolve;
          this.reject_ = reject;
          this.start_();
        });
      }
      /**
       * Actually starts the retry loop.
       */
      start_() {
        const doTheRequest = (backoffCallback, canceled2) => {
          if (canceled2) {
            backoffCallback(false, new RequestEndStatus(false, null, true));
            return;
          }
          const connection = this.connectionFactory_();
          this.pendingConnection_ = connection;
          const progressListener = (progressEvent) => {
            const loaded = progressEvent.loaded;
            const total = progressEvent.lengthComputable ? progressEvent.total : -1;
            if (this.progressCallback_ !== null) {
              this.progressCallback_(loaded, total);
            }
          };
          if (this.progressCallback_ !== null) {
            connection.addUploadProgressListener(progressListener);
          }
          connection.send(this.url_, this.method_, this.body_, this.headers_).then(() => {
            if (this.progressCallback_ !== null) {
              connection.removeUploadProgressListener(progressListener);
            }
            this.pendingConnection_ = null;
            const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;
            const status = connection.getStatus();
            if (!hitServer || isRetryStatusCode(status, this.additionalRetryCodes_) && this.retry) {
              const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;
              backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));
              return;
            }
            const successCode = this.successCodes_.indexOf(status) !== -1;
            backoffCallback(true, new RequestEndStatus(successCode, connection));
          });
        };
        const backoffDone = (requestWentThrough, status) => {
          const resolve = this.resolve_;
          const reject = this.reject_;
          const connection = status.connection;
          if (status.wasSuccessCode) {
            try {
              const result = this.callback_(connection, connection.getResponse());
              if (isJustDef(result)) {
                resolve(result);
              } else {
                resolve();
              }
            } catch (e) {
              reject(e);
            }
          } else {
            if (connection !== null) {
              const err = unknown();
              err.serverResponse = connection.getErrorText();
              if (this.errorCallback_) {
                reject(this.errorCallback_(connection, err));
              } else {
                reject(err);
              }
            } else {
              if (status.canceled) {
                const err = this.appDelete_ ? appDeleted() : canceled();
                reject(err);
              } else {
                const err = retryLimitExceeded();
                reject(err);
              }
            }
          }
        };
        if (this.canceled_) {
          backoffDone(false, new RequestEndStatus(false, null, true));
        } else {
          this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);
        }
      }
      /** @inheritDoc */
      getPromise() {
        return this.promise_;
      }
      /** @inheritDoc */
      cancel(appDelete) {
        this.canceled_ = true;
        this.appDelete_ = appDelete || false;
        if (this.backoffId_ !== null) {
          stop(this.backoffId_);
        }
        if (this.pendingConnection_ !== null) {
          this.pendingConnection_.abort();
        }
      }
    };
    var RequestEndStatus = class {
      constructor(wasSuccessCode, connection, canceled2) {
        this.wasSuccessCode = wasSuccessCode;
        this.connection = connection;
        this.canceled = !!canceled2;
      }
    };
    function addAuthHeader_(headers, authToken) {
      if (authToken !== null && authToken.length > 0) {
        headers["Authorization"] = "Firebase " + authToken;
      }
    }
    function addVersionHeader_(headers, firebaseVersion) {
      headers["X-Firebase-Storage-Version"] = "webjs/" + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : "AppManager");
    }
    function addGmpidHeader_(headers, appId) {
      if (appId) {
        headers["X-Firebase-GMPID"] = appId;
      }
    }
    function addAppCheckHeader_(headers, appCheckToken) {
      if (appCheckToken !== null) {
        headers["X-Firebase-AppCheck"] = appCheckToken;
      }
    }
    function makeRequest(requestInfo, appId, authToken, appCheckToken, requestFactory, firebaseVersion, retry = true) {
      const queryPart = makeQueryString(requestInfo.urlParams);
      const url = requestInfo.url + queryPart;
      const headers = Object.assign({}, requestInfo.headers);
      addGmpidHeader_(headers, appId);
      addAuthHeader_(headers, authToken);
      addVersionHeader_(headers, firebaseVersion);
      addAppCheckHeader_(headers, appCheckToken);
      return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, requestFactory, retry);
    }
    function getBlobBuilder() {
      if (typeof BlobBuilder !== "undefined") {
        return BlobBuilder;
      } else if (typeof WebKitBlobBuilder !== "undefined") {
        return WebKitBlobBuilder;
      } else {
        return void 0;
      }
    }
    function getBlob$1(...args) {
      const BlobBuilder2 = getBlobBuilder();
      if (BlobBuilder2 !== void 0) {
        const bb = new BlobBuilder2();
        for (let i = 0; i < args.length; i++) {
          bb.append(args[i]);
        }
        return bb.getBlob();
      } else {
        if (isNativeBlobDefined()) {
          return new Blob(args);
        } else {
          throw new StorageError(exports.StorageErrorCode.UNSUPPORTED_ENVIRONMENT, "This browser doesn't seem to support creating Blobs");
        }
      }
    }
    function sliceBlob(blob, start2, end) {
      if (blob.webkitSlice) {
        return blob.webkitSlice(start2, end);
      } else if (blob.mozSlice) {
        return blob.mozSlice(start2, end);
      } else if (blob.slice) {
        return blob.slice(start2, end);
      }
      return null;
    }
    function decodeBase64(encoded) {
      if (typeof atob === "undefined") {
        throw missingPolyFill("base-64");
      }
      return atob(encoded);
    }
    var StringFormat = {
      /**
       * Indicates the string should be interpreted "raw", that is, as normal text.
       * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte
       * sequence.
       * Example: The string 'Hello! \\ud83d\\ude0a' becomes the byte sequence
       * 48 65 6c 6c 6f 21 20 f0 9f 98 8a
       */
      RAW: "raw",
      /**
       * Indicates the string should be interpreted as base64-encoded data.
       * Padding characters (trailing '='s) are optional.
       * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence
       * ad 69 8e fb e1 3a b7 bf eb 97
       */
      BASE64: "base64",
      /**
       * Indicates the string should be interpreted as base64url-encoded data.
       * Padding characters (trailing '='s) are optional.
       * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence
       * ad 69 8e fb e1 3a b7 bf eb 97
       */
      BASE64URL: "base64url",
      /**
       * Indicates the string is a data URL, such as one obtained from
       * canvas.toDataURL().
       * Example: the string 'data:application/octet-stream;base64,aaaa'
       * becomes the byte sequence
       * 69 a6 9a
       * (the content-type "application/octet-stream" is also applied, but can
       * be overridden in the metadata object).
       */
      DATA_URL: "data_url"
    };
    var StringData = class {
      constructor(data, contentType) {
        this.data = data;
        this.contentType = contentType || null;
      }
    };
    function dataFromString(format, stringData) {
      switch (format) {
        case StringFormat.RAW:
          return new StringData(utf8Bytes_(stringData));
        case StringFormat.BASE64:
        case StringFormat.BASE64URL:
          return new StringData(base64Bytes_(format, stringData));
        case StringFormat.DATA_URL:
          return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));
      }
      throw unknown();
    }
    function utf8Bytes_(value) {
      const b = [];
      for (let i = 0; i < value.length; i++) {
        let c = value.charCodeAt(i);
        if (c <= 127) {
          b.push(c);
        } else {
          if (c <= 2047) {
            b.push(192 | c >> 6, 128 | c & 63);
          } else {
            if ((c & 64512) === 55296) {
              const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;
              if (!valid) {
                b.push(239, 191, 189);
              } else {
                const hi = c;
                const lo = value.charCodeAt(++i);
                c = 65536 | (hi & 1023) << 10 | lo & 1023;
                b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);
              }
            } else {
              if ((c & 64512) === 56320) {
                b.push(239, 191, 189);
              } else {
                b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);
              }
            }
          }
        }
      }
      return new Uint8Array(b);
    }
    function percentEncodedBytes_(value) {
      let decoded;
      try {
        decoded = decodeURIComponent(value);
      } catch (e) {
        throw invalidFormat(StringFormat.DATA_URL, "Malformed data URL.");
      }
      return utf8Bytes_(decoded);
    }
    function base64Bytes_(format, value) {
      switch (format) {
        case StringFormat.BASE64: {
          const hasMinus = value.indexOf("-") !== -1;
          const hasUnder = value.indexOf("_") !== -1;
          if (hasMinus || hasUnder) {
            const invalidChar = hasMinus ? "-" : "_";
            throw invalidFormat(format, "Invalid character '" + invalidChar + "' found: is it base64url encoded?");
          }
          break;
        }
        case StringFormat.BASE64URL: {
          const hasPlus = value.indexOf("+") !== -1;
          const hasSlash = value.indexOf("/") !== -1;
          if (hasPlus || hasSlash) {
            const invalidChar = hasPlus ? "+" : "/";
            throw invalidFormat(format, "Invalid character '" + invalidChar + "' found: is it base64 encoded?");
          }
          value = value.replace(/-/g, "+").replace(/_/g, "/");
          break;
        }
      }
      let bytes;
      try {
        bytes = decodeBase64(value);
      } catch (e) {
        if (e.message.includes("polyfill")) {
          throw e;
        }
        throw invalidFormat(format, "Invalid character found");
      }
      const array = new Uint8Array(bytes.length);
      for (let i = 0; i < bytes.length; i++) {
        array[i] = bytes.charCodeAt(i);
      }
      return array;
    }
    var DataURLParts = class {
      constructor(dataURL) {
        this.base64 = false;
        this.contentType = null;
        const matches = dataURL.match(/^data:([^,]+)?,/);
        if (matches === null) {
          throw invalidFormat(StringFormat.DATA_URL, "Must be formatted 'data:[<mediatype>][;base64],<data>");
        }
        const middle = matches[1] || null;
        if (middle != null) {
          this.base64 = endsWith(middle, ";base64");
          this.contentType = this.base64 ? middle.substring(0, middle.length - ";base64".length) : middle;
        }
        this.rest = dataURL.substring(dataURL.indexOf(",") + 1);
      }
    };
    function dataURLBytes_(dataUrl) {
      const parts = new DataURLParts(dataUrl);
      if (parts.base64) {
        return base64Bytes_(StringFormat.BASE64, parts.rest);
      } else {
        return percentEncodedBytes_(parts.rest);
      }
    }
    function dataURLContentType_(dataUrl) {
      const parts = new DataURLParts(dataUrl);
      return parts.contentType;
    }
    function endsWith(s, end) {
      const longEnough = s.length >= end.length;
      if (!longEnough) {
        return false;
      }
      return s.substring(s.length - end.length) === end;
    }
    var FbsBlob = class _FbsBlob {
      constructor(data, elideCopy) {
        let size = 0;
        let blobType = "";
        if (isNativeBlob(data)) {
          this.data_ = data;
          size = data.size;
          blobType = data.type;
        } else if (data instanceof ArrayBuffer) {
          if (elideCopy) {
            this.data_ = new Uint8Array(data);
          } else {
            this.data_ = new Uint8Array(data.byteLength);
            this.data_.set(new Uint8Array(data));
          }
          size = this.data_.length;
        } else if (data instanceof Uint8Array) {
          if (elideCopy) {
            this.data_ = data;
          } else {
            this.data_ = new Uint8Array(data.length);
            this.data_.set(data);
          }
          size = data.length;
        }
        this.size_ = size;
        this.type_ = blobType;
      }
      size() {
        return this.size_;
      }
      type() {
        return this.type_;
      }
      slice(startByte, endByte) {
        if (isNativeBlob(this.data_)) {
          const realBlob = this.data_;
          const sliced = sliceBlob(realBlob, startByte, endByte);
          if (sliced === null) {
            return null;
          }
          return new _FbsBlob(sliced);
        } else {
          const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);
          return new _FbsBlob(slice, true);
        }
      }
      static getBlob(...args) {
        if (isNativeBlobDefined()) {
          const blobby = args.map((val) => {
            if (val instanceof _FbsBlob) {
              return val.data_;
            } else {
              return val;
            }
          });
          return new _FbsBlob(getBlob$1.apply(null, blobby));
        } else {
          const uint8Arrays = args.map((val) => {
            if (isString(val)) {
              return dataFromString(StringFormat.RAW, val).data;
            } else {
              return val.data_;
            }
          });
          let finalLength = 0;
          uint8Arrays.forEach((array) => {
            finalLength += array.byteLength;
          });
          const merged = new Uint8Array(finalLength);
          let index = 0;
          uint8Arrays.forEach((array) => {
            for (let i = 0; i < array.length; i++) {
              merged[index++] = array[i];
            }
          });
          return new _FbsBlob(merged, true);
        }
      }
      uploadData() {
        return this.data_;
      }
    };
    function jsonObjectOrNull(s) {
      let obj;
      try {
        obj = JSON.parse(s);
      } catch (e) {
        return null;
      }
      if (isNonArrayObject(obj)) {
        return obj;
      } else {
        return null;
      }
    }
    function parent(path) {
      if (path.length === 0) {
        return null;
      }
      const index = path.lastIndexOf("/");
      if (index === -1) {
        return "";
      }
      const newPath = path.slice(0, index);
      return newPath;
    }
    function child(path, childPath) {
      const canonicalChildPath = childPath.split("/").filter((component2) => component2.length > 0).join("/");
      if (path.length === 0) {
        return canonicalChildPath;
      } else {
        return path + "/" + canonicalChildPath;
      }
    }
    function lastComponent(path) {
      const index = path.lastIndexOf("/", path.length - 2);
      if (index === -1) {
        return path;
      } else {
        return path.slice(index + 1);
      }
    }
    function noXform_(metadata, value) {
      return value;
    }
    var Mapping = class {
      constructor(server, local, writable, xform) {
        this.server = server;
        this.local = local || server;
        this.writable = !!writable;
        this.xform = xform || noXform_;
      }
    };
    var mappings_ = null;
    function xformPath(fullPath) {
      if (!isString(fullPath) || fullPath.length < 2) {
        return fullPath;
      } else {
        return lastComponent(fullPath);
      }
    }
    function getMappings() {
      if (mappings_) {
        return mappings_;
      }
      const mappings = [];
      mappings.push(new Mapping("bucket"));
      mappings.push(new Mapping("generation"));
      mappings.push(new Mapping("metageneration"));
      mappings.push(new Mapping("name", "fullPath", true));
      function mappingsXformPath(_metadata, fullPath) {
        return xformPath(fullPath);
      }
      const nameMapping = new Mapping("name");
      nameMapping.xform = mappingsXformPath;
      mappings.push(nameMapping);
      function xformSize(_metadata, size) {
        if (size !== void 0) {
          return Number(size);
        } else {
          return size;
        }
      }
      const sizeMapping = new Mapping("size");
      sizeMapping.xform = xformSize;
      mappings.push(sizeMapping);
      mappings.push(new Mapping("timeCreated"));
      mappings.push(new Mapping("updated"));
      mappings.push(new Mapping("md5Hash", null, true));
      mappings.push(new Mapping("cacheControl", null, true));
      mappings.push(new Mapping("contentDisposition", null, true));
      mappings.push(new Mapping("contentEncoding", null, true));
      mappings.push(new Mapping("contentLanguage", null, true));
      mappings.push(new Mapping("contentType", null, true));
      mappings.push(new Mapping("metadata", "customMetadata", true));
      mappings_ = mappings;
      return mappings_;
    }
    function addRef(metadata, service) {
      function generateRef() {
        const bucket = metadata["bucket"];
        const path = metadata["fullPath"];
        const loc = new Location(bucket, path);
        return service._makeStorageReference(loc);
      }
      Object.defineProperty(metadata, "ref", { get: generateRef });
    }
    function fromResource(service, resource, mappings) {
      const metadata = {};
      metadata["type"] = "file";
      const len = mappings.length;
      for (let i = 0; i < len; i++) {
        const mapping = mappings[i];
        metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);
      }
      addRef(metadata, service);
      return metadata;
    }
    function fromResourceString(service, resourceString, mappings) {
      const obj = jsonObjectOrNull(resourceString);
      if (obj === null) {
        return null;
      }
      const resource = obj;
      return fromResource(service, resource, mappings);
    }
    function downloadUrlFromResourceString(metadata, resourceString, host, protocol) {
      const obj = jsonObjectOrNull(resourceString);
      if (obj === null) {
        return null;
      }
      if (!isString(obj["downloadTokens"])) {
        return null;
      }
      const tokens = obj["downloadTokens"];
      if (tokens.length === 0) {
        return null;
      }
      const encode = encodeURIComponent;
      const tokensList = tokens.split(",");
      const urls = tokensList.map((token) => {
        const bucket = metadata["bucket"];
        const path = metadata["fullPath"];
        const urlPart = "/b/" + encode(bucket) + "/o/" + encode(path);
        const base = makeUrl(urlPart, host, protocol);
        const queryString = makeQueryString({
          alt: "media",
          token
        });
        return base + queryString;
      });
      return urls[0];
    }
    function toResourceString(metadata, mappings) {
      const resource = {};
      const len = mappings.length;
      for (let i = 0; i < len; i++) {
        const mapping = mappings[i];
        if (mapping.writable) {
          resource[mapping.server] = metadata[mapping.local];
        }
      }
      return JSON.stringify(resource);
    }
    var PREFIXES_KEY = "prefixes";
    var ITEMS_KEY = "items";
    function fromBackendResponse(service, bucket, resource) {
      const listResult = {
        prefixes: [],
        items: [],
        nextPageToken: resource["nextPageToken"]
      };
      if (resource[PREFIXES_KEY]) {
        for (const path of resource[PREFIXES_KEY]) {
          const pathWithoutTrailingSlash = path.replace(/\/$/, "");
          const reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));
          listResult.prefixes.push(reference);
        }
      }
      if (resource[ITEMS_KEY]) {
        for (const item of resource[ITEMS_KEY]) {
          const reference = service._makeStorageReference(new Location(bucket, item["name"]));
          listResult.items.push(reference);
        }
      }
      return listResult;
    }
    function fromResponseString(service, bucket, resourceString) {
      const obj = jsonObjectOrNull(resourceString);
      if (obj === null) {
        return null;
      }
      const resource = obj;
      return fromBackendResponse(service, bucket, resource);
    }
    var RequestInfo = class {
      constructor(url, method, handler, timeout) {
        this.url = url;
        this.method = method;
        this.handler = handler;
        this.timeout = timeout;
        this.urlParams = {};
        this.headers = {};
        this.body = null;
        this.errorHandler = null;
        this.progressCallback = null;
        this.successCodes = [200];
        this.additionalRetryCodes = [];
      }
    };
    function handlerCheck(cndn) {
      if (!cndn) {
        throw unknown();
      }
    }
    function metadataHandler(service, mappings) {
      function handler(xhr, text) {
        const metadata = fromResourceString(service, text, mappings);
        handlerCheck(metadata !== null);
        return metadata;
      }
      return handler;
    }
    function listHandler(service, bucket) {
      function handler(xhr, text) {
        const listResult = fromResponseString(service, bucket, text);
        handlerCheck(listResult !== null);
        return listResult;
      }
      return handler;
    }
    function downloadUrlHandler(service, mappings) {
      function handler(xhr, text) {
        const metadata = fromResourceString(service, text, mappings);
        handlerCheck(metadata !== null);
        return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);
      }
      return handler;
    }
    function sharedErrorHandler(location) {
      function errorHandler(xhr, err) {
        let newErr;
        if (xhr.getStatus() === 401) {
          if (
            // This exact message string is the only consistent part of the
            // server's error response that identifies it as an App Check error.
            xhr.getErrorText().includes("Firebase App Check token is invalid")
          ) {
            newErr = unauthorizedApp();
          } else {
            newErr = unauthenticated();
          }
        } else {
          if (xhr.getStatus() === 402) {
            newErr = quotaExceeded(location.bucket);
          } else {
            if (xhr.getStatus() === 403) {
              newErr = unauthorized(location.path);
            } else {
              newErr = err;
            }
          }
        }
        newErr.status = xhr.getStatus();
        newErr.serverResponse = err.serverResponse;
        return newErr;
      }
      return errorHandler;
    }
    function objectErrorHandler(location) {
      const shared = sharedErrorHandler(location);
      function errorHandler(xhr, err) {
        let newErr = shared(xhr, err);
        if (xhr.getStatus() === 404) {
          newErr = objectNotFound(location.path);
        }
        newErr.serverResponse = err.serverResponse;
        return newErr;
      }
      return errorHandler;
    }
    function getMetadata$2(service, location, mappings) {
      const urlPart = location.fullServerUrl();
      const url = makeUrl(urlPart, service.host, service._protocol);
      const method = "GET";
      const timeout = service.maxOperationRetryTime;
      const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
      requestInfo.errorHandler = objectErrorHandler(location);
      return requestInfo;
    }
    function list$2(service, location, delimiter, pageToken, maxResults) {
      const urlParams = {};
      if (location.isRoot) {
        urlParams["prefix"] = "";
      } else {
        urlParams["prefix"] = location.path + "/";
      }
      if (delimiter && delimiter.length > 0) {
        urlParams["delimiter"] = delimiter;
      }
      if (pageToken) {
        urlParams["pageToken"] = pageToken;
      }
      if (maxResults) {
        urlParams["maxResults"] = maxResults;
      }
      const urlPart = location.bucketOnlyServerUrl();
      const url = makeUrl(urlPart, service.host, service._protocol);
      const method = "GET";
      const timeout = service.maxOperationRetryTime;
      const requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);
      requestInfo.urlParams = urlParams;
      requestInfo.errorHandler = sharedErrorHandler(location);
      return requestInfo;
    }
    function getBytes$1(service, location, maxDownloadSizeBytes) {
      const urlPart = location.fullServerUrl();
      const url = makeUrl(urlPart, service.host, service._protocol) + "?alt=media";
      const method = "GET";
      const timeout = service.maxOperationRetryTime;
      const requestInfo = new RequestInfo(url, method, (_, data) => data, timeout);
      requestInfo.errorHandler = objectErrorHandler(location);
      if (maxDownloadSizeBytes !== void 0) {
        requestInfo.headers["Range"] = `bytes=0-${maxDownloadSizeBytes}`;
        requestInfo.successCodes = [
          200,
          206
          /* Partial Content */
        ];
      }
      return requestInfo;
    }
    function getDownloadUrl(service, location, mappings) {
      const urlPart = location.fullServerUrl();
      const url = makeUrl(urlPart, service.host, service._protocol);
      const method = "GET";
      const timeout = service.maxOperationRetryTime;
      const requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);
      requestInfo.errorHandler = objectErrorHandler(location);
      return requestInfo;
    }
    function updateMetadata$2(service, location, metadata, mappings) {
      const urlPart = location.fullServerUrl();
      const url = makeUrl(urlPart, service.host, service._protocol);
      const method = "PATCH";
      const body = toResourceString(metadata, mappings);
      const headers = { "Content-Type": "application/json; charset=utf-8" };
      const timeout = service.maxOperationRetryTime;
      const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
      requestInfo.headers = headers;
      requestInfo.body = body;
      requestInfo.errorHandler = objectErrorHandler(location);
      return requestInfo;
    }
    function deleteObject$2(service, location) {
      const urlPart = location.fullServerUrl();
      const url = makeUrl(urlPart, service.host, service._protocol);
      const method = "DELETE";
      const timeout = service.maxOperationRetryTime;
      function handler(_xhr, _text) {
      }
      const requestInfo = new RequestInfo(url, method, handler, timeout);
      requestInfo.successCodes = [200, 204];
      requestInfo.errorHandler = objectErrorHandler(location);
      return requestInfo;
    }
    function determineContentType_(metadata, blob) {
      return metadata && metadata["contentType"] || blob && blob.type() || "application/octet-stream";
    }
    function metadataForUpload_(location, blob, metadata) {
      const metadataClone = Object.assign({}, metadata);
      metadataClone["fullPath"] = location.path;
      metadataClone["size"] = blob.size();
      if (!metadataClone["contentType"]) {
        metadataClone["contentType"] = determineContentType_(null, blob);
      }
      return metadataClone;
    }
    function multipartUpload(service, location, mappings, blob, metadata) {
      const urlPart = location.bucketOnlyServerUrl();
      const headers = {
        "X-Goog-Upload-Protocol": "multipart"
      };
      function genBoundary() {
        let str = "";
        for (let i = 0; i < 2; i++) {
          str = str + Math.random().toString().slice(2);
        }
        return str;
      }
      const boundary = genBoundary();
      headers["Content-Type"] = "multipart/related; boundary=" + boundary;
      const metadata_ = metadataForUpload_(location, blob, metadata);
      const metadataString = toResourceString(metadata_, mappings);
      const preBlobPart = "--" + boundary + "\r\nContent-Type: application/json; charset=utf-8\r\n\r\n" + metadataString + "\r\n--" + boundary + "\r\nContent-Type: " + metadata_["contentType"] + "\r\n\r\n";
      const postBlobPart = "\r\n--" + boundary + "--";
      const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);
      if (body === null) {
        throw cannotSliceBlob();
      }
      const urlParams = { name: metadata_["fullPath"] };
      const url = makeUrl(urlPart, service.host, service._protocol);
      const method = "POST";
      const timeout = service.maxUploadRetryTime;
      const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
      requestInfo.urlParams = urlParams;
      requestInfo.headers = headers;
      requestInfo.body = body.uploadData();
      requestInfo.errorHandler = sharedErrorHandler(location);
      return requestInfo;
    }
    var ResumableUploadStatus = class {
      constructor(current, total, finalized, metadata) {
        this.current = current;
        this.total = total;
        this.finalized = !!finalized;
        this.metadata = metadata || null;
      }
    };
    function checkResumeHeader_(xhr, allowed) {
      let status = null;
      try {
        status = xhr.getResponseHeader("X-Goog-Upload-Status");
      } catch (e) {
        handlerCheck(false);
      }
      const allowedStatus = allowed || ["active"];
      handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);
      return status;
    }
    function createResumableUpload(service, location, mappings, blob, metadata) {
      const urlPart = location.bucketOnlyServerUrl();
      const metadataForUpload = metadataForUpload_(location, blob, metadata);
      const urlParams = { name: metadataForUpload["fullPath"] };
      const url = makeUrl(urlPart, service.host, service._protocol);
      const method = "POST";
      const headers = {
        "X-Goog-Upload-Protocol": "resumable",
        "X-Goog-Upload-Command": "start",
        "X-Goog-Upload-Header-Content-Length": `${blob.size()}`,
        "X-Goog-Upload-Header-Content-Type": metadataForUpload["contentType"],
        "Content-Type": "application/json; charset=utf-8"
      };
      const body = toResourceString(metadataForUpload, mappings);
      const timeout = service.maxUploadRetryTime;
      function handler(xhr) {
        checkResumeHeader_(xhr);
        let url2;
        try {
          url2 = xhr.getResponseHeader("X-Goog-Upload-URL");
        } catch (e) {
          handlerCheck(false);
        }
        handlerCheck(isString(url2));
        return url2;
      }
      const requestInfo = new RequestInfo(url, method, handler, timeout);
      requestInfo.urlParams = urlParams;
      requestInfo.headers = headers;
      requestInfo.body = body;
      requestInfo.errorHandler = sharedErrorHandler(location);
      return requestInfo;
    }
    function getResumableUploadStatus(service, location, url, blob) {
      const headers = { "X-Goog-Upload-Command": "query" };
      function handler(xhr) {
        const status = checkResumeHeader_(xhr, ["active", "final"]);
        let sizeString = null;
        try {
          sizeString = xhr.getResponseHeader("X-Goog-Upload-Size-Received");
        } catch (e) {
          handlerCheck(false);
        }
        if (!sizeString) {
          handlerCheck(false);
        }
        const size = Number(sizeString);
        handlerCheck(!isNaN(size));
        return new ResumableUploadStatus(size, blob.size(), status === "final");
      }
      const method = "POST";
      const timeout = service.maxUploadRetryTime;
      const requestInfo = new RequestInfo(url, method, handler, timeout);
      requestInfo.headers = headers;
      requestInfo.errorHandler = sharedErrorHandler(location);
      return requestInfo;
    }
    var RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;
    function continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {
      const status_ = new ResumableUploadStatus(0, 0);
      if (status) {
        status_.current = status.current;
        status_.total = status.total;
      } else {
        status_.current = 0;
        status_.total = blob.size();
      }
      if (blob.size() !== status_.total) {
        throw serverFileWrongSize();
      }
      const bytesLeft = status_.total - status_.current;
      let bytesToUpload = bytesLeft;
      if (chunkSize > 0) {
        bytesToUpload = Math.min(bytesToUpload, chunkSize);
      }
      const startByte = status_.current;
      const endByte = startByte + bytesToUpload;
      let uploadCommand = "";
      if (bytesToUpload === 0) {
        uploadCommand = "finalize";
      } else if (bytesLeft === bytesToUpload) {
        uploadCommand = "upload, finalize";
      } else {
        uploadCommand = "upload";
      }
      const headers = {
        "X-Goog-Upload-Command": uploadCommand,
        "X-Goog-Upload-Offset": `${status_.current}`
      };
      const body = blob.slice(startByte, endByte);
      if (body === null) {
        throw cannotSliceBlob();
      }
      function handler(xhr, text) {
        const uploadStatus = checkResumeHeader_(xhr, ["active", "final"]);
        const newCurrent = status_.current + bytesToUpload;
        const size = blob.size();
        let metadata;
        if (uploadStatus === "final") {
          metadata = metadataHandler(service, mappings)(xhr, text);
        } else {
          metadata = null;
        }
        return new ResumableUploadStatus(newCurrent, size, uploadStatus === "final", metadata);
      }
      const method = "POST";
      const timeout = service.maxUploadRetryTime;
      const requestInfo = new RequestInfo(url, method, handler, timeout);
      requestInfo.headers = headers;
      requestInfo.body = body.uploadData();
      requestInfo.progressCallback = progressCallback || null;
      requestInfo.errorHandler = sharedErrorHandler(location);
      return requestInfo;
    }
    var TaskEvent = {
      /**
       * For this event,
       * <ul>
       *   <li>The `next` function is triggered on progress updates and when the
       *       task is paused/resumed with an `UploadTaskSnapshot` as the first
       *       argument.</li>
       *   <li>The `error` function is triggered if the upload is canceled or fails
       *       for another reason.</li>
       *   <li>The `complete` function is triggered if the upload completes
       *       successfully.</li>
       * </ul>
       */
      STATE_CHANGED: "state_changed"
    };
    var TaskState = {
      /** The task is currently transferring data. */
      RUNNING: "running",
      /** The task was paused by the user. */
      PAUSED: "paused",
      /** The task completed successfully. */
      SUCCESS: "success",
      /** The task was canceled. */
      CANCELED: "canceled",
      /** The task failed with an error. */
      ERROR: "error"
    };
    function taskStateFromInternalTaskState(state) {
      switch (state) {
        case "running":
        case "pausing":
        case "canceling":
          return TaskState.RUNNING;
        case "paused":
          return TaskState.PAUSED;
        case "success":
          return TaskState.SUCCESS;
        case "canceled":
          return TaskState.CANCELED;
        case "error":
          return TaskState.ERROR;
        default:
          return TaskState.ERROR;
      }
    }
    var Observer = class {
      constructor(nextOrObserver, error, complete) {
        const asFunctions = isFunction(nextOrObserver) || error != null || complete != null;
        if (asFunctions) {
          this.next = nextOrObserver;
          this.error = error !== null && error !== void 0 ? error : void 0;
          this.complete = complete !== null && complete !== void 0 ? complete : void 0;
        } else {
          const observer = nextOrObserver;
          this.next = observer.next;
          this.error = observer.error;
          this.complete = observer.complete;
        }
      }
    };
    function async(f) {
      return (...argsToForward) => {
        Promise.resolve().then(() => f(...argsToForward));
      };
    }
    var textFactoryOverride = null;
    var XhrConnection = class {
      constructor() {
        this.sent_ = false;
        this.xhr_ = new XMLHttpRequest();
        this.initXhr();
        this.errorCode_ = ErrorCode.NO_ERROR;
        this.sendPromise_ = new Promise((resolve) => {
          this.xhr_.addEventListener("abort", () => {
            this.errorCode_ = ErrorCode.ABORT;
            resolve();
          });
          this.xhr_.addEventListener("error", () => {
            this.errorCode_ = ErrorCode.NETWORK_ERROR;
            resolve();
          });
          this.xhr_.addEventListener("load", () => {
            resolve();
          });
        });
      }
      send(url, method, body, headers) {
        if (this.sent_) {
          throw internalError("cannot .send() more than once");
        }
        this.sent_ = true;
        this.xhr_.open(method, url, true);
        if (headers !== void 0) {
          for (const key in headers) {
            if (headers.hasOwnProperty(key)) {
              this.xhr_.setRequestHeader(key, headers[key].toString());
            }
          }
        }
        if (body !== void 0) {
          this.xhr_.send(body);
        } else {
          this.xhr_.send();
        }
        return this.sendPromise_;
      }
      getErrorCode() {
        if (!this.sent_) {
          throw internalError("cannot .getErrorCode() before sending");
        }
        return this.errorCode_;
      }
      getStatus() {
        if (!this.sent_) {
          throw internalError("cannot .getStatus() before sending");
        }
        try {
          return this.xhr_.status;
        } catch (e) {
          return -1;
        }
      }
      getResponse() {
        if (!this.sent_) {
          throw internalError("cannot .getResponse() before sending");
        }
        return this.xhr_.response;
      }
      getErrorText() {
        if (!this.sent_) {
          throw internalError("cannot .getErrorText() before sending");
        }
        return this.xhr_.statusText;
      }
      /** Aborts the request. */
      abort() {
        this.xhr_.abort();
      }
      getResponseHeader(header) {
        return this.xhr_.getResponseHeader(header);
      }
      addUploadProgressListener(listener) {
        if (this.xhr_.upload != null) {
          this.xhr_.upload.addEventListener("progress", listener);
        }
      }
      removeUploadProgressListener(listener) {
        if (this.xhr_.upload != null) {
          this.xhr_.upload.removeEventListener("progress", listener);
        }
      }
    };
    var XhrTextConnection = class extends XhrConnection {
      initXhr() {
        this.xhr_.responseType = "text";
      }
    };
    function newTextConnection() {
      return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();
    }
    var XhrBytesConnection = class extends XhrConnection {
      initXhr() {
        this.xhr_.responseType = "arraybuffer";
      }
    };
    function newBytesConnection() {
      return new XhrBytesConnection();
    }
    var XhrBlobConnection = class extends XhrConnection {
      initXhr() {
        this.xhr_.responseType = "blob";
      }
    };
    function newBlobConnection() {
      return new XhrBlobConnection();
    }
    var UploadTask = class {
      /**
       * @param ref - The firebaseStorage.Reference object this task came
       *     from, untyped to avoid cyclic dependencies.
       * @param blob - The blob to upload.
       */
      constructor(ref2, blob, metadata = null) {
        this._transferred = 0;
        this._needToFetchStatus = false;
        this._needToFetchMetadata = false;
        this._observers = [];
        this._error = void 0;
        this._uploadUrl = void 0;
        this._request = void 0;
        this._chunkMultiplier = 1;
        this._resolve = void 0;
        this._reject = void 0;
        this._ref = ref2;
        this._blob = blob;
        this._metadata = metadata;
        this._mappings = getMappings();
        this._resumable = this._shouldDoResumable(this._blob);
        this._state = "running";
        this._errorHandler = (error) => {
          this._request = void 0;
          this._chunkMultiplier = 1;
          if (error._codeEquals(exports.StorageErrorCode.CANCELED)) {
            this._needToFetchStatus = true;
            this.completeTransitions_();
          } else {
            const backoffExpired = this.isExponentialBackoffExpired();
            if (isRetryStatusCode(error.status, [])) {
              if (backoffExpired) {
                error = retryLimitExceeded();
              } else {
                this.sleepTime = Math.max(this.sleepTime * 2, DEFAULT_MIN_SLEEP_TIME_MILLIS);
                this._needToFetchStatus = true;
                this.completeTransitions_();
                return;
              }
            }
            this._error = error;
            this._transition(
              "error"
              /* InternalTaskState.ERROR */
            );
          }
        };
        this._metadataErrorHandler = (error) => {
          this._request = void 0;
          if (error._codeEquals(exports.StorageErrorCode.CANCELED)) {
            this.completeTransitions_();
          } else {
            this._error = error;
            this._transition(
              "error"
              /* InternalTaskState.ERROR */
            );
          }
        };
        this.sleepTime = 0;
        this.maxSleepTime = this._ref.storage.maxUploadRetryTime;
        this._promise = new Promise((resolve, reject) => {
          this._resolve = resolve;
          this._reject = reject;
          this._start();
        });
        this._promise.then(null, () => {
        });
      }
      isExponentialBackoffExpired() {
        return this.sleepTime > this.maxSleepTime;
      }
      _makeProgressCallback() {
        const sizeBefore = this._transferred;
        return (loaded) => this._updateProgress(sizeBefore + loaded);
      }
      _shouldDoResumable(blob) {
        return blob.size() > 256 * 1024;
      }
      _start() {
        if (this._state !== "running") {
          return;
        }
        if (this._request !== void 0) {
          return;
        }
        if (this._resumable) {
          if (this._uploadUrl === void 0) {
            this._createResumable();
          } else {
            if (this._needToFetchStatus) {
              this._fetchStatus();
            } else {
              if (this._needToFetchMetadata) {
                this._fetchMetadata();
              } else {
                this.pendingTimeout = setTimeout(() => {
                  this.pendingTimeout = void 0;
                  this._continueUpload();
                }, this.sleepTime);
              }
            }
          }
        } else {
          this._oneShotUpload();
        }
      }
      _resolveToken(callback) {
        Promise.all([
          this._ref.storage._getAuthToken(),
          this._ref.storage._getAppCheckToken()
        ]).then(([authToken, appCheckToken]) => {
          switch (this._state) {
            case "running":
              callback(authToken, appCheckToken);
              break;
            case "canceling":
              this._transition(
                "canceled"
                /* InternalTaskState.CANCELED */
              );
              break;
            case "pausing":
              this._transition(
                "paused"
                /* InternalTaskState.PAUSED */
              );
              break;
          }
        });
      }
      // TODO(andysoto): assert false
      _createResumable() {
        this._resolveToken((authToken, appCheckToken) => {
          const requestInfo = createResumableUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);
          const createRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);
          this._request = createRequest;
          createRequest.getPromise().then((url) => {
            this._request = void 0;
            this._uploadUrl = url;
            this._needToFetchStatus = false;
            this.completeTransitions_();
          }, this._errorHandler);
        });
      }
      _fetchStatus() {
        const url = this._uploadUrl;
        this._resolveToken((authToken, appCheckToken) => {
          const requestInfo = getResumableUploadStatus(this._ref.storage, this._ref._location, url, this._blob);
          const statusRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);
          this._request = statusRequest;
          statusRequest.getPromise().then((status) => {
            status = status;
            this._request = void 0;
            this._updateProgress(status.current);
            this._needToFetchStatus = false;
            if (status.finalized) {
              this._needToFetchMetadata = true;
            }
            this.completeTransitions_();
          }, this._errorHandler);
        });
      }
      _continueUpload() {
        const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;
        const status = new ResumableUploadStatus(this._transferred, this._blob.size());
        const url = this._uploadUrl;
        this._resolveToken((authToken, appCheckToken) => {
          let requestInfo;
          try {
            requestInfo = continueResumableUpload(this._ref._location, this._ref.storage, url, this._blob, chunkSize, this._mappings, status, this._makeProgressCallback());
          } catch (e) {
            this._error = e;
            this._transition(
              "error"
              /* InternalTaskState.ERROR */
            );
            return;
          }
          const uploadRequest = this._ref.storage._makeRequest(
            requestInfo,
            newTextConnection,
            authToken,
            appCheckToken,
            /*retry=*/
            false
            // Upload requests should not be retried as each retry should be preceded by another query request. Which is handled in this file.
          );
          this._request = uploadRequest;
          uploadRequest.getPromise().then((newStatus) => {
            this._increaseMultiplier();
            this._request = void 0;
            this._updateProgress(newStatus.current);
            if (newStatus.finalized) {
              this._metadata = newStatus.metadata;
              this._transition(
                "success"
                /* InternalTaskState.SUCCESS */
              );
            } else {
              this.completeTransitions_();
            }
          }, this._errorHandler);
        });
      }
      _increaseMultiplier() {
        const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;
        if (currentSize * 2 < 32 * 1024 * 1024) {
          this._chunkMultiplier *= 2;
        }
      }
      _fetchMetadata() {
        this._resolveToken((authToken, appCheckToken) => {
          const requestInfo = getMetadata$2(this._ref.storage, this._ref._location, this._mappings);
          const metadataRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);
          this._request = metadataRequest;
          metadataRequest.getPromise().then((metadata) => {
            this._request = void 0;
            this._metadata = metadata;
            this._transition(
              "success"
              /* InternalTaskState.SUCCESS */
            );
          }, this._metadataErrorHandler);
        });
      }
      _oneShotUpload() {
        this._resolveToken((authToken, appCheckToken) => {
          const requestInfo = multipartUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);
          const multipartRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);
          this._request = multipartRequest;
          multipartRequest.getPromise().then((metadata) => {
            this._request = void 0;
            this._metadata = metadata;
            this._updateProgress(this._blob.size());
            this._transition(
              "success"
              /* InternalTaskState.SUCCESS */
            );
          }, this._errorHandler);
        });
      }
      _updateProgress(transferred) {
        const old = this._transferred;
        this._transferred = transferred;
        if (this._transferred !== old) {
          this._notifyObservers();
        }
      }
      _transition(state) {
        if (this._state === state) {
          return;
        }
        switch (state) {
          case "canceling":
          case "pausing":
            this._state = state;
            if (this._request !== void 0) {
              this._request.cancel();
            } else if (this.pendingTimeout) {
              clearTimeout(this.pendingTimeout);
              this.pendingTimeout = void 0;
              this.completeTransitions_();
            }
            break;
          case "running":
            const wasPaused = this._state === "paused";
            this._state = state;
            if (wasPaused) {
              this._notifyObservers();
              this._start();
            }
            break;
          case "paused":
            this._state = state;
            this._notifyObservers();
            break;
          case "canceled":
            this._error = canceled();
            this._state = state;
            this._notifyObservers();
            break;
          case "error":
            this._state = state;
            this._notifyObservers();
            break;
          case "success":
            this._state = state;
            this._notifyObservers();
            break;
        }
      }
      completeTransitions_() {
        switch (this._state) {
          case "pausing":
            this._transition(
              "paused"
              /* InternalTaskState.PAUSED */
            );
            break;
          case "canceling":
            this._transition(
              "canceled"
              /* InternalTaskState.CANCELED */
            );
            break;
          case "running":
            this._start();
            break;
        }
      }
      /**
       * A snapshot of the current task state.
       */
      get snapshot() {
        const externalState = taskStateFromInternalTaskState(this._state);
        return {
          bytesTransferred: this._transferred,
          totalBytes: this._blob.size(),
          state: externalState,
          metadata: this._metadata,
          task: this,
          ref: this._ref
        };
      }
      /**
       * Adds a callback for an event.
       * @param type - The type of event to listen for.
       * @param nextOrObserver -
       *     The `next` function, which gets called for each item in
       *     the event stream, or an observer object with some or all of these three
       *     properties (`next`, `error`, `complete`).
       * @param error - A function that gets called with a `StorageError`
       *     if the event stream ends due to an error.
       * @param completed - A function that gets called if the
       *     event stream ends normally.
       * @returns
       *     If only the event argument is passed, returns a function you can use to
       *     add callbacks (see the examples above). If more than just the event
       *     argument is passed, returns a function you can call to unregister the
       *     callbacks.
       */
      on(type, nextOrObserver, error, completed) {
        const observer = new Observer(nextOrObserver || void 0, error || void 0, completed || void 0);
        this._addObserver(observer);
        return () => {
          this._removeObserver(observer);
        };
      }
      /**
       * This object behaves like a Promise, and resolves with its snapshot data
       * when the upload completes.
       * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.
       * @param onRejected - The rejection callback.
       */
      then(onFulfilled, onRejected) {
        return this._promise.then(onFulfilled, onRejected);
      }
      /**
       * Equivalent to calling `then(null, onRejected)`.
       */
      catch(onRejected) {
        return this.then(null, onRejected);
      }
      /**
       * Adds the given observer.
       */
      _addObserver(observer) {
        this._observers.push(observer);
        this._notifyObserver(observer);
      }
      /**
       * Removes the given observer.
       */
      _removeObserver(observer) {
        const i = this._observers.indexOf(observer);
        if (i !== -1) {
          this._observers.splice(i, 1);
        }
      }
      _notifyObservers() {
        this._finishPromise();
        const observers = this._observers.slice();
        observers.forEach((observer) => {
          this._notifyObserver(observer);
        });
      }
      _finishPromise() {
        if (this._resolve !== void 0) {
          let triggered = true;
          switch (taskStateFromInternalTaskState(this._state)) {
            case TaskState.SUCCESS:
              async(this._resolve.bind(null, this.snapshot))();
              break;
            case TaskState.CANCELED:
            case TaskState.ERROR:
              const toCall = this._reject;
              async(toCall.bind(null, this._error))();
              break;
            default:
              triggered = false;
              break;
          }
          if (triggered) {
            this._resolve = void 0;
            this._reject = void 0;
          }
        }
      }
      _notifyObserver(observer) {
        const externalState = taskStateFromInternalTaskState(this._state);
        switch (externalState) {
          case TaskState.RUNNING:
          case TaskState.PAUSED:
            if (observer.next) {
              async(observer.next.bind(observer, this.snapshot))();
            }
            break;
          case TaskState.SUCCESS:
            if (observer.complete) {
              async(observer.complete.bind(observer))();
            }
            break;
          case TaskState.CANCELED:
          case TaskState.ERROR:
            if (observer.error) {
              async(observer.error.bind(observer, this._error))();
            }
            break;
          default:
            if (observer.error) {
              async(observer.error.bind(observer, this._error))();
            }
        }
      }
      /**
       * Resumes a paused task. Has no effect on a currently running or failed task.
       * @returns True if the operation took effect, false if ignored.
       */
      resume() {
        const valid = this._state === "paused" || this._state === "pausing";
        if (valid) {
          this._transition(
            "running"
            /* InternalTaskState.RUNNING */
          );
        }
        return valid;
      }
      /**
       * Pauses a currently running task. Has no effect on a paused or failed task.
       * @returns True if the operation took effect, false if ignored.
       */
      pause() {
        const valid = this._state === "running";
        if (valid) {
          this._transition(
            "pausing"
            /* InternalTaskState.PAUSING */
          );
        }
        return valid;
      }
      /**
       * Cancels a currently running or paused task. Has no effect on a complete or
       * failed task.
       * @returns True if the operation took effect, false if ignored.
       */
      cancel() {
        const valid = this._state === "running" || this._state === "pausing";
        if (valid) {
          this._transition(
            "canceling"
            /* InternalTaskState.CANCELING */
          );
        }
        return valid;
      }
    };
    var Reference = class _Reference {
      constructor(_service, location) {
        this._service = _service;
        if (location instanceof Location) {
          this._location = location;
        } else {
          this._location = Location.makeFromUrl(location, _service.host);
        }
      }
      /**
       * Returns the URL for the bucket and path this object references,
       *     in the form gs://<bucket>/<object-path>
       * @override
       */
      toString() {
        return "gs://" + this._location.bucket + "/" + this._location.path;
      }
      _newRef(service, location) {
        return new _Reference(service, location);
      }
      /**
       * A reference to the root of this object's bucket.
       */
      get root() {
        const location = new Location(this._location.bucket, "");
        return this._newRef(this._service, location);
      }
      /**
       * The name of the bucket containing this reference's object.
       */
      get bucket() {
        return this._location.bucket;
      }
      /**
       * The full path of this object.
       */
      get fullPath() {
        return this._location.path;
      }
      /**
       * The short name of this object, which is the last component of the full path.
       * For example, if fullPath is 'full/path/image.png', name is 'image.png'.
       */
      get name() {
        return lastComponent(this._location.path);
      }
      /**
       * The `StorageService` instance this `StorageReference` is associated with.
       */
      get storage() {
        return this._service;
      }
      /**
       * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if
       * this reference is the root.
       */
      get parent() {
        const newPath = parent(this._location.path);
        if (newPath === null) {
          return null;
        }
        const location = new Location(this._location.bucket, newPath);
        return new _Reference(this._service, location);
      }
      /**
       * Utility function to throw an error in methods that do not accept a root reference.
       */
      _throwIfRoot(name2) {
        if (this._location.path === "") {
          throw invalidRootOperation(name2);
        }
      }
    };
    function getBytesInternal(ref2, maxDownloadSizeBytes) {
      ref2._throwIfRoot("getBytes");
      const requestInfo = getBytes$1(ref2.storage, ref2._location, maxDownloadSizeBytes);
      return ref2.storage.makeRequestWithTokens(requestInfo, newBytesConnection).then((bytes) => maxDownloadSizeBytes !== void 0 ? (
        // GCS may not honor the Range header for small files
        bytes.slice(0, maxDownloadSizeBytes)
      ) : bytes);
    }
    function getBlobInternal(ref2, maxDownloadSizeBytes) {
      ref2._throwIfRoot("getBlob");
      const requestInfo = getBytes$1(ref2.storage, ref2._location, maxDownloadSizeBytes);
      return ref2.storage.makeRequestWithTokens(requestInfo, newBlobConnection).then((blob) => maxDownloadSizeBytes !== void 0 ? (
        // GCS may not honor the Range header for small files
        blob.slice(0, maxDownloadSizeBytes)
      ) : blob);
    }
    function uploadBytes$1(ref2, data, metadata) {
      ref2._throwIfRoot("uploadBytes");
      const requestInfo = multipartUpload(ref2.storage, ref2._location, getMappings(), new FbsBlob(data, true), metadata);
      return ref2.storage.makeRequestWithTokens(requestInfo, newTextConnection).then((finalMetadata) => {
        return {
          metadata: finalMetadata,
          ref: ref2
        };
      });
    }
    function uploadBytesResumable$1(ref2, data, metadata) {
      ref2._throwIfRoot("uploadBytesResumable");
      return new UploadTask(ref2, new FbsBlob(data), metadata);
    }
    function uploadString$1(ref2, value, format = StringFormat.RAW, metadata) {
      ref2._throwIfRoot("uploadString");
      const data = dataFromString(format, value);
      const metadataClone = Object.assign({}, metadata);
      if (metadataClone["contentType"] == null && data.contentType != null) {
        metadataClone["contentType"] = data.contentType;
      }
      return uploadBytes$1(ref2, data.data, metadataClone);
    }
    function listAll$1(ref2) {
      const accumulator = {
        prefixes: [],
        items: []
      };
      return listAllHelper(ref2, accumulator).then(() => accumulator);
    }
    async function listAllHelper(ref2, accumulator, pageToken) {
      const opt = {
        // maxResults is 1000 by default.
        pageToken
      };
      const nextPage = await list$1(ref2, opt);
      accumulator.prefixes.push(...nextPage.prefixes);
      accumulator.items.push(...nextPage.items);
      if (nextPage.nextPageToken != null) {
        await listAllHelper(ref2, accumulator, nextPage.nextPageToken);
      }
    }
    function list$1(ref2, options) {
      if (options != null) {
        if (typeof options.maxResults === "number") {
          validateNumber(
            "options.maxResults",
            /* minValue= */
            1,
            /* maxValue= */
            1e3,
            options.maxResults
          );
        }
      }
      const op = options || {};
      const requestInfo = list$2(
        ref2.storage,
        ref2._location,
        /*delimiter= */
        "/",
        op.pageToken,
        op.maxResults
      );
      return ref2.storage.makeRequestWithTokens(requestInfo, newTextConnection);
    }
    function getMetadata$1(ref2) {
      ref2._throwIfRoot("getMetadata");
      const requestInfo = getMetadata$2(ref2.storage, ref2._location, getMappings());
      return ref2.storage.makeRequestWithTokens(requestInfo, newTextConnection);
    }
    function updateMetadata$1(ref2, metadata) {
      ref2._throwIfRoot("updateMetadata");
      const requestInfo = updateMetadata$2(ref2.storage, ref2._location, metadata, getMappings());
      return ref2.storage.makeRequestWithTokens(requestInfo, newTextConnection);
    }
    function getDownloadURL$1(ref2) {
      ref2._throwIfRoot("getDownloadURL");
      const requestInfo = getDownloadUrl(ref2.storage, ref2._location, getMappings());
      return ref2.storage.makeRequestWithTokens(requestInfo, newTextConnection).then((url) => {
        if (url === null) {
          throw noDownloadURL();
        }
        return url;
      });
    }
    function deleteObject$1(ref2) {
      ref2._throwIfRoot("deleteObject");
      const requestInfo = deleteObject$2(ref2.storage, ref2._location);
      return ref2.storage.makeRequestWithTokens(requestInfo, newTextConnection);
    }
    function _getChild$1(ref2, childPath) {
      const newPath = child(ref2._location.path, childPath);
      const location = new Location(ref2._location.bucket, newPath);
      return new Reference(ref2.storage, location);
    }
    function isUrl(path) {
      return /^[A-Za-z]+:\/\//.test(path);
    }
    function refFromURL(service, url) {
      return new Reference(service, url);
    }
    function refFromPath(ref2, path) {
      if (ref2 instanceof FirebaseStorageImpl) {
        const service = ref2;
        if (service._bucket == null) {
          throw noDefaultBucket();
        }
        const reference = new Reference(service, service._bucket);
        if (path != null) {
          return refFromPath(reference, path);
        } else {
          return reference;
        }
      } else {
        if (path !== void 0) {
          return _getChild$1(ref2, path);
        } else {
          return ref2;
        }
      }
    }
    function ref$1(serviceOrRef, pathOrUrl) {
      if (pathOrUrl && isUrl(pathOrUrl)) {
        if (serviceOrRef instanceof FirebaseStorageImpl) {
          return refFromURL(serviceOrRef, pathOrUrl);
        } else {
          throw invalidArgument("To use ref(service, url), the first argument must be a Storage instance.");
        }
      } else {
        return refFromPath(serviceOrRef, pathOrUrl);
      }
    }
    function extractBucket(host, config) {
      const bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];
      if (bucketString == null) {
        return null;
      }
      return Location.makeFromBucketSpec(bucketString, host);
    }
    function connectStorageEmulator$1(storage, host, port, options = {}) {
      storage.host = `${host}:${port}`;
      storage._protocol = "http";
      const { mockUserToken } = options;
      if (mockUserToken) {
        storage._overrideAuthToken = typeof mockUserToken === "string" ? mockUserToken : util.createMockUserToken(mockUserToken, storage.app.options.projectId);
      }
    }
    var FirebaseStorageImpl = class {
      constructor(app2, _authProvider, _appCheckProvider, _url, _firebaseVersion) {
        this.app = app2;
        this._authProvider = _authProvider;
        this._appCheckProvider = _appCheckProvider;
        this._url = _url;
        this._firebaseVersion = _firebaseVersion;
        this._bucket = null;
        this._host = DEFAULT_HOST;
        this._protocol = "https";
        this._appId = null;
        this._deleted = false;
        this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;
        this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;
        this._requests = /* @__PURE__ */ new Set();
        if (_url != null) {
          this._bucket = Location.makeFromBucketSpec(_url, this._host);
        } else {
          this._bucket = extractBucket(this._host, this.app.options);
        }
      }
      /**
       * The host string for this service, in the form of `host` or
       * `host:port`.
       */
      get host() {
        return this._host;
      }
      set host(host) {
        this._host = host;
        if (this._url != null) {
          this._bucket = Location.makeFromBucketSpec(this._url, host);
        } else {
          this._bucket = extractBucket(host, this.app.options);
        }
      }
      /**
       * The maximum time to retry uploads in milliseconds.
       */
      get maxUploadRetryTime() {
        return this._maxUploadRetryTime;
      }
      set maxUploadRetryTime(time) {
        validateNumber(
          "time",
          /* minValue=*/
          0,
          /* maxValue= */
          Number.POSITIVE_INFINITY,
          time
        );
        this._maxUploadRetryTime = time;
      }
      /**
       * The maximum time to retry operations other than uploads or downloads in
       * milliseconds.
       */
      get maxOperationRetryTime() {
        return this._maxOperationRetryTime;
      }
      set maxOperationRetryTime(time) {
        validateNumber(
          "time",
          /* minValue=*/
          0,
          /* maxValue= */
          Number.POSITIVE_INFINITY,
          time
        );
        this._maxOperationRetryTime = time;
      }
      async _getAuthToken() {
        if (this._overrideAuthToken) {
          return this._overrideAuthToken;
        }
        const auth = this._authProvider.getImmediate({ optional: true });
        if (auth) {
          const tokenData = await auth.getToken();
          if (tokenData !== null) {
            return tokenData.accessToken;
          }
        }
        return null;
      }
      async _getAppCheckToken() {
        const appCheck = this._appCheckProvider.getImmediate({ optional: true });
        if (appCheck) {
          const result = await appCheck.getToken();
          return result.token;
        }
        return null;
      }
      /**
       * Stop running requests and prevent more from being created.
       */
      _delete() {
        if (!this._deleted) {
          this._deleted = true;
          this._requests.forEach((request) => request.cancel());
          this._requests.clear();
        }
        return Promise.resolve();
      }
      /**
       * Returns a new firebaseStorage.Reference object referencing this StorageService
       * at the given Location.
       */
      _makeStorageReference(loc) {
        return new Reference(this, loc);
      }
      /**
       * @param requestInfo - HTTP RequestInfo object
       * @param authToken - Firebase auth token
       */
      _makeRequest(requestInfo, requestFactory, authToken, appCheckToken, retry = true) {
        if (!this._deleted) {
          const request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, requestFactory, this._firebaseVersion, retry);
          this._requests.add(request);
          request.getPromise().then(() => this._requests.delete(request), () => this._requests.delete(request));
          return request;
        } else {
          return new FailRequest(appDeleted());
        }
      }
      async makeRequestWithTokens(requestInfo, requestFactory) {
        const [authToken, appCheckToken] = await Promise.all([
          this._getAuthToken(),
          this._getAppCheckToken()
        ]);
        return this._makeRequest(requestInfo, requestFactory, authToken, appCheckToken).getPromise();
      }
    };
    var name = "@firebase/storage";
    var version = "0.11.2";
    var STORAGE_TYPE = "storage";
    function getBytes(ref2, maxDownloadSizeBytes) {
      ref2 = util.getModularInstance(ref2);
      return getBytesInternal(ref2, maxDownloadSizeBytes);
    }
    function uploadBytes(ref2, data, metadata) {
      ref2 = util.getModularInstance(ref2);
      return uploadBytes$1(ref2, data, metadata);
    }
    function uploadString(ref2, value, format, metadata) {
      ref2 = util.getModularInstance(ref2);
      return uploadString$1(ref2, value, format, metadata);
    }
    function uploadBytesResumable(ref2, data, metadata) {
      ref2 = util.getModularInstance(ref2);
      return uploadBytesResumable$1(ref2, data, metadata);
    }
    function getMetadata(ref2) {
      ref2 = util.getModularInstance(ref2);
      return getMetadata$1(ref2);
    }
    function updateMetadata(ref2, metadata) {
      ref2 = util.getModularInstance(ref2);
      return updateMetadata$1(ref2, metadata);
    }
    function list(ref2, options) {
      ref2 = util.getModularInstance(ref2);
      return list$1(ref2, options);
    }
    function listAll(ref2) {
      ref2 = util.getModularInstance(ref2);
      return listAll$1(ref2);
    }
    function getDownloadURL(ref2) {
      ref2 = util.getModularInstance(ref2);
      return getDownloadURL$1(ref2);
    }
    function deleteObject(ref2) {
      ref2 = util.getModularInstance(ref2);
      return deleteObject$1(ref2);
    }
    function ref(serviceOrRef, pathOrUrl) {
      serviceOrRef = util.getModularInstance(serviceOrRef);
      return ref$1(serviceOrRef, pathOrUrl);
    }
    function _getChild(ref2, childPath) {
      return _getChild$1(ref2, childPath);
    }
    function getStorage(app$1 = app.getApp(), bucketUrl) {
      app$1 = util.getModularInstance(app$1);
      const storageProvider = app._getProvider(app$1, STORAGE_TYPE);
      const storageInstance = storageProvider.getImmediate({
        identifier: bucketUrl
      });
      const emulator = util.getDefaultEmulatorHostnameAndPort("storage");
      if (emulator) {
        connectStorageEmulator(storageInstance, ...emulator);
      }
      return storageInstance;
    }
    function connectStorageEmulator(storage, host, port, options = {}) {
      connectStorageEmulator$1(storage, host, port, options);
    }
    function getBlob(ref2, maxDownloadSizeBytes) {
      ref2 = util.getModularInstance(ref2);
      return getBlobInternal(ref2, maxDownloadSizeBytes);
    }
    function getStream(ref2, maxDownloadSizeBytes) {
      throw new Error("getStream() is only supported by NodeJS builds");
    }
    function factory(container, { instanceIdentifier: url }) {
      const app$1 = container.getProvider("app").getImmediate();
      const authProvider = container.getProvider("auth-internal");
      const appCheckProvider = container.getProvider("app-check-internal");
      return new FirebaseStorageImpl(app$1, authProvider, appCheckProvider, url, app.SDK_VERSION);
    }
    function registerStorage() {
      app._registerComponent(new component.Component(
        STORAGE_TYPE,
        factory,
        "PUBLIC"
        /* ComponentType.PUBLIC */
      ).setMultipleInstances(true));
      app.registerVersion(name, version, "");
      app.registerVersion(name, version, "cjs2017");
    }
    registerStorage();
    exports.StorageError = StorageError;
    exports.StringFormat = StringFormat;
    exports._FbsBlob = FbsBlob;
    exports._Location = Location;
    exports._TaskEvent = TaskEvent;
    exports._TaskState = TaskState;
    exports._UploadTask = UploadTask;
    exports._dataFromString = dataFromString;
    exports._getChild = _getChild;
    exports._invalidArgument = invalidArgument;
    exports._invalidRootOperation = invalidRootOperation;
    exports.connectStorageEmulator = connectStorageEmulator;
    exports.deleteObject = deleteObject;
    exports.getBlob = getBlob;
    exports.getBytes = getBytes;
    exports.getDownloadURL = getDownloadURL;
    exports.getMetadata = getMetadata;
    exports.getStorage = getStorage;
    exports.getStream = getStream;
    exports.list = list;
    exports.listAll = listAll;
    exports.ref = ref;
    exports.updateMetadata = updateMetadata;
    exports.uploadBytes = uploadBytes;
    exports.uploadBytesResumable = uploadBytesResumable;
    exports.uploadString = uploadString;
  }
});

// node_modules/firebase/storage/dist/index.cjs.js
var require_index_cjs6 = __commonJS({
  "node_modules/firebase/storage/dist/index.cjs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var storage = require_index_cjs5();
    Object.keys(storage).forEach(function(k) {
      if (k !== "default" && !exports.hasOwnProperty(k))
        Object.defineProperty(exports, k, {
          enumerable: true,
          get: function() {
            return storage[k];
          }
        });
    });
  }
});

// node_modules/path-browserify/index.js
var require_path_browserify = __commonJS({
  "node_modules/path-browserify/index.js"(exports, module) {
    "use strict";
    function assertPath(path) {
      if (typeof path !== "string") {
        throw new TypeError("Path must be a string. Received " + JSON.stringify(path));
      }
    }
    function normalizeStringPosix(path, allowAboveRoot) {
      var res = "";
      var lastSegmentLength = 0;
      var lastSlash = -1;
      var dots = 0;
      var code;
      for (var i = 0; i <= path.length; ++i) {
        if (i < path.length)
          code = path.charCodeAt(i);
        else if (code === 47)
          break;
        else
          code = 47;
        if (code === 47) {
          if (lastSlash === i - 1 || dots === 1) {
          } else if (lastSlash !== i - 1 && dots === 2) {
            if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
              if (res.length > 2) {
                var lastSlashIndex = res.lastIndexOf("/");
                if (lastSlashIndex !== res.length - 1) {
                  if (lastSlashIndex === -1) {
                    res = "";
                    lastSegmentLength = 0;
                  } else {
                    res = res.slice(0, lastSlashIndex);
                    lastSegmentLength = res.length - 1 - res.lastIndexOf("/");
                  }
                  lastSlash = i;
                  dots = 0;
                  continue;
                }
              } else if (res.length === 2 || res.length === 1) {
                res = "";
                lastSegmentLength = 0;
                lastSlash = i;
                dots = 0;
                continue;
              }
            }
            if (allowAboveRoot) {
              if (res.length > 0)
                res += "/..";
              else
                res = "..";
              lastSegmentLength = 2;
            }
          } else {
            if (res.length > 0)
              res += "/" + path.slice(lastSlash + 1, i);
            else
              res = path.slice(lastSlash + 1, i);
            lastSegmentLength = i - lastSlash - 1;
          }
          lastSlash = i;
          dots = 0;
        } else if (code === 46 && dots !== -1) {
          ++dots;
        } else {
          dots = -1;
        }
      }
      return res;
    }
    function _format(sep, pathObject) {
      var dir = pathObject.dir || pathObject.root;
      var base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
      if (!dir) {
        return base;
      }
      if (dir === pathObject.root) {
        return dir + base;
      }
      return dir + sep + base;
    }
    var posix = {
      // path.resolve([from ...], to)
      resolve: function resolve() {
        var resolvedPath = "";
        var resolvedAbsolute = false;
        var cwd;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path;
          if (i >= 0)
            path = arguments[i];
          else {
            if (cwd === void 0)
              cwd = process.cwd();
            path = cwd;
          }
          assertPath(path);
          if (path.length === 0) {
            continue;
          }
          resolvedPath = path + "/" + resolvedPath;
          resolvedAbsolute = path.charCodeAt(0) === 47;
        }
        resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);
        if (resolvedAbsolute) {
          if (resolvedPath.length > 0)
            return "/" + resolvedPath;
          else
            return "/";
        } else if (resolvedPath.length > 0) {
          return resolvedPath;
        } else {
          return ".";
        }
      },
      normalize: function normalize(path) {
        assertPath(path);
        if (path.length === 0)
          return ".";
        var isAbsolute = path.charCodeAt(0) === 47;
        var trailingSeparator = path.charCodeAt(path.length - 1) === 47;
        path = normalizeStringPosix(path, !isAbsolute);
        if (path.length === 0 && !isAbsolute)
          path = ".";
        if (path.length > 0 && trailingSeparator)
          path += "/";
        if (isAbsolute)
          return "/" + path;
        return path;
      },
      isAbsolute: function isAbsolute(path) {
        assertPath(path);
        return path.length > 0 && path.charCodeAt(0) === 47;
      },
      join: function join() {
        if (arguments.length === 0)
          return ".";
        var joined;
        for (var i = 0; i < arguments.length; ++i) {
          var arg = arguments[i];
          assertPath(arg);
          if (arg.length > 0) {
            if (joined === void 0)
              joined = arg;
            else
              joined += "/" + arg;
          }
        }
        if (joined === void 0)
          return ".";
        return posix.normalize(joined);
      },
      relative: function relative(from, to) {
        assertPath(from);
        assertPath(to);
        if (from === to)
          return "";
        from = posix.resolve(from);
        to = posix.resolve(to);
        if (from === to)
          return "";
        var fromStart = 1;
        for (; fromStart < from.length; ++fromStart) {
          if (from.charCodeAt(fromStart) !== 47)
            break;
        }
        var fromEnd = from.length;
        var fromLen = fromEnd - fromStart;
        var toStart = 1;
        for (; toStart < to.length; ++toStart) {
          if (to.charCodeAt(toStart) !== 47)
            break;
        }
        var toEnd = to.length;
        var toLen = toEnd - toStart;
        var length = fromLen < toLen ? fromLen : toLen;
        var lastCommonSep = -1;
        var i = 0;
        for (; i <= length; ++i) {
          if (i === length) {
            if (toLen > length) {
              if (to.charCodeAt(toStart + i) === 47) {
                return to.slice(toStart + i + 1);
              } else if (i === 0) {
                return to.slice(toStart + i);
              }
            } else if (fromLen > length) {
              if (from.charCodeAt(fromStart + i) === 47) {
                lastCommonSep = i;
              } else if (i === 0) {
                lastCommonSep = 0;
              }
            }
            break;
          }
          var fromCode = from.charCodeAt(fromStart + i);
          var toCode = to.charCodeAt(toStart + i);
          if (fromCode !== toCode)
            break;
          else if (fromCode === 47)
            lastCommonSep = i;
        }
        var out = "";
        for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
          if (i === fromEnd || from.charCodeAt(i) === 47) {
            if (out.length === 0)
              out += "..";
            else
              out += "/..";
          }
        }
        if (out.length > 0)
          return out + to.slice(toStart + lastCommonSep);
        else {
          toStart += lastCommonSep;
          if (to.charCodeAt(toStart) === 47)
            ++toStart;
          return to.slice(toStart);
        }
      },
      _makeLong: function _makeLong(path) {
        return path;
      },
      dirname: function dirname(path) {
        assertPath(path);
        if (path.length === 0)
          return ".";
        var code = path.charCodeAt(0);
        var hasRoot = code === 47;
        var end = -1;
        var matchedSlash = true;
        for (var i = path.length - 1; i >= 1; --i) {
          code = path.charCodeAt(i);
          if (code === 47) {
            if (!matchedSlash) {
              end = i;
              break;
            }
          } else {
            matchedSlash = false;
          }
        }
        if (end === -1)
          return hasRoot ? "/" : ".";
        if (hasRoot && end === 1)
          return "//";
        return path.slice(0, end);
      },
      basename: function basename(path, ext) {
        if (ext !== void 0 && typeof ext !== "string")
          throw new TypeError('"ext" argument must be a string');
        assertPath(path);
        var start = 0;
        var end = -1;
        var matchedSlash = true;
        var i;
        if (ext !== void 0 && ext.length > 0 && ext.length <= path.length) {
          if (ext.length === path.length && ext === path)
            return "";
          var extIdx = ext.length - 1;
          var firstNonSlashEnd = -1;
          for (i = path.length - 1; i >= 0; --i) {
            var code = path.charCodeAt(i);
            if (code === 47) {
              if (!matchedSlash) {
                start = i + 1;
                break;
              }
            } else {
              if (firstNonSlashEnd === -1) {
                matchedSlash = false;
                firstNonSlashEnd = i + 1;
              }
              if (extIdx >= 0) {
                if (code === ext.charCodeAt(extIdx)) {
                  if (--extIdx === -1) {
                    end = i;
                  }
                } else {
                  extIdx = -1;
                  end = firstNonSlashEnd;
                }
              }
            }
          }
          if (start === end)
            end = firstNonSlashEnd;
          else if (end === -1)
            end = path.length;
          return path.slice(start, end);
        } else {
          for (i = path.length - 1; i >= 0; --i) {
            if (path.charCodeAt(i) === 47) {
              if (!matchedSlash) {
                start = i + 1;
                break;
              }
            } else if (end === -1) {
              matchedSlash = false;
              end = i + 1;
            }
          }
          if (end === -1)
            return "";
          return path.slice(start, end);
        }
      },
      extname: function extname(path) {
        assertPath(path);
        var startDot = -1;
        var startPart = 0;
        var end = -1;
        var matchedSlash = true;
        var preDotState = 0;
        for (var i = path.length - 1; i >= 0; --i) {
          var code = path.charCodeAt(i);
          if (code === 47) {
            if (!matchedSlash) {
              startPart = i + 1;
              break;
            }
            continue;
          }
          if (end === -1) {
            matchedSlash = false;
            end = i + 1;
          }
          if (code === 46) {
            if (startDot === -1)
              startDot = i;
            else if (preDotState !== 1)
              preDotState = 1;
          } else if (startDot !== -1) {
            preDotState = -1;
          }
        }
        if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
        preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
          return "";
        }
        return path.slice(startDot, end);
      },
      format: function format(pathObject) {
        if (pathObject === null || typeof pathObject !== "object") {
          throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
        }
        return _format("/", pathObject);
      },
      parse: function parse(path) {
        assertPath(path);
        var ret = { root: "", dir: "", base: "", ext: "", name: "" };
        if (path.length === 0)
          return ret;
        var code = path.charCodeAt(0);
        var isAbsolute = code === 47;
        var start;
        if (isAbsolute) {
          ret.root = "/";
          start = 1;
        } else {
          start = 0;
        }
        var startDot = -1;
        var startPart = 0;
        var end = -1;
        var matchedSlash = true;
        var i = path.length - 1;
        var preDotState = 0;
        for (; i >= start; --i) {
          code = path.charCodeAt(i);
          if (code === 47) {
            if (!matchedSlash) {
              startPart = i + 1;
              break;
            }
            continue;
          }
          if (end === -1) {
            matchedSlash = false;
            end = i + 1;
          }
          if (code === 46) {
            if (startDot === -1)
              startDot = i;
            else if (preDotState !== 1)
              preDotState = 1;
          } else if (startDot !== -1) {
            preDotState = -1;
          }
        }
        if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
        preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
          if (end !== -1) {
            if (startPart === 0 && isAbsolute)
              ret.base = ret.name = path.slice(1, end);
            else
              ret.base = ret.name = path.slice(startPart, end);
          }
        } else {
          if (startPart === 0 && isAbsolute) {
            ret.name = path.slice(1, startDot);
            ret.base = path.slice(1, end);
          } else {
            ret.name = path.slice(startPart, startDot);
            ret.base = path.slice(startPart, end);
          }
          ret.ext = path.slice(startDot, end);
        }
        if (startPart > 0)
          ret.dir = path.slice(0, startPart - 1);
        else if (isAbsolute)
          ret.dir = "/";
        return ret;
      },
      sep: "/",
      delimiter: ":",
      win32: null,
      posix: null
    };
    posix.posix = posix;
    module.exports = posix;
  }
});

// node_modules/firebase/app/dist/index.cjs.js
var require_index_cjs7 = __commonJS({
  "node_modules/firebase/app/dist/index.cjs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var app = require_index_cjs4();
    var name = "firebase";
    var version = "9.23.0";
    app.registerVersion(name, version, "app");
    Object.keys(app).forEach(function(k) {
      if (k !== "default" && !exports.hasOwnProperty(k))
        Object.defineProperty(exports, k, {
          enumerable: true,
          get: function() {
            return app[k];
          }
        });
    });
  }
});

// node_modules/@firebase/auth/dist/browser-cjs/index-5ca0aadd.js
var require_index_5ca0aadd = __commonJS({
  "node_modules/@firebase/auth/dist/browser-cjs/index-5ca0aadd.js"(exports) {
    "use strict";
    var util = require_index_cjs();
    var app = require_index_cjs4();
    var tslib = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var logger = require_index_cjs3();
    var component = require_index_cjs2();
    var FactorId = {
      /** Phone as second factor */
      PHONE: "phone",
      TOTP: "totp"
    };
    var ProviderId = {
      /** Facebook provider ID */
      FACEBOOK: "facebook.com",
      /** GitHub provider ID */
      GITHUB: "github.com",
      /** Google provider ID */
      GOOGLE: "google.com",
      /** Password provider */
      PASSWORD: "password",
      /** Phone provider */
      PHONE: "phone",
      /** Twitter provider ID */
      TWITTER: "twitter.com"
    };
    var SignInMethod = {
      /** Email link sign in method */
      EMAIL_LINK: "emailLink",
      /** Email/password sign in method */
      EMAIL_PASSWORD: "password",
      /** Facebook sign in method */
      FACEBOOK: "facebook.com",
      /** GitHub sign in method */
      GITHUB: "github.com",
      /** Google sign in method */
      GOOGLE: "google.com",
      /** Phone sign in method */
      PHONE: "phone",
      /** Twitter sign in method */
      TWITTER: "twitter.com"
    };
    var OperationType = {
      /** Operation involving linking an additional provider to an already signed-in user. */
      LINK: "link",
      /** Operation involving using a provider to reauthenticate an already signed-in user. */
      REAUTHENTICATE: "reauthenticate",
      /** Operation involving signing in a user. */
      SIGN_IN: "signIn"
    };
    var ActionCodeOperation = {
      /** The email link sign-in action. */
      EMAIL_SIGNIN: "EMAIL_SIGNIN",
      /** The password reset action. */
      PASSWORD_RESET: "PASSWORD_RESET",
      /** The email revocation action. */
      RECOVER_EMAIL: "RECOVER_EMAIL",
      /** The revert second factor addition email action. */
      REVERT_SECOND_FACTOR_ADDITION: "REVERT_SECOND_FACTOR_ADDITION",
      /** The revert second factor addition email action. */
      VERIFY_AND_CHANGE_EMAIL: "VERIFY_AND_CHANGE_EMAIL",
      /** The email verification action. */
      VERIFY_EMAIL: "VERIFY_EMAIL"
    };
    function _debugErrorMap() {
      return {
        [
          "admin-restricted-operation"
          /* AuthErrorCode.ADMIN_ONLY_OPERATION */
        ]: "This operation is restricted to administrators only.",
        [
          "argument-error"
          /* AuthErrorCode.ARGUMENT_ERROR */
        ]: "",
        [
          "app-not-authorized"
          /* AuthErrorCode.APP_NOT_AUTHORIZED */
        ]: "This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.",
        [
          "app-not-installed"
          /* AuthErrorCode.APP_NOT_INSTALLED */
        ]: "The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.",
        [
          "captcha-check-failed"
          /* AuthErrorCode.CAPTCHA_CHECK_FAILED */
        ]: "The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.",
        [
          "code-expired"
          /* AuthErrorCode.CODE_EXPIRED */
        ]: "The SMS code has expired. Please re-send the verification code to try again.",
        [
          "cordova-not-ready"
          /* AuthErrorCode.CORDOVA_NOT_READY */
        ]: "Cordova framework is not ready.",
        [
          "cors-unsupported"
          /* AuthErrorCode.CORS_UNSUPPORTED */
        ]: "This browser is not supported.",
        [
          "credential-already-in-use"
          /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */
        ]: "This credential is already associated with a different user account.",
        [
          "custom-token-mismatch"
          /* AuthErrorCode.CREDENTIAL_MISMATCH */
        ]: "The custom token corresponds to a different audience.",
        [
          "requires-recent-login"
          /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */
        ]: "This operation is sensitive and requires recent authentication. Log in again before retrying this request.",
        [
          "dependent-sdk-initialized-before-auth"
          /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */
        ]: "Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK.",
        [
          "dynamic-link-not-activated"
          /* AuthErrorCode.DYNAMIC_LINK_NOT_ACTIVATED */
        ]: "Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.",
        [
          "email-change-needs-verification"
          /* AuthErrorCode.EMAIL_CHANGE_NEEDS_VERIFICATION */
        ]: "Multi-factor users must always have a verified email.",
        [
          "email-already-in-use"
          /* AuthErrorCode.EMAIL_EXISTS */
        ]: "The email address is already in use by another account.",
        [
          "emulator-config-failed"
          /* AuthErrorCode.EMULATOR_CONFIG_FAILED */
        ]: 'Auth instance has already been used to make a network call. Auth can no longer be configured to use the emulator. Try calling "connectAuthEmulator()" sooner.',
        [
          "expired-action-code"
          /* AuthErrorCode.EXPIRED_OOB_CODE */
        ]: "The action code has expired.",
        [
          "cancelled-popup-request"
          /* AuthErrorCode.EXPIRED_POPUP_REQUEST */
        ]: "This operation has been cancelled due to another conflicting popup being opened.",
        [
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        ]: "An internal AuthError has occurred.",
        [
          "invalid-app-credential"
          /* AuthErrorCode.INVALID_APP_CREDENTIAL */
        ]: "The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.",
        [
          "invalid-app-id"
          /* AuthErrorCode.INVALID_APP_ID */
        ]: "The mobile app identifier is not registed for the current project.",
        [
          "invalid-user-token"
          /* AuthErrorCode.INVALID_AUTH */
        ]: "This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.",
        [
          "invalid-auth-event"
          /* AuthErrorCode.INVALID_AUTH_EVENT */
        ]: "An internal AuthError has occurred.",
        [
          "invalid-verification-code"
          /* AuthErrorCode.INVALID_CODE */
        ]: "The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure to use the verification code provided by the user.",
        [
          "invalid-continue-uri"
          /* AuthErrorCode.INVALID_CONTINUE_URI */
        ]: "The continue URL provided in the request is invalid.",
        [
          "invalid-cordova-configuration"
          /* AuthErrorCode.INVALID_CORDOVA_CONFIGURATION */
        ]: "The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.",
        [
          "invalid-custom-token"
          /* AuthErrorCode.INVALID_CUSTOM_TOKEN */
        ]: "The custom token format is incorrect. Please check the documentation.",
        [
          "invalid-dynamic-link-domain"
          /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */
        ]: "The provided dynamic link domain is not configured or authorized for the current project.",
        [
          "invalid-email"
          /* AuthErrorCode.INVALID_EMAIL */
        ]: "The email address is badly formatted.",
        [
          "invalid-emulator-scheme"
          /* AuthErrorCode.INVALID_EMULATOR_SCHEME */
        ]: "Emulator URL must start with a valid scheme (http:// or https://).",
        [
          "invalid-api-key"
          /* AuthErrorCode.INVALID_API_KEY */
        ]: "Your API key is invalid, please check you have copied it correctly.",
        [
          "invalid-cert-hash"
          /* AuthErrorCode.INVALID_CERT_HASH */
        ]: "The SHA-1 certificate hash provided is invalid.",
        [
          "invalid-credential"
          /* AuthErrorCode.INVALID_IDP_RESPONSE */
        ]: "The supplied auth credential is malformed or has expired.",
        [
          "invalid-message-payload"
          /* AuthErrorCode.INVALID_MESSAGE_PAYLOAD */
        ]: "The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.",
        [
          "invalid-multi-factor-session"
          /* AuthErrorCode.INVALID_MFA_SESSION */
        ]: "The request does not contain a valid proof of first factor successful sign-in.",
        [
          "invalid-oauth-provider"
          /* AuthErrorCode.INVALID_OAUTH_PROVIDER */
        ]: "EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.",
        [
          "invalid-oauth-client-id"
          /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */
        ]: "The OAuth client ID provided is either invalid or does not match the specified API key.",
        [
          "unauthorized-domain"
          /* AuthErrorCode.INVALID_ORIGIN */
        ]: "This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.",
        [
          "invalid-action-code"
          /* AuthErrorCode.INVALID_OOB_CODE */
        ]: "The action code is invalid. This can happen if the code is malformed, expired, or has already been used.",
        [
          "wrong-password"
          /* AuthErrorCode.INVALID_PASSWORD */
        ]: "The password is invalid or the user does not have a password.",
        [
          "invalid-persistence-type"
          /* AuthErrorCode.INVALID_PERSISTENCE */
        ]: "The specified persistence type is invalid. It can only be local, session or none.",
        [
          "invalid-phone-number"
          /* AuthErrorCode.INVALID_PHONE_NUMBER */
        ]: "The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].",
        [
          "invalid-provider-id"
          /* AuthErrorCode.INVALID_PROVIDER_ID */
        ]: "The specified provider ID is invalid.",
        [
          "invalid-recipient-email"
          /* AuthErrorCode.INVALID_RECIPIENT_EMAIL */
        ]: "The email corresponding to this action failed to send as the provided recipient email address is invalid.",
        [
          "invalid-sender"
          /* AuthErrorCode.INVALID_SENDER */
        ]: "The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.",
        [
          "invalid-verification-id"
          /* AuthErrorCode.INVALID_SESSION_INFO */
        ]: "The verification ID used to create the phone auth credential is invalid.",
        [
          "invalid-tenant-id"
          /* AuthErrorCode.INVALID_TENANT_ID */
        ]: "The Auth instance's tenant ID is invalid.",
        [
          "login-blocked"
          /* AuthErrorCode.LOGIN_BLOCKED */
        ]: "Login blocked by user-provided method: {$originalMessage}",
        [
          "missing-android-pkg-name"
          /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */
        ]: "An Android Package Name must be provided if the Android App is required to be installed.",
        [
          "auth-domain-config-required"
          /* AuthErrorCode.MISSING_AUTH_DOMAIN */
        ]: "Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.",
        [
          "missing-app-credential"
          /* AuthErrorCode.MISSING_APP_CREDENTIAL */
        ]: "The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.",
        [
          "missing-verification-code"
          /* AuthErrorCode.MISSING_CODE */
        ]: "The phone auth credential was created with an empty SMS verification code.",
        [
          "missing-continue-uri"
          /* AuthErrorCode.MISSING_CONTINUE_URI */
        ]: "A continue URL must be provided in the request.",
        [
          "missing-iframe-start"
          /* AuthErrorCode.MISSING_IFRAME_START */
        ]: "An internal AuthError has occurred.",
        [
          "missing-ios-bundle-id"
          /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */
        ]: "An iOS Bundle ID must be provided if an App Store ID is provided.",
        [
          "missing-or-invalid-nonce"
          /* AuthErrorCode.MISSING_OR_INVALID_NONCE */
        ]: "The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.",
        [
          "missing-password"
          /* AuthErrorCode.MISSING_PASSWORD */
        ]: "A non-empty password must be provided",
        [
          "missing-multi-factor-info"
          /* AuthErrorCode.MISSING_MFA_INFO */
        ]: "No second factor identifier is provided.",
        [
          "missing-multi-factor-session"
          /* AuthErrorCode.MISSING_MFA_SESSION */
        ]: "The request is missing proof of first factor successful sign-in.",
        [
          "missing-phone-number"
          /* AuthErrorCode.MISSING_PHONE_NUMBER */
        ]: "To send verification codes, provide a phone number for the recipient.",
        [
          "missing-verification-id"
          /* AuthErrorCode.MISSING_SESSION_INFO */
        ]: "The phone auth credential was created with an empty verification ID.",
        [
          "app-deleted"
          /* AuthErrorCode.MODULE_DESTROYED */
        ]: "This instance of FirebaseApp has been deleted.",
        [
          "multi-factor-info-not-found"
          /* AuthErrorCode.MFA_INFO_NOT_FOUND */
        ]: "The user does not have a second factor matching the identifier provided.",
        [
          "multi-factor-auth-required"
          /* AuthErrorCode.MFA_REQUIRED */
        ]: "Proof of ownership of a second factor is required to complete sign-in.",
        [
          "account-exists-with-different-credential"
          /* AuthErrorCode.NEED_CONFIRMATION */
        ]: "An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.",
        [
          "network-request-failed"
          /* AuthErrorCode.NETWORK_REQUEST_FAILED */
        ]: "A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.",
        [
          "no-auth-event"
          /* AuthErrorCode.NO_AUTH_EVENT */
        ]: "An internal AuthError has occurred.",
        [
          "no-such-provider"
          /* AuthErrorCode.NO_SUCH_PROVIDER */
        ]: "User was not linked to an account with the given provider.",
        [
          "null-user"
          /* AuthErrorCode.NULL_USER */
        ]: "A null user object was provided as the argument for an operation which requires a non-null user object.",
        [
          "operation-not-allowed"
          /* AuthErrorCode.OPERATION_NOT_ALLOWED */
        ]: "The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.",
        [
          "operation-not-supported-in-this-environment"
          /* AuthErrorCode.OPERATION_NOT_SUPPORTED */
        ]: 'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',
        [
          "popup-blocked"
          /* AuthErrorCode.POPUP_BLOCKED */
        ]: "Unable to establish a connection with the popup. It may have been blocked by the browser.",
        [
          "popup-closed-by-user"
          /* AuthErrorCode.POPUP_CLOSED_BY_USER */
        ]: "The popup has been closed by the user before finalizing the operation.",
        [
          "provider-already-linked"
          /* AuthErrorCode.PROVIDER_ALREADY_LINKED */
        ]: "User can only be linked to one identity for the given provider.",
        [
          "quota-exceeded"
          /* AuthErrorCode.QUOTA_EXCEEDED */
        ]: "The project's quota for this operation has been exceeded.",
        [
          "redirect-cancelled-by-user"
          /* AuthErrorCode.REDIRECT_CANCELLED_BY_USER */
        ]: "The redirect operation has been cancelled by the user before finalizing.",
        [
          "redirect-operation-pending"
          /* AuthErrorCode.REDIRECT_OPERATION_PENDING */
        ]: "A redirect sign-in operation is already pending.",
        [
          "rejected-credential"
          /* AuthErrorCode.REJECTED_CREDENTIAL */
        ]: "The request contains malformed or mismatching credentials.",
        [
          "second-factor-already-in-use"
          /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */
        ]: "The second factor is already enrolled on this account.",
        [
          "maximum-second-factor-count-exceeded"
          /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */
        ]: "The maximum allowed number of second factors on a user has been exceeded.",
        [
          "tenant-id-mismatch"
          /* AuthErrorCode.TENANT_ID_MISMATCH */
        ]: "The provided tenant ID does not match the Auth instance's tenant ID",
        [
          "timeout"
          /* AuthErrorCode.TIMEOUT */
        ]: "The operation has timed out.",
        [
          "user-token-expired"
          /* AuthErrorCode.TOKEN_EXPIRED */
        ]: "The user's credential is no longer valid. The user must sign in again.",
        [
          "too-many-requests"
          /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */
        ]: "We have blocked all requests from this device due to unusual activity. Try again later.",
        [
          "unauthorized-continue-uri"
          /* AuthErrorCode.UNAUTHORIZED_DOMAIN */
        ]: "The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.",
        [
          "unsupported-first-factor"
          /* AuthErrorCode.UNSUPPORTED_FIRST_FACTOR */
        ]: "Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.",
        [
          "unsupported-persistence-type"
          /* AuthErrorCode.UNSUPPORTED_PERSISTENCE */
        ]: "The current environment does not support the specified persistence type.",
        [
          "unsupported-tenant-operation"
          /* AuthErrorCode.UNSUPPORTED_TENANT_OPERATION */
        ]: "This operation is not supported in a multi-tenant context.",
        [
          "unverified-email"
          /* AuthErrorCode.UNVERIFIED_EMAIL */
        ]: "The operation requires a verified email.",
        [
          "user-cancelled"
          /* AuthErrorCode.USER_CANCELLED */
        ]: "The user did not grant your application the permissions it requested.",
        [
          "user-not-found"
          /* AuthErrorCode.USER_DELETED */
        ]: "There is no user record corresponding to this identifier. The user may have been deleted.",
        [
          "user-disabled"
          /* AuthErrorCode.USER_DISABLED */
        ]: "The user account has been disabled by an administrator.",
        [
          "user-mismatch"
          /* AuthErrorCode.USER_MISMATCH */
        ]: "The supplied credentials do not correspond to the previously signed in user.",
        [
          "user-signed-out"
          /* AuthErrorCode.USER_SIGNED_OUT */
        ]: "",
        [
          "weak-password"
          /* AuthErrorCode.WEAK_PASSWORD */
        ]: "The password must be 6 characters long or more.",
        [
          "web-storage-unsupported"
          /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */
        ]: "This browser is not supported or 3rd party cookies and data may be disabled.",
        [
          "already-initialized"
          /* AuthErrorCode.ALREADY_INITIALIZED */
        ]: "initializeAuth() has already been called with different options. To avoid this error, call initializeAuth() with the same options as when it was originally called, or call getAuth() to return the already initialized instance.",
        [
          "missing-recaptcha-token"
          /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */
        ]: "The reCAPTCHA token is missing when sending request to the backend.",
        [
          "invalid-recaptcha-token"
          /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */
        ]: "The reCAPTCHA token is invalid when sending request to the backend.",
        [
          "invalid-recaptcha-action"
          /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */
        ]: "The reCAPTCHA action is invalid when sending request to the backend.",
        [
          "recaptcha-not-enabled"
          /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */
        ]: "reCAPTCHA Enterprise integration is not enabled for this project.",
        [
          "missing-client-type"
          /* AuthErrorCode.MISSING_CLIENT_TYPE */
        ]: "The reCAPTCHA client type is missing when sending request to the backend.",
        [
          "missing-recaptcha-version"
          /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */
        ]: "The reCAPTCHA version is missing when sending request to the backend.",
        [
          "invalid-req-type"
          /* AuthErrorCode.INVALID_REQ_TYPE */
        ]: "Invalid request parameters.",
        [
          "invalid-recaptcha-version"
          /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */
        ]: "The reCAPTCHA version is invalid when sending request to the backend."
      };
    }
    function _prodErrorMap() {
      return {
        [
          "dependent-sdk-initialized-before-auth"
          /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */
        ]: "Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."
      };
    }
    var debugErrorMap = _debugErrorMap;
    var prodErrorMap = _prodErrorMap;
    var _DEFAULT_AUTH_ERROR_FACTORY = new util.ErrorFactory("auth", "Firebase", _prodErrorMap());
    var AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = {
      ADMIN_ONLY_OPERATION: "auth/admin-restricted-operation",
      ARGUMENT_ERROR: "auth/argument-error",
      APP_NOT_AUTHORIZED: "auth/app-not-authorized",
      APP_NOT_INSTALLED: "auth/app-not-installed",
      CAPTCHA_CHECK_FAILED: "auth/captcha-check-failed",
      CODE_EXPIRED: "auth/code-expired",
      CORDOVA_NOT_READY: "auth/cordova-not-ready",
      CORS_UNSUPPORTED: "auth/cors-unsupported",
      CREDENTIAL_ALREADY_IN_USE: "auth/credential-already-in-use",
      CREDENTIAL_MISMATCH: "auth/custom-token-mismatch",
      CREDENTIAL_TOO_OLD_LOGIN_AGAIN: "auth/requires-recent-login",
      DEPENDENT_SDK_INIT_BEFORE_AUTH: "auth/dependent-sdk-initialized-before-auth",
      DYNAMIC_LINK_NOT_ACTIVATED: "auth/dynamic-link-not-activated",
      EMAIL_CHANGE_NEEDS_VERIFICATION: "auth/email-change-needs-verification",
      EMAIL_EXISTS: "auth/email-already-in-use",
      EMULATOR_CONFIG_FAILED: "auth/emulator-config-failed",
      EXPIRED_OOB_CODE: "auth/expired-action-code",
      EXPIRED_POPUP_REQUEST: "auth/cancelled-popup-request",
      INTERNAL_ERROR: "auth/internal-error",
      INVALID_API_KEY: "auth/invalid-api-key",
      INVALID_APP_CREDENTIAL: "auth/invalid-app-credential",
      INVALID_APP_ID: "auth/invalid-app-id",
      INVALID_AUTH: "auth/invalid-user-token",
      INVALID_AUTH_EVENT: "auth/invalid-auth-event",
      INVALID_CERT_HASH: "auth/invalid-cert-hash",
      INVALID_CODE: "auth/invalid-verification-code",
      INVALID_CONTINUE_URI: "auth/invalid-continue-uri",
      INVALID_CORDOVA_CONFIGURATION: "auth/invalid-cordova-configuration",
      INVALID_CUSTOM_TOKEN: "auth/invalid-custom-token",
      INVALID_DYNAMIC_LINK_DOMAIN: "auth/invalid-dynamic-link-domain",
      INVALID_EMAIL: "auth/invalid-email",
      INVALID_EMULATOR_SCHEME: "auth/invalid-emulator-scheme",
      INVALID_IDP_RESPONSE: "auth/invalid-credential",
      INVALID_MESSAGE_PAYLOAD: "auth/invalid-message-payload",
      INVALID_MFA_SESSION: "auth/invalid-multi-factor-session",
      INVALID_OAUTH_CLIENT_ID: "auth/invalid-oauth-client-id",
      INVALID_OAUTH_PROVIDER: "auth/invalid-oauth-provider",
      INVALID_OOB_CODE: "auth/invalid-action-code",
      INVALID_ORIGIN: "auth/unauthorized-domain",
      INVALID_PASSWORD: "auth/wrong-password",
      INVALID_PERSISTENCE: "auth/invalid-persistence-type",
      INVALID_PHONE_NUMBER: "auth/invalid-phone-number",
      INVALID_PROVIDER_ID: "auth/invalid-provider-id",
      INVALID_RECIPIENT_EMAIL: "auth/invalid-recipient-email",
      INVALID_SENDER: "auth/invalid-sender",
      INVALID_SESSION_INFO: "auth/invalid-verification-id",
      INVALID_TENANT_ID: "auth/invalid-tenant-id",
      MFA_INFO_NOT_FOUND: "auth/multi-factor-info-not-found",
      MFA_REQUIRED: "auth/multi-factor-auth-required",
      MISSING_ANDROID_PACKAGE_NAME: "auth/missing-android-pkg-name",
      MISSING_APP_CREDENTIAL: "auth/missing-app-credential",
      MISSING_AUTH_DOMAIN: "auth/auth-domain-config-required",
      MISSING_CODE: "auth/missing-verification-code",
      MISSING_CONTINUE_URI: "auth/missing-continue-uri",
      MISSING_IFRAME_START: "auth/missing-iframe-start",
      MISSING_IOS_BUNDLE_ID: "auth/missing-ios-bundle-id",
      MISSING_OR_INVALID_NONCE: "auth/missing-or-invalid-nonce",
      MISSING_MFA_INFO: "auth/missing-multi-factor-info",
      MISSING_MFA_SESSION: "auth/missing-multi-factor-session",
      MISSING_PHONE_NUMBER: "auth/missing-phone-number",
      MISSING_SESSION_INFO: "auth/missing-verification-id",
      MODULE_DESTROYED: "auth/app-deleted",
      NEED_CONFIRMATION: "auth/account-exists-with-different-credential",
      NETWORK_REQUEST_FAILED: "auth/network-request-failed",
      NULL_USER: "auth/null-user",
      NO_AUTH_EVENT: "auth/no-auth-event",
      NO_SUCH_PROVIDER: "auth/no-such-provider",
      OPERATION_NOT_ALLOWED: "auth/operation-not-allowed",
      OPERATION_NOT_SUPPORTED: "auth/operation-not-supported-in-this-environment",
      POPUP_BLOCKED: "auth/popup-blocked",
      POPUP_CLOSED_BY_USER: "auth/popup-closed-by-user",
      PROVIDER_ALREADY_LINKED: "auth/provider-already-linked",
      QUOTA_EXCEEDED: "auth/quota-exceeded",
      REDIRECT_CANCELLED_BY_USER: "auth/redirect-cancelled-by-user",
      REDIRECT_OPERATION_PENDING: "auth/redirect-operation-pending",
      REJECTED_CREDENTIAL: "auth/rejected-credential",
      SECOND_FACTOR_ALREADY_ENROLLED: "auth/second-factor-already-in-use",
      SECOND_FACTOR_LIMIT_EXCEEDED: "auth/maximum-second-factor-count-exceeded",
      TENANT_ID_MISMATCH: "auth/tenant-id-mismatch",
      TIMEOUT: "auth/timeout",
      TOKEN_EXPIRED: "auth/user-token-expired",
      TOO_MANY_ATTEMPTS_TRY_LATER: "auth/too-many-requests",
      UNAUTHORIZED_DOMAIN: "auth/unauthorized-continue-uri",
      UNSUPPORTED_FIRST_FACTOR: "auth/unsupported-first-factor",
      UNSUPPORTED_PERSISTENCE: "auth/unsupported-persistence-type",
      UNSUPPORTED_TENANT_OPERATION: "auth/unsupported-tenant-operation",
      UNVERIFIED_EMAIL: "auth/unverified-email",
      USER_CANCELLED: "auth/user-cancelled",
      USER_DELETED: "auth/user-not-found",
      USER_DISABLED: "auth/user-disabled",
      USER_MISMATCH: "auth/user-mismatch",
      USER_SIGNED_OUT: "auth/user-signed-out",
      WEAK_PASSWORD: "auth/weak-password",
      WEB_STORAGE_UNSUPPORTED: "auth/web-storage-unsupported",
      ALREADY_INITIALIZED: "auth/already-initialized",
      RECAPTCHA_NOT_ENABLED: "auth/recaptcha-not-enabled",
      MISSING_RECAPTCHA_TOKEN: "auth/missing-recaptcha-token",
      INVALID_RECAPTCHA_TOKEN: "auth/invalid-recaptcha-token",
      INVALID_RECAPTCHA_ACTION: "auth/invalid-recaptcha-action",
      MISSING_CLIENT_TYPE: "auth/missing-client-type",
      MISSING_RECAPTCHA_VERSION: "auth/missing-recaptcha-version",
      INVALID_RECAPTCHA_VERSION: "auth/invalid-recaptcha-version",
      INVALID_REQ_TYPE: "auth/invalid-req-type"
    };
    var logClient = new logger.Logger("@firebase/auth");
    function _logWarn(msg, ...args) {
      if (logClient.logLevel <= logger.LogLevel.WARN) {
        logClient.warn(`Auth (${app.SDK_VERSION}): ${msg}`, ...args);
      }
    }
    function _logError(msg, ...args) {
      if (logClient.logLevel <= logger.LogLevel.ERROR) {
        logClient.error(`Auth (${app.SDK_VERSION}): ${msg}`, ...args);
      }
    }
    function _fail(authOrCode, ...rest) {
      throw createErrorInternal(authOrCode, ...rest);
    }
    function _createError(authOrCode, ...rest) {
      return createErrorInternal(authOrCode, ...rest);
    }
    function _errorWithCustomMessage(auth, code, message) {
      const errorMap = Object.assign(Object.assign({}, prodErrorMap()), { [code]: message });
      const factory = new util.ErrorFactory("auth", "Firebase", errorMap);
      return factory.create(code, {
        appName: auth.name
      });
    }
    function _assertInstanceOf(auth, object, instance) {
      const constructorInstance = instance;
      if (!(object instanceof constructorInstance)) {
        if (constructorInstance.name !== object.constructor.name) {
          _fail(
            auth,
            "argument-error"
            /* AuthErrorCode.ARGUMENT_ERROR */
          );
        }
        throw _errorWithCustomMessage(auth, "argument-error", `Type of ${object.constructor.name} does not match expected instance.Did you pass a reference from a different Auth SDK?`);
      }
    }
    function createErrorInternal(authOrCode, ...rest) {
      if (typeof authOrCode !== "string") {
        const code = rest[0];
        const fullParams = [...rest.slice(1)];
        if (fullParams[0]) {
          fullParams[0].appName = authOrCode.name;
        }
        return authOrCode._errorFactory.create(code, ...fullParams);
      }
      return _DEFAULT_AUTH_ERROR_FACTORY.create(authOrCode, ...rest);
    }
    function _assert(assertion, authOrCode, ...rest) {
      if (!assertion) {
        throw createErrorInternal(authOrCode, ...rest);
      }
    }
    function debugFail(failure) {
      const message = `INTERNAL ASSERTION FAILED: ` + failure;
      _logError(message);
      throw new Error(message);
    }
    function debugAssert(assertion, message) {
      if (!assertion) {
        debugFail(message);
      }
    }
    function _getCurrentUrl() {
      var _a;
      return typeof self !== "undefined" && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.href) || "";
    }
    function _isHttpOrHttps() {
      return _getCurrentScheme() === "http:" || _getCurrentScheme() === "https:";
    }
    function _getCurrentScheme() {
      var _a;
      return typeof self !== "undefined" && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.protocol) || null;
    }
    function _isOnline() {
      if (typeof navigator !== "undefined" && navigator && "onLine" in navigator && typeof navigator.onLine === "boolean" && // Apply only for traditional web apps and Chrome extensions.
      // This is especially true for Cordova apps which have unreliable
      // navigator.onLine behavior unless cordova-plugin-network-information is
      // installed which overwrites the native navigator.onLine value and
      // defines navigator.connection.
      (_isHttpOrHttps() || util.isBrowserExtension() || "connection" in navigator)) {
        return navigator.onLine;
      }
      return true;
    }
    function _getUserLanguage() {
      if (typeof navigator === "undefined") {
        return null;
      }
      const navigatorLanguage = navigator;
      return (
        // Most reliable, but only supported in Chrome/Firefox.
        navigatorLanguage.languages && navigatorLanguage.languages[0] || // Supported in most browsers, but returns the language of the browser
        // UI, not the language set in browser settings.
        navigatorLanguage.language || // Couldn't determine language.
        null
      );
    }
    var Delay = class {
      constructor(shortDelay, longDelay) {
        this.shortDelay = shortDelay;
        this.longDelay = longDelay;
        debugAssert(longDelay > shortDelay, "Short delay should be less than long delay!");
        this.isMobile = util.isMobileCordova() || util.isReactNative();
      }
      get() {
        if (!_isOnline()) {
          return Math.min(5e3, this.shortDelay);
        }
        return this.isMobile ? this.longDelay : this.shortDelay;
      }
    };
    function _emulatorUrl(config, path) {
      debugAssert(config.emulator, "Emulator should always be set here");
      const { url } = config.emulator;
      if (!path) {
        return url;
      }
      return `${url}${path.startsWith("/") ? path.slice(1) : path}`;
    }
    var FetchProvider = class {
      static initialize(fetchImpl, headersImpl, responseImpl) {
        this.fetchImpl = fetchImpl;
        if (headersImpl) {
          this.headersImpl = headersImpl;
        }
        if (responseImpl) {
          this.responseImpl = responseImpl;
        }
      }
      static fetch() {
        if (this.fetchImpl) {
          return this.fetchImpl;
        }
        if (typeof self !== "undefined" && "fetch" in self) {
          return self.fetch;
        }
        debugFail("Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill");
      }
      static headers() {
        if (this.headersImpl) {
          return this.headersImpl;
        }
        if (typeof self !== "undefined" && "Headers" in self) {
          return self.Headers;
        }
        debugFail("Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill");
      }
      static response() {
        if (this.responseImpl) {
          return this.responseImpl;
        }
        if (typeof self !== "undefined" && "Response" in self) {
          return self.Response;
        }
        debugFail("Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill");
      }
    };
    var SERVER_ERROR_MAP = {
      // Custom token errors.
      [
        "CREDENTIAL_MISMATCH"
        /* ServerError.CREDENTIAL_MISMATCH */
      ]: "custom-token-mismatch",
      // This can only happen if the SDK sends a bad request.
      [
        "MISSING_CUSTOM_TOKEN"
        /* ServerError.MISSING_CUSTOM_TOKEN */
      ]: "internal-error",
      // Create Auth URI errors.
      [
        "INVALID_IDENTIFIER"
        /* ServerError.INVALID_IDENTIFIER */
      ]: "invalid-email",
      // This can only happen if the SDK sends a bad request.
      [
        "MISSING_CONTINUE_URI"
        /* ServerError.MISSING_CONTINUE_URI */
      ]: "internal-error",
      // Sign in with email and password errors (some apply to sign up too).
      [
        "INVALID_PASSWORD"
        /* ServerError.INVALID_PASSWORD */
      ]: "wrong-password",
      // This can only happen if the SDK sends a bad request.
      [
        "MISSING_PASSWORD"
        /* ServerError.MISSING_PASSWORD */
      ]: "missing-password",
      // Sign up with email and password errors.
      [
        "EMAIL_EXISTS"
        /* ServerError.EMAIL_EXISTS */
      ]: "email-already-in-use",
      [
        "PASSWORD_LOGIN_DISABLED"
        /* ServerError.PASSWORD_LOGIN_DISABLED */
      ]: "operation-not-allowed",
      // Verify assertion for sign in with credential errors:
      [
        "INVALID_IDP_RESPONSE"
        /* ServerError.INVALID_IDP_RESPONSE */
      ]: "invalid-credential",
      [
        "INVALID_PENDING_TOKEN"
        /* ServerError.INVALID_PENDING_TOKEN */
      ]: "invalid-credential",
      [
        "FEDERATED_USER_ID_ALREADY_LINKED"
        /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */
      ]: "credential-already-in-use",
      // This can only happen if the SDK sends a bad request.
      [
        "MISSING_REQ_TYPE"
        /* ServerError.MISSING_REQ_TYPE */
      ]: "internal-error",
      // Send Password reset email errors:
      [
        "EMAIL_NOT_FOUND"
        /* ServerError.EMAIL_NOT_FOUND */
      ]: "user-not-found",
      [
        "RESET_PASSWORD_EXCEED_LIMIT"
        /* ServerError.RESET_PASSWORD_EXCEED_LIMIT */
      ]: "too-many-requests",
      [
        "EXPIRED_OOB_CODE"
        /* ServerError.EXPIRED_OOB_CODE */
      ]: "expired-action-code",
      [
        "INVALID_OOB_CODE"
        /* ServerError.INVALID_OOB_CODE */
      ]: "invalid-action-code",
      // This can only happen if the SDK sends a bad request.
      [
        "MISSING_OOB_CODE"
        /* ServerError.MISSING_OOB_CODE */
      ]: "internal-error",
      // Operations that require ID token in request:
      [
        "CREDENTIAL_TOO_OLD_LOGIN_AGAIN"
        /* ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */
      ]: "requires-recent-login",
      [
        "INVALID_ID_TOKEN"
        /* ServerError.INVALID_ID_TOKEN */
      ]: "invalid-user-token",
      [
        "TOKEN_EXPIRED"
        /* ServerError.TOKEN_EXPIRED */
      ]: "user-token-expired",
      [
        "USER_NOT_FOUND"
        /* ServerError.USER_NOT_FOUND */
      ]: "user-token-expired",
      // Other errors.
      [
        "TOO_MANY_ATTEMPTS_TRY_LATER"
        /* ServerError.TOO_MANY_ATTEMPTS_TRY_LATER */
      ]: "too-many-requests",
      // Phone Auth related errors.
      [
        "INVALID_CODE"
        /* ServerError.INVALID_CODE */
      ]: "invalid-verification-code",
      [
        "INVALID_SESSION_INFO"
        /* ServerError.INVALID_SESSION_INFO */
      ]: "invalid-verification-id",
      [
        "INVALID_TEMPORARY_PROOF"
        /* ServerError.INVALID_TEMPORARY_PROOF */
      ]: "invalid-credential",
      [
        "MISSING_SESSION_INFO"
        /* ServerError.MISSING_SESSION_INFO */
      ]: "missing-verification-id",
      [
        "SESSION_EXPIRED"
        /* ServerError.SESSION_EXPIRED */
      ]: "code-expired",
      // Other action code errors when additional settings passed.
      // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.
      // This is OK as this error will be caught by client side validation.
      [
        "MISSING_ANDROID_PACKAGE_NAME"
        /* ServerError.MISSING_ANDROID_PACKAGE_NAME */
      ]: "missing-android-pkg-name",
      [
        "UNAUTHORIZED_DOMAIN"
        /* ServerError.UNAUTHORIZED_DOMAIN */
      ]: "unauthorized-continue-uri",
      // getProjectConfig errors when clientId is passed.
      [
        "INVALID_OAUTH_CLIENT_ID"
        /* ServerError.INVALID_OAUTH_CLIENT_ID */
      ]: "invalid-oauth-client-id",
      // User actions (sign-up or deletion) disabled errors.
      [
        "ADMIN_ONLY_OPERATION"
        /* ServerError.ADMIN_ONLY_OPERATION */
      ]: "admin-restricted-operation",
      // Multi factor related errors.
      [
        "INVALID_MFA_PENDING_CREDENTIAL"
        /* ServerError.INVALID_MFA_PENDING_CREDENTIAL */
      ]: "invalid-multi-factor-session",
      [
        "MFA_ENROLLMENT_NOT_FOUND"
        /* ServerError.MFA_ENROLLMENT_NOT_FOUND */
      ]: "multi-factor-info-not-found",
      [
        "MISSING_MFA_ENROLLMENT_ID"
        /* ServerError.MISSING_MFA_ENROLLMENT_ID */
      ]: "missing-multi-factor-info",
      [
        "MISSING_MFA_PENDING_CREDENTIAL"
        /* ServerError.MISSING_MFA_PENDING_CREDENTIAL */
      ]: "missing-multi-factor-session",
      [
        "SECOND_FACTOR_EXISTS"
        /* ServerError.SECOND_FACTOR_EXISTS */
      ]: "second-factor-already-in-use",
      [
        "SECOND_FACTOR_LIMIT_EXCEEDED"
        /* ServerError.SECOND_FACTOR_LIMIT_EXCEEDED */
      ]: "maximum-second-factor-count-exceeded",
      // Blocking functions related errors.
      [
        "BLOCKING_FUNCTION_ERROR_RESPONSE"
        /* ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE */
      ]: "internal-error",
      // Recaptcha related errors.
      [
        "RECAPTCHA_NOT_ENABLED"
        /* ServerError.RECAPTCHA_NOT_ENABLED */
      ]: "recaptcha-not-enabled",
      [
        "MISSING_RECAPTCHA_TOKEN"
        /* ServerError.MISSING_RECAPTCHA_TOKEN */
      ]: "missing-recaptcha-token",
      [
        "INVALID_RECAPTCHA_TOKEN"
        /* ServerError.INVALID_RECAPTCHA_TOKEN */
      ]: "invalid-recaptcha-token",
      [
        "INVALID_RECAPTCHA_ACTION"
        /* ServerError.INVALID_RECAPTCHA_ACTION */
      ]: "invalid-recaptcha-action",
      [
        "MISSING_CLIENT_TYPE"
        /* ServerError.MISSING_CLIENT_TYPE */
      ]: "missing-client-type",
      [
        "MISSING_RECAPTCHA_VERSION"
        /* ServerError.MISSING_RECAPTCHA_VERSION */
      ]: "missing-recaptcha-version",
      [
        "INVALID_RECAPTCHA_VERSION"
        /* ServerError.INVALID_RECAPTCHA_VERSION */
      ]: "invalid-recaptcha-version",
      [
        "INVALID_REQ_TYPE"
        /* ServerError.INVALID_REQ_TYPE */
      ]: "invalid-req-type"
      /* AuthErrorCode.INVALID_REQ_TYPE */
    };
    var DEFAULT_API_TIMEOUT_MS = new Delay(3e4, 6e4);
    function _addTidIfNecessary(auth, request) {
      if (auth.tenantId && !request.tenantId) {
        return Object.assign(Object.assign({}, request), { tenantId: auth.tenantId });
      }
      return request;
    }
    async function _performApiRequest(auth, method, path, request, customErrorMap = {}) {
      return _performFetchWithErrorHandling(auth, customErrorMap, async () => {
        let body = {};
        let params = {};
        if (request) {
          if (method === "GET") {
            params = request;
          } else {
            body = {
              body: JSON.stringify(request)
            };
          }
        }
        const query = util.querystring(Object.assign({ key: auth.config.apiKey }, params)).slice(1);
        const headers = await auth._getAdditionalHeaders();
        headers[
          "Content-Type"
          /* HttpHeader.CONTENT_TYPE */
        ] = "application/json";
        if (auth.languageCode) {
          headers[
            "X-Firebase-Locale"
            /* HttpHeader.X_FIREBASE_LOCALE */
          ] = auth.languageCode;
        }
        return FetchProvider.fetch()(_getFinalTarget(auth, auth.config.apiHost, path, query), Object.assign({
          method,
          headers,
          referrerPolicy: "no-referrer"
        }, body));
      });
    }
    async function _performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {
      auth._canInitEmulator = false;
      const errorMap = Object.assign(Object.assign({}, SERVER_ERROR_MAP), customErrorMap);
      try {
        const networkTimeout = new NetworkTimeout(auth);
        const response = await Promise.race([
          fetchFn(),
          networkTimeout.promise
        ]);
        networkTimeout.clearNetworkTimeout();
        const json = await response.json();
        if ("needConfirmation" in json) {
          throw _makeTaggedError(auth, "account-exists-with-different-credential", json);
        }
        if (response.ok && !("errorMessage" in json)) {
          return json;
        } else {
          const errorMessage = response.ok ? json.errorMessage : json.error.message;
          const [serverErrorCode, serverErrorMessage] = errorMessage.split(" : ");
          if (serverErrorCode === "FEDERATED_USER_ID_ALREADY_LINKED") {
            throw _makeTaggedError(auth, "credential-already-in-use", json);
          } else if (serverErrorCode === "EMAIL_EXISTS") {
            throw _makeTaggedError(auth, "email-already-in-use", json);
          } else if (serverErrorCode === "USER_DISABLED") {
            throw _makeTaggedError(auth, "user-disabled", json);
          }
          const authError = errorMap[serverErrorCode] || serverErrorCode.toLowerCase().replace(/[_\s]+/g, "-");
          if (serverErrorMessage) {
            throw _errorWithCustomMessage(auth, authError, serverErrorMessage);
          } else {
            _fail(auth, authError);
          }
        }
      } catch (e) {
        if (e instanceof util.FirebaseError) {
          throw e;
        }
        _fail(auth, "network-request-failed", { "message": String(e) });
      }
    }
    async function _performSignInRequest(auth, method, path, request, customErrorMap = {}) {
      const serverResponse = await _performApiRequest(auth, method, path, request, customErrorMap);
      if ("mfaPendingCredential" in serverResponse) {
        _fail(auth, "multi-factor-auth-required", {
          _serverResponse: serverResponse
        });
      }
      return serverResponse;
    }
    function _getFinalTarget(auth, host, path, query) {
      const base = `${host}${path}?${query}`;
      if (!auth.config.emulator) {
        return `${auth.config.apiScheme}://${base}`;
      }
      return _emulatorUrl(auth.config, base);
    }
    var NetworkTimeout = class {
      constructor(auth) {
        this.auth = auth;
        this.timer = null;
        this.promise = new Promise((_, reject) => {
          this.timer = setTimeout(() => {
            return reject(_createError(
              this.auth,
              "network-request-failed"
              /* AuthErrorCode.NETWORK_REQUEST_FAILED */
            ));
          }, DEFAULT_API_TIMEOUT_MS.get());
        });
      }
      clearNetworkTimeout() {
        clearTimeout(this.timer);
      }
    };
    function _makeTaggedError(auth, code, response) {
      const errorParams = {
        appName: auth.name
      };
      if (response.email) {
        errorParams.email = response.email;
      }
      if (response.phoneNumber) {
        errorParams.phoneNumber = response.phoneNumber;
      }
      const error = _createError(auth, code, errorParams);
      error.customData._tokenResponse = response;
      return error;
    }
    async function deleteAccount(auth, request) {
      return _performApiRequest(auth, "POST", "/v1/accounts:delete", request);
    }
    async function deleteLinkedAccounts(auth, request) {
      return _performApiRequest(auth, "POST", "/v1/accounts:update", request);
    }
    async function getAccountInfo(auth, request) {
      return _performApiRequest(auth, "POST", "/v1/accounts:lookup", request);
    }
    function utcTimestampToDateString(utcTimestamp) {
      if (!utcTimestamp) {
        return void 0;
      }
      try {
        const date = new Date(Number(utcTimestamp));
        if (!isNaN(date.getTime())) {
          return date.toUTCString();
        }
      } catch (e) {
      }
      return void 0;
    }
    function getIdToken(user, forceRefresh = false) {
      return util.getModularInstance(user).getIdToken(forceRefresh);
    }
    async function getIdTokenResult(user, forceRefresh = false) {
      const userInternal = util.getModularInstance(user);
      const token = await userInternal.getIdToken(forceRefresh);
      const claims = _parseToken(token);
      _assert(
        claims && claims.exp && claims.auth_time && claims.iat,
        userInternal.auth,
        "internal-error"
        /* AuthErrorCode.INTERNAL_ERROR */
      );
      const firebase = typeof claims.firebase === "object" ? claims.firebase : void 0;
      const signInProvider = firebase === null || firebase === void 0 ? void 0 : firebase["sign_in_provider"];
      return {
        claims,
        token,
        authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),
        issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),
        expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),
        signInProvider: signInProvider || null,
        signInSecondFactor: (firebase === null || firebase === void 0 ? void 0 : firebase["sign_in_second_factor"]) || null
      };
    }
    function secondsStringToMilliseconds(seconds) {
      return Number(seconds) * 1e3;
    }
    function _parseToken(token) {
      const [algorithm, payload, signature] = token.split(".");
      if (algorithm === void 0 || payload === void 0 || signature === void 0) {
        _logError("JWT malformed, contained fewer than 3 sections");
        return null;
      }
      try {
        const decoded = util.base64Decode(payload);
        if (!decoded) {
          _logError("Failed to decode base64 JWT payload");
          return null;
        }
        return JSON.parse(decoded);
      } catch (e) {
        _logError("Caught error parsing JWT payload as JSON", e === null || e === void 0 ? void 0 : e.toString());
        return null;
      }
    }
    function _tokenExpiresIn(token) {
      const parsedToken = _parseToken(token);
      _assert(
        parsedToken,
        "internal-error"
        /* AuthErrorCode.INTERNAL_ERROR */
      );
      _assert(
        typeof parsedToken.exp !== "undefined",
        "internal-error"
        /* AuthErrorCode.INTERNAL_ERROR */
      );
      _assert(
        typeof parsedToken.iat !== "undefined",
        "internal-error"
        /* AuthErrorCode.INTERNAL_ERROR */
      );
      return Number(parsedToken.exp) - Number(parsedToken.iat);
    }
    async function _logoutIfInvalidated(user, promise, bypassAuthState = false) {
      if (bypassAuthState) {
        return promise;
      }
      try {
        return await promise;
      } catch (e) {
        if (e instanceof util.FirebaseError && isUserInvalidated(e)) {
          if (user.auth.currentUser === user) {
            await user.auth.signOut();
          }
        }
        throw e;
      }
    }
    function isUserInvalidated({ code }) {
      return code === `auth/${"user-disabled"}` || code === `auth/${"user-token-expired"}`;
    }
    var ProactiveRefresh = class {
      constructor(user) {
        this.user = user;
        this.isRunning = false;
        this.timerId = null;
        this.errorBackoff = 3e4;
      }
      _start() {
        if (this.isRunning) {
          return;
        }
        this.isRunning = true;
        this.schedule();
      }
      _stop() {
        if (!this.isRunning) {
          return;
        }
        this.isRunning = false;
        if (this.timerId !== null) {
          clearTimeout(this.timerId);
        }
      }
      getInterval(wasError) {
        var _a;
        if (wasError) {
          const interval = this.errorBackoff;
          this.errorBackoff = Math.min(
            this.errorBackoff * 2,
            96e4
            /* Duration.RETRY_BACKOFF_MAX */
          );
          return interval;
        } else {
          this.errorBackoff = 3e4;
          const expTime = (_a = this.user.stsTokenManager.expirationTime) !== null && _a !== void 0 ? _a : 0;
          const interval = expTime - Date.now() - 3e5;
          return Math.max(0, interval);
        }
      }
      schedule(wasError = false) {
        if (!this.isRunning) {
          return;
        }
        const interval = this.getInterval(wasError);
        this.timerId = setTimeout(async () => {
          await this.iteration();
        }, interval);
      }
      async iteration() {
        try {
          await this.user.getIdToken(true);
        } catch (e) {
          if ((e === null || e === void 0 ? void 0 : e.code) === `auth/${"network-request-failed"}`) {
            this.schedule(
              /* wasError */
              true
            );
          }
          return;
        }
        this.schedule();
      }
    };
    var UserMetadata = class {
      constructor(createdAt, lastLoginAt) {
        this.createdAt = createdAt;
        this.lastLoginAt = lastLoginAt;
        this._initializeTime();
      }
      _initializeTime() {
        this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);
        this.creationTime = utcTimestampToDateString(this.createdAt);
      }
      _copy(metadata) {
        this.createdAt = metadata.createdAt;
        this.lastLoginAt = metadata.lastLoginAt;
        this._initializeTime();
      }
      toJSON() {
        return {
          createdAt: this.createdAt,
          lastLoginAt: this.lastLoginAt
        };
      }
    };
    async function _reloadWithoutSaving(user) {
      var _a;
      const auth = user.auth;
      const idToken = await user.getIdToken();
      const response = await _logoutIfInvalidated(user, getAccountInfo(auth, { idToken }));
      _assert(
        response === null || response === void 0 ? void 0 : response.users.length,
        auth,
        "internal-error"
        /* AuthErrorCode.INTERNAL_ERROR */
      );
      const coreAccount = response.users[0];
      user._notifyReloadListener(coreAccount);
      const newProviderData = ((_a = coreAccount.providerUserInfo) === null || _a === void 0 ? void 0 : _a.length) ? extractProviderData(coreAccount.providerUserInfo) : [];
      const providerData = mergeProviderData(user.providerData, newProviderData);
      const oldIsAnonymous = user.isAnonymous;
      const newIsAnonymous = !(user.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);
      const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;
      const updates = {
        uid: coreAccount.localId,
        displayName: coreAccount.displayName || null,
        photoURL: coreAccount.photoUrl || null,
        email: coreAccount.email || null,
        emailVerified: coreAccount.emailVerified || false,
        phoneNumber: coreAccount.phoneNumber || null,
        tenantId: coreAccount.tenantId || null,
        providerData,
        metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),
        isAnonymous
      };
      Object.assign(user, updates);
    }
    async function reload(user) {
      const userInternal = util.getModularInstance(user);
      await _reloadWithoutSaving(userInternal);
      await userInternal.auth._persistUserIfCurrent(userInternal);
      userInternal.auth._notifyListenersIfCurrent(userInternal);
    }
    function mergeProviderData(original, newData) {
      const deduped = original.filter((o) => !newData.some((n) => n.providerId === o.providerId));
      return [...deduped, ...newData];
    }
    function extractProviderData(providers) {
      return providers.map((_a) => {
        var { providerId } = _a, provider = tslib.__rest(_a, ["providerId"]);
        return {
          providerId,
          uid: provider.rawId || "",
          displayName: provider.displayName || null,
          email: provider.email || null,
          phoneNumber: provider.phoneNumber || null,
          photoURL: provider.photoUrl || null
        };
      });
    }
    async function requestStsToken(auth, refreshToken) {
      const response = await _performFetchWithErrorHandling(auth, {}, async () => {
        const body = util.querystring({
          "grant_type": "refresh_token",
          "refresh_token": refreshToken
        }).slice(1);
        const { tokenApiHost, apiKey } = auth.config;
        const url = _getFinalTarget(auth, tokenApiHost, "/v1/token", `key=${apiKey}`);
        const headers = await auth._getAdditionalHeaders();
        headers[
          "Content-Type"
          /* HttpHeader.CONTENT_TYPE */
        ] = "application/x-www-form-urlencoded";
        return FetchProvider.fetch()(url, {
          method: "POST",
          headers,
          body
        });
      });
      return {
        accessToken: response.access_token,
        expiresIn: response.expires_in,
        refreshToken: response.refresh_token
      };
    }
    var StsTokenManager = class _StsTokenManager {
      constructor() {
        this.refreshToken = null;
        this.accessToken = null;
        this.expirationTime = null;
      }
      get isExpired() {
        return !this.expirationTime || Date.now() > this.expirationTime - 3e4;
      }
      updateFromServerResponse(response) {
        _assert(
          response.idToken,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        _assert(
          typeof response.idToken !== "undefined",
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        _assert(
          typeof response.refreshToken !== "undefined",
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        const expiresIn = "expiresIn" in response && typeof response.expiresIn !== "undefined" ? Number(response.expiresIn) : _tokenExpiresIn(response.idToken);
        this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);
      }
      async getToken(auth, forceRefresh = false) {
        _assert(
          !this.accessToken || this.refreshToken,
          auth,
          "user-token-expired"
          /* AuthErrorCode.TOKEN_EXPIRED */
        );
        if (!forceRefresh && this.accessToken && !this.isExpired) {
          return this.accessToken;
        }
        if (this.refreshToken) {
          await this.refresh(auth, this.refreshToken);
          return this.accessToken;
        }
        return null;
      }
      clearRefreshToken() {
        this.refreshToken = null;
      }
      async refresh(auth, oldToken) {
        const { accessToken, refreshToken, expiresIn } = await requestStsToken(auth, oldToken);
        this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));
      }
      updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {
        this.refreshToken = refreshToken || null;
        this.accessToken = accessToken || null;
        this.expirationTime = Date.now() + expiresInSec * 1e3;
      }
      static fromJSON(appName, object) {
        const { refreshToken, accessToken, expirationTime } = object;
        const manager = new _StsTokenManager();
        if (refreshToken) {
          _assert(typeof refreshToken === "string", "internal-error", {
            appName
          });
          manager.refreshToken = refreshToken;
        }
        if (accessToken) {
          _assert(typeof accessToken === "string", "internal-error", {
            appName
          });
          manager.accessToken = accessToken;
        }
        if (expirationTime) {
          _assert(typeof expirationTime === "number", "internal-error", {
            appName
          });
          manager.expirationTime = expirationTime;
        }
        return manager;
      }
      toJSON() {
        return {
          refreshToken: this.refreshToken,
          accessToken: this.accessToken,
          expirationTime: this.expirationTime
        };
      }
      _assign(stsTokenManager) {
        this.accessToken = stsTokenManager.accessToken;
        this.refreshToken = stsTokenManager.refreshToken;
        this.expirationTime = stsTokenManager.expirationTime;
      }
      _clone() {
        return Object.assign(new _StsTokenManager(), this.toJSON());
      }
      _performRefresh() {
        return debugFail("not implemented");
      }
    };
    function assertStringOrUndefined(assertion, appName) {
      _assert(typeof assertion === "string" || typeof assertion === "undefined", "internal-error", { appName });
    }
    var UserImpl = class _UserImpl {
      constructor(_a) {
        var { uid, auth, stsTokenManager } = _a, opt = tslib.__rest(_a, ["uid", "auth", "stsTokenManager"]);
        this.providerId = "firebase";
        this.proactiveRefresh = new ProactiveRefresh(this);
        this.reloadUserInfo = null;
        this.reloadListener = null;
        this.uid = uid;
        this.auth = auth;
        this.stsTokenManager = stsTokenManager;
        this.accessToken = stsTokenManager.accessToken;
        this.displayName = opt.displayName || null;
        this.email = opt.email || null;
        this.emailVerified = opt.emailVerified || false;
        this.phoneNumber = opt.phoneNumber || null;
        this.photoURL = opt.photoURL || null;
        this.isAnonymous = opt.isAnonymous || false;
        this.tenantId = opt.tenantId || null;
        this.providerData = opt.providerData ? [...opt.providerData] : [];
        this.metadata = new UserMetadata(opt.createdAt || void 0, opt.lastLoginAt || void 0);
      }
      async getIdToken(forceRefresh) {
        const accessToken = await _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh));
        _assert(
          accessToken,
          this.auth,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        if (this.accessToken !== accessToken) {
          this.accessToken = accessToken;
          await this.auth._persistUserIfCurrent(this);
          this.auth._notifyListenersIfCurrent(this);
        }
        return accessToken;
      }
      getIdTokenResult(forceRefresh) {
        return getIdTokenResult(this, forceRefresh);
      }
      reload() {
        return reload(this);
      }
      _assign(user) {
        if (this === user) {
          return;
        }
        _assert(
          this.uid === user.uid,
          this.auth,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        this.displayName = user.displayName;
        this.photoURL = user.photoURL;
        this.email = user.email;
        this.emailVerified = user.emailVerified;
        this.phoneNumber = user.phoneNumber;
        this.isAnonymous = user.isAnonymous;
        this.tenantId = user.tenantId;
        this.providerData = user.providerData.map((userInfo) => Object.assign({}, userInfo));
        this.metadata._copy(user.metadata);
        this.stsTokenManager._assign(user.stsTokenManager);
      }
      _clone(auth) {
        const newUser = new _UserImpl(Object.assign(Object.assign({}, this), { auth, stsTokenManager: this.stsTokenManager._clone() }));
        newUser.metadata._copy(this.metadata);
        return newUser;
      }
      _onReload(callback) {
        _assert(
          !this.reloadListener,
          this.auth,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        this.reloadListener = callback;
        if (this.reloadUserInfo) {
          this._notifyReloadListener(this.reloadUserInfo);
          this.reloadUserInfo = null;
        }
      }
      _notifyReloadListener(userInfo) {
        if (this.reloadListener) {
          this.reloadListener(userInfo);
        } else {
          this.reloadUserInfo = userInfo;
        }
      }
      _startProactiveRefresh() {
        this.proactiveRefresh._start();
      }
      _stopProactiveRefresh() {
        this.proactiveRefresh._stop();
      }
      async _updateTokensIfNecessary(response, reload2 = false) {
        let tokensRefreshed = false;
        if (response.idToken && response.idToken !== this.stsTokenManager.accessToken) {
          this.stsTokenManager.updateFromServerResponse(response);
          tokensRefreshed = true;
        }
        if (reload2) {
          await _reloadWithoutSaving(this);
        }
        await this.auth._persistUserIfCurrent(this);
        if (tokensRefreshed) {
          this.auth._notifyListenersIfCurrent(this);
        }
      }
      async delete() {
        const idToken = await this.getIdToken();
        await _logoutIfInvalidated(this, deleteAccount(this.auth, { idToken }));
        this.stsTokenManager.clearRefreshToken();
        return this.auth.signOut();
      }
      toJSON() {
        return Object.assign(Object.assign({
          uid: this.uid,
          email: this.email || void 0,
          emailVerified: this.emailVerified,
          displayName: this.displayName || void 0,
          isAnonymous: this.isAnonymous,
          photoURL: this.photoURL || void 0,
          phoneNumber: this.phoneNumber || void 0,
          tenantId: this.tenantId || void 0,
          providerData: this.providerData.map((userInfo) => Object.assign({}, userInfo)),
          stsTokenManager: this.stsTokenManager.toJSON(),
          // Redirect event ID must be maintained in case there is a pending
          // redirect event.
          _redirectEventId: this._redirectEventId
        }, this.metadata.toJSON()), {
          // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):
          apiKey: this.auth.config.apiKey,
          appName: this.auth.name
        });
      }
      get refreshToken() {
        return this.stsTokenManager.refreshToken || "";
      }
      static _fromJSON(auth, object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const displayName = (_a = object.displayName) !== null && _a !== void 0 ? _a : void 0;
        const email = (_b = object.email) !== null && _b !== void 0 ? _b : void 0;
        const phoneNumber = (_c = object.phoneNumber) !== null && _c !== void 0 ? _c : void 0;
        const photoURL = (_d = object.photoURL) !== null && _d !== void 0 ? _d : void 0;
        const tenantId = (_e = object.tenantId) !== null && _e !== void 0 ? _e : void 0;
        const _redirectEventId = (_f = object._redirectEventId) !== null && _f !== void 0 ? _f : void 0;
        const createdAt = (_g = object.createdAt) !== null && _g !== void 0 ? _g : void 0;
        const lastLoginAt = (_h = object.lastLoginAt) !== null && _h !== void 0 ? _h : void 0;
        const { uid, emailVerified, isAnonymous, providerData, stsTokenManager: plainObjectTokenManager } = object;
        _assert(
          uid && plainObjectTokenManager,
          auth,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        const stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);
        _assert(
          typeof uid === "string",
          auth,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        assertStringOrUndefined(displayName, auth.name);
        assertStringOrUndefined(email, auth.name);
        _assert(
          typeof emailVerified === "boolean",
          auth,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        _assert(
          typeof isAnonymous === "boolean",
          auth,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        assertStringOrUndefined(phoneNumber, auth.name);
        assertStringOrUndefined(photoURL, auth.name);
        assertStringOrUndefined(tenantId, auth.name);
        assertStringOrUndefined(_redirectEventId, auth.name);
        assertStringOrUndefined(createdAt, auth.name);
        assertStringOrUndefined(lastLoginAt, auth.name);
        const user = new _UserImpl({
          uid,
          auth,
          email,
          emailVerified,
          displayName,
          isAnonymous,
          photoURL,
          phoneNumber,
          tenantId,
          stsTokenManager,
          createdAt,
          lastLoginAt
        });
        if (providerData && Array.isArray(providerData)) {
          user.providerData = providerData.map((userInfo) => Object.assign({}, userInfo));
        }
        if (_redirectEventId) {
          user._redirectEventId = _redirectEventId;
        }
        return user;
      }
      /**
       * Initialize a User from an idToken server response
       * @param auth
       * @param idTokenResponse
       */
      static async _fromIdTokenResponse(auth, idTokenResponse, isAnonymous = false) {
        const stsTokenManager = new StsTokenManager();
        stsTokenManager.updateFromServerResponse(idTokenResponse);
        const user = new _UserImpl({
          uid: idTokenResponse.localId,
          auth,
          stsTokenManager,
          isAnonymous
        });
        await _reloadWithoutSaving(user);
        return user;
      }
    };
    var instanceCache = /* @__PURE__ */ new Map();
    function _getInstance(cls) {
      debugAssert(cls instanceof Function, "Expected a class definition");
      let instance = instanceCache.get(cls);
      if (instance) {
        debugAssert(instance instanceof cls, "Instance stored in cache mismatched with class");
        return instance;
      }
      instance = new cls();
      instanceCache.set(cls, instance);
      return instance;
    }
    var InMemoryPersistence = class {
      constructor() {
        this.type = "NONE";
        this.storage = {};
      }
      async _isAvailable() {
        return true;
      }
      async _set(key, value) {
        this.storage[key] = value;
      }
      async _get(key) {
        const value = this.storage[key];
        return value === void 0 ? null : value;
      }
      async _remove(key) {
        delete this.storage[key];
      }
      _addListener(_key, _listener) {
        return;
      }
      _removeListener(_key, _listener) {
        return;
      }
    };
    InMemoryPersistence.type = "NONE";
    var inMemoryPersistence = InMemoryPersistence;
    function _persistenceKeyName(key, apiKey, appName) {
      return `${"firebase"}:${key}:${apiKey}:${appName}`;
    }
    var PersistenceUserManager = class _PersistenceUserManager {
      constructor(persistence, auth, userKey) {
        this.persistence = persistence;
        this.auth = auth;
        this.userKey = userKey;
        const { config, name: name2 } = this.auth;
        this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name2);
        this.fullPersistenceKey = _persistenceKeyName("persistence", config.apiKey, name2);
        this.boundEventHandler = auth._onStorageEvent.bind(auth);
        this.persistence._addListener(this.fullUserKey, this.boundEventHandler);
      }
      setCurrentUser(user) {
        return this.persistence._set(this.fullUserKey, user.toJSON());
      }
      async getCurrentUser() {
        const blob = await this.persistence._get(this.fullUserKey);
        return blob ? UserImpl._fromJSON(this.auth, blob) : null;
      }
      removeCurrentUser() {
        return this.persistence._remove(this.fullUserKey);
      }
      savePersistenceForRedirect() {
        return this.persistence._set(this.fullPersistenceKey, this.persistence.type);
      }
      async setPersistence(newPersistence) {
        if (this.persistence === newPersistence) {
          return;
        }
        const currentUser = await this.getCurrentUser();
        await this.removeCurrentUser();
        this.persistence = newPersistence;
        if (currentUser) {
          return this.setCurrentUser(currentUser);
        }
      }
      delete() {
        this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);
      }
      static async create(auth, persistenceHierarchy, userKey = "authUser") {
        if (!persistenceHierarchy.length) {
          return new _PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey);
        }
        const availablePersistences = (await Promise.all(persistenceHierarchy.map(async (persistence) => {
          if (await persistence._isAvailable()) {
            return persistence;
          }
          return void 0;
        }))).filter((persistence) => persistence);
        let selectedPersistence = availablePersistences[0] || _getInstance(inMemoryPersistence);
        const key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);
        let userToMigrate = null;
        for (const persistence of persistenceHierarchy) {
          try {
            const blob = await persistence._get(key);
            if (blob) {
              const user = UserImpl._fromJSON(auth, blob);
              if (persistence !== selectedPersistence) {
                userToMigrate = user;
              }
              selectedPersistence = persistence;
              break;
            }
          } catch (_a) {
          }
        }
        const migrationHierarchy = availablePersistences.filter((p) => p._shouldAllowMigration);
        if (!selectedPersistence._shouldAllowMigration || !migrationHierarchy.length) {
          return new _PersistenceUserManager(selectedPersistence, auth, userKey);
        }
        selectedPersistence = migrationHierarchy[0];
        if (userToMigrate) {
          await selectedPersistence._set(key, userToMigrate.toJSON());
        }
        await Promise.all(persistenceHierarchy.map(async (persistence) => {
          if (persistence !== selectedPersistence) {
            try {
              await persistence._remove(key);
            } catch (_a) {
            }
          }
        }));
        return new _PersistenceUserManager(selectedPersistence, auth, userKey);
      }
    };
    function _getBrowserName(userAgent) {
      const ua = userAgent.toLowerCase();
      if (ua.includes("opera/") || ua.includes("opr/") || ua.includes("opios/")) {
        return "Opera";
      } else if (_isIEMobile(ua)) {
        return "IEMobile";
      } else if (ua.includes("msie") || ua.includes("trident/")) {
        return "IE";
      } else if (ua.includes("edge/")) {
        return "Edge";
      } else if (_isFirefox(ua)) {
        return "Firefox";
      } else if (ua.includes("silk/")) {
        return "Silk";
      } else if (_isBlackBerry(ua)) {
        return "Blackberry";
      } else if (_isWebOS(ua)) {
        return "Webos";
      } else if (_isSafari(ua)) {
        return "Safari";
      } else if ((ua.includes("chrome/") || _isChromeIOS(ua)) && !ua.includes("edge/")) {
        return "Chrome";
      } else if (_isAndroid(ua)) {
        return "Android";
      } else {
        const re = /([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/;
        const matches = userAgent.match(re);
        if ((matches === null || matches === void 0 ? void 0 : matches.length) === 2) {
          return matches[1];
        }
      }
      return "Other";
    }
    function _isFirefox(ua = util.getUA()) {
      return /firefox\//i.test(ua);
    }
    function _isSafari(userAgent = util.getUA()) {
      const ua = userAgent.toLowerCase();
      return ua.includes("safari/") && !ua.includes("chrome/") && !ua.includes("crios/") && !ua.includes("android");
    }
    function _isChromeIOS(ua = util.getUA()) {
      return /crios\//i.test(ua);
    }
    function _isIEMobile(ua = util.getUA()) {
      return /iemobile/i.test(ua);
    }
    function _isAndroid(ua = util.getUA()) {
      return /android/i.test(ua);
    }
    function _isBlackBerry(ua = util.getUA()) {
      return /blackberry/i.test(ua);
    }
    function _isWebOS(ua = util.getUA()) {
      return /webos/i.test(ua);
    }
    function _isIOS(ua = util.getUA()) {
      return /iphone|ipad|ipod/i.test(ua) || /macintosh/i.test(ua) && /mobile/i.test(ua);
    }
    function _isIOS7Or8(ua = util.getUA()) {
      return /(iPad|iPhone|iPod).*OS 7_\d/i.test(ua) || /(iPad|iPhone|iPod).*OS 8_\d/i.test(ua);
    }
    function _isIOSStandalone(ua = util.getUA()) {
      var _a;
      return _isIOS(ua) && !!((_a = window.navigator) === null || _a === void 0 ? void 0 : _a.standalone);
    }
    function _isIE10() {
      return util.isIE() && document.documentMode === 10;
    }
    function _isMobileBrowser(ua = util.getUA()) {
      return _isIOS(ua) || _isAndroid(ua) || _isWebOS(ua) || _isBlackBerry(ua) || /windows phone/i.test(ua) || _isIEMobile(ua);
    }
    function _isIframe() {
      try {
        return !!(window && window !== window.top);
      } catch (e) {
        return false;
      }
    }
    function _getClientVersion(clientPlatform, frameworks = []) {
      let reportedPlatform;
      switch (clientPlatform) {
        case "Browser":
          reportedPlatform = _getBrowserName(util.getUA());
          break;
        case "Worker":
          reportedPlatform = `${_getBrowserName(util.getUA())}-${clientPlatform}`;
          break;
        default:
          reportedPlatform = clientPlatform;
      }
      const reportedFrameworks = frameworks.length ? frameworks.join(",") : "FirebaseCore-web";
      return `${reportedPlatform}/${"JsCore"}/${app.SDK_VERSION}/${reportedFrameworks}`;
    }
    async function getRecaptchaParams(auth) {
      return (await _performApiRequest(
        auth,
        "GET",
        "/v1/recaptchaParams"
        /* Endpoint.GET_RECAPTCHA_PARAM */
      )).recaptchaSiteKey || "";
    }
    async function getRecaptchaConfig(auth, request) {
      return _performApiRequest(auth, "GET", "/v2/recaptchaConfig", _addTidIfNecessary(auth, request));
    }
    function isV2(grecaptcha) {
      return grecaptcha !== void 0 && grecaptcha.getResponse !== void 0;
    }
    function isEnterprise(grecaptcha) {
      return grecaptcha !== void 0 && grecaptcha.enterprise !== void 0;
    }
    var RecaptchaConfig = class {
      constructor(response) {
        this.siteKey = "";
        this.emailPasswordEnabled = false;
        if (response.recaptchaKey === void 0) {
          throw new Error("recaptchaKey undefined");
        }
        this.siteKey = response.recaptchaKey.split("/")[3];
        this.emailPasswordEnabled = response.recaptchaEnforcementState.some((enforcementState) => enforcementState.provider === "EMAIL_PASSWORD_PROVIDER" && enforcementState.enforcementState !== "OFF");
      }
    };
    function getScriptParentElement() {
      var _a, _b;
      return (_b = (_a = document.getElementsByTagName("head")) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : document;
    }
    function _loadJS(url) {
      return new Promise((resolve, reject) => {
        const el = document.createElement("script");
        el.setAttribute("src", url);
        el.onload = resolve;
        el.onerror = (e) => {
          const error = _createError(
            "internal-error"
            /* AuthErrorCode.INTERNAL_ERROR */
          );
          error.customData = e;
          reject(error);
        };
        el.type = "text/javascript";
        el.charset = "UTF-8";
        getScriptParentElement().appendChild(el);
      });
    }
    function _generateCallbackName(prefix) {
      return `__${prefix}${Math.floor(Math.random() * 1e6)}`;
    }
    var RECAPTCHA_ENTERPRISE_URL = "https://www.google.com/recaptcha/enterprise.js?render=";
    var RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = "recaptcha-enterprise";
    var FAKE_TOKEN = "NO_RECAPTCHA";
    var RecaptchaEnterpriseVerifier = class {
      /**
       *
       * @param authExtern - The corresponding Firebase {@link Auth} instance.
       *
       */
      constructor(authExtern) {
        this.type = RECAPTCHA_ENTERPRISE_VERIFIER_TYPE;
        this.auth = _castAuth(authExtern);
      }
      /**
       * Executes the verification process.
       *
       * @returns A Promise for a token that can be used to assert the validity of a request.
       */
      async verify(action = "verify", forceRefresh = false) {
        async function retrieveSiteKey(auth) {
          if (!forceRefresh) {
            if (auth.tenantId == null && auth._agentRecaptchaConfig != null) {
              return auth._agentRecaptchaConfig.siteKey;
            }
            if (auth.tenantId != null && auth._tenantRecaptchaConfigs[auth.tenantId] !== void 0) {
              return auth._tenantRecaptchaConfigs[auth.tenantId].siteKey;
            }
          }
          return new Promise(async (resolve, reject) => {
            getRecaptchaConfig(auth, {
              clientType: "CLIENT_TYPE_WEB",
              version: "RECAPTCHA_ENTERPRISE"
              /* RecaptchaVersion.ENTERPRISE */
            }).then((response) => {
              if (response.recaptchaKey === void 0) {
                reject(new Error("recaptcha Enterprise site key undefined"));
              } else {
                const config = new RecaptchaConfig(response);
                if (auth.tenantId == null) {
                  auth._agentRecaptchaConfig = config;
                } else {
                  auth._tenantRecaptchaConfigs[auth.tenantId] = config;
                }
                return resolve(config.siteKey);
              }
            }).catch((error) => {
              reject(error);
            });
          });
        }
        function retrieveRecaptchaToken(siteKey, resolve, reject) {
          const grecaptcha = window.grecaptcha;
          if (isEnterprise(grecaptcha)) {
            grecaptcha.enterprise.ready(() => {
              grecaptcha.enterprise.execute(siteKey, { action }).then((token) => {
                resolve(token);
              }).catch(() => {
                resolve(FAKE_TOKEN);
              });
            });
          } else {
            reject(Error("No reCAPTCHA enterprise script loaded."));
          }
        }
        return new Promise((resolve, reject) => {
          retrieveSiteKey(this.auth).then((siteKey) => {
            if (!forceRefresh && isEnterprise(window.grecaptcha)) {
              retrieveRecaptchaToken(siteKey, resolve, reject);
            } else {
              if (typeof window === "undefined") {
                reject(new Error("RecaptchaVerifier is only supported in browser"));
                return;
              }
              _loadJS(RECAPTCHA_ENTERPRISE_URL + siteKey).then(() => {
                retrieveRecaptchaToken(siteKey, resolve, reject);
              }).catch((error) => {
                reject(error);
              });
            }
          }).catch((error) => {
            reject(error);
          });
        });
      }
    };
    async function injectRecaptchaFields(auth, request, action, captchaResp = false) {
      const verifier = new RecaptchaEnterpriseVerifier(auth);
      let captchaResponse;
      try {
        captchaResponse = await verifier.verify(action);
      } catch (error) {
        captchaResponse = await verifier.verify(action, true);
      }
      const newRequest = Object.assign({}, request);
      if (!captchaResp) {
        Object.assign(newRequest, { captchaResponse });
      } else {
        Object.assign(newRequest, { "captchaResp": captchaResponse });
      }
      Object.assign(newRequest, {
        "clientType": "CLIENT_TYPE_WEB"
        /* RecaptchaClientType.WEB */
      });
      Object.assign(newRequest, {
        "recaptchaVersion": "RECAPTCHA_ENTERPRISE"
        /* RecaptchaVersion.ENTERPRISE */
      });
      return newRequest;
    }
    var AuthMiddlewareQueue = class {
      constructor(auth) {
        this.auth = auth;
        this.queue = [];
      }
      pushCallback(callback, onAbort) {
        const wrappedCallback = (user) => new Promise((resolve, reject) => {
          try {
            const result = callback(user);
            resolve(result);
          } catch (e) {
            reject(e);
          }
        });
        wrappedCallback.onAbort = onAbort;
        this.queue.push(wrappedCallback);
        const index = this.queue.length - 1;
        return () => {
          this.queue[index] = () => Promise.resolve();
        };
      }
      async runMiddleware(nextUser) {
        if (this.auth.currentUser === nextUser) {
          return;
        }
        const onAbortStack = [];
        try {
          for (const beforeStateCallback of this.queue) {
            await beforeStateCallback(nextUser);
            if (beforeStateCallback.onAbort) {
              onAbortStack.push(beforeStateCallback.onAbort);
            }
          }
        } catch (e) {
          onAbortStack.reverse();
          for (const onAbort of onAbortStack) {
            try {
              onAbort();
            } catch (_) {
            }
          }
          throw this.auth._errorFactory.create("login-blocked", {
            originalMessage: e === null || e === void 0 ? void 0 : e.message
          });
        }
      }
    };
    var AuthImpl = class {
      constructor(app2, heartbeatServiceProvider, appCheckServiceProvider, config) {
        this.app = app2;
        this.heartbeatServiceProvider = heartbeatServiceProvider;
        this.appCheckServiceProvider = appCheckServiceProvider;
        this.config = config;
        this.currentUser = null;
        this.emulatorConfig = null;
        this.operations = Promise.resolve();
        this.authStateSubscription = new Subscription(this);
        this.idTokenSubscription = new Subscription(this);
        this.beforeStateQueue = new AuthMiddlewareQueue(this);
        this.redirectUser = null;
        this.isProactiveRefreshEnabled = false;
        this._canInitEmulator = true;
        this._isInitialized = false;
        this._deleted = false;
        this._initializationPromise = null;
        this._popupRedirectResolver = null;
        this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;
        this._agentRecaptchaConfig = null;
        this._tenantRecaptchaConfigs = {};
        this.lastNotifiedUid = void 0;
        this.languageCode = null;
        this.tenantId = null;
        this.settings = { appVerificationDisabledForTesting: false };
        this.frameworks = [];
        this.name = app2.name;
        this.clientVersion = config.sdkClientVersion;
      }
      _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {
        if (popupRedirectResolver) {
          this._popupRedirectResolver = _getInstance(popupRedirectResolver);
        }
        this._initializationPromise = this.queue(async () => {
          var _a, _b;
          if (this._deleted) {
            return;
          }
          this.persistenceManager = await PersistenceUserManager.create(this, persistenceHierarchy);
          if (this._deleted) {
            return;
          }
          if ((_a = this._popupRedirectResolver) === null || _a === void 0 ? void 0 : _a._shouldInitProactively) {
            try {
              await this._popupRedirectResolver._initialize(this);
            } catch (e) {
            }
          }
          await this.initializeCurrentUser(popupRedirectResolver);
          this.lastNotifiedUid = ((_b = this.currentUser) === null || _b === void 0 ? void 0 : _b.uid) || null;
          if (this._deleted) {
            return;
          }
          this._isInitialized = true;
        });
        return this._initializationPromise;
      }
      /**
       * If the persistence is changed in another window, the user manager will let us know
       */
      async _onStorageEvent() {
        if (this._deleted) {
          return;
        }
        const user = await this.assertedPersistence.getCurrentUser();
        if (!this.currentUser && !user) {
          return;
        }
        if (this.currentUser && user && this.currentUser.uid === user.uid) {
          this._currentUser._assign(user);
          await this.currentUser.getIdToken();
          return;
        }
        await this._updateCurrentUser(
          user,
          /* skipBeforeStateCallbacks */
          true
        );
      }
      async initializeCurrentUser(popupRedirectResolver) {
        var _a;
        const previouslyStoredUser = await this.assertedPersistence.getCurrentUser();
        let futureCurrentUser = previouslyStoredUser;
        let needsTocheckMiddleware = false;
        if (popupRedirectResolver && this.config.authDomain) {
          await this.getOrInitRedirectPersistenceManager();
          const redirectUserEventId = (_a = this.redirectUser) === null || _a === void 0 ? void 0 : _a._redirectEventId;
          const storedUserEventId = futureCurrentUser === null || futureCurrentUser === void 0 ? void 0 : futureCurrentUser._redirectEventId;
          const result = await this.tryRedirectSignIn(popupRedirectResolver);
          if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) && (result === null || result === void 0 ? void 0 : result.user)) {
            futureCurrentUser = result.user;
            needsTocheckMiddleware = true;
          }
        }
        if (!futureCurrentUser) {
          return this.directlySetCurrentUser(null);
        }
        if (!futureCurrentUser._redirectEventId) {
          if (needsTocheckMiddleware) {
            try {
              await this.beforeStateQueue.runMiddleware(futureCurrentUser);
            } catch (e) {
              futureCurrentUser = previouslyStoredUser;
              this._popupRedirectResolver._overrideRedirectResult(this, () => Promise.reject(e));
            }
          }
          if (futureCurrentUser) {
            return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);
          } else {
            return this.directlySetCurrentUser(null);
          }
        }
        _assert(
          this._popupRedirectResolver,
          this,
          "argument-error"
          /* AuthErrorCode.ARGUMENT_ERROR */
        );
        await this.getOrInitRedirectPersistenceManager();
        if (this.redirectUser && this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId) {
          return this.directlySetCurrentUser(futureCurrentUser);
        }
        return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);
      }
      async tryRedirectSignIn(redirectResolver) {
        let result = null;
        try {
          result = await this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);
        } catch (e) {
          await this._setRedirectUser(null);
        }
        return result;
      }
      async reloadAndSetCurrentUserOrClear(user) {
        try {
          await _reloadWithoutSaving(user);
        } catch (e) {
          if ((e === null || e === void 0 ? void 0 : e.code) !== `auth/${"network-request-failed"}`) {
            return this.directlySetCurrentUser(null);
          }
        }
        return this.directlySetCurrentUser(user);
      }
      useDeviceLanguage() {
        this.languageCode = _getUserLanguage();
      }
      async _delete() {
        this._deleted = true;
      }
      async updateCurrentUser(userExtern) {
        const user = userExtern ? util.getModularInstance(userExtern) : null;
        if (user) {
          _assert(
            user.auth.config.apiKey === this.config.apiKey,
            this,
            "invalid-user-token"
            /* AuthErrorCode.INVALID_AUTH */
          );
        }
        return this._updateCurrentUser(user && user._clone(this));
      }
      async _updateCurrentUser(user, skipBeforeStateCallbacks = false) {
        if (this._deleted) {
          return;
        }
        if (user) {
          _assert(
            this.tenantId === user.tenantId,
            this,
            "tenant-id-mismatch"
            /* AuthErrorCode.TENANT_ID_MISMATCH */
          );
        }
        if (!skipBeforeStateCallbacks) {
          await this.beforeStateQueue.runMiddleware(user);
        }
        return this.queue(async () => {
          await this.directlySetCurrentUser(user);
          this.notifyAuthListeners();
        });
      }
      async signOut() {
        await this.beforeStateQueue.runMiddleware(null);
        if (this.redirectPersistenceManager || this._popupRedirectResolver) {
          await this._setRedirectUser(null);
        }
        return this._updateCurrentUser(
          null,
          /* skipBeforeStateCallbacks */
          true
        );
      }
      setPersistence(persistence) {
        return this.queue(async () => {
          await this.assertedPersistence.setPersistence(_getInstance(persistence));
        });
      }
      async initializeRecaptchaConfig() {
        const response = await getRecaptchaConfig(this, {
          clientType: "CLIENT_TYPE_WEB",
          version: "RECAPTCHA_ENTERPRISE"
          /* RecaptchaVersion.ENTERPRISE */
        });
        const config = new RecaptchaConfig(response);
        if (this.tenantId == null) {
          this._agentRecaptchaConfig = config;
        } else {
          this._tenantRecaptchaConfigs[this.tenantId] = config;
        }
        if (config.emailPasswordEnabled) {
          const verifier = new RecaptchaEnterpriseVerifier(this);
          void verifier.verify();
        }
      }
      _getRecaptchaConfig() {
        if (this.tenantId == null) {
          return this._agentRecaptchaConfig;
        } else {
          return this._tenantRecaptchaConfigs[this.tenantId];
        }
      }
      _getPersistence() {
        return this.assertedPersistence.persistence.type;
      }
      _updateErrorMap(errorMap) {
        this._errorFactory = new util.ErrorFactory("auth", "Firebase", errorMap());
      }
      onAuthStateChanged(nextOrObserver, error, completed) {
        return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);
      }
      beforeAuthStateChanged(callback, onAbort) {
        return this.beforeStateQueue.pushCallback(callback, onAbort);
      }
      onIdTokenChanged(nextOrObserver, error, completed) {
        return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);
      }
      toJSON() {
        var _a;
        return {
          apiKey: this.config.apiKey,
          authDomain: this.config.authDomain,
          appName: this.name,
          currentUser: (_a = this._currentUser) === null || _a === void 0 ? void 0 : _a.toJSON()
        };
      }
      async _setRedirectUser(user, popupRedirectResolver) {
        const redirectManager = await this.getOrInitRedirectPersistenceManager(popupRedirectResolver);
        return user === null ? redirectManager.removeCurrentUser() : redirectManager.setCurrentUser(user);
      }
      async getOrInitRedirectPersistenceManager(popupRedirectResolver) {
        if (!this.redirectPersistenceManager) {
          const resolver = popupRedirectResolver && _getInstance(popupRedirectResolver) || this._popupRedirectResolver;
          _assert(
            resolver,
            this,
            "argument-error"
            /* AuthErrorCode.ARGUMENT_ERROR */
          );
          this.redirectPersistenceManager = await PersistenceUserManager.create(
            this,
            [_getInstance(resolver._redirectPersistence)],
            "redirectUser"
            /* KeyName.REDIRECT_USER */
          );
          this.redirectUser = await this.redirectPersistenceManager.getCurrentUser();
        }
        return this.redirectPersistenceManager;
      }
      async _redirectUserForId(id) {
        var _a, _b;
        if (this._isInitialized) {
          await this.queue(async () => {
          });
        }
        if (((_a = this._currentUser) === null || _a === void 0 ? void 0 : _a._redirectEventId) === id) {
          return this._currentUser;
        }
        if (((_b = this.redirectUser) === null || _b === void 0 ? void 0 : _b._redirectEventId) === id) {
          return this.redirectUser;
        }
        return null;
      }
      async _persistUserIfCurrent(user) {
        if (user === this.currentUser) {
          return this.queue(async () => this.directlySetCurrentUser(user));
        }
      }
      /** Notifies listeners only if the user is current */
      _notifyListenersIfCurrent(user) {
        if (user === this.currentUser) {
          this.notifyAuthListeners();
        }
      }
      _key() {
        return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;
      }
      _startProactiveRefresh() {
        this.isProactiveRefreshEnabled = true;
        if (this.currentUser) {
          this._currentUser._startProactiveRefresh();
        }
      }
      _stopProactiveRefresh() {
        this.isProactiveRefreshEnabled = false;
        if (this.currentUser) {
          this._currentUser._stopProactiveRefresh();
        }
      }
      /** Returns the current user cast as the internal type */
      get _currentUser() {
        return this.currentUser;
      }
      notifyAuthListeners() {
        var _a, _b;
        if (!this._isInitialized) {
          return;
        }
        this.idTokenSubscription.next(this.currentUser);
        const currentUid = (_b = (_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.uid) !== null && _b !== void 0 ? _b : null;
        if (this.lastNotifiedUid !== currentUid) {
          this.lastNotifiedUid = currentUid;
          this.authStateSubscription.next(this.currentUser);
        }
      }
      registerStateListener(subscription, nextOrObserver, error, completed) {
        if (this._deleted) {
          return () => {
          };
        }
        const cb = typeof nextOrObserver === "function" ? nextOrObserver : nextOrObserver.next.bind(nextOrObserver);
        const promise = this._isInitialized ? Promise.resolve() : this._initializationPromise;
        _assert(
          promise,
          this,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        promise.then(() => cb(this.currentUser));
        if (typeof nextOrObserver === "function") {
          return subscription.addObserver(nextOrObserver, error, completed);
        } else {
          return subscription.addObserver(nextOrObserver);
        }
      }
      /**
       * Unprotected (from race conditions) method to set the current user. This
       * should only be called from within a queued callback. This is necessary
       * because the queue shouldn't rely on another queued callback.
       */
      async directlySetCurrentUser(user) {
        if (this.currentUser && this.currentUser !== user) {
          this._currentUser._stopProactiveRefresh();
        }
        if (user && this.isProactiveRefreshEnabled) {
          user._startProactiveRefresh();
        }
        this.currentUser = user;
        if (user) {
          await this.assertedPersistence.setCurrentUser(user);
        } else {
          await this.assertedPersistence.removeCurrentUser();
        }
      }
      queue(action) {
        this.operations = this.operations.then(action, action);
        return this.operations;
      }
      get assertedPersistence() {
        _assert(
          this.persistenceManager,
          this,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        return this.persistenceManager;
      }
      _logFramework(framework) {
        if (!framework || this.frameworks.includes(framework)) {
          return;
        }
        this.frameworks.push(framework);
        this.frameworks.sort();
        this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());
      }
      _getFrameworks() {
        return this.frameworks;
      }
      async _getAdditionalHeaders() {
        var _a;
        const headers = {
          [
            "X-Client-Version"
            /* HttpHeader.X_CLIENT_VERSION */
          ]: this.clientVersion
        };
        if (this.app.options.appId) {
          headers[
            "X-Firebase-gmpid"
            /* HttpHeader.X_FIREBASE_GMPID */
          ] = this.app.options.appId;
        }
        const heartbeatsHeader = await ((_a = this.heartbeatServiceProvider.getImmediate({
          optional: true
        })) === null || _a === void 0 ? void 0 : _a.getHeartbeatsHeader());
        if (heartbeatsHeader) {
          headers[
            "X-Firebase-Client"
            /* HttpHeader.X_FIREBASE_CLIENT */
          ] = heartbeatsHeader;
        }
        const appCheckToken = await this._getAppCheckToken();
        if (appCheckToken) {
          headers[
            "X-Firebase-AppCheck"
            /* HttpHeader.X_FIREBASE_APP_CHECK */
          ] = appCheckToken;
        }
        return headers;
      }
      async _getAppCheckToken() {
        var _a;
        const appCheckTokenResult = await ((_a = this.appCheckServiceProvider.getImmediate({ optional: true })) === null || _a === void 0 ? void 0 : _a.getToken());
        if (appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.error) {
          _logWarn(`Error while retrieving App Check token: ${appCheckTokenResult.error}`);
        }
        return appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.token;
      }
    };
    function _castAuth(auth) {
      return util.getModularInstance(auth);
    }
    var Subscription = class {
      constructor(auth) {
        this.auth = auth;
        this.observer = null;
        this.addObserver = util.createSubscribe((observer) => this.observer = observer);
      }
      get next() {
        _assert(
          this.observer,
          this.auth,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        return this.observer.next.bind(this.observer);
      }
    };
    function initializeAuth(app$1, deps) {
      const provider = app._getProvider(app$1, "auth");
      if (provider.isInitialized()) {
        const auth2 = provider.getImmediate();
        const initialOptions = provider.getOptions();
        if (util.deepEqual(initialOptions, deps !== null && deps !== void 0 ? deps : {})) {
          return auth2;
        } else {
          _fail(
            auth2,
            "already-initialized"
            /* AuthErrorCode.ALREADY_INITIALIZED */
          );
        }
      }
      const auth = provider.initialize({ options: deps });
      return auth;
    }
    function _initializeAuthInstance(auth, deps) {
      const persistence = (deps === null || deps === void 0 ? void 0 : deps.persistence) || [];
      const hierarchy = (Array.isArray(persistence) ? persistence : [persistence]).map(_getInstance);
      if (deps === null || deps === void 0 ? void 0 : deps.errorMap) {
        auth._updateErrorMap(deps.errorMap);
      }
      auth._initializeWithPersistence(hierarchy, deps === null || deps === void 0 ? void 0 : deps.popupRedirectResolver);
    }
    function connectAuthEmulator(auth, url, options) {
      const authInternal = _castAuth(auth);
      _assert(
        authInternal._canInitEmulator,
        authInternal,
        "emulator-config-failed"
        /* AuthErrorCode.EMULATOR_CONFIG_FAILED */
      );
      _assert(
        /^https?:\/\//.test(url),
        authInternal,
        "invalid-emulator-scheme"
        /* AuthErrorCode.INVALID_EMULATOR_SCHEME */
      );
      const disableWarnings = !!(options === null || options === void 0 ? void 0 : options.disableWarnings);
      const protocol = extractProtocol(url);
      const { host, port } = extractHostAndPort(url);
      const portStr = port === null ? "" : `:${port}`;
      authInternal.config.emulator = { url: `${protocol}//${host}${portStr}/` };
      authInternal.settings.appVerificationDisabledForTesting = true;
      authInternal.emulatorConfig = Object.freeze({
        host,
        port,
        protocol: protocol.replace(":", ""),
        options: Object.freeze({ disableWarnings })
      });
      if (!disableWarnings) {
        emitEmulatorWarning();
      }
    }
    function extractProtocol(url) {
      const protocolEnd = url.indexOf(":");
      return protocolEnd < 0 ? "" : url.substr(0, protocolEnd + 1);
    }
    function extractHostAndPort(url) {
      const protocol = extractProtocol(url);
      const authority = /(\/\/)?([^?#/]+)/.exec(url.substr(protocol.length));
      if (!authority) {
        return { host: "", port: null };
      }
      const hostAndPort = authority[2].split("@").pop() || "";
      const bracketedIPv6 = /^(\[[^\]]+\])(:|$)/.exec(hostAndPort);
      if (bracketedIPv6) {
        const host = bracketedIPv6[1];
        return { host, port: parsePort(hostAndPort.substr(host.length + 1)) };
      } else {
        const [host, port] = hostAndPort.split(":");
        return { host, port: parsePort(port) };
      }
    }
    function parsePort(portStr) {
      if (!portStr) {
        return null;
      }
      const port = Number(portStr);
      if (isNaN(port)) {
        return null;
      }
      return port;
    }
    function emitEmulatorWarning() {
      function attachBanner() {
        const el = document.createElement("p");
        const sty = el.style;
        el.innerText = "Running in emulator mode. Do not use with production credentials.";
        sty.position = "fixed";
        sty.width = "100%";
        sty.backgroundColor = "#ffffff";
        sty.border = ".1em solid #000000";
        sty.color = "#b50000";
        sty.bottom = "0px";
        sty.left = "0px";
        sty.margin = "0px";
        sty.zIndex = "10000";
        sty.textAlign = "center";
        el.classList.add("firebase-emulator-warning");
        document.body.appendChild(el);
      }
      if (typeof console !== "undefined" && typeof console.info === "function") {
        console.info("WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials.");
      }
      if (typeof window !== "undefined" && typeof document !== "undefined") {
        if (document.readyState === "loading") {
          window.addEventListener("DOMContentLoaded", attachBanner);
        } else {
          attachBanner();
        }
      }
    }
    var AuthCredential = class {
      /** @internal */
      constructor(providerId, signInMethod) {
        this.providerId = providerId;
        this.signInMethod = signInMethod;
      }
      /**
       * Returns a JSON-serializable representation of this object.
       *
       * @returns a JSON-serializable representation of this object.
       */
      toJSON() {
        return debugFail("not implemented");
      }
      /** @internal */
      _getIdTokenResponse(_auth) {
        return debugFail("not implemented");
      }
      /** @internal */
      _linkToIdToken(_auth, _idToken) {
        return debugFail("not implemented");
      }
      /** @internal */
      _getReauthenticationResolver(_auth) {
        return debugFail("not implemented");
      }
    };
    async function resetPassword(auth, request) {
      return _performApiRequest(auth, "POST", "/v1/accounts:resetPassword", _addTidIfNecessary(auth, request));
    }
    async function updateEmailPassword(auth, request) {
      return _performApiRequest(auth, "POST", "/v1/accounts:update", request);
    }
    async function applyActionCode$1(auth, request) {
      return _performApiRequest(auth, "POST", "/v1/accounts:update", _addTidIfNecessary(auth, request));
    }
    async function signInWithPassword(auth, request) {
      return _performSignInRequest(auth, "POST", "/v1/accounts:signInWithPassword", _addTidIfNecessary(auth, request));
    }
    async function sendOobCode(auth, request) {
      return _performApiRequest(auth, "POST", "/v1/accounts:sendOobCode", _addTidIfNecessary(auth, request));
    }
    async function sendEmailVerification$1(auth, request) {
      return sendOobCode(auth, request);
    }
    async function sendPasswordResetEmail$1(auth, request) {
      return sendOobCode(auth, request);
    }
    async function sendSignInLinkToEmail$1(auth, request) {
      return sendOobCode(auth, request);
    }
    async function verifyAndChangeEmail(auth, request) {
      return sendOobCode(auth, request);
    }
    async function signInWithEmailLink$1(auth, request) {
      return _performSignInRequest(auth, "POST", "/v1/accounts:signInWithEmailLink", _addTidIfNecessary(auth, request));
    }
    async function signInWithEmailLinkForLinking(auth, request) {
      return _performSignInRequest(auth, "POST", "/v1/accounts:signInWithEmailLink", _addTidIfNecessary(auth, request));
    }
    var EmailAuthCredential = class _EmailAuthCredential extends AuthCredential {
      /** @internal */
      constructor(_email, _password, signInMethod, _tenantId = null) {
        super("password", signInMethod);
        this._email = _email;
        this._password = _password;
        this._tenantId = _tenantId;
      }
      /** @internal */
      static _fromEmailAndPassword(email, password) {
        return new _EmailAuthCredential(
          email,
          password,
          "password"
          /* SignInMethod.EMAIL_PASSWORD */
        );
      }
      /** @internal */
      static _fromEmailAndCode(email, oobCode, tenantId = null) {
        return new _EmailAuthCredential(email, oobCode, "emailLink", tenantId);
      }
      /** {@inheritdoc AuthCredential.toJSON} */
      toJSON() {
        return {
          email: this._email,
          password: this._password,
          signInMethod: this.signInMethod,
          tenantId: this._tenantId
        };
      }
      /**
       * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.
       *
       * @param json - Either `object` or the stringified representation of the object. When string is
       * provided, `JSON.parse` would be called first.
       *
       * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.
       */
      static fromJSON(json) {
        const obj = typeof json === "string" ? JSON.parse(json) : json;
        if ((obj === null || obj === void 0 ? void 0 : obj.email) && (obj === null || obj === void 0 ? void 0 : obj.password)) {
          if (obj.signInMethod === "password") {
            return this._fromEmailAndPassword(obj.email, obj.password);
          } else if (obj.signInMethod === "emailLink") {
            return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);
          }
        }
        return null;
      }
      /** @internal */
      async _getIdTokenResponse(auth) {
        var _a;
        switch (this.signInMethod) {
          case "password":
            const request = {
              returnSecureToken: true,
              email: this._email,
              password: this._password,
              clientType: "CLIENT_TYPE_WEB"
              /* RecaptchaClientType.WEB */
            };
            if ((_a = auth._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.emailPasswordEnabled) {
              const requestWithRecaptcha = await injectRecaptchaFields(
                auth,
                request,
                "signInWithPassword"
                /* RecaptchaActionName.SIGN_IN_WITH_PASSWORD */
              );
              return signInWithPassword(auth, requestWithRecaptcha);
            } else {
              return signInWithPassword(auth, request).catch(async (error) => {
                if (error.code === `auth/${"missing-recaptcha-token"}`) {
                  console.log("Sign-in with email address and password is protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the sign-in flow.");
                  const requestWithRecaptcha = await injectRecaptchaFields(
                    auth,
                    request,
                    "signInWithPassword"
                    /* RecaptchaActionName.SIGN_IN_WITH_PASSWORD */
                  );
                  return signInWithPassword(auth, requestWithRecaptcha);
                } else {
                  return Promise.reject(error);
                }
              });
            }
          case "emailLink":
            return signInWithEmailLink$1(auth, {
              email: this._email,
              oobCode: this._password
            });
          default:
            _fail(
              auth,
              "internal-error"
              /* AuthErrorCode.INTERNAL_ERROR */
            );
        }
      }
      /** @internal */
      async _linkToIdToken(auth, idToken) {
        switch (this.signInMethod) {
          case "password":
            return updateEmailPassword(auth, {
              idToken,
              returnSecureToken: true,
              email: this._email,
              password: this._password
            });
          case "emailLink":
            return signInWithEmailLinkForLinking(auth, {
              idToken,
              email: this._email,
              oobCode: this._password
            });
          default:
            _fail(
              auth,
              "internal-error"
              /* AuthErrorCode.INTERNAL_ERROR */
            );
        }
      }
      /** @internal */
      _getReauthenticationResolver(auth) {
        return this._getIdTokenResponse(auth);
      }
    };
    async function signInWithIdp(auth, request) {
      return _performSignInRequest(auth, "POST", "/v1/accounts:signInWithIdp", _addTidIfNecessary(auth, request));
    }
    var IDP_REQUEST_URI$1 = "http://localhost";
    var OAuthCredential = class _OAuthCredential extends AuthCredential {
      constructor() {
        super(...arguments);
        this.pendingToken = null;
      }
      /** @internal */
      static _fromParams(params) {
        const cred = new _OAuthCredential(params.providerId, params.signInMethod);
        if (params.idToken || params.accessToken) {
          if (params.idToken) {
            cred.idToken = params.idToken;
          }
          if (params.accessToken) {
            cred.accessToken = params.accessToken;
          }
          if (params.nonce && !params.pendingToken) {
            cred.nonce = params.nonce;
          }
          if (params.pendingToken) {
            cred.pendingToken = params.pendingToken;
          }
        } else if (params.oauthToken && params.oauthTokenSecret) {
          cred.accessToken = params.oauthToken;
          cred.secret = params.oauthTokenSecret;
        } else {
          _fail(
            "argument-error"
            /* AuthErrorCode.ARGUMENT_ERROR */
          );
        }
        return cred;
      }
      /** {@inheritdoc AuthCredential.toJSON}  */
      toJSON() {
        return {
          idToken: this.idToken,
          accessToken: this.accessToken,
          secret: this.secret,
          nonce: this.nonce,
          pendingToken: this.pendingToken,
          providerId: this.providerId,
          signInMethod: this.signInMethod
        };
      }
      /**
       * Static method to deserialize a JSON representation of an object into an
       * {@link  AuthCredential}.
       *
       * @param json - Input can be either Object or the stringified representation of the object.
       * When string is provided, JSON.parse would be called first.
       *
       * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.
       */
      static fromJSON(json) {
        const obj = typeof json === "string" ? JSON.parse(json) : json;
        const { providerId, signInMethod } = obj, rest = tslib.__rest(obj, ["providerId", "signInMethod"]);
        if (!providerId || !signInMethod) {
          return null;
        }
        const cred = new _OAuthCredential(providerId, signInMethod);
        cred.idToken = rest.idToken || void 0;
        cred.accessToken = rest.accessToken || void 0;
        cred.secret = rest.secret;
        cred.nonce = rest.nonce;
        cred.pendingToken = rest.pendingToken || null;
        return cred;
      }
      /** @internal */
      _getIdTokenResponse(auth) {
        const request = this.buildRequest();
        return signInWithIdp(auth, request);
      }
      /** @internal */
      _linkToIdToken(auth, idToken) {
        const request = this.buildRequest();
        request.idToken = idToken;
        return signInWithIdp(auth, request);
      }
      /** @internal */
      _getReauthenticationResolver(auth) {
        const request = this.buildRequest();
        request.autoCreate = false;
        return signInWithIdp(auth, request);
      }
      buildRequest() {
        const request = {
          requestUri: IDP_REQUEST_URI$1,
          returnSecureToken: true
        };
        if (this.pendingToken) {
          request.pendingToken = this.pendingToken;
        } else {
          const postBody = {};
          if (this.idToken) {
            postBody["id_token"] = this.idToken;
          }
          if (this.accessToken) {
            postBody["access_token"] = this.accessToken;
          }
          if (this.secret) {
            postBody["oauth_token_secret"] = this.secret;
          }
          postBody["providerId"] = this.providerId;
          if (this.nonce && !this.pendingToken) {
            postBody["nonce"] = this.nonce;
          }
          request.postBody = util.querystring(postBody);
        }
        return request;
      }
    };
    async function sendPhoneVerificationCode(auth, request) {
      return _performApiRequest(auth, "POST", "/v1/accounts:sendVerificationCode", _addTidIfNecessary(auth, request));
    }
    async function signInWithPhoneNumber$1(auth, request) {
      return _performSignInRequest(auth, "POST", "/v1/accounts:signInWithPhoneNumber", _addTidIfNecessary(auth, request));
    }
    async function linkWithPhoneNumber$1(auth, request) {
      const response = await _performSignInRequest(auth, "POST", "/v1/accounts:signInWithPhoneNumber", _addTidIfNecessary(auth, request));
      if (response.temporaryProof) {
        throw _makeTaggedError(auth, "account-exists-with-different-credential", response);
      }
      return response;
    }
    var VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = {
      [
        "USER_NOT_FOUND"
        /* ServerError.USER_NOT_FOUND */
      ]: "user-not-found"
      /* AuthErrorCode.USER_DELETED */
    };
    async function verifyPhoneNumberForExisting(auth, request) {
      const apiRequest = Object.assign(Object.assign({}, request), { operation: "REAUTH" });
      return _performSignInRequest(auth, "POST", "/v1/accounts:signInWithPhoneNumber", _addTidIfNecessary(auth, apiRequest), VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_);
    }
    var PhoneAuthCredential = class _PhoneAuthCredential extends AuthCredential {
      constructor(params) {
        super(
          "phone",
          "phone"
          /* SignInMethod.PHONE */
        );
        this.params = params;
      }
      /** @internal */
      static _fromVerification(verificationId, verificationCode) {
        return new _PhoneAuthCredential({ verificationId, verificationCode });
      }
      /** @internal */
      static _fromTokenResponse(phoneNumber, temporaryProof) {
        return new _PhoneAuthCredential({ phoneNumber, temporaryProof });
      }
      /** @internal */
      _getIdTokenResponse(auth) {
        return signInWithPhoneNumber$1(auth, this._makeVerificationRequest());
      }
      /** @internal */
      _linkToIdToken(auth, idToken) {
        return linkWithPhoneNumber$1(auth, Object.assign({ idToken }, this._makeVerificationRequest()));
      }
      /** @internal */
      _getReauthenticationResolver(auth) {
        return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());
      }
      /** @internal */
      _makeVerificationRequest() {
        const { temporaryProof, phoneNumber, verificationId, verificationCode } = this.params;
        if (temporaryProof && phoneNumber) {
          return { temporaryProof, phoneNumber };
        }
        return {
          sessionInfo: verificationId,
          code: verificationCode
        };
      }
      /** {@inheritdoc AuthCredential.toJSON} */
      toJSON() {
        const obj = {
          providerId: this.providerId
        };
        if (this.params.phoneNumber) {
          obj.phoneNumber = this.params.phoneNumber;
        }
        if (this.params.temporaryProof) {
          obj.temporaryProof = this.params.temporaryProof;
        }
        if (this.params.verificationCode) {
          obj.verificationCode = this.params.verificationCode;
        }
        if (this.params.verificationId) {
          obj.verificationId = this.params.verificationId;
        }
        return obj;
      }
      /** Generates a phone credential based on a plain object or a JSON string. */
      static fromJSON(json) {
        if (typeof json === "string") {
          json = JSON.parse(json);
        }
        const { verificationId, verificationCode, phoneNumber, temporaryProof } = json;
        if (!verificationCode && !verificationId && !phoneNumber && !temporaryProof) {
          return null;
        }
        return new _PhoneAuthCredential({
          verificationId,
          verificationCode,
          phoneNumber,
          temporaryProof
        });
      }
    };
    function parseMode(mode) {
      switch (mode) {
        case "recoverEmail":
          return "RECOVER_EMAIL";
        case "resetPassword":
          return "PASSWORD_RESET";
        case "signIn":
          return "EMAIL_SIGNIN";
        case "verifyEmail":
          return "VERIFY_EMAIL";
        case "verifyAndChangeEmail":
          return "VERIFY_AND_CHANGE_EMAIL";
        case "revertSecondFactorAddition":
          return "REVERT_SECOND_FACTOR_ADDITION";
        default:
          return null;
      }
    }
    function parseDeepLink(url) {
      const link = util.querystringDecode(util.extractQuerystring(url))["link"];
      const doubleDeepLink = link ? util.querystringDecode(util.extractQuerystring(link))["deep_link_id"] : null;
      const iOSDeepLink = util.querystringDecode(util.extractQuerystring(url))["deep_link_id"];
      const iOSDoubleDeepLink = iOSDeepLink ? util.querystringDecode(util.extractQuerystring(iOSDeepLink))["link"] : null;
      return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;
    }
    var ActionCodeURL = class _ActionCodeURL {
      /**
       * @param actionLink - The link from which to extract the URL.
       * @returns The {@link ActionCodeURL} object, or null if the link is invalid.
       *
       * @internal
       */
      constructor(actionLink) {
        var _a, _b, _c, _d, _e, _f;
        const searchParams = util.querystringDecode(util.extractQuerystring(actionLink));
        const apiKey = (_a = searchParams[
          "apiKey"
          /* QueryField.API_KEY */
        ]) !== null && _a !== void 0 ? _a : null;
        const code = (_b = searchParams[
          "oobCode"
          /* QueryField.CODE */
        ]) !== null && _b !== void 0 ? _b : null;
        const operation = parseMode((_c = searchParams[
          "mode"
          /* QueryField.MODE */
        ]) !== null && _c !== void 0 ? _c : null);
        _assert(
          apiKey && code && operation,
          "argument-error"
          /* AuthErrorCode.ARGUMENT_ERROR */
        );
        this.apiKey = apiKey;
        this.operation = operation;
        this.code = code;
        this.continueUrl = (_d = searchParams[
          "continueUrl"
          /* QueryField.CONTINUE_URL */
        ]) !== null && _d !== void 0 ? _d : null;
        this.languageCode = (_e = searchParams[
          "languageCode"
          /* QueryField.LANGUAGE_CODE */
        ]) !== null && _e !== void 0 ? _e : null;
        this.tenantId = (_f = searchParams[
          "tenantId"
          /* QueryField.TENANT_ID */
        ]) !== null && _f !== void 0 ? _f : null;
      }
      /**
       * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,
       * otherwise returns null.
       *
       * @param link  - The email action link string.
       * @returns The {@link ActionCodeURL} object, or null if the link is invalid.
       *
       * @public
       */
      static parseLink(link) {
        const actionLink = parseDeepLink(link);
        try {
          return new _ActionCodeURL(actionLink);
        } catch (_a) {
          return null;
        }
      }
    };
    function parseActionCodeURL(link) {
      return ActionCodeURL.parseLink(link);
    }
    var EmailAuthProvider = class _EmailAuthProvider {
      constructor() {
        this.providerId = _EmailAuthProvider.PROVIDER_ID;
      }
      /**
       * Initialize an {@link AuthCredential} using an email and password.
       *
       * @example
       * ```javascript
       * const authCredential = EmailAuthProvider.credential(email, password);
       * const userCredential = await signInWithCredential(auth, authCredential);
       * ```
       *
       * @example
       * ```javascript
       * const userCredential = await signInWithEmailAndPassword(auth, email, password);
       * ```
       *
       * @param email - Email address.
       * @param password - User account password.
       * @returns The auth provider credential.
       */
      static credential(email, password) {
        return EmailAuthCredential._fromEmailAndPassword(email, password);
      }
      /**
       * Initialize an {@link AuthCredential} using an email and an email link after a sign in with
       * email link operation.
       *
       * @example
       * ```javascript
       * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);
       * const userCredential = await signInWithCredential(auth, authCredential);
       * ```
       *
       * @example
       * ```javascript
       * await sendSignInLinkToEmail(auth, email);
       * // Obtain emailLink from user.
       * const userCredential = await signInWithEmailLink(auth, email, emailLink);
       * ```
       *
       * @param auth - The {@link Auth} instance used to verify the link.
       * @param email - Email address.
       * @param emailLink - Sign-in email link.
       * @returns - The auth provider credential.
       */
      static credentialWithLink(email, emailLink) {
        const actionCodeUrl = ActionCodeURL.parseLink(emailLink);
        _assert(
          actionCodeUrl,
          "argument-error"
          /* AuthErrorCode.ARGUMENT_ERROR */
        );
        return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);
      }
    };
    EmailAuthProvider.PROVIDER_ID = "password";
    EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD = "password";
    EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD = "emailLink";
    var FederatedAuthProvider = class {
      /**
       * Constructor for generic OAuth providers.
       *
       * @param providerId - Provider for which credentials should be generated.
       */
      constructor(providerId) {
        this.providerId = providerId;
        this.defaultLanguageCode = null;
        this.customParameters = {};
      }
      /**
       * Set the language gode.
       *
       * @param languageCode - language code
       */
      setDefaultLanguage(languageCode) {
        this.defaultLanguageCode = languageCode;
      }
      /**
       * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in
       * operations.
       *
       * @remarks
       * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,
       * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.
       *
       * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.
       */
      setCustomParameters(customOAuthParameters) {
        this.customParameters = customOAuthParameters;
        return this;
      }
      /**
       * Retrieve the current list of {@link CustomParameters}.
       */
      getCustomParameters() {
        return this.customParameters;
      }
    };
    var BaseOAuthProvider = class extends FederatedAuthProvider {
      constructor() {
        super(...arguments);
        this.scopes = [];
      }
      /**
       * Add an OAuth scope to the credential.
       *
       * @param scope - Provider OAuth scope to add.
       */
      addScope(scope) {
        if (!this.scopes.includes(scope)) {
          this.scopes.push(scope);
        }
        return this;
      }
      /**
       * Retrieve the current list of OAuth scopes.
       */
      getScopes() {
        return [...this.scopes];
      }
    };
    var OAuthProvider = class _OAuthProvider extends BaseOAuthProvider {
      /**
       * Creates an {@link OAuthCredential} from a JSON string or a plain object.
       * @param json - A plain object or a JSON string
       */
      static credentialFromJSON(json) {
        const obj = typeof json === "string" ? JSON.parse(json) : json;
        _assert(
          "providerId" in obj && "signInMethod" in obj,
          "argument-error"
          /* AuthErrorCode.ARGUMENT_ERROR */
        );
        return OAuthCredential._fromParams(obj);
      }
      /**
       * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.
       *
       * @remarks
       * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of
       * the raw nonce must match the nonce field in the ID token.
       *
       * @example
       * ```javascript
       * // `googleUser` from the onsuccess Google Sign In callback.
       * // Initialize a generate OAuth provider with a `google.com` providerId.
       * const provider = new OAuthProvider('google.com');
       * const credential = provider.credential({
       *   idToken: googleUser.getAuthResponse().id_token,
       * });
       * const result = await signInWithCredential(credential);
       * ```
       *
       * @param params - Either the options object containing the ID token, access token and raw nonce
       * or the ID token string.
       */
      credential(params) {
        return this._credential(Object.assign(Object.assign({}, params), { nonce: params.rawNonce }));
      }
      /** An internal credential method that accepts more permissive options */
      _credential(params) {
        _assert(
          params.idToken || params.accessToken,
          "argument-error"
          /* AuthErrorCode.ARGUMENT_ERROR */
        );
        return OAuthCredential._fromParams(Object.assign(Object.assign({}, params), { providerId: this.providerId, signInMethod: this.providerId }));
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromResult(userCredential) {
        return _OAuthProvider.oauthCredentialFromTaggedObject(userCredential);
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
       * thrown during a sign-in, link, or reauthenticate operation.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromError(error) {
        return _OAuthProvider.oauthCredentialFromTaggedObject(error.customData || {});
      }
      static oauthCredentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse) {
          return null;
        }
        const { oauthIdToken, oauthAccessToken, oauthTokenSecret, pendingToken, nonce, providerId } = tokenResponse;
        if (!oauthAccessToken && !oauthTokenSecret && !oauthIdToken && !pendingToken) {
          return null;
        }
        if (!providerId) {
          return null;
        }
        try {
          return new _OAuthProvider(providerId)._credential({
            idToken: oauthIdToken,
            accessToken: oauthAccessToken,
            nonce,
            pendingToken
          });
        } catch (e) {
          return null;
        }
      }
    };
    var FacebookAuthProvider = class _FacebookAuthProvider extends BaseOAuthProvider {
      constructor() {
        super(
          "facebook.com"
          /* ProviderId.FACEBOOK */
        );
      }
      /**
       * Creates a credential for Facebook.
       *
       * @example
       * ```javascript
       * // `event` from the Facebook auth.authResponseChange callback.
       * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);
       * const result = await signInWithCredential(credential);
       * ```
       *
       * @param accessToken - Facebook access token.
       */
      static credential(accessToken) {
        return OAuthCredential._fromParams({
          providerId: _FacebookAuthProvider.PROVIDER_ID,
          signInMethod: _FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,
          accessToken
        });
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromResult(userCredential) {
        return _FacebookAuthProvider.credentialFromTaggedObject(userCredential);
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
       * thrown during a sign-in, link, or reauthenticate operation.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromError(error) {
        return _FacebookAuthProvider.credentialFromTaggedObject(error.customData || {});
      }
      static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse || !("oauthAccessToken" in tokenResponse)) {
          return null;
        }
        if (!tokenResponse.oauthAccessToken) {
          return null;
        }
        try {
          return _FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);
        } catch (_a) {
          return null;
        }
      }
    };
    FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = "facebook.com";
    FacebookAuthProvider.PROVIDER_ID = "facebook.com";
    var GoogleAuthProvider = class _GoogleAuthProvider extends BaseOAuthProvider {
      constructor() {
        super(
          "google.com"
          /* ProviderId.GOOGLE */
        );
        this.addScope("profile");
      }
      /**
       * Creates a credential for Google. At least one of ID token and access token is required.
       *
       * @example
       * ```javascript
       * // \`googleUser\` from the onsuccess Google Sign In callback.
       * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);
       * const result = await signInWithCredential(credential);
       * ```
       *
       * @param idToken - Google ID token.
       * @param accessToken - Google access token.
       */
      static credential(idToken, accessToken) {
        return OAuthCredential._fromParams({
          providerId: _GoogleAuthProvider.PROVIDER_ID,
          signInMethod: _GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,
          idToken,
          accessToken
        });
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromResult(userCredential) {
        return _GoogleAuthProvider.credentialFromTaggedObject(userCredential);
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
       * thrown during a sign-in, link, or reauthenticate operation.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromError(error) {
        return _GoogleAuthProvider.credentialFromTaggedObject(error.customData || {});
      }
      static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse) {
          return null;
        }
        const { oauthIdToken, oauthAccessToken } = tokenResponse;
        if (!oauthIdToken && !oauthAccessToken) {
          return null;
        }
        try {
          return _GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);
        } catch (_a) {
          return null;
        }
      }
    };
    GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = "google.com";
    GoogleAuthProvider.PROVIDER_ID = "google.com";
    var GithubAuthProvider = class _GithubAuthProvider extends BaseOAuthProvider {
      constructor() {
        super(
          "github.com"
          /* ProviderId.GITHUB */
        );
      }
      /**
       * Creates a credential for Github.
       *
       * @param accessToken - Github access token.
       */
      static credential(accessToken) {
        return OAuthCredential._fromParams({
          providerId: _GithubAuthProvider.PROVIDER_ID,
          signInMethod: _GithubAuthProvider.GITHUB_SIGN_IN_METHOD,
          accessToken
        });
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromResult(userCredential) {
        return _GithubAuthProvider.credentialFromTaggedObject(userCredential);
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
       * thrown during a sign-in, link, or reauthenticate operation.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromError(error) {
        return _GithubAuthProvider.credentialFromTaggedObject(error.customData || {});
      }
      static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse || !("oauthAccessToken" in tokenResponse)) {
          return null;
        }
        if (!tokenResponse.oauthAccessToken) {
          return null;
        }
        try {
          return _GithubAuthProvider.credential(tokenResponse.oauthAccessToken);
        } catch (_a) {
          return null;
        }
      }
    };
    GithubAuthProvider.GITHUB_SIGN_IN_METHOD = "github.com";
    GithubAuthProvider.PROVIDER_ID = "github.com";
    var IDP_REQUEST_URI = "http://localhost";
    var SAMLAuthCredential = class _SAMLAuthCredential extends AuthCredential {
      /** @internal */
      constructor(providerId, pendingToken) {
        super(providerId, providerId);
        this.pendingToken = pendingToken;
      }
      /** @internal */
      _getIdTokenResponse(auth) {
        const request = this.buildRequest();
        return signInWithIdp(auth, request);
      }
      /** @internal */
      _linkToIdToken(auth, idToken) {
        const request = this.buildRequest();
        request.idToken = idToken;
        return signInWithIdp(auth, request);
      }
      /** @internal */
      _getReauthenticationResolver(auth) {
        const request = this.buildRequest();
        request.autoCreate = false;
        return signInWithIdp(auth, request);
      }
      /** {@inheritdoc AuthCredential.toJSON}  */
      toJSON() {
        return {
          signInMethod: this.signInMethod,
          providerId: this.providerId,
          pendingToken: this.pendingToken
        };
      }
      /**
       * Static method to deserialize a JSON representation of an object into an
       * {@link  AuthCredential}.
       *
       * @param json - Input can be either Object or the stringified representation of the object.
       * When string is provided, JSON.parse would be called first.
       *
       * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.
       */
      static fromJSON(json) {
        const obj = typeof json === "string" ? JSON.parse(json) : json;
        const { providerId, signInMethod, pendingToken } = obj;
        if (!providerId || !signInMethod || !pendingToken || providerId !== signInMethod) {
          return null;
        }
        return new _SAMLAuthCredential(providerId, pendingToken);
      }
      /**
       * Helper static method to avoid exposing the constructor to end users.
       *
       * @internal
       */
      static _create(providerId, pendingToken) {
        return new _SAMLAuthCredential(providerId, pendingToken);
      }
      buildRequest() {
        return {
          requestUri: IDP_REQUEST_URI,
          returnSecureToken: true,
          pendingToken: this.pendingToken
        };
      }
    };
    var SAML_PROVIDER_PREFIX = "saml.";
    var SAMLAuthProvider = class _SAMLAuthProvider extends FederatedAuthProvider {
      /**
       * Constructor. The providerId must start with "saml."
       * @param providerId - SAML provider ID.
       */
      constructor(providerId) {
        _assert(
          providerId.startsWith(SAML_PROVIDER_PREFIX),
          "argument-error"
          /* AuthErrorCode.ARGUMENT_ERROR */
        );
        super(providerId);
      }
      /**
       * Generates an {@link AuthCredential} from a {@link UserCredential} after a
       * successful SAML flow completes.
       *
       * @remarks
       *
       * For example, to get an {@link AuthCredential}, you could write the
       * following code:
       *
       * ```js
       * const userCredential = await signInWithPopup(auth, samlProvider);
       * const credential = SAMLAuthProvider.credentialFromResult(userCredential);
       * ```
       *
       * @param userCredential - The user credential.
       */
      static credentialFromResult(userCredential) {
        return _SAMLAuthProvider.samlCredentialFromTaggedObject(userCredential);
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
       * thrown during a sign-in, link, or reauthenticate operation.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromError(error) {
        return _SAMLAuthProvider.samlCredentialFromTaggedObject(error.customData || {});
      }
      /**
       * Creates an {@link AuthCredential} from a JSON string or a plain object.
       * @param json - A plain object or a JSON string
       */
      static credentialFromJSON(json) {
        const credential = SAMLAuthCredential.fromJSON(json);
        _assert(
          credential,
          "argument-error"
          /* AuthErrorCode.ARGUMENT_ERROR */
        );
        return credential;
      }
      static samlCredentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse) {
          return null;
        }
        const { pendingToken, providerId } = tokenResponse;
        if (!pendingToken || !providerId) {
          return null;
        }
        try {
          return SAMLAuthCredential._create(providerId, pendingToken);
        } catch (e) {
          return null;
        }
      }
    };
    var TwitterAuthProvider = class _TwitterAuthProvider extends BaseOAuthProvider {
      constructor() {
        super(
          "twitter.com"
          /* ProviderId.TWITTER */
        );
      }
      /**
       * Creates a credential for Twitter.
       *
       * @param token - Twitter access token.
       * @param secret - Twitter secret.
       */
      static credential(token, secret) {
        return OAuthCredential._fromParams({
          providerId: _TwitterAuthProvider.PROVIDER_ID,
          signInMethod: _TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,
          oauthToken: token,
          oauthTokenSecret: secret
        });
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromResult(userCredential) {
        return _TwitterAuthProvider.credentialFromTaggedObject(userCredential);
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
       * thrown during a sign-in, link, or reauthenticate operation.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromError(error) {
        return _TwitterAuthProvider.credentialFromTaggedObject(error.customData || {});
      }
      static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse) {
          return null;
        }
        const { oauthAccessToken, oauthTokenSecret } = tokenResponse;
        if (!oauthAccessToken || !oauthTokenSecret) {
          return null;
        }
        try {
          return _TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);
        } catch (_a) {
          return null;
        }
      }
    };
    TwitterAuthProvider.TWITTER_SIGN_IN_METHOD = "twitter.com";
    TwitterAuthProvider.PROVIDER_ID = "twitter.com";
    async function signUp(auth, request) {
      return _performSignInRequest(auth, "POST", "/v1/accounts:signUp", _addTidIfNecessary(auth, request));
    }
    var UserCredentialImpl = class _UserCredentialImpl {
      constructor(params) {
        this.user = params.user;
        this.providerId = params.providerId;
        this._tokenResponse = params._tokenResponse;
        this.operationType = params.operationType;
      }
      static async _fromIdTokenResponse(auth, operationType, idTokenResponse, isAnonymous = false) {
        const user = await UserImpl._fromIdTokenResponse(auth, idTokenResponse, isAnonymous);
        const providerId = providerIdForResponse(idTokenResponse);
        const userCred = new _UserCredentialImpl({
          user,
          providerId,
          _tokenResponse: idTokenResponse,
          operationType
        });
        return userCred;
      }
      static async _forOperation(user, operationType, response) {
        await user._updateTokensIfNecessary(
          response,
          /* reload */
          true
        );
        const providerId = providerIdForResponse(response);
        return new _UserCredentialImpl({
          user,
          providerId,
          _tokenResponse: response,
          operationType
        });
      }
    };
    function providerIdForResponse(response) {
      if (response.providerId) {
        return response.providerId;
      }
      if ("phoneNumber" in response) {
        return "phone";
      }
      return null;
    }
    async function signInAnonymously(auth) {
      var _a;
      const authInternal = _castAuth(auth);
      await authInternal._initializationPromise;
      if ((_a = authInternal.currentUser) === null || _a === void 0 ? void 0 : _a.isAnonymous) {
        return new UserCredentialImpl({
          user: authInternal.currentUser,
          providerId: null,
          operationType: "signIn"
          /* OperationType.SIGN_IN */
        });
      }
      const response = await signUp(authInternal, {
        returnSecureToken: true
      });
      const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn", response, true);
      await authInternal._updateCurrentUser(userCredential.user);
      return userCredential;
    }
    var MultiFactorError = class _MultiFactorError extends util.FirebaseError {
      constructor(auth, error, operationType, user) {
        var _a;
        super(error.code, error.message);
        this.operationType = operationType;
        this.user = user;
        Object.setPrototypeOf(this, _MultiFactorError.prototype);
        this.customData = {
          appName: auth.name,
          tenantId: (_a = auth.tenantId) !== null && _a !== void 0 ? _a : void 0,
          _serverResponse: error.customData._serverResponse,
          operationType
        };
      }
      static _fromErrorAndOperation(auth, error, operationType, user) {
        return new _MultiFactorError(auth, error, operationType, user);
      }
    };
    function _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {
      const idTokenProvider = operationType === "reauthenticate" ? credential._getReauthenticationResolver(auth) : credential._getIdTokenResponse(auth);
      return idTokenProvider.catch((error) => {
        if (error.code === `auth/${"multi-factor-auth-required"}`) {
          throw MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);
        }
        throw error;
      });
    }
    function providerDataAsNames(providerData) {
      return new Set(providerData.map(({ providerId }) => providerId).filter((pid) => !!pid));
    }
    async function unlink(user, providerId) {
      const userInternal = util.getModularInstance(user);
      await _assertLinkedStatus(true, userInternal, providerId);
      const { providerUserInfo } = await deleteLinkedAccounts(userInternal.auth, {
        idToken: await userInternal.getIdToken(),
        deleteProvider: [providerId]
      });
      const providersLeft = providerDataAsNames(providerUserInfo || []);
      userInternal.providerData = userInternal.providerData.filter((pd) => providersLeft.has(pd.providerId));
      if (!providersLeft.has(
        "phone"
        /* ProviderId.PHONE */
      )) {
        userInternal.phoneNumber = null;
      }
      await userInternal.auth._persistUserIfCurrent(userInternal);
      return userInternal;
    }
    async function _link$1(user, credential, bypassAuthState = false) {
      const response = await _logoutIfInvalidated(user, credential._linkToIdToken(user.auth, await user.getIdToken()), bypassAuthState);
      return UserCredentialImpl._forOperation(user, "link", response);
    }
    async function _assertLinkedStatus(expected, user, provider) {
      await _reloadWithoutSaving(user);
      const providerIds = providerDataAsNames(user.providerData);
      const code = expected === false ? "provider-already-linked" : "no-such-provider";
      _assert(providerIds.has(provider) === expected, user.auth, code);
    }
    async function _reauthenticate(user, credential, bypassAuthState = false) {
      const { auth } = user;
      const operationType = "reauthenticate";
      try {
        const response = await _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState);
        _assert(
          response.idToken,
          auth,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        const parsed = _parseToken(response.idToken);
        _assert(
          parsed,
          auth,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        const { sub: localId } = parsed;
        _assert(
          user.uid === localId,
          auth,
          "user-mismatch"
          /* AuthErrorCode.USER_MISMATCH */
        );
        return UserCredentialImpl._forOperation(user, operationType, response);
      } catch (e) {
        if ((e === null || e === void 0 ? void 0 : e.code) === `auth/${"user-not-found"}`) {
          _fail(
            auth,
            "user-mismatch"
            /* AuthErrorCode.USER_MISMATCH */
          );
        }
        throw e;
      }
    }
    async function _signInWithCredential(auth, credential, bypassAuthState = false) {
      const operationType = "signIn";
      const response = await _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential);
      const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, operationType, response);
      if (!bypassAuthState) {
        await auth._updateCurrentUser(userCredential.user);
      }
      return userCredential;
    }
    async function signInWithCredential(auth, credential) {
      return _signInWithCredential(_castAuth(auth), credential);
    }
    async function linkWithCredential(user, credential) {
      const userInternal = util.getModularInstance(user);
      await _assertLinkedStatus(false, userInternal, credential.providerId);
      return _link$1(userInternal, credential);
    }
    async function reauthenticateWithCredential(user, credential) {
      return _reauthenticate(util.getModularInstance(user), credential);
    }
    async function signInWithCustomToken$1(auth, request) {
      return _performSignInRequest(auth, "POST", "/v1/accounts:signInWithCustomToken", _addTidIfNecessary(auth, request));
    }
    async function signInWithCustomToken(auth, customToken) {
      const authInternal = _castAuth(auth);
      const response = await signInWithCustomToken$1(authInternal, {
        token: customToken,
        returnSecureToken: true
      });
      const cred = await UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn", response);
      await authInternal._updateCurrentUser(cred.user);
      return cred;
    }
    var MultiFactorInfoImpl = class {
      constructor(factorId, response) {
        this.factorId = factorId;
        this.uid = response.mfaEnrollmentId;
        this.enrollmentTime = new Date(response.enrolledAt).toUTCString();
        this.displayName = response.displayName;
      }
      static _fromServerResponse(auth, enrollment) {
        if ("phoneInfo" in enrollment) {
          return PhoneMultiFactorInfoImpl._fromServerResponse(auth, enrollment);
        } else if ("totpInfo" in enrollment) {
          return TotpMultiFactorInfoImpl._fromServerResponse(auth, enrollment);
        }
        return _fail(
          auth,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
      }
    };
    var PhoneMultiFactorInfoImpl = class _PhoneMultiFactorInfoImpl extends MultiFactorInfoImpl {
      constructor(response) {
        super("phone", response);
        this.phoneNumber = response.phoneInfo;
      }
      static _fromServerResponse(_auth, enrollment) {
        return new _PhoneMultiFactorInfoImpl(enrollment);
      }
    };
    var TotpMultiFactorInfoImpl = class _TotpMultiFactorInfoImpl extends MultiFactorInfoImpl {
      constructor(response) {
        super("totp", response);
      }
      static _fromServerResponse(_auth, enrollment) {
        return new _TotpMultiFactorInfoImpl(enrollment);
      }
    };
    function _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings) {
      var _a;
      _assert(
        ((_a = actionCodeSettings.url) === null || _a === void 0 ? void 0 : _a.length) > 0,
        auth,
        "invalid-continue-uri"
        /* AuthErrorCode.INVALID_CONTINUE_URI */
      );
      _assert(
        typeof actionCodeSettings.dynamicLinkDomain === "undefined" || actionCodeSettings.dynamicLinkDomain.length > 0,
        auth,
        "invalid-dynamic-link-domain"
        /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */
      );
      request.continueUrl = actionCodeSettings.url;
      request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;
      request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;
      if (actionCodeSettings.iOS) {
        _assert(
          actionCodeSettings.iOS.bundleId.length > 0,
          auth,
          "missing-ios-bundle-id"
          /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */
        );
        request.iOSBundleId = actionCodeSettings.iOS.bundleId;
      }
      if (actionCodeSettings.android) {
        _assert(
          actionCodeSettings.android.packageName.length > 0,
          auth,
          "missing-android-pkg-name"
          /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */
        );
        request.androidInstallApp = actionCodeSettings.android.installApp;
        request.androidMinimumVersionCode = actionCodeSettings.android.minimumVersion;
        request.androidPackageName = actionCodeSettings.android.packageName;
      }
    }
    async function sendPasswordResetEmail(auth, email, actionCodeSettings) {
      var _a;
      const authInternal = _castAuth(auth);
      const request = {
        requestType: "PASSWORD_RESET",
        email,
        clientType: "CLIENT_TYPE_WEB"
        /* RecaptchaClientType.WEB */
      };
      if ((_a = authInternal._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.emailPasswordEnabled) {
        const requestWithRecaptcha = await injectRecaptchaFields(authInternal, request, "getOobCode", true);
        if (actionCodeSettings) {
          _setActionCodeSettingsOnRequest(authInternal, requestWithRecaptcha, actionCodeSettings);
        }
        await sendPasswordResetEmail$1(authInternal, requestWithRecaptcha);
      } else {
        if (actionCodeSettings) {
          _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);
        }
        await sendPasswordResetEmail$1(authInternal, request).catch(async (error) => {
          if (error.code === `auth/${"missing-recaptcha-token"}`) {
            console.log("Password resets are protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the password reset flow.");
            const requestWithRecaptcha = await injectRecaptchaFields(authInternal, request, "getOobCode", true);
            if (actionCodeSettings) {
              _setActionCodeSettingsOnRequest(authInternal, requestWithRecaptcha, actionCodeSettings);
            }
            await sendPasswordResetEmail$1(authInternal, requestWithRecaptcha);
          } else {
            return Promise.reject(error);
          }
        });
      }
    }
    async function confirmPasswordReset(auth, oobCode, newPassword) {
      await resetPassword(util.getModularInstance(auth), {
        oobCode,
        newPassword
      });
    }
    async function applyActionCode(auth, oobCode) {
      await applyActionCode$1(util.getModularInstance(auth), { oobCode });
    }
    async function checkActionCode(auth, oobCode) {
      const authModular = util.getModularInstance(auth);
      const response = await resetPassword(authModular, { oobCode });
      const operation = response.requestType;
      _assert(
        operation,
        authModular,
        "internal-error"
        /* AuthErrorCode.INTERNAL_ERROR */
      );
      switch (operation) {
        case "EMAIL_SIGNIN":
          break;
        case "VERIFY_AND_CHANGE_EMAIL":
          _assert(
            response.newEmail,
            authModular,
            "internal-error"
            /* AuthErrorCode.INTERNAL_ERROR */
          );
          break;
        case "REVERT_SECOND_FACTOR_ADDITION":
          _assert(
            response.mfaInfo,
            authModular,
            "internal-error"
            /* AuthErrorCode.INTERNAL_ERROR */
          );
        default:
          _assert(
            response.email,
            authModular,
            "internal-error"
            /* AuthErrorCode.INTERNAL_ERROR */
          );
      }
      let multiFactorInfo = null;
      if (response.mfaInfo) {
        multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(_castAuth(authModular), response.mfaInfo);
      }
      return {
        data: {
          email: (response.requestType === "VERIFY_AND_CHANGE_EMAIL" ? response.newEmail : response.email) || null,
          previousEmail: (response.requestType === "VERIFY_AND_CHANGE_EMAIL" ? response.email : response.newEmail) || null,
          multiFactorInfo
        },
        operation
      };
    }
    async function verifyPasswordResetCode(auth, code) {
      const { data } = await checkActionCode(util.getModularInstance(auth), code);
      return data.email;
    }
    async function createUserWithEmailAndPassword(auth, email, password) {
      var _a;
      const authInternal = _castAuth(auth);
      const request = {
        returnSecureToken: true,
        email,
        password,
        clientType: "CLIENT_TYPE_WEB"
        /* RecaptchaClientType.WEB */
      };
      let signUpResponse;
      if ((_a = authInternal._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.emailPasswordEnabled) {
        const requestWithRecaptcha = await injectRecaptchaFields(
          authInternal,
          request,
          "signUpPassword"
          /* RecaptchaActionName.SIGN_UP_PASSWORD */
        );
        signUpResponse = signUp(authInternal, requestWithRecaptcha);
      } else {
        signUpResponse = signUp(authInternal, request).catch(async (error) => {
          if (error.code === `auth/${"missing-recaptcha-token"}`) {
            console.log("Sign-up is protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the sign-up flow.");
            const requestWithRecaptcha = await injectRecaptchaFields(
              authInternal,
              request,
              "signUpPassword"
              /* RecaptchaActionName.SIGN_UP_PASSWORD */
            );
            return signUp(authInternal, requestWithRecaptcha);
          } else {
            return Promise.reject(error);
          }
        });
      }
      const response = await signUpResponse.catch((error) => {
        return Promise.reject(error);
      });
      const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn", response);
      await authInternal._updateCurrentUser(userCredential.user);
      return userCredential;
    }
    function signInWithEmailAndPassword(auth, email, password) {
      return signInWithCredential(util.getModularInstance(auth), EmailAuthProvider.credential(email, password));
    }
    async function sendSignInLinkToEmail(auth, email, actionCodeSettings) {
      var _a;
      const authInternal = _castAuth(auth);
      const request = {
        requestType: "EMAIL_SIGNIN",
        email,
        clientType: "CLIENT_TYPE_WEB"
        /* RecaptchaClientType.WEB */
      };
      function setActionCodeSettings(request2, actionCodeSettings2) {
        _assert(
          actionCodeSettings2.handleCodeInApp,
          authInternal,
          "argument-error"
          /* AuthErrorCode.ARGUMENT_ERROR */
        );
        if (actionCodeSettings2) {
          _setActionCodeSettingsOnRequest(authInternal, request2, actionCodeSettings2);
        }
      }
      if ((_a = authInternal._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.emailPasswordEnabled) {
        const requestWithRecaptcha = await injectRecaptchaFields(authInternal, request, "getOobCode", true);
        setActionCodeSettings(requestWithRecaptcha, actionCodeSettings);
        await sendSignInLinkToEmail$1(authInternal, requestWithRecaptcha);
      } else {
        setActionCodeSettings(request, actionCodeSettings);
        await sendSignInLinkToEmail$1(authInternal, request).catch(async (error) => {
          if (error.code === `auth/${"missing-recaptcha-token"}`) {
            console.log("Email link sign-in is protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the sign-in flow.");
            const requestWithRecaptcha = await injectRecaptchaFields(authInternal, request, "getOobCode", true);
            setActionCodeSettings(requestWithRecaptcha, actionCodeSettings);
            await sendSignInLinkToEmail$1(authInternal, requestWithRecaptcha);
          } else {
            return Promise.reject(error);
          }
        });
      }
    }
    function isSignInWithEmailLink(auth, emailLink) {
      const actionCodeUrl = ActionCodeURL.parseLink(emailLink);
      return (actionCodeUrl === null || actionCodeUrl === void 0 ? void 0 : actionCodeUrl.operation) === "EMAIL_SIGNIN";
    }
    async function signInWithEmailLink(auth, email, emailLink) {
      const authModular = util.getModularInstance(auth);
      const credential = EmailAuthProvider.credentialWithLink(email, emailLink || _getCurrentUrl());
      _assert(
        credential._tenantId === (authModular.tenantId || null),
        authModular,
        "tenant-id-mismatch"
        /* AuthErrorCode.TENANT_ID_MISMATCH */
      );
      return signInWithCredential(authModular, credential);
    }
    async function createAuthUri(auth, request) {
      return _performApiRequest(auth, "POST", "/v1/accounts:createAuthUri", _addTidIfNecessary(auth, request));
    }
    async function fetchSignInMethodsForEmail(auth, email) {
      const continueUri = _isHttpOrHttps() ? _getCurrentUrl() : "http://localhost";
      const request = {
        identifier: email,
        continueUri
      };
      const { signinMethods } = await createAuthUri(util.getModularInstance(auth), request);
      return signinMethods || [];
    }
    async function sendEmailVerification(user, actionCodeSettings) {
      const userInternal = util.getModularInstance(user);
      const idToken = await user.getIdToken();
      const request = {
        requestType: "VERIFY_EMAIL",
        idToken
      };
      if (actionCodeSettings) {
        _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);
      }
      const { email } = await sendEmailVerification$1(userInternal.auth, request);
      if (email !== user.email) {
        await user.reload();
      }
    }
    async function verifyBeforeUpdateEmail(user, newEmail, actionCodeSettings) {
      const userInternal = util.getModularInstance(user);
      const idToken = await user.getIdToken();
      const request = {
        requestType: "VERIFY_AND_CHANGE_EMAIL",
        idToken,
        newEmail
      };
      if (actionCodeSettings) {
        _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);
      }
      const { email } = await verifyAndChangeEmail(userInternal.auth, request);
      if (email !== user.email) {
        await user.reload();
      }
    }
    async function updateProfile$1(auth, request) {
      return _performApiRequest(auth, "POST", "/v1/accounts:update", request);
    }
    async function updateProfile(user, { displayName, photoURL: photoUrl }) {
      if (displayName === void 0 && photoUrl === void 0) {
        return;
      }
      const userInternal = util.getModularInstance(user);
      const idToken = await userInternal.getIdToken();
      const profileRequest = {
        idToken,
        displayName,
        photoUrl,
        returnSecureToken: true
      };
      const response = await _logoutIfInvalidated(userInternal, updateProfile$1(userInternal.auth, profileRequest));
      userInternal.displayName = response.displayName || null;
      userInternal.photoURL = response.photoUrl || null;
      const passwordProvider = userInternal.providerData.find(
        ({ providerId }) => providerId === "password"
        /* ProviderId.PASSWORD */
      );
      if (passwordProvider) {
        passwordProvider.displayName = userInternal.displayName;
        passwordProvider.photoURL = userInternal.photoURL;
      }
      await userInternal._updateTokensIfNecessary(response);
    }
    function updateEmail(user, newEmail) {
      return updateEmailOrPassword(util.getModularInstance(user), newEmail, null);
    }
    function updatePassword(user, newPassword) {
      return updateEmailOrPassword(util.getModularInstance(user), null, newPassword);
    }
    async function updateEmailOrPassword(user, email, password) {
      const { auth } = user;
      const idToken = await user.getIdToken();
      const request = {
        idToken,
        returnSecureToken: true
      };
      if (email) {
        request.email = email;
      }
      if (password) {
        request.password = password;
      }
      const response = await _logoutIfInvalidated(user, updateEmailPassword(auth, request));
      await user._updateTokensIfNecessary(
        response,
        /* reload */
        true
      );
    }
    function _fromIdTokenResponse(idTokenResponse) {
      var _a, _b;
      if (!idTokenResponse) {
        return null;
      }
      const { providerId } = idTokenResponse;
      const profile = idTokenResponse.rawUserInfo ? JSON.parse(idTokenResponse.rawUserInfo) : {};
      const isNewUser = idTokenResponse.isNewUser || idTokenResponse.kind === "identitytoolkit#SignupNewUserResponse";
      if (!providerId && (idTokenResponse === null || idTokenResponse === void 0 ? void 0 : idTokenResponse.idToken)) {
        const signInProvider = (_b = (_a = _parseToken(idTokenResponse.idToken)) === null || _a === void 0 ? void 0 : _a.firebase) === null || _b === void 0 ? void 0 : _b["sign_in_provider"];
        if (signInProvider) {
          const filteredProviderId = signInProvider !== "anonymous" && signInProvider !== "custom" ? signInProvider : null;
          return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);
        }
      }
      if (!providerId) {
        return null;
      }
      switch (providerId) {
        case "facebook.com":
          return new FacebookAdditionalUserInfo(isNewUser, profile);
        case "github.com":
          return new GithubAdditionalUserInfo(isNewUser, profile);
        case "google.com":
          return new GoogleAdditionalUserInfo(isNewUser, profile);
        case "twitter.com":
          return new TwitterAdditionalUserInfo(isNewUser, profile, idTokenResponse.screenName || null);
        case "custom":
        case "anonymous":
          return new GenericAdditionalUserInfo(isNewUser, null);
        default:
          return new GenericAdditionalUserInfo(isNewUser, providerId, profile);
      }
    }
    var GenericAdditionalUserInfo = class {
      constructor(isNewUser, providerId, profile = {}) {
        this.isNewUser = isNewUser;
        this.providerId = providerId;
        this.profile = profile;
      }
    };
    var FederatedAdditionalUserInfoWithUsername = class extends GenericAdditionalUserInfo {
      constructor(isNewUser, providerId, profile, username) {
        super(isNewUser, providerId, profile);
        this.username = username;
      }
    };
    var FacebookAdditionalUserInfo = class extends GenericAdditionalUserInfo {
      constructor(isNewUser, profile) {
        super(isNewUser, "facebook.com", profile);
      }
    };
    var GithubAdditionalUserInfo = class extends FederatedAdditionalUserInfoWithUsername {
      constructor(isNewUser, profile) {
        super(isNewUser, "github.com", profile, typeof (profile === null || profile === void 0 ? void 0 : profile.login) === "string" ? profile === null || profile === void 0 ? void 0 : profile.login : null);
      }
    };
    var GoogleAdditionalUserInfo = class extends GenericAdditionalUserInfo {
      constructor(isNewUser, profile) {
        super(isNewUser, "google.com", profile);
      }
    };
    var TwitterAdditionalUserInfo = class extends FederatedAdditionalUserInfoWithUsername {
      constructor(isNewUser, profile, screenName) {
        super(isNewUser, "twitter.com", profile, screenName);
      }
    };
    function getAdditionalUserInfo(userCredential) {
      const { user, _tokenResponse } = userCredential;
      if (user.isAnonymous && !_tokenResponse) {
        return {
          providerId: null,
          isNewUser: false,
          profile: null
        };
      }
      return _fromIdTokenResponse(_tokenResponse);
    }
    function setPersistence(auth, persistence) {
      return util.getModularInstance(auth).setPersistence(persistence);
    }
    function initializeRecaptchaConfig(auth) {
      const authInternal = _castAuth(auth);
      return authInternal.initializeRecaptchaConfig();
    }
    function onIdTokenChanged(auth, nextOrObserver, error, completed) {
      return util.getModularInstance(auth).onIdTokenChanged(nextOrObserver, error, completed);
    }
    function beforeAuthStateChanged(auth, callback, onAbort) {
      return util.getModularInstance(auth).beforeAuthStateChanged(callback, onAbort);
    }
    function onAuthStateChanged(auth, nextOrObserver, error, completed) {
      return util.getModularInstance(auth).onAuthStateChanged(nextOrObserver, error, completed);
    }
    function useDeviceLanguage(auth) {
      util.getModularInstance(auth).useDeviceLanguage();
    }
    function updateCurrentUser(auth, user) {
      return util.getModularInstance(auth).updateCurrentUser(user);
    }
    function signOut(auth) {
      return util.getModularInstance(auth).signOut();
    }
    async function deleteUser(user) {
      return util.getModularInstance(user).delete();
    }
    var MultiFactorSessionImpl = class _MultiFactorSessionImpl {
      constructor(type, credential, auth) {
        this.type = type;
        this.credential = credential;
        this.auth = auth;
      }
      static _fromIdtoken(idToken, auth) {
        return new _MultiFactorSessionImpl("enroll", idToken, auth);
      }
      static _fromMfaPendingCredential(mfaPendingCredential) {
        return new _MultiFactorSessionImpl("signin", mfaPendingCredential);
      }
      toJSON() {
        const key = this.type === "enroll" ? "idToken" : "pendingCredential";
        return {
          multiFactorSession: {
            [key]: this.credential
          }
        };
      }
      static fromJSON(obj) {
        var _a, _b;
        if (obj === null || obj === void 0 ? void 0 : obj.multiFactorSession) {
          if ((_a = obj.multiFactorSession) === null || _a === void 0 ? void 0 : _a.pendingCredential) {
            return _MultiFactorSessionImpl._fromMfaPendingCredential(obj.multiFactorSession.pendingCredential);
          } else if ((_b = obj.multiFactorSession) === null || _b === void 0 ? void 0 : _b.idToken) {
            return _MultiFactorSessionImpl._fromIdtoken(obj.multiFactorSession.idToken);
          }
        }
        return null;
      }
    };
    var MultiFactorResolverImpl = class _MultiFactorResolverImpl {
      constructor(session, hints, signInResolver) {
        this.session = session;
        this.hints = hints;
        this.signInResolver = signInResolver;
      }
      /** @internal */
      static _fromError(authExtern, error) {
        const auth = _castAuth(authExtern);
        const serverResponse = error.customData._serverResponse;
        const hints = (serverResponse.mfaInfo || []).map((enrollment) => MultiFactorInfoImpl._fromServerResponse(auth, enrollment));
        _assert(
          serverResponse.mfaPendingCredential,
          auth,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        const session = MultiFactorSessionImpl._fromMfaPendingCredential(serverResponse.mfaPendingCredential);
        return new _MultiFactorResolverImpl(session, hints, async (assertion) => {
          const mfaResponse = await assertion._process(auth, session);
          delete serverResponse.mfaInfo;
          delete serverResponse.mfaPendingCredential;
          const idTokenResponse = Object.assign(Object.assign({}, serverResponse), { idToken: mfaResponse.idToken, refreshToken: mfaResponse.refreshToken });
          switch (error.operationType) {
            case "signIn":
              const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, error.operationType, idTokenResponse);
              await auth._updateCurrentUser(userCredential.user);
              return userCredential;
            case "reauthenticate":
              _assert(
                error.user,
                auth,
                "internal-error"
                /* AuthErrorCode.INTERNAL_ERROR */
              );
              return UserCredentialImpl._forOperation(error.user, error.operationType, idTokenResponse);
            default:
              _fail(
                auth,
                "internal-error"
                /* AuthErrorCode.INTERNAL_ERROR */
              );
          }
        });
      }
      async resolveSignIn(assertionExtern) {
        const assertion = assertionExtern;
        return this.signInResolver(assertion);
      }
    };
    function getMultiFactorResolver(auth, error) {
      var _a;
      const authModular = util.getModularInstance(auth);
      const errorInternal = error;
      _assert(
        error.customData.operationType,
        authModular,
        "argument-error"
        /* AuthErrorCode.ARGUMENT_ERROR */
      );
      _assert(
        (_a = errorInternal.customData._serverResponse) === null || _a === void 0 ? void 0 : _a.mfaPendingCredential,
        authModular,
        "argument-error"
        /* AuthErrorCode.ARGUMENT_ERROR */
      );
      return MultiFactorResolverImpl._fromError(authModular, errorInternal);
    }
    function startEnrollPhoneMfa(auth, request) {
      return _performApiRequest(auth, "POST", "/v2/accounts/mfaEnrollment:start", _addTidIfNecessary(auth, request));
    }
    function finalizeEnrollPhoneMfa(auth, request) {
      return _performApiRequest(auth, "POST", "/v2/accounts/mfaEnrollment:finalize", _addTidIfNecessary(auth, request));
    }
    function startEnrollTotpMfa(auth, request) {
      return _performApiRequest(auth, "POST", "/v2/accounts/mfaEnrollment:start", _addTidIfNecessary(auth, request));
    }
    function finalizeEnrollTotpMfa(auth, request) {
      return _performApiRequest(auth, "POST", "/v2/accounts/mfaEnrollment:finalize", _addTidIfNecessary(auth, request));
    }
    function withdrawMfa(auth, request) {
      return _performApiRequest(auth, "POST", "/v2/accounts/mfaEnrollment:withdraw", _addTidIfNecessary(auth, request));
    }
    var MultiFactorUserImpl = class _MultiFactorUserImpl {
      constructor(user) {
        this.user = user;
        this.enrolledFactors = [];
        user._onReload((userInfo) => {
          if (userInfo.mfaInfo) {
            this.enrolledFactors = userInfo.mfaInfo.map((enrollment) => MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment));
          }
        });
      }
      static _fromUser(user) {
        return new _MultiFactorUserImpl(user);
      }
      async getSession() {
        return MultiFactorSessionImpl._fromIdtoken(await this.user.getIdToken(), this.user.auth);
      }
      async enroll(assertionExtern, displayName) {
        const assertion = assertionExtern;
        const session = await this.getSession();
        const finalizeMfaResponse = await _logoutIfInvalidated(this.user, assertion._process(this.user.auth, session, displayName));
        await this.user._updateTokensIfNecessary(finalizeMfaResponse);
        return this.user.reload();
      }
      async unenroll(infoOrUid) {
        const mfaEnrollmentId = typeof infoOrUid === "string" ? infoOrUid : infoOrUid.uid;
        const idToken = await this.user.getIdToken();
        try {
          const idTokenResponse = await _logoutIfInvalidated(this.user, withdrawMfa(this.user.auth, {
            idToken,
            mfaEnrollmentId
          }));
          this.enrolledFactors = this.enrolledFactors.filter(({ uid }) => uid !== mfaEnrollmentId);
          await this.user._updateTokensIfNecessary(idTokenResponse);
          await this.user.reload();
        } catch (e) {
          throw e;
        }
      }
    };
    var multiFactorUserCache = /* @__PURE__ */ new WeakMap();
    function multiFactor(user) {
      const userModular = util.getModularInstance(user);
      if (!multiFactorUserCache.has(userModular)) {
        multiFactorUserCache.set(userModular, MultiFactorUserImpl._fromUser(userModular));
      }
      return multiFactorUserCache.get(userModular);
    }
    var STORAGE_AVAILABLE_KEY = "__sak";
    var BrowserPersistenceClass = class {
      constructor(storageRetriever, type) {
        this.storageRetriever = storageRetriever;
        this.type = type;
      }
      _isAvailable() {
        try {
          if (!this.storage) {
            return Promise.resolve(false);
          }
          this.storage.setItem(STORAGE_AVAILABLE_KEY, "1");
          this.storage.removeItem(STORAGE_AVAILABLE_KEY);
          return Promise.resolve(true);
        } catch (_a) {
          return Promise.resolve(false);
        }
      }
      _set(key, value) {
        this.storage.setItem(key, JSON.stringify(value));
        return Promise.resolve();
      }
      _get(key) {
        const json = this.storage.getItem(key);
        return Promise.resolve(json ? JSON.parse(json) : null);
      }
      _remove(key) {
        this.storage.removeItem(key);
        return Promise.resolve();
      }
      get storage() {
        return this.storageRetriever();
      }
    };
    function _iframeCannotSyncWebStorage() {
      const ua = util.getUA();
      return _isSafari(ua) || _isIOS(ua);
    }
    var _POLLING_INTERVAL_MS$1 = 1e3;
    var IE10_LOCAL_STORAGE_SYNC_DELAY = 10;
    var BrowserLocalPersistence = class extends BrowserPersistenceClass {
      constructor() {
        super(
          () => window.localStorage,
          "LOCAL"
          /* PersistenceType.LOCAL */
        );
        this.boundEventHandler = (event, poll) => this.onStorageEvent(event, poll);
        this.listeners = {};
        this.localCache = {};
        this.pollTimer = null;
        this.safariLocalStorageNotSynced = _iframeCannotSyncWebStorage() && _isIframe();
        this.fallbackToPolling = _isMobileBrowser();
        this._shouldAllowMigration = true;
      }
      forAllChangedKeys(cb) {
        for (const key of Object.keys(this.listeners)) {
          const newValue = this.storage.getItem(key);
          const oldValue = this.localCache[key];
          if (newValue !== oldValue) {
            cb(key, oldValue, newValue);
          }
        }
      }
      onStorageEvent(event, poll = false) {
        if (!event.key) {
          this.forAllChangedKeys((key2, _oldValue, newValue) => {
            this.notifyListeners(key2, newValue);
          });
          return;
        }
        const key = event.key;
        if (poll) {
          this.detachListener();
        } else {
          this.stopPolling();
        }
        if (this.safariLocalStorageNotSynced) {
          const storedValue2 = this.storage.getItem(key);
          if (event.newValue !== storedValue2) {
            if (event.newValue !== null) {
              this.storage.setItem(key, event.newValue);
            } else {
              this.storage.removeItem(key);
            }
          } else if (this.localCache[key] === event.newValue && !poll) {
            return;
          }
        }
        const triggerListeners = () => {
          const storedValue2 = this.storage.getItem(key);
          if (!poll && this.localCache[key] === storedValue2) {
            return;
          }
          this.notifyListeners(key, storedValue2);
        };
        const storedValue = this.storage.getItem(key);
        if (_isIE10() && storedValue !== event.newValue && event.newValue !== event.oldValue) {
          setTimeout(triggerListeners, IE10_LOCAL_STORAGE_SYNC_DELAY);
        } else {
          triggerListeners();
        }
      }
      notifyListeners(key, value) {
        this.localCache[key] = value;
        const listeners = this.listeners[key];
        if (listeners) {
          for (const listener of Array.from(listeners)) {
            listener(value ? JSON.parse(value) : value);
          }
        }
      }
      startPolling() {
        this.stopPolling();
        this.pollTimer = setInterval(() => {
          this.forAllChangedKeys((key, oldValue, newValue) => {
            this.onStorageEvent(
              new StorageEvent("storage", {
                key,
                oldValue,
                newValue
              }),
              /* poll */
              true
            );
          });
        }, _POLLING_INTERVAL_MS$1);
      }
      stopPolling() {
        if (this.pollTimer) {
          clearInterval(this.pollTimer);
          this.pollTimer = null;
        }
      }
      attachListener() {
        window.addEventListener("storage", this.boundEventHandler);
      }
      detachListener() {
        window.removeEventListener("storage", this.boundEventHandler);
      }
      _addListener(key, listener) {
        if (Object.keys(this.listeners).length === 0) {
          if (this.fallbackToPolling) {
            this.startPolling();
          } else {
            this.attachListener();
          }
        }
        if (!this.listeners[key]) {
          this.listeners[key] = /* @__PURE__ */ new Set();
          this.localCache[key] = this.storage.getItem(key);
        }
        this.listeners[key].add(listener);
      }
      _removeListener(key, listener) {
        if (this.listeners[key]) {
          this.listeners[key].delete(listener);
          if (this.listeners[key].size === 0) {
            delete this.listeners[key];
          }
        }
        if (Object.keys(this.listeners).length === 0) {
          this.detachListener();
          this.stopPolling();
        }
      }
      // Update local cache on base operations:
      async _set(key, value) {
        await super._set(key, value);
        this.localCache[key] = JSON.stringify(value);
      }
      async _get(key) {
        const value = await super._get(key);
        this.localCache[key] = JSON.stringify(value);
        return value;
      }
      async _remove(key) {
        await super._remove(key);
        delete this.localCache[key];
      }
    };
    BrowserLocalPersistence.type = "LOCAL";
    var browserLocalPersistence = BrowserLocalPersistence;
    var BrowserSessionPersistence = class extends BrowserPersistenceClass {
      constructor() {
        super(
          () => window.sessionStorage,
          "SESSION"
          /* PersistenceType.SESSION */
        );
      }
      _addListener(_key, _listener) {
        return;
      }
      _removeListener(_key, _listener) {
        return;
      }
    };
    BrowserSessionPersistence.type = "SESSION";
    var browserSessionPersistence = BrowserSessionPersistence;
    function _allSettled(promises) {
      return Promise.all(promises.map(async (promise) => {
        try {
          const value = await promise;
          return {
            fulfilled: true,
            value
          };
        } catch (reason) {
          return {
            fulfilled: false,
            reason
          };
        }
      }));
    }
    var Receiver = class _Receiver {
      constructor(eventTarget) {
        this.eventTarget = eventTarget;
        this.handlersMap = {};
        this.boundEventHandler = this.handleEvent.bind(this);
      }
      /**
       * Obtain an instance of a Receiver for a given event target, if none exists it will be created.
       *
       * @param eventTarget - An event target (such as window or self) through which the underlying
       * messages will be received.
       */
      static _getInstance(eventTarget) {
        const existingInstance = this.receivers.find((receiver) => receiver.isListeningto(eventTarget));
        if (existingInstance) {
          return existingInstance;
        }
        const newInstance = new _Receiver(eventTarget);
        this.receivers.push(newInstance);
        return newInstance;
      }
      isListeningto(eventTarget) {
        return this.eventTarget === eventTarget;
      }
      /**
       * Fans out a MessageEvent to the appropriate listeners.
       *
       * @remarks
       * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have
       * finished processing.
       *
       * @param event - The MessageEvent.
       *
       */
      async handleEvent(event) {
        const messageEvent = event;
        const { eventId, eventType, data } = messageEvent.data;
        const handlers = this.handlersMap[eventType];
        if (!(handlers === null || handlers === void 0 ? void 0 : handlers.size)) {
          return;
        }
        messageEvent.ports[0].postMessage({
          status: "ack",
          eventId,
          eventType
        });
        const promises = Array.from(handlers).map(async (handler) => handler(messageEvent.origin, data));
        const response = await _allSettled(promises);
        messageEvent.ports[0].postMessage({
          status: "done",
          eventId,
          eventType,
          response
        });
      }
      /**
       * Subscribe an event handler for a particular event.
       *
       * @param eventType - Event name to subscribe to.
       * @param eventHandler - The event handler which should receive the events.
       *
       */
      _subscribe(eventType, eventHandler) {
        if (Object.keys(this.handlersMap).length === 0) {
          this.eventTarget.addEventListener("message", this.boundEventHandler);
        }
        if (!this.handlersMap[eventType]) {
          this.handlersMap[eventType] = /* @__PURE__ */ new Set();
        }
        this.handlersMap[eventType].add(eventHandler);
      }
      /**
       * Unsubscribe an event handler from a particular event.
       *
       * @param eventType - Event name to unsubscribe from.
       * @param eventHandler - Optinoal event handler, if none provided, unsubscribe all handlers on this event.
       *
       */
      _unsubscribe(eventType, eventHandler) {
        if (this.handlersMap[eventType] && eventHandler) {
          this.handlersMap[eventType].delete(eventHandler);
        }
        if (!eventHandler || this.handlersMap[eventType].size === 0) {
          delete this.handlersMap[eventType];
        }
        if (Object.keys(this.handlersMap).length === 0) {
          this.eventTarget.removeEventListener("message", this.boundEventHandler);
        }
      }
    };
    Receiver.receivers = [];
    function _generateEventId(prefix = "", digits = 10) {
      let random = "";
      for (let i = 0; i < digits; i++) {
        random += Math.floor(Math.random() * 10);
      }
      return prefix + random;
    }
    var Sender = class {
      constructor(target) {
        this.target = target;
        this.handlers = /* @__PURE__ */ new Set();
      }
      /**
       * Unsubscribe the handler and remove it from our tracking Set.
       *
       * @param handler - The handler to unsubscribe.
       */
      removeMessageHandler(handler) {
        if (handler.messageChannel) {
          handler.messageChannel.port1.removeEventListener("message", handler.onMessage);
          handler.messageChannel.port1.close();
        }
        this.handlers.delete(handler);
      }
      /**
       * Send a message to the Receiver located at {@link target}.
       *
       * @remarks
       * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the
       * receiver has had a chance to fully process the event.
       *
       * @param eventType - Type of event to send.
       * @param data - The payload of the event.
       * @param timeout - Timeout for waiting on an ACK from the receiver.
       *
       * @returns An array of settled promises from all the handlers that were listening on the receiver.
       */
      async _send(eventType, data, timeout = 50) {
        const messageChannel = typeof MessageChannel !== "undefined" ? new MessageChannel() : null;
        if (!messageChannel) {
          throw new Error(
            "connection_unavailable"
            /* _MessageError.CONNECTION_UNAVAILABLE */
          );
        }
        let completionTimer;
        let handler;
        return new Promise((resolve, reject) => {
          const eventId = _generateEventId("", 20);
          messageChannel.port1.start();
          const ackTimer = setTimeout(() => {
            reject(new Error(
              "unsupported_event"
              /* _MessageError.UNSUPPORTED_EVENT */
            ));
          }, timeout);
          handler = {
            messageChannel,
            onMessage(event) {
              const messageEvent = event;
              if (messageEvent.data.eventId !== eventId) {
                return;
              }
              switch (messageEvent.data.status) {
                case "ack":
                  clearTimeout(ackTimer);
                  completionTimer = setTimeout(
                    () => {
                      reject(new Error(
                        "timeout"
                        /* _MessageError.TIMEOUT */
                      ));
                    },
                    3e3
                    /* _TimeoutDuration.COMPLETION */
                  );
                  break;
                case "done":
                  clearTimeout(completionTimer);
                  resolve(messageEvent.data.response);
                  break;
                default:
                  clearTimeout(ackTimer);
                  clearTimeout(completionTimer);
                  reject(new Error(
                    "invalid_response"
                    /* _MessageError.INVALID_RESPONSE */
                  ));
                  break;
              }
            }
          };
          this.handlers.add(handler);
          messageChannel.port1.addEventListener("message", handler.onMessage);
          this.target.postMessage({
            eventType,
            eventId,
            data
          }, [messageChannel.port2]);
        }).finally(() => {
          if (handler) {
            this.removeMessageHandler(handler);
          }
        });
      }
    };
    function _window() {
      return window;
    }
    function _setWindowLocation(url) {
      _window().location.href = url;
    }
    function _isWorker() {
      return typeof _window()["WorkerGlobalScope"] !== "undefined" && typeof _window()["importScripts"] === "function";
    }
    async function _getActiveServiceWorker() {
      if (!(navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker)) {
        return null;
      }
      try {
        const registration = await navigator.serviceWorker.ready;
        return registration.active;
      } catch (_a) {
        return null;
      }
    }
    function _getServiceWorkerController() {
      var _a;
      return ((_a = navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker) === null || _a === void 0 ? void 0 : _a.controller) || null;
    }
    function _getWorkerGlobalScope() {
      return _isWorker() ? self : null;
    }
    var DB_NAME = "firebaseLocalStorageDb";
    var DB_VERSION = 1;
    var DB_OBJECTSTORE_NAME = "firebaseLocalStorage";
    var DB_DATA_KEYPATH = "fbase_key";
    var DBPromise = class {
      constructor(request) {
        this.request = request;
      }
      toPromise() {
        return new Promise((resolve, reject) => {
          this.request.addEventListener("success", () => {
            resolve(this.request.result);
          });
          this.request.addEventListener("error", () => {
            reject(this.request.error);
          });
        });
      }
    };
    function getObjectStore(db, isReadWrite) {
      return db.transaction([DB_OBJECTSTORE_NAME], isReadWrite ? "readwrite" : "readonly").objectStore(DB_OBJECTSTORE_NAME);
    }
    function _deleteDatabase() {
      const request = indexedDB.deleteDatabase(DB_NAME);
      return new DBPromise(request).toPromise();
    }
    function _openDatabase() {
      const request = indexedDB.open(DB_NAME, DB_VERSION);
      return new Promise((resolve, reject) => {
        request.addEventListener("error", () => {
          reject(request.error);
        });
        request.addEventListener("upgradeneeded", () => {
          const db = request.result;
          try {
            db.createObjectStore(DB_OBJECTSTORE_NAME, { keyPath: DB_DATA_KEYPATH });
          } catch (e) {
            reject(e);
          }
        });
        request.addEventListener("success", async () => {
          const db = request.result;
          if (!db.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) {
            db.close();
            await _deleteDatabase();
            resolve(await _openDatabase());
          } else {
            resolve(db);
          }
        });
      });
    }
    async function _putObject(db, key, value) {
      const request = getObjectStore(db, true).put({
        [DB_DATA_KEYPATH]: key,
        value
      });
      return new DBPromise(request).toPromise();
    }
    async function getObject(db, key) {
      const request = getObjectStore(db, false).get(key);
      const data = await new DBPromise(request).toPromise();
      return data === void 0 ? null : data.value;
    }
    function _deleteObject(db, key) {
      const request = getObjectStore(db, true).delete(key);
      return new DBPromise(request).toPromise();
    }
    var _POLLING_INTERVAL_MS = 800;
    var _TRANSACTION_RETRY_COUNT = 3;
    var IndexedDBLocalPersistence = class {
      constructor() {
        this.type = "LOCAL";
        this._shouldAllowMigration = true;
        this.listeners = {};
        this.localCache = {};
        this.pollTimer = null;
        this.pendingWrites = 0;
        this.receiver = null;
        this.sender = null;
        this.serviceWorkerReceiverAvailable = false;
        this.activeServiceWorker = null;
        this._workerInitializationPromise = this.initializeServiceWorkerMessaging().then(() => {
        }, () => {
        });
      }
      async _openDb() {
        if (this.db) {
          return this.db;
        }
        this.db = await _openDatabase();
        return this.db;
      }
      async _withRetries(op) {
        let numAttempts = 0;
        while (true) {
          try {
            const db = await this._openDb();
            return await op(db);
          } catch (e) {
            if (numAttempts++ > _TRANSACTION_RETRY_COUNT) {
              throw e;
            }
            if (this.db) {
              this.db.close();
              this.db = void 0;
            }
          }
        }
      }
      /**
       * IndexedDB events do not propagate from the main window to the worker context.  We rely on a
       * postMessage interface to send these events to the worker ourselves.
       */
      async initializeServiceWorkerMessaging() {
        return _isWorker() ? this.initializeReceiver() : this.initializeSender();
      }
      /**
       * As the worker we should listen to events from the main window.
       */
      async initializeReceiver() {
        this.receiver = Receiver._getInstance(_getWorkerGlobalScope());
        this.receiver._subscribe("keyChanged", async (_origin, data) => {
          const keys = await this._poll();
          return {
            keyProcessed: keys.includes(data.key)
          };
        });
        this.receiver._subscribe("ping", async (_origin, _data) => {
          return [
            "keyChanged"
            /* _EventType.KEY_CHANGED */
          ];
        });
      }
      /**
       * As the main window, we should let the worker know when keys change (set and remove).
       *
       * @remarks
       * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}
       * may not resolve.
       */
      async initializeSender() {
        var _a, _b;
        this.activeServiceWorker = await _getActiveServiceWorker();
        if (!this.activeServiceWorker) {
          return;
        }
        this.sender = new Sender(this.activeServiceWorker);
        const results = await this.sender._send(
          "ping",
          {},
          800
          /* _TimeoutDuration.LONG_ACK */
        );
        if (!results) {
          return;
        }
        if (((_a = results[0]) === null || _a === void 0 ? void 0 : _a.fulfilled) && ((_b = results[0]) === null || _b === void 0 ? void 0 : _b.value.includes(
          "keyChanged"
          /* _EventType.KEY_CHANGED */
        ))) {
          this.serviceWorkerReceiverAvailable = true;
        }
      }
      /**
       * Let the worker know about a changed key, the exact key doesn't technically matter since the
       * worker will just trigger a full sync anyway.
       *
       * @remarks
       * For now, we only support one service worker per page.
       *
       * @param key - Storage key which changed.
       */
      async notifyServiceWorker(key) {
        if (!this.sender || !this.activeServiceWorker || _getServiceWorkerController() !== this.activeServiceWorker) {
          return;
        }
        try {
          await this.sender._send(
            "keyChanged",
            { key },
            // Use long timeout if receiver has previously responded to a ping from us.
            this.serviceWorkerReceiverAvailable ? 800 : 50
            /* _TimeoutDuration.ACK */
          );
        } catch (_a) {
        }
      }
      async _isAvailable() {
        try {
          if (!indexedDB) {
            return false;
          }
          const db = await _openDatabase();
          await _putObject(db, STORAGE_AVAILABLE_KEY, "1");
          await _deleteObject(db, STORAGE_AVAILABLE_KEY);
          return true;
        } catch (_a) {
        }
        return false;
      }
      async _withPendingWrite(write) {
        this.pendingWrites++;
        try {
          await write();
        } finally {
          this.pendingWrites--;
        }
      }
      async _set(key, value) {
        return this._withPendingWrite(async () => {
          await this._withRetries((db) => _putObject(db, key, value));
          this.localCache[key] = value;
          return this.notifyServiceWorker(key);
        });
      }
      async _get(key) {
        const obj = await this._withRetries((db) => getObject(db, key));
        this.localCache[key] = obj;
        return obj;
      }
      async _remove(key) {
        return this._withPendingWrite(async () => {
          await this._withRetries((db) => _deleteObject(db, key));
          delete this.localCache[key];
          return this.notifyServiceWorker(key);
        });
      }
      async _poll() {
        const result = await this._withRetries((db) => {
          const getAllRequest = getObjectStore(db, false).getAll();
          return new DBPromise(getAllRequest).toPromise();
        });
        if (!result) {
          return [];
        }
        if (this.pendingWrites !== 0) {
          return [];
        }
        const keys = [];
        const keysInResult = /* @__PURE__ */ new Set();
        for (const { fbase_key: key, value } of result) {
          keysInResult.add(key);
          if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {
            this.notifyListeners(key, value);
            keys.push(key);
          }
        }
        for (const localKey of Object.keys(this.localCache)) {
          if (this.localCache[localKey] && !keysInResult.has(localKey)) {
            this.notifyListeners(localKey, null);
            keys.push(localKey);
          }
        }
        return keys;
      }
      notifyListeners(key, newValue) {
        this.localCache[key] = newValue;
        const listeners = this.listeners[key];
        if (listeners) {
          for (const listener of Array.from(listeners)) {
            listener(newValue);
          }
        }
      }
      startPolling() {
        this.stopPolling();
        this.pollTimer = setInterval(async () => this._poll(), _POLLING_INTERVAL_MS);
      }
      stopPolling() {
        if (this.pollTimer) {
          clearInterval(this.pollTimer);
          this.pollTimer = null;
        }
      }
      _addListener(key, listener) {
        if (Object.keys(this.listeners).length === 0) {
          this.startPolling();
        }
        if (!this.listeners[key]) {
          this.listeners[key] = /* @__PURE__ */ new Set();
          void this._get(key);
        }
        this.listeners[key].add(listener);
      }
      _removeListener(key, listener) {
        if (this.listeners[key]) {
          this.listeners[key].delete(listener);
          if (this.listeners[key].size === 0) {
            delete this.listeners[key];
          }
        }
        if (Object.keys(this.listeners).length === 0) {
          this.stopPolling();
        }
      }
    };
    IndexedDBLocalPersistence.type = "LOCAL";
    var indexedDBLocalPersistence = IndexedDBLocalPersistence;
    function startSignInPhoneMfa(auth, request) {
      return _performApiRequest(auth, "POST", "/v2/accounts/mfaSignIn:start", _addTidIfNecessary(auth, request));
    }
    function finalizeSignInPhoneMfa(auth, request) {
      return _performApiRequest(auth, "POST", "/v2/accounts/mfaSignIn:finalize", _addTidIfNecessary(auth, request));
    }
    function finalizeSignInTotpMfa(auth, request) {
      return _performApiRequest(auth, "POST", "/v2/accounts/mfaSignIn:finalize", _addTidIfNecessary(auth, request));
    }
    var _SOLVE_TIME_MS = 500;
    var _EXPIRATION_TIME_MS = 6e4;
    var _WIDGET_ID_START = 1e12;
    var MockReCaptcha = class {
      constructor(auth) {
        this.auth = auth;
        this.counter = _WIDGET_ID_START;
        this._widgets = /* @__PURE__ */ new Map();
      }
      render(container, parameters) {
        const id = this.counter;
        this._widgets.set(id, new MockWidget(container, this.auth.name, parameters || {}));
        this.counter++;
        return id;
      }
      reset(optWidgetId) {
        var _a;
        const id = optWidgetId || _WIDGET_ID_START;
        void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.delete());
        this._widgets.delete(id);
      }
      getResponse(optWidgetId) {
        var _a;
        const id = optWidgetId || _WIDGET_ID_START;
        return ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.getResponse()) || "";
      }
      async execute(optWidgetId) {
        var _a;
        const id = optWidgetId || _WIDGET_ID_START;
        void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.execute());
        return "";
      }
    };
    var MockWidget = class {
      constructor(containerOrId, appName, params) {
        this.params = params;
        this.timerId = null;
        this.deleted = false;
        this.responseToken = null;
        this.clickHandler = () => {
          this.execute();
        };
        const container = typeof containerOrId === "string" ? document.getElementById(containerOrId) : containerOrId;
        _assert(container, "argument-error", { appName });
        this.container = container;
        this.isVisible = this.params.size !== "invisible";
        if (this.isVisible) {
          this.execute();
        } else {
          this.container.addEventListener("click", this.clickHandler);
        }
      }
      getResponse() {
        this.checkIfDeleted();
        return this.responseToken;
      }
      delete() {
        this.checkIfDeleted();
        this.deleted = true;
        if (this.timerId) {
          clearTimeout(this.timerId);
          this.timerId = null;
        }
        this.container.removeEventListener("click", this.clickHandler);
      }
      execute() {
        this.checkIfDeleted();
        if (this.timerId) {
          return;
        }
        this.timerId = window.setTimeout(() => {
          this.responseToken = generateRandomAlphaNumericString(50);
          const { callback, "expired-callback": expiredCallback } = this.params;
          if (callback) {
            try {
              callback(this.responseToken);
            } catch (e) {
            }
          }
          this.timerId = window.setTimeout(() => {
            this.timerId = null;
            this.responseToken = null;
            if (expiredCallback) {
              try {
                expiredCallback();
              } catch (e) {
              }
            }
            if (this.isVisible) {
              this.execute();
            }
          }, _EXPIRATION_TIME_MS);
        }, _SOLVE_TIME_MS);
      }
      checkIfDeleted() {
        if (this.deleted) {
          throw new Error("reCAPTCHA mock was already deleted!");
        }
      }
    };
    function generateRandomAlphaNumericString(len) {
      const chars = [];
      const allowedChars = "1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
      for (let i = 0; i < len; i++) {
        chars.push(allowedChars.charAt(Math.floor(Math.random() * allowedChars.length)));
      }
      return chars.join("");
    }
    var _JSLOAD_CALLBACK = _generateCallbackName("rcb");
    var NETWORK_TIMEOUT_DELAY = new Delay(3e4, 6e4);
    var RECAPTCHA_BASE = "https://www.google.com/recaptcha/api.js?";
    var ReCaptchaLoaderImpl = class {
      constructor() {
        var _a;
        this.hostLanguage = "";
        this.counter = 0;
        this.librarySeparatelyLoaded = !!((_a = _window().grecaptcha) === null || _a === void 0 ? void 0 : _a.render);
      }
      load(auth, hl = "") {
        _assert(
          isHostLanguageValid(hl),
          auth,
          "argument-error"
          /* AuthErrorCode.ARGUMENT_ERROR */
        );
        if (this.shouldResolveImmediately(hl) && isV2(_window().grecaptcha)) {
          return Promise.resolve(_window().grecaptcha);
        }
        return new Promise((resolve, reject) => {
          const networkTimeout = _window().setTimeout(() => {
            reject(_createError(
              auth,
              "network-request-failed"
              /* AuthErrorCode.NETWORK_REQUEST_FAILED */
            ));
          }, NETWORK_TIMEOUT_DELAY.get());
          _window()[_JSLOAD_CALLBACK] = () => {
            _window().clearTimeout(networkTimeout);
            delete _window()[_JSLOAD_CALLBACK];
            const recaptcha = _window().grecaptcha;
            if (!recaptcha || !isV2(recaptcha)) {
              reject(_createError(
                auth,
                "internal-error"
                /* AuthErrorCode.INTERNAL_ERROR */
              ));
              return;
            }
            const render = recaptcha.render;
            recaptcha.render = (container, params) => {
              const widgetId = render(container, params);
              this.counter++;
              return widgetId;
            };
            this.hostLanguage = hl;
            resolve(recaptcha);
          };
          const url = `${RECAPTCHA_BASE}?${util.querystring({
            onload: _JSLOAD_CALLBACK,
            render: "explicit",
            hl
          })}`;
          _loadJS(url).catch(() => {
            clearTimeout(networkTimeout);
            reject(_createError(
              auth,
              "internal-error"
              /* AuthErrorCode.INTERNAL_ERROR */
            ));
          });
        });
      }
      clearedOneInstance() {
        this.counter--;
      }
      shouldResolveImmediately(hl) {
        var _a;
        return !!((_a = _window().grecaptcha) === null || _a === void 0 ? void 0 : _a.render) && (hl === this.hostLanguage || this.counter > 0 || this.librarySeparatelyLoaded);
      }
    };
    function isHostLanguageValid(hl) {
      return hl.length <= 6 && /^\s*[a-zA-Z0-9\-]*\s*$/.test(hl);
    }
    var MockReCaptchaLoaderImpl = class {
      async load(auth) {
        return new MockReCaptcha(auth);
      }
      clearedOneInstance() {
      }
    };
    var RECAPTCHA_VERIFIER_TYPE = "recaptcha";
    var DEFAULT_PARAMS = {
      theme: "light",
      type: "image"
    };
    var RecaptchaVerifier = class {
      /**
       *
       * @param containerOrId - The reCAPTCHA container parameter.
       *
       * @remarks
       * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a
       * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to
       * an element ID. The corresponding element must also must be in the DOM at the time of
       * initialization.
       *
       * @param parameters - The optional reCAPTCHA parameters.
       *
       * @remarks
       * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for
       * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will
       * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value
       * 'invisible'.
       *
       * @param authExtern - The corresponding Firebase {@link Auth} instance.
       */
      constructor(containerOrId, parameters = Object.assign({}, DEFAULT_PARAMS), authExtern) {
        this.parameters = parameters;
        this.type = RECAPTCHA_VERIFIER_TYPE;
        this.destroyed = false;
        this.widgetId = null;
        this.tokenChangeListeners = /* @__PURE__ */ new Set();
        this.renderPromise = null;
        this.recaptcha = null;
        this.auth = _castAuth(authExtern);
        this.isInvisible = this.parameters.size === "invisible";
        _assert(
          typeof document !== "undefined",
          this.auth,
          "operation-not-supported-in-this-environment"
          /* AuthErrorCode.OPERATION_NOT_SUPPORTED */
        );
        const container = typeof containerOrId === "string" ? document.getElementById(containerOrId) : containerOrId;
        _assert(
          container,
          this.auth,
          "argument-error"
          /* AuthErrorCode.ARGUMENT_ERROR */
        );
        this.container = container;
        this.parameters.callback = this.makeTokenCallback(this.parameters.callback);
        this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting ? new MockReCaptchaLoaderImpl() : new ReCaptchaLoaderImpl();
        this.validateStartingState();
      }
      /**
       * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.
       *
       * @returns A Promise for the reCAPTCHA token.
       */
      async verify() {
        this.assertNotDestroyed();
        const id = await this.render();
        const recaptcha = this.getAssertedRecaptcha();
        const response = recaptcha.getResponse(id);
        if (response) {
          return response;
        }
        return new Promise((resolve) => {
          const tokenChange = (token) => {
            if (!token) {
              return;
            }
            this.tokenChangeListeners.delete(tokenChange);
            resolve(token);
          };
          this.tokenChangeListeners.add(tokenChange);
          if (this.isInvisible) {
            recaptcha.execute(id);
          }
        });
      }
      /**
       * Renders the reCAPTCHA widget on the page.
       *
       * @returns A Promise that resolves with the reCAPTCHA widget ID.
       */
      render() {
        try {
          this.assertNotDestroyed();
        } catch (e) {
          return Promise.reject(e);
        }
        if (this.renderPromise) {
          return this.renderPromise;
        }
        this.renderPromise = this.makeRenderPromise().catch((e) => {
          this.renderPromise = null;
          throw e;
        });
        return this.renderPromise;
      }
      /** @internal */
      _reset() {
        this.assertNotDestroyed();
        if (this.widgetId !== null) {
          this.getAssertedRecaptcha().reset(this.widgetId);
        }
      }
      /**
       * Clears the reCAPTCHA widget from the page and destroys the instance.
       */
      clear() {
        this.assertNotDestroyed();
        this.destroyed = true;
        this._recaptchaLoader.clearedOneInstance();
        if (!this.isInvisible) {
          this.container.childNodes.forEach((node) => {
            this.container.removeChild(node);
          });
        }
      }
      validateStartingState() {
        _assert(
          !this.parameters.sitekey,
          this.auth,
          "argument-error"
          /* AuthErrorCode.ARGUMENT_ERROR */
        );
        _assert(
          this.isInvisible || !this.container.hasChildNodes(),
          this.auth,
          "argument-error"
          /* AuthErrorCode.ARGUMENT_ERROR */
        );
        _assert(
          typeof document !== "undefined",
          this.auth,
          "operation-not-supported-in-this-environment"
          /* AuthErrorCode.OPERATION_NOT_SUPPORTED */
        );
      }
      makeTokenCallback(existing) {
        return (token) => {
          this.tokenChangeListeners.forEach((listener) => listener(token));
          if (typeof existing === "function") {
            existing(token);
          } else if (typeof existing === "string") {
            const globalFunc = _window()[existing];
            if (typeof globalFunc === "function") {
              globalFunc(token);
            }
          }
        };
      }
      assertNotDestroyed() {
        _assert(
          !this.destroyed,
          this.auth,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
      }
      async makeRenderPromise() {
        await this.init();
        if (!this.widgetId) {
          let container = this.container;
          if (!this.isInvisible) {
            const guaranteedEmpty = document.createElement("div");
            container.appendChild(guaranteedEmpty);
            container = guaranteedEmpty;
          }
          this.widgetId = this.getAssertedRecaptcha().render(container, this.parameters);
        }
        return this.widgetId;
      }
      async init() {
        _assert(
          _isHttpOrHttps() && !_isWorker(),
          this.auth,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        await domReady();
        this.recaptcha = await this._recaptchaLoader.load(this.auth, this.auth.languageCode || void 0);
        const siteKey = await getRecaptchaParams(this.auth);
        _assert(
          siteKey,
          this.auth,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        this.parameters.sitekey = siteKey;
      }
      getAssertedRecaptcha() {
        _assert(
          this.recaptcha,
          this.auth,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        return this.recaptcha;
      }
    };
    function domReady() {
      let resolver = null;
      return new Promise((resolve) => {
        if (document.readyState === "complete") {
          resolve();
          return;
        }
        resolver = () => resolve();
        window.addEventListener("load", resolver);
      }).catch((e) => {
        if (resolver) {
          window.removeEventListener("load", resolver);
        }
        throw e;
      });
    }
    var ConfirmationResultImpl = class {
      constructor(verificationId, onConfirmation) {
        this.verificationId = verificationId;
        this.onConfirmation = onConfirmation;
      }
      confirm(verificationCode) {
        const authCredential = PhoneAuthCredential._fromVerification(this.verificationId, verificationCode);
        return this.onConfirmation(authCredential);
      }
    };
    async function signInWithPhoneNumber(auth, phoneNumber, appVerifier) {
      const authInternal = _castAuth(auth);
      const verificationId = await _verifyPhoneNumber(authInternal, phoneNumber, util.getModularInstance(appVerifier));
      return new ConfirmationResultImpl(verificationId, (cred) => signInWithCredential(authInternal, cred));
    }
    async function linkWithPhoneNumber(user, phoneNumber, appVerifier) {
      const userInternal = util.getModularInstance(user);
      await _assertLinkedStatus(
        false,
        userInternal,
        "phone"
        /* ProviderId.PHONE */
      );
      const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, util.getModularInstance(appVerifier));
      return new ConfirmationResultImpl(verificationId, (cred) => linkWithCredential(userInternal, cred));
    }
    async function reauthenticateWithPhoneNumber(user, phoneNumber, appVerifier) {
      const userInternal = util.getModularInstance(user);
      const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, util.getModularInstance(appVerifier));
      return new ConfirmationResultImpl(verificationId, (cred) => reauthenticateWithCredential(userInternal, cred));
    }
    async function _verifyPhoneNumber(auth, options, verifier) {
      var _a;
      const recaptchaToken = await verifier.verify();
      try {
        _assert(
          typeof recaptchaToken === "string",
          auth,
          "argument-error"
          /* AuthErrorCode.ARGUMENT_ERROR */
        );
        _assert(
          verifier.type === RECAPTCHA_VERIFIER_TYPE,
          auth,
          "argument-error"
          /* AuthErrorCode.ARGUMENT_ERROR */
        );
        let phoneInfoOptions;
        if (typeof options === "string") {
          phoneInfoOptions = {
            phoneNumber: options
          };
        } else {
          phoneInfoOptions = options;
        }
        if ("session" in phoneInfoOptions) {
          const session = phoneInfoOptions.session;
          if ("phoneNumber" in phoneInfoOptions) {
            _assert(
              session.type === "enroll",
              auth,
              "internal-error"
              /* AuthErrorCode.INTERNAL_ERROR */
            );
            const response = await startEnrollPhoneMfa(auth, {
              idToken: session.credential,
              phoneEnrollmentInfo: {
                phoneNumber: phoneInfoOptions.phoneNumber,
                recaptchaToken
              }
            });
            return response.phoneSessionInfo.sessionInfo;
          } else {
            _assert(
              session.type === "signin",
              auth,
              "internal-error"
              /* AuthErrorCode.INTERNAL_ERROR */
            );
            const mfaEnrollmentId = ((_a = phoneInfoOptions.multiFactorHint) === null || _a === void 0 ? void 0 : _a.uid) || phoneInfoOptions.multiFactorUid;
            _assert(
              mfaEnrollmentId,
              auth,
              "missing-multi-factor-info"
              /* AuthErrorCode.MISSING_MFA_INFO */
            );
            const response = await startSignInPhoneMfa(auth, {
              mfaPendingCredential: session.credential,
              mfaEnrollmentId,
              phoneSignInInfo: {
                recaptchaToken
              }
            });
            return response.phoneResponseInfo.sessionInfo;
          }
        } else {
          const { sessionInfo } = await sendPhoneVerificationCode(auth, {
            phoneNumber: phoneInfoOptions.phoneNumber,
            recaptchaToken
          });
          return sessionInfo;
        }
      } finally {
        verifier._reset();
      }
    }
    async function updatePhoneNumber(user, credential) {
      await _link$1(util.getModularInstance(user), credential);
    }
    var PhoneAuthProvider = class _PhoneAuthProvider {
      /**
       * @param auth - The Firebase {@link Auth} instance in which sign-ins should occur.
       *
       */
      constructor(auth) {
        this.providerId = _PhoneAuthProvider.PROVIDER_ID;
        this.auth = _castAuth(auth);
      }
      /**
       *
       * Starts a phone number authentication flow by sending a verification code to the given phone
       * number.
       *
       * @example
       * ```javascript
       * const provider = new PhoneAuthProvider(auth);
       * const verificationId = await provider.verifyPhoneNumber(phoneNumber, applicationVerifier);
       * // Obtain verificationCode from the user.
       * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
       * const userCredential = await signInWithCredential(auth, authCredential);
       * ```
       *
       * @example
       * An alternative flow is provided using the `signInWithPhoneNumber` method.
       * ```javascript
       * const confirmationResult = signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);
       * // Obtain verificationCode from the user.
       * const userCredential = confirmationResult.confirm(verificationCode);
       * ```
       *
       * @param phoneInfoOptions - The user's {@link PhoneInfoOptions}. The phone number should be in
       * E.164 format (e.g. +16505550101).
       * @param applicationVerifier - For abuse prevention, this method also requires a
       * {@link ApplicationVerifier}. This SDK includes a reCAPTCHA-based implementation,
       * {@link RecaptchaVerifier}.
       *
       * @returns A Promise for a verification ID that can be passed to
       * {@link PhoneAuthProvider.credential} to identify this flow..
       */
      verifyPhoneNumber(phoneOptions, applicationVerifier) {
        return _verifyPhoneNumber(this.auth, phoneOptions, util.getModularInstance(applicationVerifier));
      }
      /**
       * Creates a phone auth credential, given the verification ID from
       * {@link PhoneAuthProvider.verifyPhoneNumber} and the code that was sent to the user's
       * mobile device.
       *
       * @example
       * ```javascript
       * const provider = new PhoneAuthProvider(auth);
       * const verificationId = provider.verifyPhoneNumber(phoneNumber, applicationVerifier);
       * // Obtain verificationCode from the user.
       * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
       * const userCredential = signInWithCredential(auth, authCredential);
       * ```
       *
       * @example
       * An alternative flow is provided using the `signInWithPhoneNumber` method.
       * ```javascript
       * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);
       * // Obtain verificationCode from the user.
       * const userCredential = await confirmationResult.confirm(verificationCode);
       * ```
       *
       * @param verificationId - The verification ID returned from {@link PhoneAuthProvider.verifyPhoneNumber}.
       * @param verificationCode - The verification code sent to the user's mobile device.
       *
       * @returns The auth provider credential.
       */
      static credential(verificationId, verificationCode) {
        return PhoneAuthCredential._fromVerification(verificationId, verificationCode);
      }
      /**
       * Generates an {@link AuthCredential} from a {@link UserCredential}.
       * @param userCredential - The user credential.
       */
      static credentialFromResult(userCredential) {
        const credential = userCredential;
        return _PhoneAuthProvider.credentialFromTaggedObject(credential);
      }
      /**
       * Returns an {@link AuthCredential} when passed an error.
       *
       * @remarks
       *
       * This method works for errors like
       * `auth/account-exists-with-different-credentials`. This is useful for
       * recovering when attempting to set a user's phone number but the number
       * in question is already tied to another account. For example, the following
       * code tries to update the current user's phone number, and if that
       * fails, links the user with the account associated with that number:
       *
       * ```js
       * const provider = new PhoneAuthProvider(auth);
       * const verificationId = await provider.verifyPhoneNumber(number, verifier);
       * try {
       *   const code = ''; // Prompt the user for the verification code
       *   await updatePhoneNumber(
       *       auth.currentUser,
       *       PhoneAuthProvider.credential(verificationId, code));
       * } catch (e) {
       *   if ((e as FirebaseError)?.code === 'auth/account-exists-with-different-credential') {
       *     const cred = PhoneAuthProvider.credentialFromError(e);
       *     await linkWithCredential(auth.currentUser, cred);
       *   }
       * }
       *
       * // At this point, auth.currentUser.phoneNumber === number.
       * ```
       *
       * @param error - The error to generate a credential from.
       */
      static credentialFromError(error) {
        return _PhoneAuthProvider.credentialFromTaggedObject(error.customData || {});
      }
      static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse) {
          return null;
        }
        const { phoneNumber, temporaryProof } = tokenResponse;
        if (phoneNumber && temporaryProof) {
          return PhoneAuthCredential._fromTokenResponse(phoneNumber, temporaryProof);
        }
        return null;
      }
    };
    PhoneAuthProvider.PROVIDER_ID = "phone";
    PhoneAuthProvider.PHONE_SIGN_IN_METHOD = "phone";
    function _withDefaultResolver(auth, resolverOverride) {
      if (resolverOverride) {
        return _getInstance(resolverOverride);
      }
      _assert(
        auth._popupRedirectResolver,
        auth,
        "argument-error"
        /* AuthErrorCode.ARGUMENT_ERROR */
      );
      return auth._popupRedirectResolver;
    }
    var IdpCredential = class extends AuthCredential {
      constructor(params) {
        super(
          "custom",
          "custom"
          /* ProviderId.CUSTOM */
        );
        this.params = params;
      }
      _getIdTokenResponse(auth) {
        return signInWithIdp(auth, this._buildIdpRequest());
      }
      _linkToIdToken(auth, idToken) {
        return signInWithIdp(auth, this._buildIdpRequest(idToken));
      }
      _getReauthenticationResolver(auth) {
        return signInWithIdp(auth, this._buildIdpRequest());
      }
      _buildIdpRequest(idToken) {
        const request = {
          requestUri: this.params.requestUri,
          sessionId: this.params.sessionId,
          postBody: this.params.postBody,
          tenantId: this.params.tenantId,
          pendingToken: this.params.pendingToken,
          returnSecureToken: true,
          returnIdpCredential: true
        };
        if (idToken) {
          request.idToken = idToken;
        }
        return request;
      }
    };
    function _signIn(params) {
      return _signInWithCredential(params.auth, new IdpCredential(params), params.bypassAuthState);
    }
    function _reauth(params) {
      const { auth, user } = params;
      _assert(
        user,
        auth,
        "internal-error"
        /* AuthErrorCode.INTERNAL_ERROR */
      );
      return _reauthenticate(user, new IdpCredential(params), params.bypassAuthState);
    }
    async function _link(params) {
      const { auth, user } = params;
      _assert(
        user,
        auth,
        "internal-error"
        /* AuthErrorCode.INTERNAL_ERROR */
      );
      return _link$1(user, new IdpCredential(params), params.bypassAuthState);
    }
    var AbstractPopupRedirectOperation = class {
      constructor(auth, filter, resolver, user, bypassAuthState = false) {
        this.auth = auth;
        this.resolver = resolver;
        this.user = user;
        this.bypassAuthState = bypassAuthState;
        this.pendingPromise = null;
        this.eventManager = null;
        this.filter = Array.isArray(filter) ? filter : [filter];
      }
      execute() {
        return new Promise(async (resolve, reject) => {
          this.pendingPromise = { resolve, reject };
          try {
            this.eventManager = await this.resolver._initialize(this.auth);
            await this.onExecution();
            this.eventManager.registerConsumer(this);
          } catch (e) {
            this.reject(e);
          }
        });
      }
      async onAuthEvent(event) {
        const { urlResponse, sessionId, postBody, tenantId, error, type } = event;
        if (error) {
          this.reject(error);
          return;
        }
        const params = {
          auth: this.auth,
          requestUri: urlResponse,
          sessionId,
          tenantId: tenantId || void 0,
          postBody: postBody || void 0,
          user: this.user,
          bypassAuthState: this.bypassAuthState
        };
        try {
          this.resolve(await this.getIdpTask(type)(params));
        } catch (e) {
          this.reject(e);
        }
      }
      onError(error) {
        this.reject(error);
      }
      getIdpTask(type) {
        switch (type) {
          case "signInViaPopup":
          case "signInViaRedirect":
            return _signIn;
          case "linkViaPopup":
          case "linkViaRedirect":
            return _link;
          case "reauthViaPopup":
          case "reauthViaRedirect":
            return _reauth;
          default:
            _fail(
              this.auth,
              "internal-error"
              /* AuthErrorCode.INTERNAL_ERROR */
            );
        }
      }
      resolve(cred) {
        debugAssert(this.pendingPromise, "Pending promise was never set");
        this.pendingPromise.resolve(cred);
        this.unregisterAndCleanUp();
      }
      reject(error) {
        debugAssert(this.pendingPromise, "Pending promise was never set");
        this.pendingPromise.reject(error);
        this.unregisterAndCleanUp();
      }
      unregisterAndCleanUp() {
        if (this.eventManager) {
          this.eventManager.unregisterConsumer(this);
        }
        this.pendingPromise = null;
        this.cleanUp();
      }
    };
    var _POLL_WINDOW_CLOSE_TIMEOUT = new Delay(2e3, 1e4);
    async function signInWithPopup(auth, provider, resolver) {
      const authInternal = _castAuth(auth);
      _assertInstanceOf(auth, provider, FederatedAuthProvider);
      const resolverInternal = _withDefaultResolver(authInternal, resolver);
      const action = new PopupOperation(authInternal, "signInViaPopup", provider, resolverInternal);
      return action.executeNotNull();
    }
    async function reauthenticateWithPopup(user, provider, resolver) {
      const userInternal = util.getModularInstance(user);
      _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);
      const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
      const action = new PopupOperation(userInternal.auth, "reauthViaPopup", provider, resolverInternal, userInternal);
      return action.executeNotNull();
    }
    async function linkWithPopup(user, provider, resolver) {
      const userInternal = util.getModularInstance(user);
      _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);
      const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
      const action = new PopupOperation(userInternal.auth, "linkViaPopup", provider, resolverInternal, userInternal);
      return action.executeNotNull();
    }
    var PopupOperation = class _PopupOperation extends AbstractPopupRedirectOperation {
      constructor(auth, filter, provider, resolver, user) {
        super(auth, filter, resolver, user);
        this.provider = provider;
        this.authWindow = null;
        this.pollId = null;
        if (_PopupOperation.currentPopupAction) {
          _PopupOperation.currentPopupAction.cancel();
        }
        _PopupOperation.currentPopupAction = this;
      }
      async executeNotNull() {
        const result = await this.execute();
        _assert(
          result,
          this.auth,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        return result;
      }
      async onExecution() {
        debugAssert(this.filter.length === 1, "Popup operations only handle one event");
        const eventId = _generateEventId();
        this.authWindow = await this.resolver._openPopup(
          this.auth,
          this.provider,
          this.filter[0],
          // There's always one, see constructor
          eventId
        );
        this.authWindow.associatedEvent = eventId;
        this.resolver._originValidation(this.auth).catch((e) => {
          this.reject(e);
        });
        this.resolver._isIframeWebStorageSupported(this.auth, (isSupported) => {
          if (!isSupported) {
            this.reject(_createError(
              this.auth,
              "web-storage-unsupported"
              /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */
            ));
          }
        });
        this.pollUserCancellation();
      }
      get eventId() {
        var _a;
        return ((_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.associatedEvent) || null;
      }
      cancel() {
        this.reject(_createError(
          this.auth,
          "cancelled-popup-request"
          /* AuthErrorCode.EXPIRED_POPUP_REQUEST */
        ));
      }
      cleanUp() {
        if (this.authWindow) {
          this.authWindow.close();
        }
        if (this.pollId) {
          window.clearTimeout(this.pollId);
        }
        this.authWindow = null;
        this.pollId = null;
        _PopupOperation.currentPopupAction = null;
      }
      pollUserCancellation() {
        const poll = () => {
          var _a, _b;
          if ((_b = (_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.window) === null || _b === void 0 ? void 0 : _b.closed) {
            this.pollId = window.setTimeout(
              () => {
                this.pollId = null;
                this.reject(_createError(
                  this.auth,
                  "popup-closed-by-user"
                  /* AuthErrorCode.POPUP_CLOSED_BY_USER */
                ));
              },
              8e3
              /* _Timeout.AUTH_EVENT */
            );
            return;
          }
          this.pollId = window.setTimeout(poll, _POLL_WINDOW_CLOSE_TIMEOUT.get());
        };
        poll();
      }
    };
    PopupOperation.currentPopupAction = null;
    var PENDING_REDIRECT_KEY = "pendingRedirect";
    var redirectOutcomeMap = /* @__PURE__ */ new Map();
    var RedirectAction = class extends AbstractPopupRedirectOperation {
      constructor(auth, resolver, bypassAuthState = false) {
        super(auth, [
          "signInViaRedirect",
          "linkViaRedirect",
          "reauthViaRedirect",
          "unknown"
          /* AuthEventType.UNKNOWN */
        ], resolver, void 0, bypassAuthState);
        this.eventId = null;
      }
      /**
       * Override the execute function; if we already have a redirect result, then
       * just return it.
       */
      async execute() {
        let readyOutcome = redirectOutcomeMap.get(this.auth._key());
        if (!readyOutcome) {
          try {
            const hasPendingRedirect = await _getAndClearPendingRedirectStatus(this.resolver, this.auth);
            const result = hasPendingRedirect ? await super.execute() : null;
            readyOutcome = () => Promise.resolve(result);
          } catch (e) {
            readyOutcome = () => Promise.reject(e);
          }
          redirectOutcomeMap.set(this.auth._key(), readyOutcome);
        }
        if (!this.bypassAuthState) {
          redirectOutcomeMap.set(this.auth._key(), () => Promise.resolve(null));
        }
        return readyOutcome();
      }
      async onAuthEvent(event) {
        if (event.type === "signInViaRedirect") {
          return super.onAuthEvent(event);
        } else if (event.type === "unknown") {
          this.resolve(null);
          return;
        }
        if (event.eventId) {
          const user = await this.auth._redirectUserForId(event.eventId);
          if (user) {
            this.user = user;
            return super.onAuthEvent(event);
          } else {
            this.resolve(null);
          }
        }
      }
      async onExecution() {
      }
      cleanUp() {
      }
    };
    async function _getAndClearPendingRedirectStatus(resolver, auth) {
      const key = pendingRedirectKey(auth);
      const persistence = resolverPersistence(resolver);
      if (!await persistence._isAvailable()) {
        return false;
      }
      const hasPendingRedirect = await persistence._get(key) === "true";
      await persistence._remove(key);
      return hasPendingRedirect;
    }
    async function _setPendingRedirectStatus(resolver, auth) {
      return resolverPersistence(resolver)._set(pendingRedirectKey(auth), "true");
    }
    function _clearRedirectOutcomes() {
      redirectOutcomeMap.clear();
    }
    function _overrideRedirectResult(auth, result) {
      redirectOutcomeMap.set(auth._key(), result);
    }
    function resolverPersistence(resolver) {
      return _getInstance(resolver._redirectPersistence);
    }
    function pendingRedirectKey(auth) {
      return _persistenceKeyName(PENDING_REDIRECT_KEY, auth.config.apiKey, auth.name);
    }
    function signInWithRedirect(auth, provider, resolver) {
      return _signInWithRedirect(auth, provider, resolver);
    }
    async function _signInWithRedirect(auth, provider, resolver) {
      const authInternal = _castAuth(auth);
      _assertInstanceOf(auth, provider, FederatedAuthProvider);
      await authInternal._initializationPromise;
      const resolverInternal = _withDefaultResolver(authInternal, resolver);
      await _setPendingRedirectStatus(resolverInternal, authInternal);
      return resolverInternal._openRedirect(
        authInternal,
        provider,
        "signInViaRedirect"
        /* AuthEventType.SIGN_IN_VIA_REDIRECT */
      );
    }
    function reauthenticateWithRedirect(user, provider, resolver) {
      return _reauthenticateWithRedirect(user, provider, resolver);
    }
    async function _reauthenticateWithRedirect(user, provider, resolver) {
      const userInternal = util.getModularInstance(user);
      _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);
      await userInternal.auth._initializationPromise;
      const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
      await _setPendingRedirectStatus(resolverInternal, userInternal.auth);
      const eventId = await prepareUserForRedirect(userInternal);
      return resolverInternal._openRedirect(userInternal.auth, provider, "reauthViaRedirect", eventId);
    }
    function linkWithRedirect(user, provider, resolver) {
      return _linkWithRedirect(user, provider, resolver);
    }
    async function _linkWithRedirect(user, provider, resolver) {
      const userInternal = util.getModularInstance(user);
      _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);
      await userInternal.auth._initializationPromise;
      const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
      await _assertLinkedStatus(false, userInternal, provider.providerId);
      await _setPendingRedirectStatus(resolverInternal, userInternal.auth);
      const eventId = await prepareUserForRedirect(userInternal);
      return resolverInternal._openRedirect(userInternal.auth, provider, "linkViaRedirect", eventId);
    }
    async function getRedirectResult(auth, resolver) {
      await _castAuth(auth)._initializationPromise;
      return _getRedirectResult(auth, resolver, false);
    }
    async function _getRedirectResult(auth, resolverExtern, bypassAuthState = false) {
      const authInternal = _castAuth(auth);
      const resolver = _withDefaultResolver(authInternal, resolverExtern);
      const action = new RedirectAction(authInternal, resolver, bypassAuthState);
      const result = await action.execute();
      if (result && !bypassAuthState) {
        delete result.user._redirectEventId;
        await authInternal._persistUserIfCurrent(result.user);
        await authInternal._setRedirectUser(null, resolverExtern);
      }
      return result;
    }
    async function prepareUserForRedirect(user) {
      const eventId = _generateEventId(`${user.uid}:::`);
      user._redirectEventId = eventId;
      await user.auth._setRedirectUser(user);
      await user.auth._persistUserIfCurrent(user);
      return eventId;
    }
    var EVENT_DUPLICATION_CACHE_DURATION_MS = 10 * 60 * 1e3;
    var AuthEventManager = class {
      constructor(auth) {
        this.auth = auth;
        this.cachedEventUids = /* @__PURE__ */ new Set();
        this.consumers = /* @__PURE__ */ new Set();
        this.queuedRedirectEvent = null;
        this.hasHandledPotentialRedirect = false;
        this.lastProcessedEventTime = Date.now();
      }
      registerConsumer(authEventConsumer) {
        this.consumers.add(authEventConsumer);
        if (this.queuedRedirectEvent && this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)) {
          this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);
          this.saveEventToCache(this.queuedRedirectEvent);
          this.queuedRedirectEvent = null;
        }
      }
      unregisterConsumer(authEventConsumer) {
        this.consumers.delete(authEventConsumer);
      }
      onEvent(event) {
        if (this.hasEventBeenHandled(event)) {
          return false;
        }
        let handled = false;
        this.consumers.forEach((consumer) => {
          if (this.isEventForConsumer(event, consumer)) {
            handled = true;
            this.sendToConsumer(event, consumer);
            this.saveEventToCache(event);
          }
        });
        if (this.hasHandledPotentialRedirect || !isRedirectEvent(event)) {
          return handled;
        }
        this.hasHandledPotentialRedirect = true;
        if (!handled) {
          this.queuedRedirectEvent = event;
          handled = true;
        }
        return handled;
      }
      sendToConsumer(event, consumer) {
        var _a;
        if (event.error && !isNullRedirectEvent(event)) {
          const code = ((_a = event.error.code) === null || _a === void 0 ? void 0 : _a.split("auth/")[1]) || "internal-error";
          consumer.onError(_createError(this.auth, code));
        } else {
          consumer.onAuthEvent(event);
        }
      }
      isEventForConsumer(event, consumer) {
        const eventIdMatches = consumer.eventId === null || !!event.eventId && event.eventId === consumer.eventId;
        return consumer.filter.includes(event.type) && eventIdMatches;
      }
      hasEventBeenHandled(event) {
        if (Date.now() - this.lastProcessedEventTime >= EVENT_DUPLICATION_CACHE_DURATION_MS) {
          this.cachedEventUids.clear();
        }
        return this.cachedEventUids.has(eventUid(event));
      }
      saveEventToCache(event) {
        this.cachedEventUids.add(eventUid(event));
        this.lastProcessedEventTime = Date.now();
      }
    };
    function eventUid(e) {
      return [e.type, e.eventId, e.sessionId, e.tenantId].filter((v) => v).join("-");
    }
    function isNullRedirectEvent({ type, error }) {
      return type === "unknown" && (error === null || error === void 0 ? void 0 : error.code) === `auth/${"no-auth-event"}`;
    }
    function isRedirectEvent(event) {
      switch (event.type) {
        case "signInViaRedirect":
        case "linkViaRedirect":
        case "reauthViaRedirect":
          return true;
        case "unknown":
          return isNullRedirectEvent(event);
        default:
          return false;
      }
    }
    async function _getProjectConfig(auth, request = {}) {
      return _performApiRequest(auth, "GET", "/v1/projects", request);
    }
    var IP_ADDRESS_REGEX = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
    var HTTP_REGEX = /^https?/;
    async function _validateOrigin(auth) {
      if (auth.config.emulator) {
        return;
      }
      const { authorizedDomains } = await _getProjectConfig(auth);
      for (const domain of authorizedDomains) {
        try {
          if (matchDomain(domain)) {
            return;
          }
        } catch (_a) {
        }
      }
      _fail(
        auth,
        "unauthorized-domain"
        /* AuthErrorCode.INVALID_ORIGIN */
      );
    }
    function matchDomain(expected) {
      const currentUrl = _getCurrentUrl();
      const { protocol, hostname } = new URL(currentUrl);
      if (expected.startsWith("chrome-extension://")) {
        const ceUrl = new URL(expected);
        if (ceUrl.hostname === "" && hostname === "") {
          return protocol === "chrome-extension:" && expected.replace("chrome-extension://", "") === currentUrl.replace("chrome-extension://", "");
        }
        return protocol === "chrome-extension:" && ceUrl.hostname === hostname;
      }
      if (!HTTP_REGEX.test(protocol)) {
        return false;
      }
      if (IP_ADDRESS_REGEX.test(expected)) {
        return hostname === expected;
      }
      const escapedDomainPattern = expected.replace(/\./g, "\\.");
      const re = new RegExp("^(.+\\." + escapedDomainPattern + "|" + escapedDomainPattern + ")$", "i");
      return re.test(hostname);
    }
    var NETWORK_TIMEOUT = new Delay(3e4, 6e4);
    function resetUnloadedGapiModules() {
      const beacon = _window().___jsl;
      if (beacon === null || beacon === void 0 ? void 0 : beacon.H) {
        for (const hint of Object.keys(beacon.H)) {
          beacon.H[hint].r = beacon.H[hint].r || [];
          beacon.H[hint].L = beacon.H[hint].L || [];
          beacon.H[hint].r = [...beacon.H[hint].L];
          if (beacon.CP) {
            for (let i = 0; i < beacon.CP.length; i++) {
              beacon.CP[i] = null;
            }
          }
        }
      }
    }
    function loadGapi(auth) {
      return new Promise((resolve, reject) => {
        var _a, _b, _c;
        function loadGapiIframe() {
          resetUnloadedGapiModules();
          gapi.load("gapi.iframes", {
            callback: () => {
              resolve(gapi.iframes.getContext());
            },
            ontimeout: () => {
              resetUnloadedGapiModules();
              reject(_createError(
                auth,
                "network-request-failed"
                /* AuthErrorCode.NETWORK_REQUEST_FAILED */
              ));
            },
            timeout: NETWORK_TIMEOUT.get()
          });
        }
        if ((_b = (_a = _window().gapi) === null || _a === void 0 ? void 0 : _a.iframes) === null || _b === void 0 ? void 0 : _b.Iframe) {
          resolve(gapi.iframes.getContext());
        } else if (!!((_c = _window().gapi) === null || _c === void 0 ? void 0 : _c.load)) {
          loadGapiIframe();
        } else {
          const cbName = _generateCallbackName("iframefcb");
          _window()[cbName] = () => {
            if (!!gapi.load) {
              loadGapiIframe();
            } else {
              reject(_createError(
                auth,
                "network-request-failed"
                /* AuthErrorCode.NETWORK_REQUEST_FAILED */
              ));
            }
          };
          return _loadJS(`https://apis.google.com/js/api.js?onload=${cbName}`).catch((e) => reject(e));
        }
      }).catch((error) => {
        cachedGApiLoader = null;
        throw error;
      });
    }
    var cachedGApiLoader = null;
    function _loadGapi(auth) {
      cachedGApiLoader = cachedGApiLoader || loadGapi(auth);
      return cachedGApiLoader;
    }
    var PING_TIMEOUT = new Delay(5e3, 15e3);
    var IFRAME_PATH = "__/auth/iframe";
    var EMULATED_IFRAME_PATH = "emulator/auth/iframe";
    var IFRAME_ATTRIBUTES = {
      style: {
        position: "absolute",
        top: "-100px",
        width: "1px",
        height: "1px"
      },
      "aria-hidden": "true",
      tabindex: "-1"
    };
    var EID_FROM_APIHOST = /* @__PURE__ */ new Map([
      ["identitytoolkit.googleapis.com", "p"],
      ["staging-identitytoolkit.sandbox.googleapis.com", "s"],
      ["test-identitytoolkit.sandbox.googleapis.com", "t"]
      // test
    ]);
    function getIframeUrl(auth) {
      const config = auth.config;
      _assert(
        config.authDomain,
        auth,
        "auth-domain-config-required"
        /* AuthErrorCode.MISSING_AUTH_DOMAIN */
      );
      const url = config.emulator ? _emulatorUrl(config, EMULATED_IFRAME_PATH) : `https://${auth.config.authDomain}/${IFRAME_PATH}`;
      const params = {
        apiKey: config.apiKey,
        appName: auth.name,
        v: app.SDK_VERSION
      };
      const eid = EID_FROM_APIHOST.get(auth.config.apiHost);
      if (eid) {
        params.eid = eid;
      }
      const frameworks = auth._getFrameworks();
      if (frameworks.length) {
        params.fw = frameworks.join(",");
      }
      return `${url}?${util.querystring(params).slice(1)}`;
    }
    async function _openIframe(auth) {
      const context = await _loadGapi(auth);
      const gapi2 = _window().gapi;
      _assert(
        gapi2,
        auth,
        "internal-error"
        /* AuthErrorCode.INTERNAL_ERROR */
      );
      return context.open({
        where: document.body,
        url: getIframeUrl(auth),
        messageHandlersFilter: gapi2.iframes.CROSS_ORIGIN_IFRAMES_FILTER,
        attributes: IFRAME_ATTRIBUTES,
        dontclear: true
      }, (iframe) => new Promise(async (resolve, reject) => {
        await iframe.restyle({
          // Prevent iframe from closing on mouse out.
          setHideOnLeave: false
        });
        const networkError = _createError(
          auth,
          "network-request-failed"
          /* AuthErrorCode.NETWORK_REQUEST_FAILED */
        );
        const networkErrorTimer = _window().setTimeout(() => {
          reject(networkError);
        }, PING_TIMEOUT.get());
        function clearTimerAndResolve() {
          _window().clearTimeout(networkErrorTimer);
          resolve(iframe);
        }
        iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, () => {
          reject(networkError);
        });
      }));
    }
    var BASE_POPUP_OPTIONS = {
      location: "yes",
      resizable: "yes",
      statusbar: "yes",
      toolbar: "no"
    };
    var DEFAULT_WIDTH = 500;
    var DEFAULT_HEIGHT = 600;
    var TARGET_BLANK = "_blank";
    var FIREFOX_EMPTY_URL = "http://localhost";
    var AuthPopup = class {
      constructor(window2) {
        this.window = window2;
        this.associatedEvent = null;
      }
      close() {
        if (this.window) {
          try {
            this.window.close();
          } catch (e) {
          }
        }
      }
    };
    function _open(auth, url, name2, width = DEFAULT_WIDTH, height = DEFAULT_HEIGHT) {
      const top = Math.max((window.screen.availHeight - height) / 2, 0).toString();
      const left = Math.max((window.screen.availWidth - width) / 2, 0).toString();
      let target = "";
      const options = Object.assign(Object.assign({}, BASE_POPUP_OPTIONS), {
        width: width.toString(),
        height: height.toString(),
        top,
        left
      });
      const ua = util.getUA().toLowerCase();
      if (name2) {
        target = _isChromeIOS(ua) ? TARGET_BLANK : name2;
      }
      if (_isFirefox(ua)) {
        url = url || FIREFOX_EMPTY_URL;
        options.scrollbars = "yes";
      }
      const optionsString = Object.entries(options).reduce((accum, [key, value]) => `${accum}${key}=${value},`, "");
      if (_isIOSStandalone(ua) && target !== "_self") {
        openAsNewWindowIOS(url || "", target);
        return new AuthPopup(null);
      }
      const newWin = window.open(url || "", target, optionsString);
      _assert(
        newWin,
        auth,
        "popup-blocked"
        /* AuthErrorCode.POPUP_BLOCKED */
      );
      try {
        newWin.focus();
      } catch (e) {
      }
      return new AuthPopup(newWin);
    }
    function openAsNewWindowIOS(url, target) {
      const el = document.createElement("a");
      el.href = url;
      el.target = target;
      const click = document.createEvent("MouseEvent");
      click.initMouseEvent("click", true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 1, null);
      el.dispatchEvent(click);
    }
    var WIDGET_PATH = "__/auth/handler";
    var EMULATOR_WIDGET_PATH = "emulator/auth/handler";
    var FIREBASE_APP_CHECK_FRAGMENT_ID = encodeURIComponent("fac");
    async function _getRedirectUrl(auth, provider, authType, redirectUrl, eventId, additionalParams) {
      _assert(
        auth.config.authDomain,
        auth,
        "auth-domain-config-required"
        /* AuthErrorCode.MISSING_AUTH_DOMAIN */
      );
      _assert(
        auth.config.apiKey,
        auth,
        "invalid-api-key"
        /* AuthErrorCode.INVALID_API_KEY */
      );
      const params = {
        apiKey: auth.config.apiKey,
        appName: auth.name,
        authType,
        redirectUrl,
        v: app.SDK_VERSION,
        eventId
      };
      if (provider instanceof FederatedAuthProvider) {
        provider.setDefaultLanguage(auth.languageCode);
        params.providerId = provider.providerId || "";
        if (!util.isEmpty(provider.getCustomParameters())) {
          params.customParameters = JSON.stringify(provider.getCustomParameters());
        }
        for (const [key, value] of Object.entries(additionalParams || {})) {
          params[key] = value;
        }
      }
      if (provider instanceof BaseOAuthProvider) {
        const scopes = provider.getScopes().filter((scope) => scope !== "");
        if (scopes.length > 0) {
          params.scopes = scopes.join(",");
        }
      }
      if (auth.tenantId) {
        params.tid = auth.tenantId;
      }
      const paramsDict = params;
      for (const key of Object.keys(paramsDict)) {
        if (paramsDict[key] === void 0) {
          delete paramsDict[key];
        }
      }
      const appCheckToken = await auth._getAppCheckToken();
      const appCheckTokenFragment = appCheckToken ? `#${FIREBASE_APP_CHECK_FRAGMENT_ID}=${encodeURIComponent(appCheckToken)}` : "";
      return `${getHandlerBase(auth)}?${util.querystring(paramsDict).slice(1)}${appCheckTokenFragment}`;
    }
    function getHandlerBase({ config }) {
      if (!config.emulator) {
        return `https://${config.authDomain}/${WIDGET_PATH}`;
      }
      return _emulatorUrl(config, EMULATOR_WIDGET_PATH);
    }
    var WEB_STORAGE_SUPPORT_KEY = "webStorageSupport";
    var BrowserPopupRedirectResolver = class {
      constructor() {
        this.eventManagers = {};
        this.iframes = {};
        this.originValidationPromises = {};
        this._redirectPersistence = browserSessionPersistence;
        this._completeRedirectFn = _getRedirectResult;
        this._overrideRedirectResult = _overrideRedirectResult;
      }
      // Wrapping in async even though we don't await anywhere in order
      // to make sure errors are raised as promise rejections
      async _openPopup(auth, provider, authType, eventId) {
        var _a;
        debugAssert((_a = this.eventManagers[auth._key()]) === null || _a === void 0 ? void 0 : _a.manager, "_initialize() not called before _openPopup()");
        const url = await _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);
        return _open(auth, url, _generateEventId());
      }
      async _openRedirect(auth, provider, authType, eventId) {
        await this._originValidation(auth);
        const url = await _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);
        _setWindowLocation(url);
        return new Promise(() => {
        });
      }
      _initialize(auth) {
        const key = auth._key();
        if (this.eventManagers[key]) {
          const { manager, promise: promise2 } = this.eventManagers[key];
          if (manager) {
            return Promise.resolve(manager);
          } else {
            debugAssert(promise2, "If manager is not set, promise should be");
            return promise2;
          }
        }
        const promise = this.initAndGetManager(auth);
        this.eventManagers[key] = { promise };
        promise.catch(() => {
          delete this.eventManagers[key];
        });
        return promise;
      }
      async initAndGetManager(auth) {
        const iframe = await _openIframe(auth);
        const manager = new AuthEventManager(auth);
        iframe.register("authEvent", (iframeEvent) => {
          _assert(
            iframeEvent === null || iframeEvent === void 0 ? void 0 : iframeEvent.authEvent,
            auth,
            "invalid-auth-event"
            /* AuthErrorCode.INVALID_AUTH_EVENT */
          );
          const handled = manager.onEvent(iframeEvent.authEvent);
          return {
            status: handled ? "ACK" : "ERROR"
            /* GapiOutcome.ERROR */
          };
        }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
        this.eventManagers[auth._key()] = { manager };
        this.iframes[auth._key()] = iframe;
        return manager;
      }
      _isIframeWebStorageSupported(auth, cb) {
        const iframe = this.iframes[auth._key()];
        iframe.send(WEB_STORAGE_SUPPORT_KEY, { type: WEB_STORAGE_SUPPORT_KEY }, (result) => {
          var _a;
          const isSupported = (_a = result === null || result === void 0 ? void 0 : result[0]) === null || _a === void 0 ? void 0 : _a[WEB_STORAGE_SUPPORT_KEY];
          if (isSupported !== void 0) {
            cb(!!isSupported);
          }
          _fail(
            auth,
            "internal-error"
            /* AuthErrorCode.INTERNAL_ERROR */
          );
        }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
      }
      _originValidation(auth) {
        const key = auth._key();
        if (!this.originValidationPromises[key]) {
          this.originValidationPromises[key] = _validateOrigin(auth);
        }
        return this.originValidationPromises[key];
      }
      get _shouldInitProactively() {
        return _isMobileBrowser() || _isSafari() || _isIOS();
      }
    };
    var browserPopupRedirectResolver = BrowserPopupRedirectResolver;
    var MultiFactorAssertionImpl = class {
      constructor(factorId) {
        this.factorId = factorId;
      }
      _process(auth, session, displayName) {
        switch (session.type) {
          case "enroll":
            return this._finalizeEnroll(auth, session.credential, displayName);
          case "signin":
            return this._finalizeSignIn(auth, session.credential);
          default:
            return debugFail("unexpected MultiFactorSessionType");
        }
      }
    };
    var PhoneMultiFactorAssertionImpl = class _PhoneMultiFactorAssertionImpl extends MultiFactorAssertionImpl {
      constructor(credential) {
        super(
          "phone"
          /* FactorId.PHONE */
        );
        this.credential = credential;
      }
      /** @internal */
      static _fromCredential(credential) {
        return new _PhoneMultiFactorAssertionImpl(credential);
      }
      /** @internal */
      _finalizeEnroll(auth, idToken, displayName) {
        return finalizeEnrollPhoneMfa(auth, {
          idToken,
          displayName,
          phoneVerificationInfo: this.credential._makeVerificationRequest()
        });
      }
      /** @internal */
      _finalizeSignIn(auth, mfaPendingCredential) {
        return finalizeSignInPhoneMfa(auth, {
          mfaPendingCredential,
          phoneVerificationInfo: this.credential._makeVerificationRequest()
        });
      }
    };
    var PhoneMultiFactorGenerator = class {
      constructor() {
      }
      /**
       * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.
       *
       * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.
       * @returns A {@link PhoneMultiFactorAssertion} which can be used with
       * {@link MultiFactorResolver.resolveSignIn}
       */
      static assertion(credential) {
        return PhoneMultiFactorAssertionImpl._fromCredential(credential);
      }
    };
    PhoneMultiFactorGenerator.FACTOR_ID = "phone";
    var TotpMultiFactorGenerator = class {
      /**
       * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of
       * the TOTP (time-based one-time password) second factor.
       * This assertion is used to complete enrollment in TOTP second factor.
       *
       * @param secret A {@link TotpSecret} containing the shared secret key and other TOTP parameters.
       * @param oneTimePassword One-time password from TOTP App.
       * @returns A {@link TotpMultiFactorAssertion} which can be used with
       * {@link MultiFactorUser.enroll}.
       */
      static assertionForEnrollment(secret, oneTimePassword) {
        return TotpMultiFactorAssertionImpl._fromSecret(secret, oneTimePassword);
      }
      /**
       * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of the TOTP second factor.
       * This assertion is used to complete signIn with TOTP as the second factor.
       *
       * @param enrollmentId identifies the enrolled TOTP second factor.
       * @param oneTimePassword One-time password from TOTP App.
       * @returns A {@link TotpMultiFactorAssertion} which can be used with
       * {@link MultiFactorResolver.resolveSignIn}.
       */
      static assertionForSignIn(enrollmentId, oneTimePassword) {
        return TotpMultiFactorAssertionImpl._fromEnrollmentId(enrollmentId, oneTimePassword);
      }
      /**
       * Returns a promise to {@link TotpSecret} which contains the TOTP shared secret key and other parameters.
       * Creates a TOTP secret as part of enrolling a TOTP second factor.
       * Used for generating a QR code URL or inputting into a TOTP app.
       * This method uses the auth instance corresponding to the user in the multiFactorSession.
       *
       * @param session The {@link MultiFactorSession} that the user is part of.
       * @returns A promise to {@link TotpSecret}.
       */
      static async generateSecret(session) {
        const mfaSession = session;
        _assert(
          typeof mfaSession.auth !== "undefined",
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        const response = await startEnrollTotpMfa(mfaSession.auth, {
          idToken: mfaSession.credential,
          totpEnrollmentInfo: {}
        });
        return TotpSecret._fromStartTotpMfaEnrollmentResponse(response, mfaSession.auth);
      }
    };
    TotpMultiFactorGenerator.FACTOR_ID = "totp";
    var TotpMultiFactorAssertionImpl = class _TotpMultiFactorAssertionImpl extends MultiFactorAssertionImpl {
      constructor(otp, enrollmentId, secret) {
        super(
          "totp"
          /* FactorId.TOTP */
        );
        this.otp = otp;
        this.enrollmentId = enrollmentId;
        this.secret = secret;
      }
      /** @internal */
      static _fromSecret(secret, otp) {
        return new _TotpMultiFactorAssertionImpl(otp, void 0, secret);
      }
      /** @internal */
      static _fromEnrollmentId(enrollmentId, otp) {
        return new _TotpMultiFactorAssertionImpl(otp, enrollmentId);
      }
      /** @internal */
      async _finalizeEnroll(auth, idToken, displayName) {
        _assert(
          typeof this.secret !== "undefined",
          auth,
          "argument-error"
          /* AuthErrorCode.ARGUMENT_ERROR */
        );
        return finalizeEnrollTotpMfa(auth, {
          idToken,
          displayName,
          totpVerificationInfo: this.secret._makeTotpVerificationInfo(this.otp)
        });
      }
      /** @internal */
      async _finalizeSignIn(auth, mfaPendingCredential) {
        _assert(
          this.enrollmentId !== void 0 && this.otp !== void 0,
          auth,
          "argument-error"
          /* AuthErrorCode.ARGUMENT_ERROR */
        );
        const totpVerificationInfo = { verificationCode: this.otp };
        return finalizeSignInTotpMfa(auth, {
          mfaPendingCredential,
          mfaEnrollmentId: this.enrollmentId,
          totpVerificationInfo
        });
      }
    };
    var TotpSecret = class _TotpSecret {
      // The public members are declared outside the constructor so the docs can be generated.
      constructor(secretKey, hashingAlgorithm, codeLength, codeIntervalSeconds, enrollmentCompletionDeadline, sessionInfo, auth) {
        this.sessionInfo = sessionInfo;
        this.auth = auth;
        this.secretKey = secretKey;
        this.hashingAlgorithm = hashingAlgorithm;
        this.codeLength = codeLength;
        this.codeIntervalSeconds = codeIntervalSeconds;
        this.enrollmentCompletionDeadline = enrollmentCompletionDeadline;
      }
      /** @internal */
      static _fromStartTotpMfaEnrollmentResponse(response, auth) {
        return new _TotpSecret(response.totpSessionInfo.sharedSecretKey, response.totpSessionInfo.hashingAlgorithm, response.totpSessionInfo.verificationCodeLength, response.totpSessionInfo.periodSec, new Date(response.totpSessionInfo.finalizeEnrollmentTime).toUTCString(), response.totpSessionInfo.sessionInfo, auth);
      }
      /** @internal */
      _makeTotpVerificationInfo(otp) {
        return { sessionInfo: this.sessionInfo, verificationCode: otp };
      }
      /**
       * Returns a QR code URL as described in
       * https://github.com/google/google-authenticator/wiki/Key-Uri-Format
       * This can be displayed to the user as a QR code to be scanned into a TOTP app like Google Authenticator.
       * If the optional parameters are unspecified, an accountName of <userEmail> and issuer of <firebaseAppName> are used.
       *
       * @param accountName the name of the account/app along with a user identifier.
       * @param issuer issuer of the TOTP (likely the app name).
       * @returns A QR code URL string.
       */
      generateQrCodeUrl(accountName, issuer) {
        var _a;
        let useDefaults = false;
        if (_isEmptyString(accountName) || _isEmptyString(issuer)) {
          useDefaults = true;
        }
        if (useDefaults) {
          if (_isEmptyString(accountName)) {
            accountName = ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.email) || "unknownuser";
          }
          if (_isEmptyString(issuer)) {
            issuer = this.auth.name;
          }
        }
        return `otpauth://totp/${issuer}:${accountName}?secret=${this.secretKey}&issuer=${issuer}&algorithm=${this.hashingAlgorithm}&digits=${this.codeLength}`;
      }
    };
    function _isEmptyString(input) {
      return typeof input === "undefined" || (input === null || input === void 0 ? void 0 : input.length) === 0;
    }
    var name = "@firebase/auth";
    var version = "0.23.2";
    var AuthInterop = class {
      constructor(auth) {
        this.auth = auth;
        this.internalListeners = /* @__PURE__ */ new Map();
      }
      getUid() {
        var _a;
        this.assertAuthConfigured();
        return ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid) || null;
      }
      async getToken(forceRefresh) {
        this.assertAuthConfigured();
        await this.auth._initializationPromise;
        if (!this.auth.currentUser) {
          return null;
        }
        const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);
        return { accessToken };
      }
      addAuthTokenListener(listener) {
        this.assertAuthConfigured();
        if (this.internalListeners.has(listener)) {
          return;
        }
        const unsubscribe = this.auth.onIdTokenChanged((user) => {
          listener((user === null || user === void 0 ? void 0 : user.stsTokenManager.accessToken) || null);
        });
        this.internalListeners.set(listener, unsubscribe);
        this.updateProactiveRefresh();
      }
      removeAuthTokenListener(listener) {
        this.assertAuthConfigured();
        const unsubscribe = this.internalListeners.get(listener);
        if (!unsubscribe) {
          return;
        }
        this.internalListeners.delete(listener);
        unsubscribe();
        this.updateProactiveRefresh();
      }
      assertAuthConfigured() {
        _assert(
          this.auth._initializationPromise,
          "dependent-sdk-initialized-before-auth"
          /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */
        );
      }
      updateProactiveRefresh() {
        if (this.internalListeners.size > 0) {
          this.auth._startProactiveRefresh();
        } else {
          this.auth._stopProactiveRefresh();
        }
      }
    };
    function getVersionForPlatform(clientPlatform) {
      switch (clientPlatform) {
        case "Node":
          return "node";
        case "ReactNative":
          return "rn";
        case "Worker":
          return "webworker";
        case "Cordova":
          return "cordova";
        default:
          return void 0;
      }
    }
    function registerAuth(clientPlatform) {
      app._registerComponent(new component.Component(
        "auth",
        (container, { options: deps }) => {
          const app2 = container.getProvider("app").getImmediate();
          const heartbeatServiceProvider = container.getProvider("heartbeat");
          const appCheckServiceProvider = container.getProvider("app-check-internal");
          const { apiKey, authDomain } = app2.options;
          _assert(apiKey && !apiKey.includes(":"), "invalid-api-key", { appName: app2.name });
          const config = {
            apiKey,
            authDomain,
            clientPlatform,
            apiHost: "identitytoolkit.googleapis.com",
            tokenApiHost: "securetoken.googleapis.com",
            apiScheme: "https",
            sdkClientVersion: _getClientVersion(clientPlatform)
          };
          const authInstance = new AuthImpl(app2, heartbeatServiceProvider, appCheckServiceProvider, config);
          _initializeAuthInstance(authInstance, deps);
          return authInstance;
        },
        "PUBLIC"
        /* ComponentType.PUBLIC */
      ).setInstantiationMode(
        "EXPLICIT"
        /* InstantiationMode.EXPLICIT */
      ).setInstanceCreatedCallback((container, _instanceIdentifier, _instance) => {
        const authInternalProvider = container.getProvider(
          "auth-internal"
          /* _ComponentName.AUTH_INTERNAL */
        );
        authInternalProvider.initialize();
      }));
      app._registerComponent(new component.Component(
        "auth-internal",
        (container) => {
          const auth = _castAuth(container.getProvider(
            "auth"
            /* _ComponentName.AUTH */
          ).getImmediate());
          return ((auth2) => new AuthInterop(auth2))(auth);
        },
        "PRIVATE"
        /* ComponentType.PRIVATE */
      ).setInstantiationMode(
        "EXPLICIT"
        /* InstantiationMode.EXPLICIT */
      ));
      app.registerVersion(name, version, getVersionForPlatform(clientPlatform));
      app.registerVersion(name, version, "cjs2017");
    }
    var DEFAULT_ID_TOKEN_MAX_AGE = 5 * 60;
    var authIdTokenMaxAge = util.getExperimentalSetting("authIdTokenMaxAge") || DEFAULT_ID_TOKEN_MAX_AGE;
    var lastPostedIdToken = null;
    var mintCookieFactory = (url) => async (user) => {
      const idTokenResult = user && await user.getIdTokenResult();
      const idTokenAge = idTokenResult && ((/* @__PURE__ */ new Date()).getTime() - Date.parse(idTokenResult.issuedAtTime)) / 1e3;
      if (idTokenAge && idTokenAge > authIdTokenMaxAge) {
        return;
      }
      const idToken = idTokenResult === null || idTokenResult === void 0 ? void 0 : idTokenResult.token;
      if (lastPostedIdToken === idToken) {
        return;
      }
      lastPostedIdToken = idToken;
      await fetch(url, {
        method: idToken ? "POST" : "DELETE",
        headers: idToken ? {
          "Authorization": `Bearer ${idToken}`
        } : {}
      });
    };
    function getAuth(app$1 = app.getApp()) {
      const provider = app._getProvider(app$1, "auth");
      if (provider.isInitialized()) {
        return provider.getImmediate();
      }
      const auth = initializeAuth(app$1, {
        popupRedirectResolver: browserPopupRedirectResolver,
        persistence: [
          indexedDBLocalPersistence,
          browserLocalPersistence,
          browserSessionPersistence
        ]
      });
      const authTokenSyncUrl = util.getExperimentalSetting("authTokenSyncURL");
      if (authTokenSyncUrl) {
        const mintCookie = mintCookieFactory(authTokenSyncUrl);
        beforeAuthStateChanged(auth, mintCookie, () => mintCookie(auth.currentUser));
        onIdTokenChanged(auth, (user) => mintCookie(user));
      }
      const authEmulatorHost = util.getDefaultEmulatorHost("auth");
      if (authEmulatorHost) {
        connectAuthEmulator(auth, `http://${authEmulatorHost}`);
      }
      return auth;
    }
    registerAuth(
      "Browser"
      /* ClientPlatform.BROWSER */
    );
    exports.AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY;
    exports.ActionCodeOperation = ActionCodeOperation;
    exports.ActionCodeURL = ActionCodeURL;
    exports.AuthCredential = AuthCredential;
    exports.AuthEventManager = AuthEventManager;
    exports.AuthImpl = AuthImpl;
    exports.AuthPopup = AuthPopup;
    exports.EmailAuthCredential = EmailAuthCredential;
    exports.EmailAuthProvider = EmailAuthProvider;
    exports.FacebookAuthProvider = FacebookAuthProvider;
    exports.FactorId = FactorId;
    exports.FetchProvider = FetchProvider;
    exports.GithubAuthProvider = GithubAuthProvider;
    exports.GoogleAuthProvider = GoogleAuthProvider;
    exports.OAuthCredential = OAuthCredential;
    exports.OAuthProvider = OAuthProvider;
    exports.OperationType = OperationType;
    exports.PhoneAuthCredential = PhoneAuthCredential;
    exports.PhoneAuthProvider = PhoneAuthProvider;
    exports.PhoneMultiFactorGenerator = PhoneMultiFactorGenerator;
    exports.ProviderId = ProviderId;
    exports.RecaptchaVerifier = RecaptchaVerifier;
    exports.SAMLAuthCredential = SAMLAuthCredential;
    exports.SAMLAuthProvider = SAMLAuthProvider;
    exports.SignInMethod = SignInMethod;
    exports.TotpMultiFactorGenerator = TotpMultiFactorGenerator;
    exports.TotpSecret = TotpSecret;
    exports.TwitterAuthProvider = TwitterAuthProvider;
    exports.UserImpl = UserImpl;
    exports._assert = _assert;
    exports._castAuth = _castAuth;
    exports._clearRedirectOutcomes = _clearRedirectOutcomes;
    exports._createError = _createError;
    exports._fail = _fail;
    exports._generateEventId = _generateEventId;
    exports._getClientVersion = _getClientVersion;
    exports._getInstance = _getInstance;
    exports._getProjectConfig = _getProjectConfig;
    exports._getRedirectResult = _getRedirectResult;
    exports._getRedirectUrl = _getRedirectUrl;
    exports._isAndroid = _isAndroid;
    exports._isIOS = _isIOS;
    exports._isIOS7Or8 = _isIOS7Or8;
    exports._overrideRedirectResult = _overrideRedirectResult;
    exports._persistenceKeyName = _persistenceKeyName;
    exports.applyActionCode = applyActionCode;
    exports.beforeAuthStateChanged = beforeAuthStateChanged;
    exports.browserLocalPersistence = browserLocalPersistence;
    exports.browserPopupRedirectResolver = browserPopupRedirectResolver;
    exports.browserSessionPersistence = browserSessionPersistence;
    exports.checkActionCode = checkActionCode;
    exports.confirmPasswordReset = confirmPasswordReset;
    exports.connectAuthEmulator = connectAuthEmulator;
    exports.createUserWithEmailAndPassword = createUserWithEmailAndPassword;
    exports.debugAssert = debugAssert;
    exports.debugErrorMap = debugErrorMap;
    exports.deleteUser = deleteUser;
    exports.fetchSignInMethodsForEmail = fetchSignInMethodsForEmail;
    exports.getAdditionalUserInfo = getAdditionalUserInfo;
    exports.getAuth = getAuth;
    exports.getIdToken = getIdToken;
    exports.getIdTokenResult = getIdTokenResult;
    exports.getMultiFactorResolver = getMultiFactorResolver;
    exports.getRedirectResult = getRedirectResult;
    exports.inMemoryPersistence = inMemoryPersistence;
    exports.indexedDBLocalPersistence = indexedDBLocalPersistence;
    exports.initializeAuth = initializeAuth;
    exports.initializeRecaptchaConfig = initializeRecaptchaConfig;
    exports.isSignInWithEmailLink = isSignInWithEmailLink;
    exports.linkWithCredential = linkWithCredential;
    exports.linkWithPhoneNumber = linkWithPhoneNumber;
    exports.linkWithPopup = linkWithPopup;
    exports.linkWithRedirect = linkWithRedirect;
    exports.multiFactor = multiFactor;
    exports.onAuthStateChanged = onAuthStateChanged;
    exports.onIdTokenChanged = onIdTokenChanged;
    exports.parseActionCodeURL = parseActionCodeURL;
    exports.prodErrorMap = prodErrorMap;
    exports.reauthenticateWithCredential = reauthenticateWithCredential;
    exports.reauthenticateWithPhoneNumber = reauthenticateWithPhoneNumber;
    exports.reauthenticateWithPopup = reauthenticateWithPopup;
    exports.reauthenticateWithRedirect = reauthenticateWithRedirect;
    exports.reload = reload;
    exports.sendEmailVerification = sendEmailVerification;
    exports.sendPasswordResetEmail = sendPasswordResetEmail;
    exports.sendSignInLinkToEmail = sendSignInLinkToEmail;
    exports.setPersistence = setPersistence;
    exports.signInAnonymously = signInAnonymously;
    exports.signInWithCredential = signInWithCredential;
    exports.signInWithCustomToken = signInWithCustomToken;
    exports.signInWithEmailAndPassword = signInWithEmailAndPassword;
    exports.signInWithEmailLink = signInWithEmailLink;
    exports.signInWithPhoneNumber = signInWithPhoneNumber;
    exports.signInWithPopup = signInWithPopup;
    exports.signInWithRedirect = signInWithRedirect;
    exports.signOut = signOut;
    exports.unlink = unlink;
    exports.updateCurrentUser = updateCurrentUser;
    exports.updateEmail = updateEmail;
    exports.updatePassword = updatePassword;
    exports.updatePhoneNumber = updatePhoneNumber;
    exports.updateProfile = updateProfile;
    exports.useDeviceLanguage = useDeviceLanguage;
    exports.verifyBeforeUpdateEmail = verifyBeforeUpdateEmail;
    exports.verifyPasswordResetCode = verifyPasswordResetCode;
  }
});

// node_modules/@firebase/auth/dist/browser-cjs/index.js
var require_browser_cjs = __commonJS({
  "node_modules/@firebase/auth/dist/browser-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var index = require_index_5ca0aadd();
    require_index_cjs();
    require_index_cjs4();
    init_tslib_es6();
    require_index_cjs3();
    require_index_cjs2();
    exports.ActionCodeOperation = index.ActionCodeOperation;
    exports.ActionCodeURL = index.ActionCodeURL;
    exports.AuthCredential = index.AuthCredential;
    exports.AuthErrorCodes = index.AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY;
    exports.EmailAuthCredential = index.EmailAuthCredential;
    exports.EmailAuthProvider = index.EmailAuthProvider;
    exports.FacebookAuthProvider = index.FacebookAuthProvider;
    exports.FactorId = index.FactorId;
    exports.GithubAuthProvider = index.GithubAuthProvider;
    exports.GoogleAuthProvider = index.GoogleAuthProvider;
    exports.OAuthCredential = index.OAuthCredential;
    exports.OAuthProvider = index.OAuthProvider;
    exports.OperationType = index.OperationType;
    exports.PhoneAuthCredential = index.PhoneAuthCredential;
    exports.PhoneAuthProvider = index.PhoneAuthProvider;
    exports.PhoneMultiFactorGenerator = index.PhoneMultiFactorGenerator;
    exports.ProviderId = index.ProviderId;
    exports.RecaptchaVerifier = index.RecaptchaVerifier;
    exports.SAMLAuthProvider = index.SAMLAuthProvider;
    exports.SignInMethod = index.SignInMethod;
    exports.TotpMultiFactorGenerator = index.TotpMultiFactorGenerator;
    exports.TotpSecret = index.TotpSecret;
    exports.TwitterAuthProvider = index.TwitterAuthProvider;
    exports.applyActionCode = index.applyActionCode;
    exports.beforeAuthStateChanged = index.beforeAuthStateChanged;
    exports.browserLocalPersistence = index.browserLocalPersistence;
    exports.browserPopupRedirectResolver = index.browserPopupRedirectResolver;
    exports.browserSessionPersistence = index.browserSessionPersistence;
    exports.checkActionCode = index.checkActionCode;
    exports.confirmPasswordReset = index.confirmPasswordReset;
    exports.connectAuthEmulator = index.connectAuthEmulator;
    exports.createUserWithEmailAndPassword = index.createUserWithEmailAndPassword;
    exports.debugErrorMap = index.debugErrorMap;
    exports.deleteUser = index.deleteUser;
    exports.fetchSignInMethodsForEmail = index.fetchSignInMethodsForEmail;
    exports.getAdditionalUserInfo = index.getAdditionalUserInfo;
    exports.getAuth = index.getAuth;
    exports.getIdToken = index.getIdToken;
    exports.getIdTokenResult = index.getIdTokenResult;
    exports.getMultiFactorResolver = index.getMultiFactorResolver;
    exports.getRedirectResult = index.getRedirectResult;
    exports.inMemoryPersistence = index.inMemoryPersistence;
    exports.indexedDBLocalPersistence = index.indexedDBLocalPersistence;
    exports.initializeAuth = index.initializeAuth;
    exports.initializeRecaptchaConfig = index.initializeRecaptchaConfig;
    exports.isSignInWithEmailLink = index.isSignInWithEmailLink;
    exports.linkWithCredential = index.linkWithCredential;
    exports.linkWithPhoneNumber = index.linkWithPhoneNumber;
    exports.linkWithPopup = index.linkWithPopup;
    exports.linkWithRedirect = index.linkWithRedirect;
    exports.multiFactor = index.multiFactor;
    exports.onAuthStateChanged = index.onAuthStateChanged;
    exports.onIdTokenChanged = index.onIdTokenChanged;
    exports.parseActionCodeURL = index.parseActionCodeURL;
    exports.prodErrorMap = index.prodErrorMap;
    exports.reauthenticateWithCredential = index.reauthenticateWithCredential;
    exports.reauthenticateWithPhoneNumber = index.reauthenticateWithPhoneNumber;
    exports.reauthenticateWithPopup = index.reauthenticateWithPopup;
    exports.reauthenticateWithRedirect = index.reauthenticateWithRedirect;
    exports.reload = index.reload;
    exports.sendEmailVerification = index.sendEmailVerification;
    exports.sendPasswordResetEmail = index.sendPasswordResetEmail;
    exports.sendSignInLinkToEmail = index.sendSignInLinkToEmail;
    exports.setPersistence = index.setPersistence;
    exports.signInAnonymously = index.signInAnonymously;
    exports.signInWithCredential = index.signInWithCredential;
    exports.signInWithCustomToken = index.signInWithCustomToken;
    exports.signInWithEmailAndPassword = index.signInWithEmailAndPassword;
    exports.signInWithEmailLink = index.signInWithEmailLink;
    exports.signInWithPhoneNumber = index.signInWithPhoneNumber;
    exports.signInWithPopup = index.signInWithPopup;
    exports.signInWithRedirect = index.signInWithRedirect;
    exports.signOut = index.signOut;
    exports.unlink = index.unlink;
    exports.updateCurrentUser = index.updateCurrentUser;
    exports.updateEmail = index.updateEmail;
    exports.updatePassword = index.updatePassword;
    exports.updatePhoneNumber = index.updatePhoneNumber;
    exports.updateProfile = index.updateProfile;
    exports.useDeviceLanguage = index.useDeviceLanguage;
    exports.verifyBeforeUpdateEmail = index.verifyBeforeUpdateEmail;
    exports.verifyPasswordResetCode = index.verifyPasswordResetCode;
  }
});

// node_modules/firebase/auth/dist/index.cjs.js
var require_index_cjs8 = __commonJS({
  "node_modules/firebase/auth/dist/index.cjs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var auth = require_browser_cjs();
    Object.keys(auth).forEach(function(k) {
      if (k !== "default" && !exports.hasOwnProperty(k))
        Object.defineProperty(exports, k, {
          enumerable: true,
          get: function() {
            return auth[k];
          }
        });
    });
  }
});

// node_modules/@firebase/webchannel-wrapper/dist/index.js
var require_dist = __commonJS({
  "node_modules/@firebase/webchannel-wrapper/dist/index.js"(exports, module) {
    (function() {
      var n;
      function aa(a) {
        var b = 0;
        return function() {
          return b < a.length ? { done: false, value: a[b++] } : { done: true };
        };
      }
      function q(a) {
        var b = "undefined" != typeof Symbol && Symbol.iterator && a[Symbol.iterator];
        if (b)
          return b.call(a);
        if ("number" == typeof a.length)
          return { next: aa(a) };
        throw Error(String(a) + " is not an iterable or ArrayLike");
      }
      var ba = "function" == typeof Object.create ? Object.create : function(a) {
        function b() {
        }
        b.prototype = a;
        return new b();
      }, ca = "function" == typeof Object.defineProperties ? Object.defineProperty : function(a, b, c) {
        if (a == Array.prototype || a == Object.prototype)
          return a;
        a[b] = c.value;
        return a;
      };
      function da(a) {
        a = ["object" == typeof globalThis && globalThis, a, "object" == typeof window && window, "object" == typeof self && self, "object" == typeof global && global];
        for (var b = 0; b < a.length; ++b) {
          var c = a[b];
          if (c && c.Math == Math)
            return c;
        }
        throw Error("Cannot find global object");
      }
      var r = da(this);
      function u(a, b) {
        if (b)
          a: {
            var c = r;
            a = a.split(".");
            for (var d = 0; d < a.length - 1; d++) {
              var e = a[d];
              if (!(e in c))
                break a;
              c = c[e];
            }
            a = a[a.length - 1];
            d = c[a];
            b = b(d);
            b != d && null != b && ca(c, a, { configurable: true, writable: true, value: b });
          }
      }
      var ea;
      if ("function" == typeof Object.setPrototypeOf)
        ea = Object.setPrototypeOf;
      else {
        var fa;
        a: {
          var ha = { a: true }, ia = {};
          try {
            ia.__proto__ = ha;
            fa = ia.a;
            break a;
          } catch (a) {
          }
          fa = false;
        }
        ea = fa ? function(a, b) {
          a.__proto__ = b;
          if (a.__proto__ !== b)
            throw new TypeError(a + " is not extensible");
          return a;
        } : null;
      }
      var ja = ea;
      u("Symbol", function(a) {
        function b(h) {
          if (this instanceof b)
            throw new TypeError("Symbol is not a constructor");
          return new c(d + (h || "") + "_" + e++, h);
        }
        function c(h, f) {
          this.g = h;
          ca(this, "description", { configurable: true, writable: true, value: f });
        }
        if (a)
          return a;
        c.prototype.toString = function() {
          return this.g;
        };
        var d = "jscomp_symbol_" + (1e9 * Math.random() >>> 0) + "_", e = 0;
        return b;
      });
      u("Symbol.iterator", function(a) {
        if (a)
          return a;
        a = Symbol("Symbol.iterator");
        for (var b = "Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "), c = 0; c < b.length; c++) {
          var d = r[b[c]];
          "function" === typeof d && "function" != typeof d.prototype[a] && ca(d.prototype, a, { configurable: true, writable: true, value: function() {
            return ka(aa(this));
          } });
        }
        return a;
      });
      function ka(a) {
        a = { next: a };
        a[Symbol.iterator] = function() {
          return this;
        };
        return a;
      }
      u("Promise", function(a) {
        function b(f) {
          this.g = 0;
          this.i = void 0;
          this.h = [];
          this.o = false;
          var k = this.j();
          try {
            f(k.resolve, k.reject);
          } catch (l) {
            k.reject(l);
          }
        }
        function c() {
          this.g = null;
        }
        function d(f) {
          return f instanceof b ? f : new b(function(k) {
            k(f);
          });
        }
        if (a)
          return a;
        c.prototype.h = function(f) {
          if (null == this.g) {
            this.g = [];
            var k = this;
            this.i(function() {
              k.l();
            });
          }
          this.g.push(f);
        };
        var e = r.setTimeout;
        c.prototype.i = function(f) {
          e(f, 0);
        };
        c.prototype.l = function() {
          for (; this.g && this.g.length; ) {
            var f = this.g;
            this.g = [];
            for (var k = 0; k < f.length; ++k) {
              var l = f[k];
              f[k] = null;
              try {
                l();
              } catch (m) {
                this.j(m);
              }
            }
          }
          this.g = null;
        };
        c.prototype.j = function(f) {
          this.i(function() {
            throw f;
          });
        };
        b.prototype.j = function() {
          function f(m) {
            return function(p) {
              l || (l = true, m.call(k, p));
            };
          }
          var k = this, l = false;
          return { resolve: f(this.B), reject: f(this.l) };
        };
        b.prototype.B = function(f) {
          if (f === this)
            this.l(new TypeError("A Promise cannot resolve to itself"));
          else if (f instanceof b)
            this.D(f);
          else {
            a:
              switch (typeof f) {
                case "object":
                  var k = null != f;
                  break a;
                case "function":
                  k = true;
                  break a;
                default:
                  k = false;
              }
            k ? this.A(f) : this.m(f);
          }
        };
        b.prototype.A = function(f) {
          var k = void 0;
          try {
            k = f.then;
          } catch (l) {
            this.l(l);
            return;
          }
          "function" == typeof k ? this.G(k, f) : this.m(f);
        };
        b.prototype.l = function(f) {
          this.s(2, f);
        };
        b.prototype.m = function(f) {
          this.s(1, f);
        };
        b.prototype.s = function(f, k) {
          if (0 != this.g)
            throw Error("Cannot settle(" + f + ", " + k + "): Promise already settled in state" + this.g);
          this.g = f;
          this.i = k;
          2 === this.g && this.C();
          this.u();
        };
        b.prototype.C = function() {
          var f = this;
          e(function() {
            if (f.v()) {
              var k = r.console;
              "undefined" !== typeof k && k.error(f.i);
            }
          }, 1);
        };
        b.prototype.v = function() {
          if (this.o)
            return false;
          var f = r.CustomEvent, k = r.Event, l = r.dispatchEvent;
          if ("undefined" === typeof l)
            return true;
          "function" === typeof f ? f = new f("unhandledrejection", { cancelable: true }) : "function" === typeof k ? f = new k("unhandledrejection", { cancelable: true }) : (f = r.document.createEvent("CustomEvent"), f.initCustomEvent("unhandledrejection", false, true, f));
          f.promise = this;
          f.reason = this.i;
          return l(f);
        };
        b.prototype.u = function() {
          if (null != this.h) {
            for (var f = 0; f < this.h.length; ++f)
              h.h(this.h[f]);
            this.h = null;
          }
        };
        var h = new c();
        b.prototype.D = function(f) {
          var k = this.j();
          f.la(k.resolve, k.reject);
        };
        b.prototype.G = function(f, k) {
          var l = this.j();
          try {
            f.call(k, l.resolve, l.reject);
          } catch (m) {
            l.reject(m);
          }
        };
        b.prototype.then = function(f, k) {
          function l(E, H) {
            return "function" == typeof E ? function(S) {
              try {
                m(E(S));
              } catch (Z) {
                p(Z);
              }
            } : H;
          }
          var m, p, t = new b(function(E, H) {
            m = E;
            p = H;
          });
          this.la(l(f, m), l(k, p));
          return t;
        };
        b.prototype.catch = function(f) {
          return this.then(void 0, f);
        };
        b.prototype.la = function(f, k) {
          function l() {
            switch (m.g) {
              case 1:
                f(m.i);
                break;
              case 2:
                k(m.i);
                break;
              default:
                throw Error("Unexpected state: " + m.g);
            }
          }
          var m = this;
          null == this.h ? h.h(l) : this.h.push(l);
          this.o = true;
        };
        b.resolve = d;
        b.reject = function(f) {
          return new b(function(k, l) {
            l(f);
          });
        };
        b.race = function(f) {
          return new b(function(k, l) {
            for (var m = q(f), p = m.next(); !p.done; p = m.next())
              d(p.value).la(k, l);
          });
        };
        b.all = function(f) {
          var k = q(f), l = k.next();
          return l.done ? d([]) : new b(function(m, p) {
            function t(S) {
              return function(Z) {
                E[S] = Z;
                H--;
                0 == H && m(E);
              };
            }
            var E = [], H = 0;
            do
              E.push(void 0), H++, d(l.value).la(t(E.length - 1), p), l = k.next();
            while (!l.done);
          });
        };
        return b;
      });
      function la(a, b) {
        a instanceof String && (a += "");
        var c = 0, d = false, e = { next: function() {
          if (!d && c < a.length) {
            var h = c++;
            return { value: b(h, a[h]), done: false };
          }
          d = true;
          return { done: true, value: void 0 };
        } };
        e[Symbol.iterator] = function() {
          return e;
        };
        return e;
      }
      u("Array.prototype.values", function(a) {
        return a ? a : function() {
          return la(this, function(b, c) {
            return c;
          });
        };
      });
      u("Array.prototype.keys", function(a) {
        return a ? a : function() {
          return la(this, function(b) {
            return b;
          });
        };
      });
      function v(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
      }
      u("WeakMap", function(a) {
        function b(l) {
          this.g = (k += Math.random() + 1).toString();
          if (l) {
            l = q(l);
            for (var m; !(m = l.next()).done; )
              m = m.value, this.set(m[0], m[1]);
          }
        }
        function c() {
        }
        function d(l) {
          var m = typeof l;
          return "object" === m && null !== l || "function" === m;
        }
        function e(l) {
          if (!v(l, f)) {
            var m = new c();
            ca(l, f, { value: m });
          }
        }
        function h(l) {
          var m = Object[l];
          m && (Object[l] = function(p) {
            if (p instanceof c)
              return p;
            Object.isExtensible(p) && e(p);
            return m(p);
          });
        }
        if (function() {
          if (!a || !Object.seal)
            return false;
          try {
            var l = Object.seal({}), m = Object.seal({}), p = new a([[l, 2], [m, 3]]);
            if (2 != p.get(l) || 3 != p.get(m))
              return false;
            p.delete(l);
            p.set(m, 4);
            return !p.has(l) && 4 == p.get(m);
          } catch (t) {
            return false;
          }
        }())
          return a;
        var f = "$jscomp_hidden_" + Math.random();
        h("freeze");
        h("preventExtensions");
        h("seal");
        var k = 0;
        b.prototype.set = function(l, m) {
          if (!d(l))
            throw Error("Invalid WeakMap key");
          e(l);
          if (!v(l, f))
            throw Error("WeakMap key fail: " + l);
          l[f][this.g] = m;
          return this;
        };
        b.prototype.get = function(l) {
          return d(l) && v(l, f) ? l[f][this.g] : void 0;
        };
        b.prototype.has = function(l) {
          return d(l) && v(
            l,
            f
          ) && v(l[f], this.g);
        };
        b.prototype.delete = function(l) {
          return d(l) && v(l, f) && v(l[f], this.g) ? delete l[f][this.g] : false;
        };
        return b;
      });
      u("Map", function(a) {
        function b() {
          var k = {};
          return k.V = k.next = k.head = k;
        }
        function c(k, l) {
          var m = k.g;
          return ka(function() {
            if (m) {
              for (; m.head != k.g; )
                m = m.V;
              for (; m.next != m.head; )
                return m = m.next, { done: false, value: l(m) };
              m = null;
            }
            return { done: true, value: void 0 };
          });
        }
        function d(k, l) {
          var m = l && typeof l;
          "object" == m || "function" == m ? h.has(l) ? m = h.get(l) : (m = "" + ++f, h.set(l, m)) : m = "p_" + l;
          var p = k.h[m];
          if (p && v(k.h, m))
            for (k = 0; k < p.length; k++) {
              var t = p[k];
              if (l !== l && t.key !== t.key || l === t.key)
                return { id: m, list: p, index: k, K: t };
            }
          return {
            id: m,
            list: p,
            index: -1,
            K: void 0
          };
        }
        function e(k) {
          this.h = {};
          this.g = b();
          this.size = 0;
          if (k) {
            k = q(k);
            for (var l; !(l = k.next()).done; )
              l = l.value, this.set(l[0], l[1]);
          }
        }
        if (function() {
          if (!a || "function" != typeof a || !a.prototype.entries || "function" != typeof Object.seal)
            return false;
          try {
            var k = Object.seal({ x: 4 }), l = new a(q([[k, "s"]]));
            if ("s" != l.get(k) || 1 != l.size || l.get({ x: 4 }) || l.set({ x: 4 }, "t") != l || 2 != l.size)
              return false;
            var m = l.entries(), p = m.next();
            if (p.done || p.value[0] != k || "s" != p.value[1])
              return false;
            p = m.next();
            return p.done || 4 != p.value[0].x || "t" != p.value[1] || !m.next().done ? false : true;
          } catch (t) {
            return false;
          }
        }())
          return a;
        var h = /* @__PURE__ */ new WeakMap();
        e.prototype.set = function(k, l) {
          k = 0 === k ? 0 : k;
          var m = d(this, k);
          m.list || (m.list = this.h[m.id] = []);
          m.K ? m.K.value = l : (m.K = { next: this.g, V: this.g.V, head: this.g, key: k, value: l }, m.list.push(m.K), this.g.V.next = m.K, this.g.V = m.K, this.size++);
          return this;
        };
        e.prototype.delete = function(k) {
          k = d(this, k);
          return k.K && k.list ? (k.list.splice(k.index, 1), k.list.length || delete this.h[k.id], k.K.V.next = k.K.next, k.K.next.V = k.K.V, k.K.head = null, this.size--, true) : false;
        };
        e.prototype.clear = function() {
          this.h = {};
          this.g = this.g.V = b();
          this.size = 0;
        };
        e.prototype.has = function(k) {
          return !!d(this, k).K;
        };
        e.prototype.get = function(k) {
          return (k = d(this, k).K) && k.value;
        };
        e.prototype.entries = function() {
          return c(this, function(k) {
            return [k.key, k.value];
          });
        };
        e.prototype.keys = function() {
          return c(this, function(k) {
            return k.key;
          });
        };
        e.prototype.values = function() {
          return c(this, function(k) {
            return k.value;
          });
        };
        e.prototype.forEach = function(k, l) {
          for (var m = this.entries(), p; !(p = m.next()).done; )
            p = p.value, k.call(l, p[1], p[0], this);
        };
        e.prototype[Symbol.iterator] = e.prototype.entries;
        var f = 0;
        return e;
      });
      u("Array.prototype.find", function(a) {
        return a ? a : function(b, c) {
          a: {
            var d = this;
            d instanceof String && (d = String(d));
            for (var e = d.length, h = 0; h < e; h++) {
              var f = d[h];
              if (b.call(c, f, h, d)) {
                b = f;
                break a;
              }
            }
            b = void 0;
          }
          return b;
        };
      });
      u("Array.prototype.entries", function(a) {
        return a ? a : function() {
          return la(this, function(b, c) {
            return [b, c];
          });
        };
      });
      u("Array.from", function(a) {
        return a ? a : function(b, c, d) {
          c = null != c ? c : function(k) {
            return k;
          };
          var e = [], h = "undefined" != typeof Symbol && Symbol.iterator && b[Symbol.iterator];
          if ("function" == typeof h) {
            b = h.call(b);
            for (var f = 0; !(h = b.next()).done; )
              e.push(c.call(d, h.value, f++));
          } else
            for (h = b.length, f = 0; f < h; f++)
              e.push(c.call(d, b[f], f));
          return e;
        };
      });
      u("Set", function(a) {
        function b(c) {
          this.g = /* @__PURE__ */ new Map();
          if (c) {
            c = q(c);
            for (var d; !(d = c.next()).done; )
              this.add(d.value);
          }
          this.size = this.g.size;
        }
        if (function() {
          if (!a || "function" != typeof a || !a.prototype.entries || "function" != typeof Object.seal)
            return false;
          try {
            var c = Object.seal({ x: 4 }), d = new a(q([c]));
            if (!d.has(c) || 1 != d.size || d.add(c) != d || 1 != d.size || d.add({ x: 4 }) != d || 2 != d.size)
              return false;
            var e = d.entries(), h = e.next();
            if (h.done || h.value[0] != c || h.value[1] != c)
              return false;
            h = e.next();
            return h.done || h.value[0] == c || 4 != h.value[0].x || h.value[1] != h.value[0] ? false : e.next().done;
          } catch (f) {
            return false;
          }
        }())
          return a;
        b.prototype.add = function(c) {
          c = 0 === c ? 0 : c;
          this.g.set(c, c);
          this.size = this.g.size;
          return this;
        };
        b.prototype.delete = function(c) {
          c = this.g.delete(c);
          this.size = this.g.size;
          return c;
        };
        b.prototype.clear = function() {
          this.g.clear();
          this.size = 0;
        };
        b.prototype.has = function(c) {
          return this.g.has(c);
        };
        b.prototype.entries = function() {
          return this.g.entries();
        };
        b.prototype.values = function() {
          return this.g.values();
        };
        b.prototype.keys = b.prototype.values;
        b.prototype[Symbol.iterator] = b.prototype.values;
        b.prototype.forEach = function(c, d) {
          var e = this;
          this.g.forEach(function(h) {
            return c.call(d, h, h, e);
          });
        };
        return b;
      });
      var goog = goog || {}, w = this || self;
      function ma(a) {
        var b = typeof a;
        b = "object" != b ? b : a ? Array.isArray(a) ? "array" : b : "null";
        return "array" == b || "object" == b && "number" == typeof a.length;
      }
      function na(a) {
        var b = typeof a;
        return "object" == b && null != a || "function" == b;
      }
      function oa(a) {
        return Object.prototype.hasOwnProperty.call(a, pa) && a[pa] || (a[pa] = ++qa);
      }
      var pa = "closure_uid_" + (1e9 * Math.random() >>> 0), qa = 0;
      function ra(a, b, c) {
        return a.call.apply(a.bind, arguments);
      }
      function sa(a, b, c) {
        if (!a)
          throw Error();
        if (2 < arguments.length) {
          var d = Array.prototype.slice.call(arguments, 2);
          return function() {
            var e = Array.prototype.slice.call(arguments);
            Array.prototype.unshift.apply(e, d);
            return a.apply(b, e);
          };
        }
        return function() {
          return a.apply(b, arguments);
        };
      }
      function x(a, b, c) {
        Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? x = ra : x = sa;
        return x.apply(null, arguments);
      }
      function ta(a, b) {
        var c = Array.prototype.slice.call(arguments, 1);
        return function() {
          var d = c.slice();
          d.push.apply(d, arguments);
          return a.apply(this, d);
        };
      }
      function y(a, b) {
        function c() {
        }
        c.prototype = b.prototype;
        a.Z = b.prototype;
        a.prototype = new c();
        a.prototype.constructor = a;
        a.dc = function(d, e, h) {
          for (var f = Array(arguments.length - 2), k = 2; k < arguments.length; k++)
            f[k - 2] = arguments[k];
          return b.prototype[e].apply(d, f);
        };
      }
      ;
      function z() {
        0 != ua && (va[oa(this)] = this);
        this.s = this.s;
        this.o = this.o;
      }
      var ua = 0, va = {};
      z.prototype.s = false;
      z.prototype.va = function() {
        if (!this.s && (this.s = true, this.O(), 0 != ua)) {
          var a = oa(this);
          if (0 != ua && this.o && 0 < this.o.length)
            throw Error(this + " did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");
          delete va[a];
        }
      };
      z.prototype.O = function() {
        if (this.o)
          for (; this.o.length; )
            this.o.shift()();
      };
      var wa = Array.prototype.indexOf ? function(a, b) {
        return Array.prototype.indexOf.call(a, b, void 0);
      } : function(a, b) {
        if ("string" === typeof a)
          return "string" !== typeof b || 1 != b.length ? -1 : a.indexOf(b, 0);
        for (var c = 0; c < a.length; c++)
          if (c in a && a[c] === b)
            return c;
        return -1;
      };
      function xa(a) {
        var b = a.length;
        if (0 < b) {
          for (var c = Array(b), d = 0; d < b; d++)
            c[d] = a[d];
          return c;
        }
        return [];
      }
      function ya(a, b) {
        for (var c = 1; c < arguments.length; c++) {
          var d = arguments[c];
          if (ma(d)) {
            var e = a.length || 0, h = d.length || 0;
            a.length = e + h;
            for (var f = 0; f < h; f++)
              a[e + f] = d[f];
          } else
            a.push(d);
        }
      }
      ;
      function A(a, b) {
        this.type = a;
        this.g = this.target = b;
        this.defaultPrevented = false;
      }
      A.prototype.h = function() {
        this.defaultPrevented = true;
      };
      var za = function() {
        if (!w.addEventListener || !Object.defineProperty)
          return false;
        var a = false, b = Object.defineProperty({}, "passive", { get: function() {
          a = true;
        } });
        try {
          w.addEventListener("test", function() {
          }, b), w.removeEventListener("test", function() {
          }, b);
        } catch (c) {
        }
        return a;
      }();
      function Aa(a) {
        return /^[\s\xa0]*$/.test(a);
      }
      ;
      function Ba() {
        var a = w.navigator;
        return a && (a = a.userAgent) ? a : "";
      }
      function B(a) {
        return -1 != Ba().indexOf(a);
      }
      ;
      function Ca(a) {
        Ca[" "](a);
        return a;
      }
      Ca[" "] = function() {
      };
      function Da(a, b) {
        var c = Ea;
        return Object.prototype.hasOwnProperty.call(c, a) ? c[a] : c[a] = b(a);
      }
      ;
      var Fa = B("Opera"), Ga = B("Trident") || B("MSIE"), Ha = B("Edge"), Ia = Ha || Ga, Ja = B("Gecko") && !(-1 != Ba().toLowerCase().indexOf("webkit") && !B("Edge")) && !(B("Trident") || B("MSIE")) && !B("Edge"), Ka = -1 != Ba().toLowerCase().indexOf("webkit") && !B("Edge");
      function La() {
        var a = w.document;
        return a ? a.documentMode : void 0;
      }
      var Ma;
      a: {
        var Na = "", Oa = function() {
          var a = Ba();
          if (Ja)
            return /rv:([^\);]+)(\)|;)/.exec(a);
          if (Ha)
            return /Edge\/([\d\.]+)/.exec(a);
          if (Ga)
            return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);
          if (Ka)
            return /WebKit\/(\S+)/.exec(a);
          if (Fa)
            return /(?:Version)[ \/]?(\S+)/.exec(a);
        }();
        Oa && (Na = Oa ? Oa[1] : "");
        if (Ga) {
          var Pa = La();
          if (null != Pa && Pa > parseFloat(Na)) {
            Ma = String(Pa);
            break a;
          }
        }
        Ma = Na;
      }
      var Qa;
      if (w.document && Ga) {
        var Ra = La();
        Qa = Ra ? Ra : parseInt(Ma, 10) || void 0;
      } else
        Qa = void 0;
      var Sa = Qa;
      function Ta(a, b) {
        A.call(this, a ? a.type : "");
        this.relatedTarget = this.g = this.target = null;
        this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
        this.key = "";
        this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = false;
        this.state = null;
        this.pointerId = 0;
        this.pointerType = "";
        this.i = null;
        if (a) {
          var c = this.type = a.type, d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
          this.target = a.target || a.srcElement;
          this.g = b;
          if (b = a.relatedTarget) {
            if (Ja) {
              a: {
                try {
                  Ca(b.nodeName);
                  var e = true;
                  break a;
                } catch (h) {
                }
                e = false;
              }
              e || (b = null);
            }
          } else
            "mouseover" == c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);
          this.relatedTarget = b;
          d ? (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
          this.button = a.button;
          this.key = a.key || "";
          this.ctrlKey = a.ctrlKey;
          this.altKey = a.altKey;
          this.shiftKey = a.shiftKey;
          this.metaKey = a.metaKey;
          this.pointerId = a.pointerId || 0;
          this.pointerType = "string" === typeof a.pointerType ? a.pointerType : Ua[a.pointerType] || "";
          this.state = a.state;
          this.i = a;
          a.defaultPrevented && Ta.Z.h.call(this);
        }
      }
      y(Ta, A);
      var Ua = { 2: "touch", 3: "pen", 4: "mouse" };
      Ta.prototype.h = function() {
        Ta.Z.h.call(this);
        var a = this.i;
        a.preventDefault ? a.preventDefault() : a.returnValue = false;
      };
      var Va = "closure_listenable_" + (1e6 * Math.random() | 0);
      var Wa = 0;
      function Xa(a, b, c, d, e) {
        this.listener = a;
        this.proxy = null;
        this.src = b;
        this.type = c;
        this.capture = !!d;
        this.oa = e;
        this.key = ++Wa;
        this.ha = this.ka = false;
      }
      function Ya(a) {
        a.ha = true;
        a.listener = null;
        a.proxy = null;
        a.src = null;
        a.oa = null;
      }
      ;
      function Za(a, b, c) {
        for (var d in a)
          b.call(c, a[d], d, a);
      }
      function $a(a, b) {
        for (var c in a)
          b.call(void 0, a[c], c, a);
      }
      function ab(a) {
        var b = {}, c;
        for (c in a)
          b[c] = a[c];
        return b;
      }
      var bb = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
      function cb(a, b) {
        for (var c, d, e = 1; e < arguments.length; e++) {
          d = arguments[e];
          for (c in d)
            a[c] = d[c];
          for (var h = 0; h < bb.length; h++)
            c = bb[h], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
        }
      }
      ;
      function db(a) {
        this.src = a;
        this.g = {};
        this.h = 0;
      }
      db.prototype.add = function(a, b, c, d, e) {
        var h = a.toString();
        a = this.g[h];
        a || (a = this.g[h] = [], this.h++);
        var f = eb(a, b, d, e);
        -1 < f ? (b = a[f], c || (b.ka = false)) : (b = new Xa(b, this.src, h, !!d, e), b.ka = c, a.push(b));
        return b;
      };
      function fb(a, b) {
        var c = b.type;
        if (c in a.g) {
          var d = a.g[c], e = wa(d, b), h;
          (h = 0 <= e) && Array.prototype.splice.call(d, e, 1);
          h && (Ya(b), 0 == a.g[c].length && (delete a.g[c], a.h--));
        }
      }
      function eb(a, b, c, d) {
        for (var e = 0; e < a.length; ++e) {
          var h = a[e];
          if (!h.ha && h.listener == b && h.capture == !!c && h.oa == d)
            return e;
        }
        return -1;
      }
      ;
      var gb = "closure_lm_" + (1e6 * Math.random() | 0), hb = {}, ib = 0;
      function jb(a, b, c, d, e) {
        if (d && d.once)
          return kb(a, b, c, d, e);
        if (Array.isArray(b)) {
          for (var h = 0; h < b.length; h++)
            jb(a, b[h], c, d, e);
          return null;
        }
        c = lb(c);
        return a && a[Va] ? a.P(b, c, na(d) ? !!d.capture : !!d, e) : mb(a, b, c, false, d, e);
      }
      function mb(a, b, c, d, e, h) {
        if (!b)
          throw Error("Invalid event type");
        var f = na(e) ? !!e.capture : !!e, k = nb(a);
        k || (a[gb] = k = new db(a));
        c = k.add(b, c, d, f, h);
        if (c.proxy)
          return c;
        d = ob();
        c.proxy = d;
        d.src = a;
        d.listener = c;
        if (a.addEventListener)
          za || (e = f), void 0 === e && (e = false), a.addEventListener(b.toString(), d, e);
        else if (a.attachEvent)
          a.attachEvent(pb(b.toString()), d);
        else if (a.addListener && a.removeListener)
          a.addListener(d);
        else
          throw Error("addEventListener and attachEvent are unavailable.");
        ib++;
        return c;
      }
      function ob() {
        function a(c) {
          return b.call(a.src, a.listener, c);
        }
        var b = qb;
        return a;
      }
      function kb(a, b, c, d, e) {
        if (Array.isArray(b)) {
          for (var h = 0; h < b.length; h++)
            kb(a, b[h], c, d, e);
          return null;
        }
        c = lb(c);
        return a && a[Va] ? a.R(b, c, na(d) ? !!d.capture : !!d, e) : mb(a, b, c, true, d, e);
      }
      function rb(a, b, c, d, e) {
        if (Array.isArray(b))
          for (var h = 0; h < b.length; h++)
            rb(a, b[h], c, d, e);
        else
          (d = na(d) ? !!d.capture : !!d, c = lb(c), a && a[Va]) ? (a = a.i, b = String(b).toString(), b in a.g && (h = a.g[b], c = eb(h, c, d, e), -1 < c && (Ya(h[c]), Array.prototype.splice.call(h, c, 1), 0 == h.length && (delete a.g[b], a.h--)))) : a && (a = nb(a)) && (b = a.g[b.toString()], a = -1, b && (a = eb(b, c, d, e)), (c = -1 < a ? b[a] : null) && sb(c));
      }
      function sb(a) {
        if ("number" !== typeof a && a && !a.ha) {
          var b = a.src;
          if (b && b[Va])
            fb(b.i, a);
          else {
            var c = a.type, d = a.proxy;
            b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(pb(c), d) : b.addListener && b.removeListener && b.removeListener(d);
            ib--;
            (c = nb(b)) ? (fb(c, a), 0 == c.h && (c.src = null, b[gb] = null)) : Ya(a);
          }
        }
      }
      function pb(a) {
        return a in hb ? hb[a] : hb[a] = "on" + a;
      }
      function qb(a, b) {
        if (a.ha)
          a = true;
        else {
          b = new Ta(b, this);
          var c = a.listener, d = a.oa || a.src;
          a.ka && sb(a);
          a = c.call(d, b);
        }
        return a;
      }
      function nb(a) {
        a = a[gb];
        return a instanceof db ? a : null;
      }
      var tb = "__closure_events_fn_" + (1e9 * Math.random() >>> 0);
      function lb(a) {
        if ("function" === typeof a)
          return a;
        a[tb] || (a[tb] = function(b) {
          return a.handleEvent(b);
        });
        return a[tb];
      }
      ;
      function C() {
        z.call(this);
        this.i = new db(this);
        this.T = this;
        this.J = null;
      }
      y(C, z);
      C.prototype[Va] = true;
      C.prototype.removeEventListener = function(a, b, c, d) {
        rb(this, a, b, c, d);
      };
      function D(a, b) {
        var c, d = a.J;
        if (d)
          for (c = []; d; d = d.J)
            c.push(d);
        a = a.T;
        d = b.type || b;
        if ("string" === typeof b)
          b = new A(b, a);
        else if (b instanceof A)
          b.target = b.target || a;
        else {
          var e = b;
          b = new A(d, a);
          cb(b, e);
        }
        e = true;
        if (c)
          for (var h = c.length - 1; 0 <= h; h--) {
            var f = b.g = c[h];
            e = ub(f, d, true, b) && e;
          }
        f = b.g = a;
        e = ub(f, d, true, b) && e;
        e = ub(f, d, false, b) && e;
        if (c)
          for (h = 0; h < c.length; h++)
            f = b.g = c[h], e = ub(f, d, false, b) && e;
      }
      C.prototype.O = function() {
        C.Z.O.call(this);
        if (this.i) {
          var a = this.i, b = 0, c;
          for (c in a.g) {
            for (var d = a.g[c], e = 0; e < d.length; e++)
              ++b, Ya(d[e]);
            delete a.g[c];
            a.h--;
          }
        }
        this.J = null;
      };
      C.prototype.P = function(a, b, c, d) {
        return this.i.add(String(a), b, false, c, d);
      };
      C.prototype.R = function(a, b, c, d) {
        return this.i.add(String(a), b, true, c, d);
      };
      function ub(a, b, c, d) {
        b = a.i.g[String(b)];
        if (!b)
          return true;
        b = b.concat();
        for (var e = true, h = 0; h < b.length; ++h) {
          var f = b[h];
          if (f && !f.ha && f.capture == c) {
            var k = f.listener, l = f.oa || f.src;
            f.ka && fb(a.i, f);
            e = false !== k.call(l, d) && e;
          }
        }
        return e && !d.defaultPrevented;
      }
      ;
      var vb = w.JSON.stringify;
      function wb(a, b) {
        this.i = a;
        this.j = b;
        this.h = 0;
        this.g = null;
      }
      wb.prototype.get = function() {
        if (0 < this.h) {
          this.h--;
          var a = this.g;
          this.g = a.next;
          a.next = null;
        } else
          a = this.i();
        return a;
      };
      function xb() {
        this.h = this.g = null;
      }
      xb.prototype.add = function(a, b) {
        var c = yb.get();
        c.set(a, b);
        this.h ? this.h.next = c : this.g = c;
        this.h = c;
      };
      function zb() {
        var a = Ab, b = null;
        a.g && (b = a.g, a.g = a.g.next, a.g || (a.h = null), b.next = null);
        return b;
      }
      var yb = new wb(function() {
        return new Bb();
      }, function(a) {
        return a.reset();
      });
      function Bb() {
        this.next = this.g = this.h = null;
      }
      Bb.prototype.set = function(a, b) {
        this.h = a;
        this.g = b;
        this.next = null;
      };
      Bb.prototype.reset = function() {
        this.next = this.g = this.h = null;
      };
      function Cb(a) {
        var b = 1;
        a = a.split(":");
        for (var c = []; 0 < b && a.length; )
          c.push(a.shift()), b--;
        a.length && c.push(a.join(":"));
        return c;
      }
      ;
      function Db(a) {
        w.setTimeout(function() {
          throw a;
        }, 0);
      }
      ;
      var Eb, Fb = false, Ab = new xb();
      function Gb(a, b) {
        Eb || Hb();
        Fb || (Eb(), Fb = true);
        Ab.add(a, b);
      }
      function Hb() {
        var a = w.Promise.resolve(void 0);
        Eb = function() {
          a.then(Ib);
        };
      }
      function Ib() {
        for (var a; a = zb(); ) {
          try {
            a.h.call(a.g);
          } catch (c) {
            Db(c);
          }
          var b = yb;
          b.j(a);
          100 > b.h && (b.h++, a.next = b.g, b.g = a);
        }
        Fb = false;
      }
      ;
      function Jb(a, b) {
        C.call(this);
        this.h = a || 1;
        this.g = b || w;
        this.j = x(this.tb, this);
        this.l = Date.now();
      }
      y(Jb, C);
      n = Jb.prototype;
      n.ia = false;
      n.U = null;
      n.tb = function() {
        if (this.ia) {
          var a = Date.now() - this.l;
          0 < a && a < 0.8 * this.h ? this.U = this.g.setTimeout(this.j, this.h - a) : (this.U && (this.g.clearTimeout(this.U), this.U = null), D(this, "tick"), this.ia && (Kb(this), this.start()));
        }
      };
      n.start = function() {
        this.ia = true;
        this.U || (this.U = this.g.setTimeout(this.j, this.h), this.l = Date.now());
      };
      function Kb(a) {
        a.ia = false;
        a.U && (a.g.clearTimeout(a.U), a.U = null);
      }
      n.O = function() {
        Jb.Z.O.call(this);
        Kb(this);
        delete this.g;
      };
      function Lb(a, b, c) {
        if ("function" === typeof a)
          c && (a = x(a, c));
        else if (a && "function" == typeof a.handleEvent)
          a = x(a.handleEvent, a);
        else
          throw Error("Invalid listener argument");
        return 2147483647 < Number(b) ? -1 : w.setTimeout(a, b || 0);
      }
      ;
      function F(a, b, c) {
        z.call(this);
        this.m = null != c ? a.bind(c) : a;
        this.j = b;
        this.h = null;
        this.i = false;
        this.g = null;
      }
      F.prototype = ba(z.prototype);
      F.prototype.constructor = F;
      if (ja)
        ja(F, z);
      else
        for (var Mb in z)
          if ("prototype" != Mb)
            if (Object.defineProperties) {
              var Nb = Object.getOwnPropertyDescriptor(z, Mb);
              Nb && Object.defineProperty(F, Mb, Nb);
            } else
              F[Mb] = z[Mb];
      F.Z = z.prototype;
      F.prototype.l = function(a) {
        this.h = arguments;
        this.g ? this.i = true : Ob(this);
      };
      F.prototype.O = function() {
        z.prototype.O.call(this);
        this.g && (w.clearTimeout(this.g), this.g = null, this.i = false, this.h = null);
      };
      function Ob(a) {
        a.g = Lb(function() {
          a.g = null;
          a.i && (a.i = false, Ob(a));
        }, a.j);
        var b = a.h;
        a.h = null;
        a.m.apply(null, b);
      }
      ;
      function Pb(a) {
        z.call(this);
        this.h = a;
        this.g = {};
      }
      y(Pb, z);
      var Qb = [];
      function Rb(a, b, c, d) {
        Array.isArray(c) || (c && (Qb[0] = c.toString()), c = Qb);
        for (var e = 0; e < c.length; e++) {
          var h = jb(b, c[e], d || a.handleEvent, false, a.h || a);
          if (!h)
            break;
          a.g[h.key] = h;
        }
      }
      function Sb(a) {
        Za(a.g, function(b, c) {
          this.g.hasOwnProperty(c) && sb(b);
        }, a);
        a.g = {};
      }
      Pb.prototype.O = function() {
        Pb.Z.O.call(this);
        Sb(this);
      };
      Pb.prototype.handleEvent = function() {
        throw Error("EventHandler.handleEvent not implemented");
      };
      function Tb() {
        this.g = true;
      }
      Tb.prototype.Ha = function() {
        this.g = false;
      };
      function Ub(a, b, c, d, e, h) {
        a.info(function() {
          if (a.g)
            if (h) {
              var f = "";
              for (var k = h.split("&"), l = 0; l < k.length; l++) {
                var m = k[l].split("=");
                if (1 < m.length) {
                  var p = m[0];
                  m = m[1];
                  var t = p.split("_");
                  f = 2 <= t.length && "type" == t[1] ? f + (p + "=" + m + "&") : f + (p + "=redacted&");
                }
              }
            } else
              f = null;
          else
            f = h;
          return "XMLHTTP REQ (" + d + ") [attempt " + e + "]: " + b + "\n" + c + "\n" + f;
        });
      }
      function Vb(a, b, c, d, e, h, f) {
        a.info(function() {
          return "XMLHTTP RESP (" + d + ") [ attempt " + e + "]: " + b + "\n" + c + "\n" + h + " " + f;
        });
      }
      function Wb(a, b, c, d) {
        a.info(function() {
          return "XMLHTTP TEXT (" + b + "): " + Xb(a, c) + (d ? " " + d : "");
        });
      }
      function Yb(a, b) {
        a.info(function() {
          return "TIMEOUT: " + b;
        });
      }
      Tb.prototype.info = function() {
      };
      function Xb(a, b) {
        if (!a.g)
          return b;
        if (!b)
          return null;
        try {
          var c = JSON.parse(b);
          if (c) {
            for (a = 0; a < c.length; a++)
              if (Array.isArray(c[a])) {
                var d = c[a];
                if (!(2 > d.length)) {
                  var e = d[1];
                  if (Array.isArray(e) && !(1 > e.length)) {
                    var h = e[0];
                    if ("noop" != h && "stop" != h && "close" != h)
                      for (var f = 1; f < e.length; f++)
                        e[f] = "";
                  }
                }
              }
          }
          return vb(c);
        } catch (k) {
          return b;
        }
      }
      ;
      var G = {}, Zb = null;
      function $b() {
        return Zb = Zb || new C();
      }
      G.Wa = "serverreachability";
      function ac(a) {
        A.call(this, G.Wa, a);
      }
      y(ac, A);
      function bc(a) {
        var b = $b();
        D(b, new ac(b, a));
      }
      G.STAT_EVENT = "statevent";
      function cc(a, b) {
        A.call(this, G.STAT_EVENT, a);
        this.stat = b;
      }
      y(cc, A);
      function I(a) {
        var b = $b();
        D(b, new cc(b, a));
      }
      G.Xa = "timingevent";
      function dc(a, b) {
        A.call(this, G.Xa, a);
        this.size = b;
      }
      y(dc, A);
      function ec(a, b) {
        if ("function" !== typeof a)
          throw Error("Fn must not be null and must be a function");
        return w.setTimeout(function() {
          a();
        }, b);
      }
      ;
      var fc = { NO_ERROR: 0, ub: 1, Hb: 2, Gb: 3, Bb: 4, Fb: 5, Ib: 6, Ta: 7, TIMEOUT: 8, Lb: 9 };
      var gc = { zb: "complete", Vb: "success", Ua: "error", Ta: "abort", Nb: "ready", Ob: "readystatechange", TIMEOUT: "timeout", Jb: "incrementaldata", Mb: "progress", Cb: "downloadprogress", cc: "uploadprogress" };
      function hc() {
      }
      hc.prototype.h = null;
      function ic(a) {
        return a.h || (a.h = a.i());
      }
      ;
      function jc() {
      }
      var kc = { OPEN: "a", yb: "b", Ua: "c", Kb: "d" };
      function lc() {
        A.call(this, "d");
      }
      y(lc, A);
      function mc() {
        A.call(this, "c");
      }
      y(mc, A);
      var nc;
      function oc() {
      }
      y(oc, hc);
      oc.prototype.g = function() {
        return new XMLHttpRequest();
      };
      oc.prototype.i = function() {
        return {};
      };
      nc = new oc();
      function pc(a, b, c, d) {
        this.l = a;
        this.j = b;
        this.m = c;
        this.Y = d || 1;
        this.W = new Pb(this);
        this.R = qc;
        a = Ia ? 125 : void 0;
        this.X = new Jb(a);
        this.I = null;
        this.i = false;
        this.s = this.A = this.v = this.M = this.G = this.aa = this.B = null;
        this.D = [];
        this.g = null;
        this.C = 0;
        this.o = this.u = null;
        this.ea = -1;
        this.J = false;
        this.P = 0;
        this.N = null;
        this.da = this.L = this.ca = this.T = false;
        this.h = new rc();
      }
      function rc() {
        this.i = null;
        this.g = "";
        this.h = false;
      }
      var qc = 45e3, sc = {}, tc = {};
      n = pc.prototype;
      n.setTimeout = function(a) {
        this.R = a;
      };
      function uc(a, b, c) {
        a.M = 1;
        a.v = vc(J(b));
        a.s = c;
        a.T = true;
        wc(a, null);
      }
      function wc(a, b) {
        a.G = Date.now();
        xc(a);
        a.A = J(a.v);
        var c = a.A, d = a.Y;
        Array.isArray(d) || (d = [String(d)]);
        yc(c.i, "t", d);
        a.C = 0;
        c = a.l.J;
        a.h = new rc();
        a.g = zc(a.l, c ? b : null, !a.s);
        0 < a.P && (a.N = new F(x(a.Sa, a, a.g), a.P));
        Rb(a.W, a.g, "readystatechange", a.qb);
        b = a.I ? ab(a.I) : {};
        a.s ? (a.u || (a.u = "POST"), b["Content-Type"] = "application/x-www-form-urlencoded", a.g.ja(a.A, a.u, a.s, b)) : (a.u = "GET", a.g.ja(a.A, a.u, null, b));
        bc(1);
        Ub(a.j, a.u, a.A, a.m, a.Y, a.s);
      }
      n.qb = function(a) {
        a = a.target;
        var b = this.N;
        b && 3 == K(a) ? b.l() : this.Sa(a);
      };
      n.Sa = function(a) {
        try {
          if (a == this.g)
            a: {
              var b = K(this.g), c = this.g.La(), d = this.g.fa();
              if (!(3 > b) && (3 != b || Ia || this.g && (this.h.h || this.g.ma() || Ac(this.g)))) {
                this.J || 4 != b || 7 == c || (8 == c || 0 >= d ? bc(3) : bc(2));
                Bc(this);
                var e = this.g.fa();
                this.ea = e;
                b:
                  if (Cc(this)) {
                    var h = Ac(this.g);
                    a = "";
                    var f = h.length, k = 4 == K(this.g);
                    if (!this.h.i) {
                      if ("undefined" === typeof TextDecoder) {
                        L(this);
                        Dc(this);
                        var l = "";
                        break b;
                      }
                      this.h.i = new w.TextDecoder();
                    }
                    for (c = 0; c < f; c++)
                      this.h.h = true, a += this.h.i.decode(h[c], { stream: k && c == f - 1 });
                    h.splice(0, f);
                    this.h.g += a;
                    this.C = 0;
                    l = this.h.g;
                  } else
                    l = this.g.ma();
                this.i = 200 == e;
                Vb(this.j, this.u, this.A, this.m, this.Y, b, e);
                if (this.i) {
                  if (this.ca && !this.L) {
                    b: {
                      if (this.g) {
                        var m, p = this.g;
                        if ((m = p.g ? p.g.getResponseHeader("X-HTTP-Initial-Response") : null) && !Aa(m)) {
                          var t = m;
                          break b;
                        }
                      }
                      t = null;
                    }
                    if (e = t)
                      Wb(this.j, this.m, e, "Initial handshake response via X-HTTP-Initial-Response"), this.L = true, Ec(this, e);
                    else {
                      this.i = false;
                      this.o = 3;
                      I(12);
                      L(this);
                      Dc(this);
                      break a;
                    }
                  }
                  this.T ? (Fc(this, b, l), Ia && this.i && 3 == b && (Rb(this.W, this.X, "tick", this.pb), this.X.start())) : (Wb(this.j, this.m, l, null), Ec(this, l));
                  4 == b && L(this);
                  this.i && !this.J && (4 == b ? Gc(this.l, this) : (this.i = false, xc(this)));
                } else
                  Hc(this.g), 400 == e && 0 < l.indexOf("Unknown SID") ? (this.o = 3, I(12)) : (this.o = 0, I(13)), L(this), Dc(this);
              }
            }
        } catch (E) {
        } finally {
        }
      };
      function Cc(a) {
        return a.g ? "GET" == a.u && 2 != a.M && a.l.Ka : false;
      }
      function Fc(a, b, c) {
        for (var d = true, e; !a.J && a.C < c.length; )
          if (e = Ic(a, c), e == tc) {
            4 == b && (a.o = 4, I(14), d = false);
            Wb(a.j, a.m, null, "[Incomplete Response]");
            break;
          } else if (e == sc) {
            a.o = 4;
            I(15);
            Wb(a.j, a.m, c, "[Invalid Chunk]");
            d = false;
            break;
          } else
            Wb(a.j, a.m, e, null), Ec(a, e);
        Cc(a) && e != tc && e != sc && (a.h.g = "", a.C = 0);
        4 != b || 0 != c.length || a.h.h || (a.o = 1, I(16), d = false);
        a.i = a.i && d;
        d ? 0 < c.length && !a.da && (a.da = true, b = a.l, b.g == a && b.ea && !b.N && (b.l.info("Great, no buffering proxy detected. Bytes received: " + c.length), Jc(b), b.N = true, I(11))) : (Wb(
          a.j,
          a.m,
          c,
          "[Invalid Chunked Response]"
        ), L(a), Dc(a));
      }
      n.pb = function() {
        if (this.g) {
          var a = K(this.g), b = this.g.ma();
          this.C < b.length && (Bc(this), Fc(this, a, b), this.i && 4 != a && xc(this));
        }
      };
      function Ic(a, b) {
        var c = a.C, d = b.indexOf("\n", c);
        if (-1 == d)
          return tc;
        c = Number(b.substring(c, d));
        if (isNaN(c))
          return sc;
        d += 1;
        if (d + c > b.length)
          return tc;
        b = b.slice(d, d + c);
        a.C = d + c;
        return b;
      }
      n.cancel = function() {
        this.J = true;
        L(this);
      };
      function xc(a) {
        a.aa = Date.now() + a.R;
        Kc(a, a.R);
      }
      function Kc(a, b) {
        if (null != a.B)
          throw Error("WatchDog timer not null");
        a.B = ec(x(a.ob, a), b);
      }
      function Bc(a) {
        a.B && (w.clearTimeout(a.B), a.B = null);
      }
      n.ob = function() {
        this.B = null;
        var a = Date.now();
        0 <= a - this.aa ? (Yb(this.j, this.A), 2 != this.M && (bc(3), I(17)), L(this), this.o = 2, Dc(this)) : Kc(this, this.aa - a);
      };
      function Dc(a) {
        0 == a.l.H || a.J || Gc(a.l, a);
      }
      function L(a) {
        Bc(a);
        var b = a.N;
        b && "function" == typeof b.va && b.va();
        a.N = null;
        Kb(a.X);
        Sb(a.W);
        a.g && (b = a.g, a.g = null, b.abort(), b.va());
      }
      function Ec(a, b) {
        try {
          var c = a.l;
          if (0 != c.H && (c.g == a || Lc(c.i, a))) {
            if (!a.L && Lc(c.i, a) && 3 == c.H) {
              try {
                var d = c.Ma.g.parse(b);
              } catch (Sc) {
                d = null;
              }
              if (Array.isArray(d) && 3 == d.length) {
                var e = d;
                if (0 == e[0])
                  a: {
                    if (!c.u) {
                      if (c.g)
                        if (c.g.G + 3e3 < a.G)
                          Mc(c), Nc(c);
                        else
                          break a;
                      Oc(c);
                      I(18);
                    }
                  }
                else
                  c.Ia = e[1], 0 < c.Ia - c.X && 37500 > e[2] && c.G && 0 == c.A && !c.v && (c.v = ec(x(c.lb, c), 6e3));
                if (1 >= Pc(c.i) && c.ra) {
                  try {
                    c.ra();
                  } catch (Sc) {
                  }
                  c.ra = void 0;
                }
              } else
                M(c, 11);
            } else if ((a.L || c.g == a) && Mc(c), !Aa(b))
              for (e = c.Ma.g.parse(b), b = 0; b < e.length; b++) {
                var h = e[b];
                c.X = h[0];
                h = h[1];
                if (2 == c.H)
                  if ("c" == h[0]) {
                    c.L = h[1];
                    c.sa = h[2];
                    var f = h[3];
                    null != f && (c.ua = f, c.l.info("VER=" + c.ua));
                    var k = h[4];
                    null != k && (c.Ja = k, c.l.info("SVER=" + c.Ja));
                    var l = h[5];
                    null != l && "number" === typeof l && 0 < l && (d = 1.5 * l, c.M = d, c.l.info("backChannelRequestTimeoutMs_=" + d));
                    d = c;
                    var m = a.g;
                    if (m) {
                      var p = m.g ? m.g.getResponseHeader("X-Client-Wire-Protocol") : null;
                      if (p) {
                        var t = d.i;
                        t.g || -1 == p.indexOf("spdy") && -1 == p.indexOf("quic") && -1 == p.indexOf("h2") || (t.j = t.l, t.g = /* @__PURE__ */ new Set(), t.h && (Qc(t, t.h), t.h = null));
                      }
                      if (d.D) {
                        var E = m.g ? m.g.getResponseHeader("X-HTTP-Session-Id") : null;
                        E && (d.Ga = E, N(d.I, d.D, E));
                      }
                    }
                    c.H = 3;
                    c.h && c.h.Ea();
                    c.ea && (c.T = Date.now() - a.G, c.l.info("Handshake RTT: " + c.T + "ms"));
                    d = c;
                    var H = a;
                    d.za = Rc(d, d.J ? d.sa : null, d.aa);
                    if (H.L) {
                      Tc(d.i, H);
                      var S = H, Z = d.M;
                      Z && S.setTimeout(Z);
                      S.B && (Bc(S), xc(S));
                      d.g = H;
                    } else
                      Uc(d);
                    0 < c.j.length && Vc(c);
                  } else
                    "stop" != h[0] && "close" != h[0] || M(c, 7);
                else
                  3 == c.H && ("stop" == h[0] || "close" == h[0] ? "stop" == h[0] ? M(c, 7) : Wc(c) : "noop" != h[0] && c.h && c.h.Da(h), c.A = 0);
              }
          }
          bc(4);
        } catch (Sc) {
        }
      }
      ;
      function Xc(a) {
        if (a.ba && "function" == typeof a.ba)
          return a.ba();
        if ("undefined" !== typeof Map && a instanceof Map || "undefined" !== typeof Set && a instanceof Set)
          return Array.from(a.values());
        if ("string" === typeof a)
          return a.split("");
        if (ma(a)) {
          for (var b = [], c = a.length, d = 0; d < c; d++)
            b.push(a[d]);
          return b;
        }
        b = [];
        c = 0;
        for (d in a)
          b[c++] = a[d];
        return b;
      }
      function Yc(a) {
        if (a.wa && "function" == typeof a.wa)
          return a.wa();
        if (!a.ba || "function" != typeof a.ba) {
          if ("undefined" !== typeof Map && a instanceof Map)
            return Array.from(a.keys());
          if (!("undefined" !== typeof Set && a instanceof Set)) {
            if (ma(a) || "string" === typeof a) {
              var b = [];
              a = a.length;
              for (var c = 0; c < a; c++)
                b.push(c);
              return b;
            }
            b = [];
            c = 0;
            for (var d in a)
              b[c++] = d;
            return b;
          }
        }
      }
      function Zc(a, b) {
        if (a.forEach && "function" == typeof a.forEach)
          a.forEach(b, void 0);
        else if (ma(a) || "string" === typeof a)
          Array.prototype.forEach.call(a, b, void 0);
        else
          for (var c = Yc(a), d = Xc(a), e = d.length, h = 0; h < e; h++)
            b.call(void 0, d[h], c && c[h], a);
      }
      ;
      var $c = RegExp("^(?:([^:/?#.]+):)?(?://(?:([^\\\\/?#]*)@)?([^\\\\/?#]*?)(?::([0-9]+))?(?=[\\\\/?#]|$))?([^?#]+)?(?:\\?([^#]*))?(?:#([\\s\\S]*))?$");
      function ad(a, b) {
        if (a) {
          a = a.split("&");
          for (var c = 0; c < a.length; c++) {
            var d = a[c].indexOf("="), e = null;
            if (0 <= d) {
              var h = a[c].substring(0, d);
              e = a[c].substring(d + 1);
            } else
              h = a[c];
            b(h, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
          }
        }
      }
      ;
      function O(a) {
        this.g = this.s = this.j = "";
        this.o = null;
        this.m = this.h = "";
        this.l = false;
        var b;
        a instanceof O ? (this.l = a.l, bd(this, a.j), this.s = a.s, this.g = a.g, cd(this, a.o), this.h = a.h, dd(this, ed(a.i)), this.m = a.m) : a && (b = String(a).match($c)) ? (this.l = false, bd(this, b[1] || "", true), this.s = fd(b[2] || ""), this.g = fd(b[3] || "", true), cd(this, b[4]), this.h = fd(b[5] || "", true), dd(this, b[6] || "", true), this.m = fd(b[7] || "")) : (this.l = false, this.i = new gd(null, this.l));
      }
      O.prototype.toString = function() {
        var a = [], b = this.j;
        b && a.push(hd(b, id, true), ":");
        var c = this.g;
        if (c || "file" == b)
          a.push("//"), (b = this.s) && a.push(hd(b, id, true), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.o, null != c && a.push(":", String(c));
        if (c = this.h)
          this.g && "/" != c.charAt(0) && a.push("/"), a.push(hd(c, "/" == c.charAt(0) ? jd : kd, true));
        (c = this.i.toString()) && a.push("?", c);
        (c = this.m) && a.push("#", hd(c, ld));
        return a.join("");
      };
      O.prototype.resolve = function(a) {
        var b = J(this), c = !!a.j;
        c ? bd(b, a.j) : c = !!a.s;
        c ? b.s = a.s : c = !!a.g;
        c ? b.g = a.g : c = null != a.o;
        var d = a.h;
        if (c)
          cd(b, a.o);
        else if (c = !!a.h) {
          if ("/" != d.charAt(0))
            if (this.g && !this.h)
              d = "/" + d;
            else {
              var e = b.h.lastIndexOf("/");
              -1 != e && (d = b.h.slice(0, e + 1) + d);
            }
          e = d;
          if (".." == e || "." == e)
            d = "";
          else if (-1 != e.indexOf("./") || -1 != e.indexOf("/.")) {
            d = 0 == e.lastIndexOf("/", 0);
            e = e.split("/");
            for (var h = [], f = 0; f < e.length; ) {
              var k = e[f++];
              "." == k ? d && f == e.length && h.push("") : ".." == k ? ((1 < h.length || 1 == h.length && "" != h[0]) && h.pop(), d && f == e.length && h.push("")) : (h.push(k), d = true);
            }
            d = h.join("/");
          } else
            d = e;
        }
        c ? b.h = d : c = "" !== a.i.toString();
        c ? dd(b, ed(a.i)) : c = !!a.m;
        c && (b.m = a.m);
        return b;
      };
      function J(a) {
        return new O(a);
      }
      function bd(a, b, c) {
        a.j = c ? fd(b, true) : b;
        a.j && (a.j = a.j.replace(/:$/, ""));
      }
      function cd(a, b) {
        if (b) {
          b = Number(b);
          if (isNaN(b) || 0 > b)
            throw Error("Bad port number " + b);
          a.o = b;
        } else
          a.o = null;
      }
      function dd(a, b, c) {
        b instanceof gd ? (a.i = b, md(a.i, a.l)) : (c || (b = hd(b, nd)), a.i = new gd(b, a.l));
      }
      function N(a, b, c) {
        a.i.set(b, c);
      }
      function vc(a) {
        N(a, "zx", Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ Date.now()).toString(36));
        return a;
      }
      function fd(a, b) {
        return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
      }
      function hd(a, b, c) {
        return "string" === typeof a ? (a = encodeURI(a).replace(b, od), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
      }
      function od(a) {
        a = a.charCodeAt(0);
        return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
      }
      var id = /[#\/\?@]/g, kd = /[#\?:]/g, jd = /[#\?]/g, nd = /[#\?@]/g, ld = /#/g;
      function gd(a, b) {
        this.h = this.g = null;
        this.i = a || null;
        this.j = !!b;
      }
      function P(a) {
        a.g || (a.g = /* @__PURE__ */ new Map(), a.h = 0, a.i && ad(a.i, function(b, c) {
          a.add(decodeURIComponent(b.replace(/\+/g, " ")), c);
        }));
      }
      n = gd.prototype;
      n.add = function(a, b) {
        P(this);
        this.i = null;
        a = pd(this, a);
        var c = this.g.get(a);
        c || this.g.set(a, c = []);
        c.push(b);
        this.h += 1;
        return this;
      };
      function qd(a, b) {
        P(a);
        b = pd(a, b);
        a.g.has(b) && (a.i = null, a.h -= a.g.get(b).length, a.g.delete(b));
      }
      function rd(a, b) {
        P(a);
        b = pd(a, b);
        return a.g.has(b);
      }
      n.forEach = function(a, b) {
        P(this);
        this.g.forEach(function(c, d) {
          c.forEach(function(e) {
            a.call(b, e, d, this);
          }, this);
        }, this);
      };
      n.wa = function() {
        P(this);
        for (var a = Array.from(this.g.values()), b = Array.from(this.g.keys()), c = [], d = 0; d < b.length; d++)
          for (var e = a[d], h = 0; h < e.length; h++)
            c.push(b[d]);
        return c;
      };
      n.ba = function(a) {
        P(this);
        var b = [];
        if ("string" === typeof a)
          rd(this, a) && (b = b.concat(this.g.get(pd(this, a))));
        else {
          a = Array.from(this.g.values());
          for (var c = 0; c < a.length; c++)
            b = b.concat(a[c]);
        }
        return b;
      };
      n.set = function(a, b) {
        P(this);
        this.i = null;
        a = pd(this, a);
        rd(this, a) && (this.h -= this.g.get(a).length);
        this.g.set(a, [b]);
        this.h += 1;
        return this;
      };
      n.get = function(a, b) {
        if (!a)
          return b;
        a = this.ba(a);
        return 0 < a.length ? String(a[0]) : b;
      };
      function yc(a, b, c) {
        qd(a, b);
        0 < c.length && (a.i = null, a.g.set(pd(a, b), xa(c)), a.h += c.length);
      }
      n.toString = function() {
        if (this.i)
          return this.i;
        if (!this.g)
          return "";
        for (var a = [], b = Array.from(this.g.keys()), c = 0; c < b.length; c++) {
          var d = b[c], e = encodeURIComponent(String(d));
          d = this.ba(d);
          for (var h = 0; h < d.length; h++) {
            var f = e;
            "" !== d[h] && (f += "=" + encodeURIComponent(String(d[h])));
            a.push(f);
          }
        }
        return this.i = a.join("&");
      };
      function ed(a) {
        var b = new gd();
        b.i = a.i;
        a.g && (b.g = new Map(a.g), b.h = a.h);
        return b;
      }
      function pd(a, b) {
        b = String(b);
        a.j && (b = b.toLowerCase());
        return b;
      }
      function md(a, b) {
        b && !a.j && (P(a), a.i = null, a.g.forEach(function(c, d) {
          var e = d.toLowerCase();
          d != e && (qd(this, d), yc(this, e, c));
        }, a));
        a.j = b;
      }
      ;
      function sd(a, b) {
        this.g = a;
        this.map = b;
      }
      ;
      function td(a) {
        this.l = a || ud;
        w.PerformanceNavigationTiming ? (a = w.performance.getEntriesByType("navigation"), a = 0 < a.length && ("hq" == a[0].nextHopProtocol || "h2" == a[0].nextHopProtocol)) : a = !!(w.g && w.g.Na && w.g.Na() && w.g.Na().ic);
        this.j = a ? this.l : 1;
        this.g = null;
        1 < this.j && (this.g = /* @__PURE__ */ new Set());
        this.h = null;
        this.i = [];
      }
      var ud = 10;
      function vd(a) {
        return a.h ? true : a.g ? a.g.size >= a.j : false;
      }
      function Pc(a) {
        return a.h ? 1 : a.g ? a.g.size : 0;
      }
      function Lc(a, b) {
        return a.h ? a.h == b : a.g ? a.g.has(b) : false;
      }
      function Qc(a, b) {
        a.g ? a.g.add(b) : a.h = b;
      }
      function Tc(a, b) {
        a.h && a.h == b ? a.h = null : a.g && a.g.has(b) && a.g.delete(b);
      }
      td.prototype.cancel = function() {
        this.i = wd(this);
        if (this.h)
          this.h.cancel(), this.h = null;
        else if (this.g && 0 !== this.g.size) {
          for (var a = q(this.g.values()), b = a.next(); !b.done; b = a.next())
            b.value.cancel();
          this.g.clear();
        }
      };
      function wd(a) {
        if (null != a.h)
          return a.i.concat(a.h.D);
        if (null != a.g && 0 !== a.g.size) {
          var b = a.i;
          a = q(a.g.values());
          for (var c = a.next(); !c.done; c = a.next())
            b = b.concat(c.value.D);
          return b;
        }
        return xa(a.i);
      }
      ;
      function xd() {
      }
      xd.prototype.stringify = function(a) {
        return w.JSON.stringify(a, void 0);
      };
      xd.prototype.parse = function(a) {
        return w.JSON.parse(a, void 0);
      };
      function yd() {
        this.g = new xd();
      }
      function zd(a, b, c) {
        var d = c || "";
        try {
          Zc(a, function(e, h) {
            var f = e;
            na(e) && (f = vb(e));
            b.push(d + h + "=" + encodeURIComponent(f));
          });
        } catch (e) {
          throw b.push(d + "type=" + encodeURIComponent("_badmap")), e;
        }
      }
      ;
      function Ad(a, b) {
        var c = new Tb();
        if (w.Image) {
          var d = new Image();
          d.onload = ta(Bd, c, d, "TestLoadImage: loaded", true, b);
          d.onerror = ta(Bd, c, d, "TestLoadImage: error", false, b);
          d.onabort = ta(Bd, c, d, "TestLoadImage: abort", false, b);
          d.ontimeout = ta(Bd, c, d, "TestLoadImage: timeout", false, b);
          w.setTimeout(function() {
            if (d.ontimeout)
              d.ontimeout();
          }, 1e4);
          d.src = a;
        } else
          b(false);
      }
      function Bd(a, b, c, d, e) {
        try {
          b.onload = null, b.onerror = null, b.onabort = null, b.ontimeout = null, e(d);
        } catch (h) {
        }
      }
      ;
      function Cd(a) {
        this.l = a.jc || null;
        this.j = a.rb || false;
      }
      y(Cd, hc);
      Cd.prototype.g = function() {
        return new Dd(this.l, this.j);
      };
      Cd.prototype.i = function(a) {
        return function() {
          return a;
        };
      }({});
      function Dd(a, b) {
        C.call(this);
        this.D = a;
        this.u = b;
        this.m = void 0;
        this.readyState = Ed;
        this.status = 0;
        this.responseType = this.responseText = this.response = this.statusText = "";
        this.onreadystatechange = null;
        this.v = new Headers();
        this.h = null;
        this.C = "GET";
        this.B = "";
        this.g = false;
        this.A = this.j = this.l = null;
      }
      y(Dd, C);
      var Ed = 0;
      n = Dd.prototype;
      n.open = function(a, b) {
        if (this.readyState != Ed)
          throw this.abort(), Error("Error reopening a connection");
        this.C = a;
        this.B = b;
        this.readyState = 1;
        Fd(this);
      };
      n.send = function(a) {
        if (1 != this.readyState)
          throw this.abort(), Error("need to call open() first. ");
        this.g = true;
        var b = { headers: this.v, method: this.C, credentials: this.m, cache: void 0 };
        a && (b.body = a);
        (this.D || w).fetch(new Request(this.B, b)).then(this.cb.bind(this), this.na.bind(this));
      };
      n.abort = function() {
        this.response = this.responseText = "";
        this.v = new Headers();
        this.status = 0;
        this.j && this.j.cancel("Request was aborted.").catch(function() {
        });
        1 <= this.readyState && this.g && 4 != this.readyState && (this.g = false, Gd(this));
        this.readyState = Ed;
      };
      n.cb = function(a) {
        if (this.g && (this.l = a, this.h || (this.status = this.l.status, this.statusText = this.l.statusText, this.h = a.headers, this.readyState = 2, Fd(this)), this.g && (this.readyState = 3, Fd(this), this.g)))
          if ("arraybuffer" === this.responseType)
            a.arrayBuffer().then(this.ab.bind(this), this.na.bind(this));
          else if ("undefined" !== typeof w.ReadableStream && "body" in a) {
            this.j = a.body.getReader();
            if (this.u) {
              if (this.responseType)
                throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');
              this.response = [];
            } else
              this.response = this.responseText = "", this.A = new TextDecoder();
            Hd(this);
          } else
            a.text().then(this.bb.bind(this), this.na.bind(this));
      };
      function Hd(a) {
        a.j.read().then(a.$a.bind(a)).catch(a.na.bind(a));
      }
      n.$a = function(a) {
        if (this.g) {
          if (this.u && a.value)
            this.response.push(a.value);
          else if (!this.u) {
            var b = a.value ? a.value : new Uint8Array(0);
            if (b = this.A.decode(b, { stream: !a.done }))
              this.response = this.responseText += b;
          }
          a.done ? Gd(this) : Fd(this);
          3 == this.readyState && Hd(this);
        }
      };
      n.bb = function(a) {
        this.g && (this.response = this.responseText = a, Gd(this));
      };
      n.ab = function(a) {
        this.g && (this.response = a, Gd(this));
      };
      n.na = function() {
        this.g && Gd(this);
      };
      function Gd(a) {
        a.readyState = 4;
        a.l = null;
        a.j = null;
        a.A = null;
        Fd(a);
      }
      n.setRequestHeader = function(a, b) {
        this.v.append(a, b);
      };
      n.getResponseHeader = function(a) {
        return this.h ? this.h.get(a.toLowerCase()) || "" : "";
      };
      n.getAllResponseHeaders = function() {
        if (!this.h)
          return "";
        for (var a = [], b = this.h.entries(), c = b.next(); !c.done; )
          c = c.value, a.push(c[0] + ": " + c[1]), c = b.next();
        return a.join("\r\n");
      };
      function Fd(a) {
        a.onreadystatechange && a.onreadystatechange.call(a);
      }
      Object.defineProperty(Dd.prototype, "withCredentials", { get: function() {
        return "include" === this.m;
      }, set: function(a) {
        this.m = a ? "include" : "same-origin";
      } });
      var Id = w.JSON.parse;
      function Q(a) {
        C.call(this);
        this.headers = /* @__PURE__ */ new Map();
        this.u = a || null;
        this.h = false;
        this.C = this.g = null;
        this.I = "";
        this.m = 0;
        this.j = "";
        this.l = this.G = this.v = this.D = false;
        this.B = 0;
        this.A = null;
        this.L = Jd;
        this.M = this.N = false;
      }
      y(Q, C);
      var Jd = "", Kd = /^https?$/i, Ld = ["POST", "PUT"];
      n = Q.prototype;
      n.Ra = function(a) {
        this.N = a;
      };
      n.ja = function(a, b, c, d) {
        if (this.g)
          throw Error("[goog.net.XhrIo] Object is active with another request=" + this.I + "; newUri=" + a);
        b = b ? b.toUpperCase() : "GET";
        this.I = a;
        this.j = "";
        this.m = 0;
        this.D = false;
        this.h = true;
        this.g = this.u ? this.u.g() : nc.g();
        this.C = this.u ? ic(this.u) : ic(nc);
        this.g.onreadystatechange = x(this.Oa, this);
        try {
          this.G = true, this.g.open(b, String(a), true), this.G = false;
        } catch (f) {
          Md(this, f);
          return;
        }
        a = c || "";
        c = new Map(this.headers);
        if (d)
          if (Object.getPrototypeOf(d) === Object.prototype)
            for (var e in d)
              c.set(e, d[e]);
          else if ("function" === typeof d.keys && "function" === typeof d.get) {
            e = q(d.keys());
            for (var h = e.next(); !h.done; h = e.next())
              h = h.value, c.set(h, d.get(h));
          } else
            throw Error("Unknown input type for opt_headers: " + String(d));
        d = Array.from(c.keys()).find(function(f) {
          return "content-type" == f.toLowerCase();
        });
        e = w.FormData && a instanceof w.FormData;
        !(0 <= wa(Ld, b)) || d || e || c.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
        b = q(c);
        for (d = b.next(); !d.done; d = b.next())
          c = q(d.value), d = c.next().value, c = c.next().value, this.g.setRequestHeader(
            d,
            c
          );
        this.L && (this.g.responseType = this.L);
        "withCredentials" in this.g && this.g.withCredentials !== this.N && (this.g.withCredentials = this.N);
        try {
          Nd(this), 0 < this.B && ((this.M = Od(this.g)) ? (this.g.timeout = this.B, this.g.ontimeout = x(this.xa, this)) : this.A = Lb(this.xa, this.B, this)), this.v = true, this.g.send(a), this.v = false;
        } catch (f) {
          Md(this, f);
        }
      };
      function Od(a) {
        return Ga && "number" === typeof a.timeout && void 0 !== a.ontimeout;
      }
      n.xa = function() {
        "undefined" != typeof goog && this.g && (this.j = "Timed out after " + this.B + "ms, aborting", this.m = 8, D(this, "timeout"), this.abort(8));
      };
      function Md(a, b) {
        a.h = false;
        a.g && (a.l = true, a.g.abort(), a.l = false);
        a.j = b;
        a.m = 5;
        Pd(a);
        Qd(a);
      }
      function Pd(a) {
        a.D || (a.D = true, D(a, "complete"), D(a, "error"));
      }
      n.abort = function(a) {
        this.g && this.h && (this.h = false, this.l = true, this.g.abort(), this.l = false, this.m = a || 7, D(this, "complete"), D(this, "abort"), Qd(this));
      };
      n.O = function() {
        this.g && (this.h && (this.h = false, this.l = true, this.g.abort(), this.l = false), Qd(this, true));
        Q.Z.O.call(this);
      };
      n.Oa = function() {
        this.s || (this.G || this.v || this.l ? Rd(this) : this.nb());
      };
      n.nb = function() {
        Rd(this);
      };
      function Rd(a) {
        if (a.h && "undefined" != typeof goog && (!a.C[1] || 4 != K(a) || 2 != a.fa())) {
          if (a.v && 4 == K(a))
            Lb(a.Oa, 0, a);
          else if (D(a, "readystatechange"), 4 == K(a)) {
            a.h = false;
            try {
              var b = a.fa();
              a:
                switch (b) {
                  case 200:
                  case 201:
                  case 202:
                  case 204:
                  case 206:
                  case 304:
                  case 1223:
                    var c = true;
                    break a;
                  default:
                    c = false;
                }
              var d;
              if (!(d = c)) {
                var e;
                if (e = 0 === b) {
                  var h = String(a.I).match($c)[1] || null;
                  !h && w.self && w.self.location && (h = w.self.location.protocol.slice(0, -1));
                  e = !Kd.test(h ? h.toLowerCase() : "");
                }
                d = e;
              }
              if (d)
                D(a, "complete"), D(a, "success");
              else {
                a.m = 6;
                try {
                  var f = 2 < K(a) ? a.g.statusText : "";
                } catch (k) {
                  f = "";
                }
                a.j = f + " [" + a.fa() + "]";
                Pd(a);
              }
            } finally {
              Qd(a);
            }
          }
        }
      }
      function Qd(a, b) {
        if (a.g) {
          Nd(a);
          var c = a.g, d = a.C[0] ? function() {
          } : null;
          a.g = null;
          a.C = null;
          b || D(a, "ready");
          try {
            c.onreadystatechange = d;
          } catch (e) {
          }
        }
      }
      function Nd(a) {
        a.g && a.M && (a.g.ontimeout = null);
        a.A && (w.clearTimeout(a.A), a.A = null);
      }
      n.isActive = function() {
        return !!this.g;
      };
      function K(a) {
        return a.g ? a.g.readyState : 0;
      }
      n.fa = function() {
        try {
          return 2 < K(this) ? this.g.status : -1;
        } catch (a) {
          return -1;
        }
      };
      n.ma = function() {
        try {
          return this.g ? this.g.responseText : "";
        } catch (a) {
          return "";
        }
      };
      n.Za = function(a) {
        if (this.g) {
          var b = this.g.responseText;
          a && 0 == b.indexOf(a) && (b = b.substring(a.length));
          return Id(b);
        }
      };
      function Ac(a) {
        try {
          if (!a.g)
            return null;
          if ("response" in a.g)
            return a.g.response;
          switch (a.L) {
            case Jd:
            case "text":
              return a.g.responseText;
            case "arraybuffer":
              if ("mozResponseArrayBuffer" in a.g)
                return a.g.mozResponseArrayBuffer;
          }
          return null;
        } catch (b) {
          return null;
        }
      }
      function Hc(a) {
        var b = {};
        a = (a.g && 2 <= K(a) ? a.g.getAllResponseHeaders() || "" : "").split("\r\n");
        for (var c = 0; c < a.length; c++)
          if (!Aa(a[c])) {
            var d = Cb(a[c]), e = d[0];
            d = d[1];
            if ("string" === typeof d) {
              d = d.trim();
              var h = b[e] || [];
              b[e] = h;
              h.push(d);
            }
          }
        $a(b, function(f) {
          return f.join(", ");
        });
      }
      n.La = function() {
        return this.m;
      };
      n.Va = function() {
        return "string" === typeof this.j ? this.j : String(this.j);
      };
      function Sd(a) {
        var b = "";
        Za(a, function(c, d) {
          b += d;
          b += ":";
          b += c;
          b += "\r\n";
        });
        return b;
      }
      function Td(a, b, c) {
        a: {
          for (d in c) {
            var d = false;
            break a;
          }
          d = true;
        }
        d || (c = Sd(c), "string" === typeof a ? (encodeURIComponent(String(b)), null != c && encodeURIComponent(String(c))) : N(a, b, c));
      }
      ;
      function Ud(a, b, c) {
        return c && c.internalChannelParams ? c.internalChannelParams[a] || b : b;
      }
      function Vd(a) {
        this.Ja = 0;
        this.j = [];
        this.l = new Tb();
        this.sa = this.za = this.I = this.aa = this.g = this.Ga = this.D = this.qa = this.o = this.W = this.s = null;
        this.ib = this.Y = 0;
        this.gb = Ud("failFast", false, a);
        this.G = this.v = this.u = this.m = this.h = null;
        this.ca = true;
        this.Ia = this.X = -1;
        this.da = this.A = this.C = 0;
        this.eb = Ud("baseRetryDelayMs", 5e3, a);
        this.kb = Ud("retryDelaySeedMs", 1e4, a);
        this.hb = Ud("forwardChannelMaxRetries", 2, a);
        this.Aa = Ud("forwardChannelRequestTimeoutMs", 2e4, a);
        this.ya = a && a.xmlHttpFactory || void 0;
        this.Ka = a && a.hc || false;
        this.M = void 0;
        this.J = a && a.supportsCrossDomainXhr || false;
        this.L = "";
        this.i = new td(a && a.concurrentRequestLimit);
        this.Ma = new yd();
        this.R = a && a.fastHandshake || false;
        this.P = a && a.encodeInitMessageHeaders || false;
        this.R && this.P && (this.P = false);
        this.fb = a && a.ec || false;
        a && a.Ha && this.l.Ha();
        a && a.forceLongPolling && (this.ca = false);
        this.ea = !this.R && this.ca && a && a.detectBufferingProxy || false;
        this.ta = void 0;
        a && a.longPollingTimeout && 0 < a.longPollingTimeout && (this.ta = a.longPollingTimeout);
        this.ra = void 0;
        this.T = 0;
        this.N = false;
        this.pa = this.B = null;
      }
      n = Vd.prototype;
      n.ua = 8;
      n.H = 1;
      function Wc(a) {
        Wd(a);
        if (3 == a.H) {
          var b = a.Y++, c = J(a.I);
          N(c, "SID", a.L);
          N(c, "RID", b);
          N(c, "TYPE", "terminate");
          Xd(a, c);
          b = new pc(a, a.l, b);
          b.M = 2;
          b.v = vc(J(c));
          c = false;
          if (w.navigator && w.navigator.sendBeacon)
            try {
              c = w.navigator.sendBeacon(b.v.toString(), "");
            } catch (d) {
            }
          !c && w.Image && (new Image().src = b.v, c = true);
          c || (b.g = zc(b.l, null), b.g.ja(b.v));
          b.G = Date.now();
          xc(b);
        }
        Yd(a);
      }
      function Nc(a) {
        a.g && (Jc(a), a.g.cancel(), a.g = null);
      }
      function Wd(a) {
        Nc(a);
        a.u && (w.clearTimeout(a.u), a.u = null);
        Mc(a);
        a.i.cancel();
        a.m && ("number" === typeof a.m && w.clearTimeout(a.m), a.m = null);
      }
      function Vc(a) {
        vd(a.i) || a.m || (a.m = true, Gb(a.Qa, a), a.C = 0);
      }
      function Zd(a, b) {
        if (Pc(a.i) >= a.i.j - (a.m ? 1 : 0))
          return false;
        if (a.m)
          return a.j = b.D.concat(a.j), true;
        if (1 == a.H || 2 == a.H || a.C >= (a.gb ? 0 : a.hb))
          return false;
        a.m = ec(x(a.Qa, a, b), $d(a, a.C));
        a.C++;
        return true;
      }
      n.Qa = function(a) {
        if (this.m)
          if (this.m = null, 1 == this.H) {
            if (!a) {
              this.Y = Math.floor(1e5 * Math.random());
              a = this.Y++;
              var b = new pc(this, this.l, a), c = this.s;
              this.W && (c ? (c = ab(c), cb(c, this.W)) : c = this.W);
              null !== this.o || this.P || (b.I = c, c = null);
              var d;
              if (this.R)
                a: {
                  for (var e = d = 0; e < this.j.length; e++) {
                    b: {
                      var h = this.j[e];
                      if ("__data__" in h.map && (h = h.map.__data__, "string" === typeof h)) {
                        h = h.length;
                        break b;
                      }
                      h = void 0;
                    }
                    if (void 0 === h)
                      break;
                    d += h;
                    if (4096 < d) {
                      d = e;
                      break a;
                    }
                    if (4096 === d || e === this.j.length - 1) {
                      d = e + 1;
                      break a;
                    }
                  }
                  d = 1e3;
                }
              else
                d = 1e3;
              d = ae(this, b, d);
              e = J(this.I);
              N(e, "RID", a);
              N(e, "CVER", 22);
              this.D && N(e, "X-HTTP-Session-Id", this.D);
              Xd(this, e);
              c && (this.P ? d = "headers=" + encodeURIComponent(String(Sd(c))) + "&" + d : this.o && Td(e, this.o, c));
              Qc(this.i, b);
              this.fb && N(e, "TYPE", "init");
              this.R ? (N(e, "$req", d), N(e, "SID", "null"), b.ca = true, uc(b, e, null)) : uc(b, e, d);
              this.H = 2;
            }
          } else
            3 == this.H && (a ? be(this, a) : 0 == this.j.length || vd(this.i) || be(this));
      };
      function be(a, b) {
        var c;
        b ? c = b.m : c = a.Y++;
        var d = J(a.I);
        N(d, "SID", a.L);
        N(d, "RID", c);
        N(d, "AID", a.X);
        Xd(a, d);
        a.o && a.s && Td(d, a.o, a.s);
        c = new pc(a, a.l, c, a.C + 1);
        null === a.o && (c.I = a.s);
        b && (a.j = b.D.concat(a.j));
        b = ae(a, c, 1e3);
        c.setTimeout(Math.round(0.5 * a.Aa) + Math.round(0.5 * a.Aa * Math.random()));
        Qc(a.i, c);
        uc(c, d, b);
      }
      function Xd(a, b) {
        a.qa && Za(a.qa, function(c, d) {
          N(b, d, c);
        });
        a.h && Zc({}, function(c, d) {
          N(b, d, c);
        });
      }
      function ae(a, b, c) {
        c = Math.min(a.j.length, c);
        var d = a.h ? x(a.h.Ya, a.h, a) : null;
        a:
          for (var e = a.j, h = -1; ; ) {
            var f = ["count=" + c];
            -1 == h ? 0 < c ? (h = e[0].g, f.push("ofs=" + h)) : h = 0 : f.push("ofs=" + h);
            for (var k = true, l = 0; l < c; l++) {
              var m = e[l].g, p = e[l].map;
              m -= h;
              if (0 > m)
                h = Math.max(0, e[l].g - 100), k = false;
              else
                try {
                  zd(p, f, "req" + m + "_");
                } catch (t) {
                  d && d(p);
                }
            }
            if (k) {
              d = f.join("&");
              break a;
            }
          }
        a = a.j.splice(0, c);
        b.D = a;
        return d;
      }
      function Uc(a) {
        a.g || a.u || (a.da = 1, Gb(a.Pa, a), a.A = 0);
      }
      function Oc(a) {
        if (a.g || a.u || 3 <= a.A)
          return false;
        a.da++;
        a.u = ec(x(a.Pa, a), $d(a, a.A));
        a.A++;
        return true;
      }
      n.Pa = function() {
        this.u = null;
        ce(this);
        if (this.ea && !(this.N || null == this.g || 0 >= this.T)) {
          var a = 2 * this.T;
          this.l.info("BP detection timer enabled: " + a);
          this.B = ec(x(this.mb, this), a);
        }
      };
      n.mb = function() {
        this.B && (this.B = null, this.l.info("BP detection timeout reached."), this.l.info("Buffering proxy detected and switch to long-polling!"), this.G = false, this.N = true, I(10), Nc(this), ce(this));
      };
      function Jc(a) {
        null != a.B && (w.clearTimeout(a.B), a.B = null);
      }
      function ce(a) {
        a.g = new pc(a, a.l, "rpc", a.da);
        null === a.o && (a.g.I = a.s);
        a.g.P = 0;
        var b = J(a.za);
        N(b, "RID", "rpc");
        N(b, "SID", a.L);
        N(b, "AID", a.X);
        N(b, "CI", a.G ? "0" : "1");
        !a.G && a.ta && N(b, "TO", a.ta);
        N(b, "TYPE", "xmlhttp");
        Xd(a, b);
        a.o && a.s && Td(b, a.o, a.s);
        a.M && a.g.setTimeout(a.M);
        var c = a.g;
        a = a.sa;
        c.M = 1;
        c.v = vc(J(b));
        c.s = null;
        c.T = true;
        wc(c, a);
      }
      n.lb = function() {
        null != this.v && (this.v = null, Nc(this), Oc(this), I(19));
      };
      function Mc(a) {
        null != a.v && (w.clearTimeout(a.v), a.v = null);
      }
      function Gc(a, b) {
        var c = null;
        if (a.g == b) {
          Mc(a);
          Jc(a);
          a.g = null;
          var d = 2;
        } else if (Lc(a.i, b))
          c = b.D, Tc(a.i, b), d = 1;
        else
          return;
        if (0 != a.H) {
          if (b.i)
            if (1 == d) {
              c = b.s ? b.s.length : 0;
              b = Date.now() - b.G;
              var e = a.C;
              d = $b();
              D(d, new dc(d, c, b, e));
              Vc(a);
            } else
              Uc(a);
          else if (e = b.o, 3 == e || 0 == e && 0 < b.ea || !(1 == d && Zd(a, b) || 2 == d && Oc(a)))
            switch (c && 0 < c.length && (b = a.i, b.i = b.i.concat(c)), e) {
              case 1:
                M(a, 5);
                break;
              case 4:
                M(a, 10);
                break;
              case 3:
                M(a, 6);
                break;
              default:
                M(a, 2);
            }
        }
      }
      function $d(a, b) {
        var c = a.eb + Math.floor(Math.random() * a.kb);
        a.isActive() || (c *= 2);
        return c * b;
      }
      function M(a, b) {
        a.l.info("Error code " + b);
        if (2 == b) {
          var c = null;
          a.h && (c = null);
          var d = x(a.sb, a);
          c || (c = new O("//www.google.com/images/cleardot.gif"), w.location && "http" == w.location.protocol || bd(c, "https"), vc(c));
          Ad(c.toString(), d);
        } else
          I(2);
        a.H = 0;
        a.h && a.h.Ca(b);
        Yd(a);
        Wd(a);
      }
      n.sb = function(a) {
        a ? (this.l.info("Successfully pinged google.com"), I(2)) : (this.l.info("Failed to ping google.com"), I(1));
      };
      function Yd(a) {
        a.H = 0;
        a.pa = [];
        if (a.h) {
          var b = wd(a.i);
          if (0 != b.length || 0 != a.j.length)
            ya(a.pa, b), ya(a.pa, a.j), a.i.i.length = 0, xa(a.j), a.j.length = 0;
          a.h.Ba();
        }
      }
      function Rc(a, b, c) {
        var d = c instanceof O ? J(c) : new O(c);
        if ("" != d.g)
          b && (d.g = b + "." + d.g), cd(d, d.o);
        else {
          var e = w.location;
          d = e.protocol;
          b = b ? b + "." + e.hostname : e.hostname;
          e = +e.port;
          var h = new O(null);
          d && bd(h, d);
          b && (h.g = b);
          e && cd(h, e);
          c && (h.h = c);
          d = h;
        }
        c = a.D;
        b = a.Ga;
        c && b && N(d, c, b);
        N(d, "VER", a.ua);
        Xd(a, d);
        return d;
      }
      function zc(a, b, c) {
        if (b && !a.J)
          throw Error("Can't create secondary domain capable XhrIo object.");
        b = c && a.Ka && !a.ya ? new Q(new Cd({ rb: true })) : new Q(a.ya);
        b.Ra(a.J);
        return b;
      }
      n.isActive = function() {
        return !!this.h && this.h.isActive(this);
      };
      function de() {
      }
      n = de.prototype;
      n.Ea = function() {
      };
      n.Da = function() {
      };
      n.Ca = function() {
      };
      n.Ba = function() {
      };
      n.isActive = function() {
        return true;
      };
      n.Ya = function() {
      };
      function ee() {
        if (Ga && !(10 <= Number(Sa)))
          throw Error("Environmental error: no available transport.");
      }
      ee.prototype.g = function(a, b) {
        return new R(a, b);
      };
      function R(a, b) {
        C.call(this);
        this.g = new Vd(b);
        this.l = a;
        this.h = b && b.messageUrlParams || null;
        a = b && b.messageHeaders || null;
        b && b.clientProtocolHeaderRequired && (a ? a["X-Client-Protocol"] = "webchannel" : a = { "X-Client-Protocol": "webchannel" });
        this.g.s = a;
        a = b && b.initMessageHeaders || null;
        b && b.messageContentType && (a ? a["X-WebChannel-Content-Type"] = b.messageContentType : a = { "X-WebChannel-Content-Type": b.messageContentType });
        b && b.Fa && (a ? a["X-WebChannel-Client-Profile"] = b.Fa : a = { "X-WebChannel-Client-Profile": b.Fa });
        this.g.W = a;
        (a = b && b.fc) && !Aa(a) && (this.g.o = a);
        this.A = b && b.supportsCrossDomainXhr || false;
        this.v = b && b.sendRawJson || false;
        (b = b && b.httpSessionIdParam) && !Aa(b) && (this.g.D = b, a = this.h, null !== a && b in a && (a = this.h, b in a && delete a[b]));
        this.j = new fe(this);
      }
      y(R, C);
      R.prototype.m = function() {
        this.g.h = this.j;
        this.A && (this.g.J = true);
        var a = this.g, b = this.l, c = this.h || void 0;
        I(0);
        a.aa = b;
        a.qa = c || {};
        a.G = a.ca;
        a.I = Rc(a, null, a.aa);
        Vc(a);
      };
      R.prototype.close = function() {
        Wc(this.g);
      };
      R.prototype.u = function(a) {
        var b = this.g;
        if ("string" === typeof a) {
          var c = {};
          c.__data__ = a;
          a = c;
        } else
          this.v && (c = {}, c.__data__ = vb(a), a = c);
        b.j.push(new sd(b.ib++, a));
        3 == b.H && Vc(b);
      };
      R.prototype.O = function() {
        this.g.h = null;
        delete this.j;
        Wc(this.g);
        delete this.g;
        R.Z.O.call(this);
      };
      function ge(a) {
        lc.call(this);
        a.__headers__ && (this.headers = a.__headers__, this.statusCode = a.__status__, delete a.__headers__, delete a.__status__);
        var b = a.__sm__;
        if (b) {
          a: {
            for (var c in b) {
              a = c;
              break a;
            }
            a = void 0;
          }
          if (this.i = a)
            a = this.i, b = null !== b && a in b ? b[a] : void 0;
          this.data = b;
        } else
          this.data = a;
      }
      y(ge, lc);
      function he() {
        mc.call(this);
        this.status = 1;
      }
      y(he, mc);
      function fe(a) {
        this.g = a;
      }
      y(fe, de);
      fe.prototype.Ea = function() {
        D(this.g, "a");
      };
      fe.prototype.Da = function(a) {
        D(this.g, new ge(a));
      };
      fe.prototype.Ca = function(a) {
        D(this.g, new he(a));
      };
      fe.prototype.Ba = function() {
        D(this.g, "b");
      };
      function ie() {
        this.blockSize = -1;
      }
      ;
      function T() {
        this.blockSize = -1;
        this.blockSize = 64;
        this.g = Array(4);
        this.m = Array(this.blockSize);
        this.i = this.h = 0;
        this.reset();
      }
      y(T, ie);
      T.prototype.reset = function() {
        this.g[0] = 1732584193;
        this.g[1] = 4023233417;
        this.g[2] = 2562383102;
        this.g[3] = 271733878;
        this.i = this.h = 0;
      };
      function je(a, b, c) {
        c || (c = 0);
        var d = Array(16);
        if ("string" === typeof b)
          for (var e = 0; 16 > e; ++e)
            d[e] = b.charCodeAt(c++) | b.charCodeAt(c++) << 8 | b.charCodeAt(c++) << 16 | b.charCodeAt(c++) << 24;
        else
          for (e = 0; 16 > e; ++e)
            d[e] = b[c++] | b[c++] << 8 | b[c++] << 16 | b[c++] << 24;
        b = a.g[0];
        c = a.g[1];
        e = a.g[2];
        var h = a.g[3];
        var f = b + (h ^ c & (e ^ h)) + d[0] + 3614090360 & 4294967295;
        b = c + (f << 7 & 4294967295 | f >>> 25);
        f = h + (e ^ b & (c ^ e)) + d[1] + 3905402710 & 4294967295;
        h = b + (f << 12 & 4294967295 | f >>> 20);
        f = e + (c ^ h & (b ^ c)) + d[2] + 606105819 & 4294967295;
        e = h + (f << 17 & 4294967295 | f >>> 15);
        f = c + (b ^ e & (h ^ b)) + d[3] + 3250441966 & 4294967295;
        c = e + (f << 22 & 4294967295 | f >>> 10);
        f = b + (h ^ c & (e ^ h)) + d[4] + 4118548399 & 4294967295;
        b = c + (f << 7 & 4294967295 | f >>> 25);
        f = h + (e ^ b & (c ^ e)) + d[5] + 1200080426 & 4294967295;
        h = b + (f << 12 & 4294967295 | f >>> 20);
        f = e + (c ^ h & (b ^ c)) + d[6] + 2821735955 & 4294967295;
        e = h + (f << 17 & 4294967295 | f >>> 15);
        f = c + (b ^ e & (h ^ b)) + d[7] + 4249261313 & 4294967295;
        c = e + (f << 22 & 4294967295 | f >>> 10);
        f = b + (h ^ c & (e ^ h)) + d[8] + 1770035416 & 4294967295;
        b = c + (f << 7 & 4294967295 | f >>> 25);
        f = h + (e ^ b & (c ^ e)) + d[9] + 2336552879 & 4294967295;
        h = b + (f << 12 & 4294967295 | f >>> 20);
        f = e + (c ^ h & (b ^ c)) + d[10] + 4294925233 & 4294967295;
        e = h + (f << 17 & 4294967295 | f >>> 15);
        f = c + (b ^ e & (h ^ b)) + d[11] + 2304563134 & 4294967295;
        c = e + (f << 22 & 4294967295 | f >>> 10);
        f = b + (h ^ c & (e ^ h)) + d[12] + 1804603682 & 4294967295;
        b = c + (f << 7 & 4294967295 | f >>> 25);
        f = h + (e ^ b & (c ^ e)) + d[13] + 4254626195 & 4294967295;
        h = b + (f << 12 & 4294967295 | f >>> 20);
        f = e + (c ^ h & (b ^ c)) + d[14] + 2792965006 & 4294967295;
        e = h + (f << 17 & 4294967295 | f >>> 15);
        f = c + (b ^ e & (h ^ b)) + d[15] + 1236535329 & 4294967295;
        c = e + (f << 22 & 4294967295 | f >>> 10);
        f = b + (e ^ h & (c ^ e)) + d[1] + 4129170786 & 4294967295;
        b = c + (f << 5 & 4294967295 | f >>> 27);
        f = h + (c ^ e & (b ^ c)) + d[6] + 3225465664 & 4294967295;
        h = b + (f << 9 & 4294967295 | f >>> 23);
        f = e + (b ^ c & (h ^ b)) + d[11] + 643717713 & 4294967295;
        e = h + (f << 14 & 4294967295 | f >>> 18);
        f = c + (h ^ b & (e ^ h)) + d[0] + 3921069994 & 4294967295;
        c = e + (f << 20 & 4294967295 | f >>> 12);
        f = b + (e ^ h & (c ^ e)) + d[5] + 3593408605 & 4294967295;
        b = c + (f << 5 & 4294967295 | f >>> 27);
        f = h + (c ^ e & (b ^ c)) + d[10] + 38016083 & 4294967295;
        h = b + (f << 9 & 4294967295 | f >>> 23);
        f = e + (b ^ c & (h ^ b)) + d[15] + 3634488961 & 4294967295;
        e = h + (f << 14 & 4294967295 | f >>> 18);
        f = c + (h ^ b & (e ^ h)) + d[4] + 3889429448 & 4294967295;
        c = e + (f << 20 & 4294967295 | f >>> 12);
        f = b + (e ^ h & (c ^ e)) + d[9] + 568446438 & 4294967295;
        b = c + (f << 5 & 4294967295 | f >>> 27);
        f = h + (c ^ e & (b ^ c)) + d[14] + 3275163606 & 4294967295;
        h = b + (f << 9 & 4294967295 | f >>> 23);
        f = e + (b ^ c & (h ^ b)) + d[3] + 4107603335 & 4294967295;
        e = h + (f << 14 & 4294967295 | f >>> 18);
        f = c + (h ^ b & (e ^ h)) + d[8] + 1163531501 & 4294967295;
        c = e + (f << 20 & 4294967295 | f >>> 12);
        f = b + (e ^ h & (c ^ e)) + d[13] + 2850285829 & 4294967295;
        b = c + (f << 5 & 4294967295 | f >>> 27);
        f = h + (c ^ e & (b ^ c)) + d[2] + 4243563512 & 4294967295;
        h = b + (f << 9 & 4294967295 | f >>> 23);
        f = e + (b ^ c & (h ^ b)) + d[7] + 1735328473 & 4294967295;
        e = h + (f << 14 & 4294967295 | f >>> 18);
        f = c + (h ^ b & (e ^ h)) + d[12] + 2368359562 & 4294967295;
        c = e + (f << 20 & 4294967295 | f >>> 12);
        f = b + (c ^ e ^ h) + d[5] + 4294588738 & 4294967295;
        b = c + (f << 4 & 4294967295 | f >>> 28);
        f = h + (b ^ c ^ e) + d[8] + 2272392833 & 4294967295;
        h = b + (f << 11 & 4294967295 | f >>> 21);
        f = e + (h ^ b ^ c) + d[11] + 1839030562 & 4294967295;
        e = h + (f << 16 & 4294967295 | f >>> 16);
        f = c + (e ^ h ^ b) + d[14] + 4259657740 & 4294967295;
        c = e + (f << 23 & 4294967295 | f >>> 9);
        f = b + (c ^ e ^ h) + d[1] + 2763975236 & 4294967295;
        b = c + (f << 4 & 4294967295 | f >>> 28);
        f = h + (b ^ c ^ e) + d[4] + 1272893353 & 4294967295;
        h = b + (f << 11 & 4294967295 | f >>> 21);
        f = e + (h ^ b ^ c) + d[7] + 4139469664 & 4294967295;
        e = h + (f << 16 & 4294967295 | f >>> 16);
        f = c + (e ^ h ^ b) + d[10] + 3200236656 & 4294967295;
        c = e + (f << 23 & 4294967295 | f >>> 9);
        f = b + (c ^ e ^ h) + d[13] + 681279174 & 4294967295;
        b = c + (f << 4 & 4294967295 | f >>> 28);
        f = h + (b ^ c ^ e) + d[0] + 3936430074 & 4294967295;
        h = b + (f << 11 & 4294967295 | f >>> 21);
        f = e + (h ^ b ^ c) + d[3] + 3572445317 & 4294967295;
        e = h + (f << 16 & 4294967295 | f >>> 16);
        f = c + (e ^ h ^ b) + d[6] + 76029189 & 4294967295;
        c = e + (f << 23 & 4294967295 | f >>> 9);
        f = b + (c ^ e ^ h) + d[9] + 3654602809 & 4294967295;
        b = c + (f << 4 & 4294967295 | f >>> 28);
        f = h + (b ^ c ^ e) + d[12] + 3873151461 & 4294967295;
        h = b + (f << 11 & 4294967295 | f >>> 21);
        f = e + (h ^ b ^ c) + d[15] + 530742520 & 4294967295;
        e = h + (f << 16 & 4294967295 | f >>> 16);
        f = c + (e ^ h ^ b) + d[2] + 3299628645 & 4294967295;
        c = e + (f << 23 & 4294967295 | f >>> 9);
        f = b + (e ^ (c | ~h)) + d[0] + 4096336452 & 4294967295;
        b = c + (f << 6 & 4294967295 | f >>> 26);
        f = h + (c ^ (b | ~e)) + d[7] + 1126891415 & 4294967295;
        h = b + (f << 10 & 4294967295 | f >>> 22);
        f = e + (b ^ (h | ~c)) + d[14] + 2878612391 & 4294967295;
        e = h + (f << 15 & 4294967295 | f >>> 17);
        f = c + (h ^ (e | ~b)) + d[5] + 4237533241 & 4294967295;
        c = e + (f << 21 & 4294967295 | f >>> 11);
        f = b + (e ^ (c | ~h)) + d[12] + 1700485571 & 4294967295;
        b = c + (f << 6 & 4294967295 | f >>> 26);
        f = h + (c ^ (b | ~e)) + d[3] + 2399980690 & 4294967295;
        h = b + (f << 10 & 4294967295 | f >>> 22);
        f = e + (b ^ (h | ~c)) + d[10] + 4293915773 & 4294967295;
        e = h + (f << 15 & 4294967295 | f >>> 17);
        f = c + (h ^ (e | ~b)) + d[1] + 2240044497 & 4294967295;
        c = e + (f << 21 & 4294967295 | f >>> 11);
        f = b + (e ^ (c | ~h)) + d[8] + 1873313359 & 4294967295;
        b = c + (f << 6 & 4294967295 | f >>> 26);
        f = h + (c ^ (b | ~e)) + d[15] + 4264355552 & 4294967295;
        h = b + (f << 10 & 4294967295 | f >>> 22);
        f = e + (b ^ (h | ~c)) + d[6] + 2734768916 & 4294967295;
        e = h + (f << 15 & 4294967295 | f >>> 17);
        f = c + (h ^ (e | ~b)) + d[13] + 1309151649 & 4294967295;
        c = e + (f << 21 & 4294967295 | f >>> 11);
        f = b + (e ^ (c | ~h)) + d[4] + 4149444226 & 4294967295;
        b = c + (f << 6 & 4294967295 | f >>> 26);
        f = h + (c ^ (b | ~e)) + d[11] + 3174756917 & 4294967295;
        h = b + (f << 10 & 4294967295 | f >>> 22);
        f = e + (b ^ (h | ~c)) + d[2] + 718787259 & 4294967295;
        e = h + (f << 15 & 4294967295 | f >>> 17);
        f = c + (h ^ (e | ~b)) + d[9] + 3951481745 & 4294967295;
        a.g[0] = a.g[0] + b & 4294967295;
        a.g[1] = a.g[1] + (e + (f << 21 & 4294967295 | f >>> 11)) & 4294967295;
        a.g[2] = a.g[2] + e & 4294967295;
        a.g[3] = a.g[3] + h & 4294967295;
      }
      T.prototype.j = function(a, b) {
        void 0 === b && (b = a.length);
        for (var c = b - this.blockSize, d = this.m, e = this.h, h = 0; h < b; ) {
          if (0 == e)
            for (; h <= c; )
              je(this, a, h), h += this.blockSize;
          if ("string" === typeof a)
            for (; h < b; ) {
              if (d[e++] = a.charCodeAt(h++), e == this.blockSize) {
                je(this, d);
                e = 0;
                break;
              }
            }
          else
            for (; h < b; )
              if (d[e++] = a[h++], e == this.blockSize) {
                je(this, d);
                e = 0;
                break;
              }
        }
        this.h = e;
        this.i += b;
      };
      T.prototype.l = function() {
        var a = Array((56 > this.h ? this.blockSize : 2 * this.blockSize) - this.h);
        a[0] = 128;
        for (var b = 1; b < a.length - 8; ++b)
          a[b] = 0;
        var c = 8 * this.i;
        for (b = a.length - 8; b < a.length; ++b)
          a[b] = c & 255, c /= 256;
        this.j(a);
        a = Array(16);
        for (b = c = 0; 4 > b; ++b)
          for (var d = 0; 32 > d; d += 8)
            a[c++] = this.g[b] >>> d & 255;
        return a;
      };
      function U(a, b) {
        this.h = b;
        for (var c = [], d = true, e = a.length - 1; 0 <= e; e--) {
          var h = a[e] | 0;
          d && h == b || (c[e] = h, d = false);
        }
        this.g = c;
      }
      var Ea = {};
      function ke(a) {
        return -128 <= a && 128 > a ? Da(a, function(b) {
          return new U([b | 0], 0 > b ? -1 : 0);
        }) : new U([a | 0], 0 > a ? -1 : 0);
      }
      function V(a) {
        if (isNaN(a) || !isFinite(a))
          return le;
        if (0 > a)
          return W(V(-a));
        for (var b = [], c = 1, d = 0; a >= c; d++)
          b[d] = a / c | 0, c *= me;
        return new U(b, 0);
      }
      function ne(a, b) {
        if (0 == a.length)
          throw Error("number format error: empty string");
        b = b || 10;
        if (2 > b || 36 < b)
          throw Error("radix out of range: " + b);
        if ("-" == a.charAt(0))
          return W(ne(a.substring(1), b));
        if (0 <= a.indexOf("-"))
          throw Error('number format error: interior "-" character');
        for (var c = V(Math.pow(b, 8)), d = le, e = 0; e < a.length; e += 8) {
          var h = Math.min(8, a.length - e), f = parseInt(a.substring(e, e + h), b);
          8 > h ? (h = V(Math.pow(b, h)), d = d.S(h).add(V(f))) : (d = d.S(c), d = d.add(V(f)));
        }
        return d;
      }
      var me = 4294967296, le = ke(0), oe = ke(1), pe = ke(16777216);
      n = U.prototype;
      n.ga = function() {
        if (X(this))
          return -W(this).ga();
        for (var a = 0, b = 1, c = 0; c < this.g.length; c++) {
          var d = this.F(c);
          a += (0 <= d ? d : me + d) * b;
          b *= me;
        }
        return a;
      };
      n.toString = function(a) {
        a = a || 10;
        if (2 > a || 36 < a)
          throw Error("radix out of range: " + a);
        if (Y(this))
          return "0";
        if (X(this))
          return "-" + W(this).toString(a);
        for (var b = V(Math.pow(a, 6)), c = this, d = ""; ; ) {
          var e = qe(c, b).g;
          c = re(c, e.S(b));
          var h = ((0 < c.g.length ? c.g[0] : c.h) >>> 0).toString(a);
          c = e;
          if (Y(c))
            return h + d;
          for (; 6 > h.length; )
            h = "0" + h;
          d = h + d;
        }
      };
      n.F = function(a) {
        return 0 > a ? 0 : a < this.g.length ? this.g[a] : this.h;
      };
      function Y(a) {
        if (0 != a.h)
          return false;
        for (var b = 0; b < a.g.length; b++)
          if (0 != a.g[b])
            return false;
        return true;
      }
      function X(a) {
        return -1 == a.h;
      }
      n.$ = function(a) {
        a = re(this, a);
        return X(a) ? -1 : Y(a) ? 0 : 1;
      };
      function W(a) {
        for (var b = a.g.length, c = [], d = 0; d < b; d++)
          c[d] = ~a.g[d];
        return new U(c, ~a.h).add(oe);
      }
      n.abs = function() {
        return X(this) ? W(this) : this;
      };
      n.add = function(a) {
        for (var b = Math.max(this.g.length, a.g.length), c = [], d = 0, e = 0; e <= b; e++) {
          var h = d + (this.F(e) & 65535) + (a.F(e) & 65535), f = (h >>> 16) + (this.F(e) >>> 16) + (a.F(e) >>> 16);
          d = f >>> 16;
          h &= 65535;
          f &= 65535;
          c[e] = f << 16 | h;
        }
        return new U(c, c[c.length - 1] & -2147483648 ? -1 : 0);
      };
      function re(a, b) {
        return a.add(W(b));
      }
      n.S = function(a) {
        if (Y(this) || Y(a))
          return le;
        if (X(this))
          return X(a) ? W(this).S(W(a)) : W(W(this).S(a));
        if (X(a))
          return W(this.S(W(a)));
        if (0 > this.$(pe) && 0 > a.$(pe))
          return V(this.ga() * a.ga());
        for (var b = this.g.length + a.g.length, c = [], d = 0; d < 2 * b; d++)
          c[d] = 0;
        for (d = 0; d < this.g.length; d++)
          for (var e = 0; e < a.g.length; e++) {
            var h = this.F(d) >>> 16, f = this.F(d) & 65535, k = a.F(e) >>> 16, l = a.F(e) & 65535;
            c[2 * d + 2 * e] += f * l;
            se(c, 2 * d + 2 * e);
            c[2 * d + 2 * e + 1] += h * l;
            se(c, 2 * d + 2 * e + 1);
            c[2 * d + 2 * e + 1] += f * k;
            se(c, 2 * d + 2 * e + 1);
            c[2 * d + 2 * e + 2] += h * k;
            se(c, 2 * d + 2 * e + 2);
          }
        for (d = 0; d < b; d++)
          c[d] = c[2 * d + 1] << 16 | c[2 * d];
        for (d = b; d < 2 * b; d++)
          c[d] = 0;
        return new U(c, 0);
      };
      function se(a, b) {
        for (; (a[b] & 65535) != a[b]; )
          a[b + 1] += a[b] >>> 16, a[b] &= 65535, b++;
      }
      function te(a, b) {
        this.g = a;
        this.h = b;
      }
      function qe(a, b) {
        if (Y(b))
          throw Error("division by zero");
        if (Y(a))
          return new te(le, le);
        if (X(a))
          return b = qe(W(a), b), new te(W(b.g), W(b.h));
        if (X(b))
          return b = qe(a, W(b)), new te(W(b.g), b.h);
        if (30 < a.g.length) {
          if (X(a) || X(b))
            throw Error("slowDivide_ only works with positive integers.");
          for (var c = oe, d = b; 0 >= d.$(a); )
            c = ue(c), d = ue(d);
          var e = ve(c, 1), h = ve(d, 1);
          d = ve(d, 2);
          for (c = ve(c, 2); !Y(d); ) {
            var f = h.add(d);
            0 >= f.$(a) && (e = e.add(c), h = f);
            d = ve(d, 1);
            c = ve(c, 1);
          }
          b = re(a, e.S(b));
          return new te(e, b);
        }
        for (e = le; 0 <= a.$(b); ) {
          c = Math.max(
            1,
            Math.floor(a.ga() / b.ga())
          );
          d = Math.ceil(Math.log(c) / Math.LN2);
          d = 48 >= d ? 1 : Math.pow(2, d - 48);
          h = V(c);
          for (f = h.S(b); X(f) || 0 < f.$(a); )
            c -= d, h = V(c), f = h.S(b);
          Y(h) && (h = oe);
          e = e.add(h);
          a = re(a, f);
        }
        return new te(e, a);
      }
      n.jb = function(a) {
        return qe(this, a).h;
      };
      n.and = function(a) {
        for (var b = Math.max(this.g.length, a.g.length), c = [], d = 0; d < b; d++)
          c[d] = this.F(d) & a.F(d);
        return new U(c, this.h & a.h);
      };
      n.or = function(a) {
        for (var b = Math.max(this.g.length, a.g.length), c = [], d = 0; d < b; d++)
          c[d] = this.F(d) | a.F(d);
        return new U(c, this.h | a.h);
      };
      n.xor = function(a) {
        for (var b = Math.max(this.g.length, a.g.length), c = [], d = 0; d < b; d++)
          c[d] = this.F(d) ^ a.F(d);
        return new U(c, this.h ^ a.h);
      };
      function ue(a) {
        for (var b = a.g.length + 1, c = [], d = 0; d < b; d++)
          c[d] = a.F(d) << 1 | a.F(d - 1) >>> 31;
        return new U(c, a.h);
      }
      function ve(a, b) {
        var c = b >> 5;
        b %= 32;
        for (var d = a.g.length - c, e = [], h = 0; h < d; h++)
          e[h] = 0 < b ? a.F(h + c) >>> b | a.F(h + c + 1) << 32 - b : a.F(h + c);
        return new U(e, a.h);
      }
      ;
      ee.prototype.createWebChannel = ee.prototype.g;
      R.prototype.send = R.prototype.u;
      R.prototype.open = R.prototype.m;
      R.prototype.close = R.prototype.close;
      fc.NO_ERROR = 0;
      fc.TIMEOUT = 8;
      fc.HTTP_ERROR = 6;
      gc.COMPLETE = "complete";
      jc.EventType = kc;
      kc.OPEN = "a";
      kc.CLOSE = "b";
      kc.ERROR = "c";
      kc.MESSAGE = "d";
      C.prototype.listen = C.prototype.P;
      Q.prototype.listenOnce = Q.prototype.R;
      Q.prototype.getLastError = Q.prototype.Va;
      Q.prototype.getLastErrorCode = Q.prototype.La;
      Q.prototype.getStatus = Q.prototype.fa;
      Q.prototype.getResponseJson = Q.prototype.Za;
      Q.prototype.getResponseText = Q.prototype.ma;
      Q.prototype.send = Q.prototype.ja;
      Q.prototype.setWithCredentials = Q.prototype.Ra;
      T.prototype.digest = T.prototype.l;
      T.prototype.reset = T.prototype.reset;
      T.prototype.update = T.prototype.j;
      U.prototype.add = U.prototype.add;
      U.prototype.multiply = U.prototype.S;
      U.prototype.modulo = U.prototype.jb;
      U.prototype.compare = U.prototype.$;
      U.prototype.toNumber = U.prototype.ga;
      U.prototype.toString = U.prototype.toString;
      U.prototype.getBits = U.prototype.F;
      U.fromNumber = V;
      U.fromString = ne;
      module.exports.createWebChannelTransport = function() {
        return new ee();
      };
      module.exports.getStatEventTarget = function() {
        return $b();
      };
      module.exports.ErrorCode = fc;
      module.exports.EventType = gc;
      module.exports.Event = G;
      module.exports.Stat = { Ab: 0, Db: 1, Eb: 2, Xb: 3, bc: 4, Zb: 5, $b: 6, Yb: 7, Wb: 8, ac: 9, PROXY: 10, NOPROXY: 11, Ub: 12, Qb: 13, Rb: 14, Pb: 15, Sb: 16, Tb: 17, wb: 18, vb: 19, xb: 20 };
      module.exports.FetchXmlHttpFactory = Cd;
      module.exports.WebChannel = jc;
      module.exports.XhrIo = Q;
      module.exports.Md5 = T;
      module.exports.Integer = U;
    }).apply(typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }
});

// node_modules/@firebase/firestore/dist/index.cjs.js
var require_index_cjs9 = __commonJS({
  "node_modules/@firebase/firestore/dist/index.cjs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var app = require_index_cjs4();
    var component = require_index_cjs2();
    var logger = require_index_cjs3();
    var util = require_index_cjs();
    var webchannelWrapper = require_dist();
    var b = "@firebase/firestore";
    var V = class {
      constructor(t) {
        this.uid = t;
      }
      isAuthenticated() {
        return null != this.uid;
      }
      /**
       * Returns a key representing this user, suitable for inclusion in a
       * dictionary.
       */
      toKey() {
        return this.isAuthenticated() ? "uid:" + this.uid : "anonymous-user";
      }
      isEqual(t) {
        return t.uid === this.uid;
      }
    };
    V.UNAUTHENTICATED = new V(null), // TODO(mikelehen): Look into getting a proper uid-equivalent for
    // non-FirebaseAuth providers.
    V.GOOGLE_CREDENTIALS = new V("google-credentials-uid"), V.FIRST_PARTY = new V("first-party-uid"), V.MOCK_USER = new V("mock-user");
    var S = "9.23.0";
    var D = new logger.Logger("@firebase/firestore");
    function C() {
      return D.logLevel;
    }
    function x(t) {
      D.setLogLevel(t);
    }
    function N(t, ...e) {
      if (D.logLevel <= logger.LogLevel.DEBUG) {
        const n = e.map($);
        D.debug(`Firestore (${S}): ${t}`, ...n);
      }
    }
    function k(t, ...e) {
      if (D.logLevel <= logger.LogLevel.ERROR) {
        const n = e.map($);
        D.error(`Firestore (${S}): ${t}`, ...n);
      }
    }
    function M(t, ...e) {
      if (D.logLevel <= logger.LogLevel.WARN) {
        const n = e.map($);
        D.warn(`Firestore (${S}): ${t}`, ...n);
      }
    }
    function $(t) {
      if ("string" == typeof t)
        return t;
      try {
        return e = t, JSON.stringify(e);
      } catch (e2) {
        return t;
      }
      var e;
    }
    function O(t = "Unexpected state") {
      const e = `FIRESTORE (${S}) INTERNAL ASSERTION FAILED: ` + t;
      throw k(e), new Error(e);
    }
    function F(t, e) {
      t || O();
    }
    function B(t, e) {
      t || O();
    }
    function L(t, e) {
      return t;
    }
    var q = {
      // Causes are copied from:
      // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
      /** Not an error; returned on success. */
      OK: "ok",
      /** The operation was cancelled (typically by the caller). */
      CANCELLED: "cancelled",
      /** Unknown error or an error from a different error domain. */
      UNKNOWN: "unknown",
      /**
       * Client specified an invalid argument. Note that this differs from
       * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
       * problematic regardless of the state of the system (e.g., a malformed file
       * name).
       */
      INVALID_ARGUMENT: "invalid-argument",
      /**
       * Deadline expired before operation could complete. For operations that
       * change the state of the system, this error may be returned even if the
       * operation has completed successfully. For example, a successful response
       * from a server could have been delayed long enough for the deadline to
       * expire.
       */
      DEADLINE_EXCEEDED: "deadline-exceeded",
      /** Some requested entity (e.g., file or directory) was not found. */
      NOT_FOUND: "not-found",
      /**
       * Some entity that we attempted to create (e.g., file or directory) already
       * exists.
       */
      ALREADY_EXISTS: "already-exists",
      /**
       * The caller does not have permission to execute the specified operation.
       * PERMISSION_DENIED must not be used for rejections caused by exhausting
       * some resource (use RESOURCE_EXHAUSTED instead for those errors).
       * PERMISSION_DENIED must not be used if the caller can not be identified
       * (use UNAUTHENTICATED instead for those errors).
       */
      PERMISSION_DENIED: "permission-denied",
      /**
       * The request does not have valid authentication credentials for the
       * operation.
       */
      UNAUTHENTICATED: "unauthenticated",
      /**
       * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
       * entire file system is out of space.
       */
      RESOURCE_EXHAUSTED: "resource-exhausted",
      /**
       * Operation was rejected because the system is not in a state required for
       * the operation's execution. For example, directory to be deleted may be
       * non-empty, an rmdir operation is applied to a non-directory, etc.
       *
       * A litmus test that may help a service implementor in deciding
       * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
       *  (a) Use UNAVAILABLE if the client can retry just the failing call.
       *  (b) Use ABORTED if the client should retry at a higher-level
       *      (e.g., restarting a read-modify-write sequence).
       *  (c) Use FAILED_PRECONDITION if the client should not retry until
       *      the system state has been explicitly fixed. E.g., if an "rmdir"
       *      fails because the directory is non-empty, FAILED_PRECONDITION
       *      should be returned since the client should not retry unless
       *      they have first fixed up the directory by deleting files from it.
       *  (d) Use FAILED_PRECONDITION if the client performs conditional
       *      REST Get/Update/Delete on a resource and the resource on the
       *      server does not match the condition. E.g., conflicting
       *      read-modify-write on the same resource.
       */
      FAILED_PRECONDITION: "failed-precondition",
      /**
       * The operation was aborted, typically due to a concurrency issue like
       * sequencer check failures, transaction aborts, etc.
       *
       * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
       * and UNAVAILABLE.
       */
      ABORTED: "aborted",
      /**
       * Operation was attempted past the valid range. E.g., seeking or reading
       * past end of file.
       *
       * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
       * if the system state changes. For example, a 32-bit file system will
       * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
       * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
       * an offset past the current file size.
       *
       * There is a fair bit of overlap between FAILED_PRECONDITION and
       * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
       * when it applies so that callers who are iterating through a space can
       * easily look for an OUT_OF_RANGE error to detect when they are done.
       */
      OUT_OF_RANGE: "out-of-range",
      /** Operation is not implemented or not supported/enabled in this service. */
      UNIMPLEMENTED: "unimplemented",
      /**
       * Internal errors. Means some invariants expected by underlying System has
       * been broken. If you see one of these errors, Something is very broken.
       */
      INTERNAL: "internal",
      /**
       * The service is currently unavailable. This is a most likely a transient
       * condition and may be corrected by retrying with a backoff.
       *
       * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
       * and UNAVAILABLE.
       */
      UNAVAILABLE: "unavailable",
      /** Unrecoverable data loss or corruption. */
      DATA_LOSS: "data-loss"
    };
    var U = class extends util.FirebaseError {
      /** @hideconstructor */
      constructor(t, e) {
        super(t, e), this.code = t, this.message = e, // HACK: We write a toString property directly because Error is not a real
        // class and so inheritance does not work correctly. We could alternatively
        // do the same "back-door inheritance" trick that FirebaseError does.
        this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;
      }
    };
    var K = class {
      constructor() {
        this.promise = new Promise((t, e) => {
          this.resolve = t, this.reject = e;
        });
      }
    };
    var G = class {
      constructor(t, e) {
        this.user = e, this.type = "OAuth", this.headers = /* @__PURE__ */ new Map(), this.headers.set("Authorization", `Bearer ${t}`);
      }
    };
    var Q = class {
      getToken() {
        return Promise.resolve(null);
      }
      invalidateToken() {
      }
      start(t, e) {
        t.enqueueRetryable(() => e(V.UNAUTHENTICATED));
      }
      shutdown() {
      }
    };
    var j = class {
      constructor(t) {
        this.token = t, /**
         * Stores the listener registered with setChangeListener()
         * This isn't actually necessary since the UID never changes, but we use this
         * to verify the listen contract is adhered to in tests.
         */
        this.changeListener = null;
      }
      getToken() {
        return Promise.resolve(this.token);
      }
      invalidateToken() {
      }
      start(t, e) {
        this.changeListener = e, // Fire with initial user.
        t.enqueueRetryable(() => e(this.token.user));
      }
      shutdown() {
        this.changeListener = null;
      }
    };
    var z = class {
      constructor(t) {
        this.t = t, /** Tracks the current User. */
        this.currentUser = V.UNAUTHENTICATED, /**
         * Counter used to detect if the token changed while a getToken request was
         * outstanding.
         */
        this.i = 0, this.forceRefresh = false, this.auth = null;
      }
      start(t, e) {
        let n = this.i;
        const s = (t2) => this.i !== n ? (n = this.i, e(t2)) : Promise.resolve();
        let i = new K();
        this.o = () => {
          this.i++, this.currentUser = this.u(), i.resolve(), i = new K(), t.enqueueRetryable(() => s(this.currentUser));
        };
        const r = () => {
          const e2 = i;
          t.enqueueRetryable(async () => {
            await e2.promise, await s(this.currentUser);
          });
        }, o = (t2) => {
          N("FirebaseAuthCredentialsProvider", "Auth detected"), this.auth = t2, this.auth.addAuthTokenListener(this.o), r();
        };
        this.t.onInit((t2) => o(t2)), // Our users can initialize Auth right after Firestore, so we give it
        // a chance to register itself with the component framework before we
        // determine whether to start up in unauthenticated mode.
        setTimeout(() => {
          if (!this.auth) {
            const t2 = this.t.getImmediate({
              optional: true
            });
            t2 ? o(t2) : (
              // If auth is still not available, proceed with `null` user
              (N("FirebaseAuthCredentialsProvider", "Auth not yet detected"), i.resolve(), i = new K())
            );
          }
        }, 0), r();
      }
      getToken() {
        const t = this.i, e = this.forceRefresh;
        return this.forceRefresh = false, this.auth ? this.auth.getToken(e).then((e2) => (
          // Cancel the request since the token changed while the request was
          // outstanding so the response is potentially for a previous user (which
          // user, we can't be sure).
          this.i !== t ? (N("FirebaseAuthCredentialsProvider", "getToken aborted due to token change."), this.getToken()) : e2 ? (F("string" == typeof e2.accessToken), new G(e2.accessToken, this.currentUser)) : null
        )) : Promise.resolve(null);
      }
      invalidateToken() {
        this.forceRefresh = true;
      }
      shutdown() {
        this.auth && this.auth.removeAuthTokenListener(this.o);
      }
      // Auth.getUid() can return null even with a user logged in. It is because
      // getUid() is synchronous, but the auth code populating Uid is asynchronous.
      // This method should only be called in the AuthTokenListener callback
      // to guarantee to get the actual user.
      u() {
        const t = this.auth && this.auth.getUid();
        return F(null === t || "string" == typeof t), new V(t);
      }
    };
    var W = class {
      constructor(t, e, n) {
        this.h = t, this.l = e, this.m = n, this.type = "FirstParty", this.user = V.FIRST_PARTY, this.g = /* @__PURE__ */ new Map();
      }
      /**
       * Gets an authorization token, using a provided factory function, or return
       * null.
       */
      p() {
        return this.m ? this.m() : null;
      }
      get headers() {
        this.g.set("X-Goog-AuthUser", this.h);
        const t = this.p();
        return t && this.g.set("Authorization", t), this.l && this.g.set("X-Goog-Iam-Authorization-Token", this.l), this.g;
      }
    };
    var H = class {
      constructor(t, e, n) {
        this.h = t, this.l = e, this.m = n;
      }
      getToken() {
        return Promise.resolve(new W(this.h, this.l, this.m));
      }
      start(t, e) {
        t.enqueueRetryable(() => e(V.FIRST_PARTY));
      }
      shutdown() {
      }
      invalidateToken() {
      }
    };
    var J = class {
      constructor(t) {
        this.value = t, this.type = "AppCheck", this.headers = /* @__PURE__ */ new Map(), t && t.length > 0 && this.headers.set("x-firebase-appcheck", this.value);
      }
    };
    var Y = class {
      constructor(t) {
        this.I = t, this.forceRefresh = false, this.appCheck = null, this.T = null;
      }
      start(t, e) {
        const n = (t2) => {
          null != t2.error && N("FirebaseAppCheckTokenProvider", `Error getting App Check token; using placeholder token instead. Error: ${t2.error.message}`);
          const n2 = t2.token !== this.T;
          return this.T = t2.token, N("FirebaseAppCheckTokenProvider", `Received ${n2 ? "new" : "existing"} token.`), n2 ? e(t2.token) : Promise.resolve();
        };
        this.o = (e2) => {
          t.enqueueRetryable(() => n(e2));
        };
        const s = (t2) => {
          N("FirebaseAppCheckTokenProvider", "AppCheck detected"), this.appCheck = t2, this.appCheck.addTokenListener(this.o);
        };
        this.I.onInit((t2) => s(t2)), // Our users can initialize AppCheck after Firestore, so we give it
        // a chance to register itself with the component framework.
        setTimeout(() => {
          if (!this.appCheck) {
            const t2 = this.I.getImmediate({
              optional: true
            });
            t2 ? s(t2) : (
              // If AppCheck is still not available, proceed without it.
              N("FirebaseAppCheckTokenProvider", "AppCheck not yet detected")
            );
          }
        }, 0);
      }
      getToken() {
        const t = this.forceRefresh;
        return this.forceRefresh = false, this.appCheck ? this.appCheck.getToken(t).then((t2) => t2 ? (F("string" == typeof t2.token), this.T = t2.token, new J(t2.token)) : null) : Promise.resolve(null);
      }
      invalidateToken() {
        this.forceRefresh = true;
      }
      shutdown() {
        this.appCheck && this.appCheck.removeTokenListener(this.o);
      }
    };
    var X = class {
      getToken() {
        return Promise.resolve(new J(""));
      }
      invalidateToken() {
      }
      start(t, e) {
      }
      shutdown() {
      }
    };
    function Z(t) {
      const e = (
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        "undefined" != typeof self && (self.crypto || self.msCrypto)
      ), n = new Uint8Array(t);
      if (e && "function" == typeof e.getRandomValues)
        e.getRandomValues(n);
      else
        for (let e2 = 0; e2 < t; e2++)
          n[e2] = Math.floor(256 * Math.random());
      return n;
    }
    var tt = class {
      static A() {
        const t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", e = Math.floor(256 / t.length) * t.length;
        let n = "";
        for (; n.length < 20; ) {
          const s = Z(40);
          for (let i = 0; i < s.length; ++i)
            n.length < 20 && s[i] < e && (n += t.charAt(s[i] % t.length));
        }
        return n;
      }
    };
    function et(t, e) {
      return t < e ? -1 : t > e ? 1 : 0;
    }
    function nt(t, e, n) {
      return t.length === e.length && t.every((t2, s) => n(t2, e[s]));
    }
    function st(t) {
      return t + "\0";
    }
    var it = class _it {
      /**
       * Creates a new timestamp.
       *
       * @param seconds - The number of seconds of UTC time since Unix epoch
       *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
       *     9999-12-31T23:59:59Z inclusive.
       * @param nanoseconds - The non-negative fractions of a second at nanosecond
       *     resolution. Negative second values with fractions must still have
       *     non-negative nanoseconds values that count forward in time. Must be
       *     from 0 to 999,999,999 inclusive.
       */
      constructor(t, e) {
        if (this.seconds = t, this.nanoseconds = e, e < 0)
          throw new U(q.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
        if (e >= 1e9)
          throw new U(q.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
        if (t < -62135596800)
          throw new U(q.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
        if (t >= 253402300800)
          throw new U(q.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
      }
      /**
       * Creates a new timestamp with the current date, with millisecond precision.
       *
       * @returns a new timestamp representing the current date.
       */
      static now() {
        return _it.fromMillis(Date.now());
      }
      /**
       * Creates a new timestamp from the given date.
       *
       * @param date - The date to initialize the `Timestamp` from.
       * @returns A new `Timestamp` representing the same point in time as the given
       *     date.
       */
      static fromDate(t) {
        return _it.fromMillis(t.getTime());
      }
      /**
       * Creates a new timestamp from the given number of milliseconds.
       *
       * @param milliseconds - Number of milliseconds since Unix epoch
       *     1970-01-01T00:00:00Z.
       * @returns A new `Timestamp` representing the same point in time as the given
       *     number of milliseconds.
       */
      static fromMillis(t) {
        const e = Math.floor(t / 1e3), n = Math.floor(1e6 * (t - 1e3 * e));
        return new _it(e, n);
      }
      /**
       * Converts a `Timestamp` to a JavaScript `Date` object. This conversion
       * causes a loss of precision since `Date` objects only support millisecond
       * precision.
       *
       * @returns JavaScript `Date` object representing the same point in time as
       *     this `Timestamp`, with millisecond precision.
       */
      toDate() {
        return new Date(this.toMillis());
      }
      /**
       * Converts a `Timestamp` to a numeric timestamp (in milliseconds since
       * epoch). This operation causes a loss of precision.
       *
       * @returns The point in time corresponding to this timestamp, represented as
       *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
       */
      toMillis() {
        return 1e3 * this.seconds + this.nanoseconds / 1e6;
      }
      _compareTo(t) {
        return this.seconds === t.seconds ? et(this.nanoseconds, t.nanoseconds) : et(this.seconds, t.seconds);
      }
      /**
       * Returns true if this `Timestamp` is equal to the provided one.
       *
       * @param other - The `Timestamp` to compare against.
       * @returns true if this `Timestamp` is equal to the provided one.
       */
      isEqual(t) {
        return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;
      }
      /** Returns a textual representation of this `Timestamp`. */
      toString() {
        return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
      }
      /** Returns a JSON-serializable representation of this `Timestamp`. */
      toJSON() {
        return {
          seconds: this.seconds,
          nanoseconds: this.nanoseconds
        };
      }
      /**
       * Converts this object to a primitive string, which allows `Timestamp` objects
       * to be compared using the `>`, `<=`, `>=` and `>` operators.
       */
      valueOf() {
        const t = this.seconds - -62135596800;
        return String(t).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
      }
    };
    var rt = class _rt {
      constructor(t) {
        this.timestamp = t;
      }
      static fromTimestamp(t) {
        return new _rt(t);
      }
      static min() {
        return new _rt(new it(0, 0));
      }
      static max() {
        return new _rt(new it(253402300799, 999999999));
      }
      compareTo(t) {
        return this.timestamp._compareTo(t.timestamp);
      }
      isEqual(t) {
        return this.timestamp.isEqual(t.timestamp);
      }
      /** Returns a number representation of the version for use in spec tests. */
      toMicroseconds() {
        return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
      }
      toString() {
        return "SnapshotVersion(" + this.timestamp.toString() + ")";
      }
      toTimestamp() {
        return this.timestamp;
      }
    };
    var ot = class _ot {
      constructor(t, e, n) {
        void 0 === e ? e = 0 : e > t.length && O(), void 0 === n ? n = t.length - e : n > t.length - e && O(), this.segments = t, this.offset = e, this.len = n;
      }
      get length() {
        return this.len;
      }
      isEqual(t) {
        return 0 === _ot.comparator(this, t);
      }
      child(t) {
        const e = this.segments.slice(this.offset, this.limit());
        return t instanceof _ot ? t.forEach((t2) => {
          e.push(t2);
        }) : e.push(t), this.construct(e);
      }
      /** The index of one past the last segment of the path. */
      limit() {
        return this.offset + this.length;
      }
      popFirst(t) {
        return t = void 0 === t ? 1 : t, this.construct(this.segments, this.offset + t, this.length - t);
      }
      popLast() {
        return this.construct(this.segments, this.offset, this.length - 1);
      }
      firstSegment() {
        return this.segments[this.offset];
      }
      lastSegment() {
        return this.get(this.length - 1);
      }
      get(t) {
        return this.segments[this.offset + t];
      }
      isEmpty() {
        return 0 === this.length;
      }
      isPrefixOf(t) {
        if (t.length < this.length)
          return false;
        for (let e = 0; e < this.length; e++)
          if (this.get(e) !== t.get(e))
            return false;
        return true;
      }
      isImmediateParentOf(t) {
        if (this.length + 1 !== t.length)
          return false;
        for (let e = 0; e < this.length; e++)
          if (this.get(e) !== t.get(e))
            return false;
        return true;
      }
      forEach(t) {
        for (let e = this.offset, n = this.limit(); e < n; e++)
          t(this.segments[e]);
      }
      toArray() {
        return this.segments.slice(this.offset, this.limit());
      }
      static comparator(t, e) {
        const n = Math.min(t.length, e.length);
        for (let s = 0; s < n; s++) {
          const n2 = t.get(s), i = e.get(s);
          if (n2 < i)
            return -1;
          if (n2 > i)
            return 1;
        }
        return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;
      }
    };
    var ut = class _ut extends ot {
      construct(t, e, n) {
        return new _ut(t, e, n);
      }
      canonicalString() {
        return this.toArray().join("/");
      }
      toString() {
        return this.canonicalString();
      }
      /**
       * Creates a resource path from the given slash-delimited string. If multiple
       * arguments are provided, all components are combined. Leading and trailing
       * slashes from all components are ignored.
       */
      static fromString(...t) {
        const e = [];
        for (const n of t) {
          if (n.indexOf("//") >= 0)
            throw new U(q.INVALID_ARGUMENT, `Invalid segment (${n}). Paths must not contain // in them.`);
          e.push(...n.split("/").filter((t2) => t2.length > 0));
        }
        return new _ut(e);
      }
      static emptyPath() {
        return new _ut([]);
      }
    };
    var ct = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
    var at = class _at extends ot {
      construct(t, e, n) {
        return new _at(t, e, n);
      }
      /**
       * Returns true if the string could be used as a segment in a field path
       * without escaping.
       */
      static isValidIdentifier(t) {
        return ct.test(t);
      }
      canonicalString() {
        return this.toArray().map((t) => (t = t.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), _at.isValidIdentifier(t) || (t = "`" + t + "`"), t)).join(".");
      }
      toString() {
        return this.canonicalString();
      }
      /**
       * Returns true if this field references the key of a document.
       */
      isKeyField() {
        return 1 === this.length && "__name__" === this.get(0);
      }
      /**
       * The field designating the key of a document.
       */
      static keyField() {
        return new _at(["__name__"]);
      }
      /**
       * Parses a field string from the given server-formatted string.
       *
       * - Splitting the empty string is not allowed (for now at least).
       * - Empty segments within the string (e.g. if there are two consecutive
       *   separators) are not allowed.
       *
       * TODO(b/37244157): we should make this more strict. Right now, it allows
       * non-identifier path components, even if they aren't escaped.
       */
      static fromServerFormat(t) {
        const e = [];
        let n = "", s = 0;
        const i = () => {
          if (0 === n.length)
            throw new U(q.INVALID_ARGUMENT, `Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);
          e.push(n), n = "";
        };
        let r = false;
        for (; s < t.length; ) {
          const e2 = t[s];
          if ("\\" === e2) {
            if (s + 1 === t.length)
              throw new U(q.INVALID_ARGUMENT, "Path has trailing escape character: " + t);
            const e3 = t[s + 1];
            if ("\\" !== e3 && "." !== e3 && "`" !== e3)
              throw new U(q.INVALID_ARGUMENT, "Path has invalid escape sequence: " + t);
            n += e3, s += 2;
          } else
            "`" === e2 ? (r = !r, s++) : "." !== e2 || r ? (n += e2, s++) : (i(), s++);
        }
        if (i(), r)
          throw new U(q.INVALID_ARGUMENT, "Unterminated ` in path: " + t);
        return new _at(e);
      }
      static emptyPath() {
        return new _at([]);
      }
    };
    var ht = class _ht {
      constructor(t) {
        this.path = t;
      }
      static fromPath(t) {
        return new _ht(ut.fromString(t));
      }
      static fromName(t) {
        return new _ht(ut.fromString(t).popFirst(5));
      }
      static empty() {
        return new _ht(ut.emptyPath());
      }
      get collectionGroup() {
        return this.path.popLast().lastSegment();
      }
      /** Returns true if the document is in the specified collectionId. */
      hasCollectionId(t) {
        return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;
      }
      /** Returns the collection group (i.e. the name of the parent collection) for this key. */
      getCollectionGroup() {
        return this.path.get(this.path.length - 2);
      }
      /** Returns the fully qualified path to the parent collection. */
      getCollectionPath() {
        return this.path.popLast();
      }
      isEqual(t) {
        return null !== t && 0 === ut.comparator(this.path, t.path);
      }
      toString() {
        return this.path.toString();
      }
      static comparator(t, e) {
        return ut.comparator(t.path, e.path);
      }
      static isDocumentKey(t) {
        return t.length % 2 == 0;
      }
      /**
       * Creates and returns a new document key with the given segments.
       *
       * @param segments - The segments of the path to the document
       * @returns A new instance of DocumentKey
       */
      static fromSegments(t) {
        return new _ht(new ut(t.slice()));
      }
    };
    var lt = class {
      constructor(t, e, n, s) {
        this.indexId = t, this.collectionGroup = e, this.fields = n, this.indexState = s;
      }
    };
    function ft(t) {
      return t.fields.find((t2) => 2 === t2.kind);
    }
    function dt(t) {
      return t.fields.filter((t2) => 2 !== t2.kind);
    }
    function wt(t, e) {
      let n = et(t.collectionGroup, e.collectionGroup);
      if (0 !== n)
        return n;
      for (let s = 0; s < Math.min(t.fields.length, e.fields.length); ++s)
        if (n = mt(t.fields[s], e.fields[s]), 0 !== n)
          return n;
      return et(t.fields.length, e.fields.length);
    }
    lt.UNKNOWN_ID = -1;
    var _t = class {
      constructor(t, e) {
        this.fieldPath = t, this.kind = e;
      }
    };
    function mt(t, e) {
      const n = at.comparator(t.fieldPath, e.fieldPath);
      return 0 !== n ? n : et(t.kind, e.kind);
    }
    var gt = class _gt {
      constructor(t, e) {
        this.sequenceNumber = t, this.offset = e;
      }
      /** The state of an index that has not yet been backfilled. */
      static empty() {
        return new _gt(0, It.min());
      }
    };
    function yt(t, e) {
      const n = t.toTimestamp().seconds, s = t.toTimestamp().nanoseconds + 1, i = rt.fromTimestamp(1e9 === s ? new it(n + 1, 0) : new it(n, s));
      return new It(i, ht.empty(), e);
    }
    function pt(t) {
      return new It(t.readTime, t.key, -1);
    }
    var It = class _It {
      constructor(t, e, n) {
        this.readTime = t, this.documentKey = e, this.largestBatchId = n;
      }
      /** Returns an offset that sorts before all regular offsets. */
      static min() {
        return new _It(rt.min(), ht.empty(), -1);
      }
      /** Returns an offset that sorts after all regular offsets. */
      static max() {
        return new _It(rt.max(), ht.empty(), -1);
      }
    };
    function Tt(t, e) {
      let n = t.readTime.compareTo(e.readTime);
      return 0 !== n ? n : (n = ht.comparator(t.documentKey, e.documentKey), 0 !== n ? n : et(t.largestBatchId, e.largestBatchId));
    }
    var Et = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.";
    var At = class {
      constructor() {
        this.onCommittedListeners = [];
      }
      addOnCommittedListener(t) {
        this.onCommittedListeners.push(t);
      }
      raiseOnCommittedEvent() {
        this.onCommittedListeners.forEach((t) => t());
      }
    };
    async function vt(t) {
      if (t.code !== q.FAILED_PRECONDITION || t.message !== Et)
        throw t;
      N("LocalStore", "Unexpectedly lost primary lease");
    }
    var Rt = class _Rt {
      constructor(t) {
        this.nextCallback = null, this.catchCallback = null, // When the operation resolves, we'll set result or error and mark isDone.
        this.result = void 0, this.error = void 0, this.isDone = false, // Set to true when .then() or .catch() are called and prevents additional
        // chaining.
        this.callbackAttached = false, t((t2) => {
          this.isDone = true, this.result = t2, this.nextCallback && // value should be defined unless T is Void, but we can't express
          // that in the type system.
          this.nextCallback(t2);
        }, (t2) => {
          this.isDone = true, this.error = t2, this.catchCallback && this.catchCallback(t2);
        });
      }
      catch(t) {
        return this.next(void 0, t);
      }
      next(t, e) {
        return this.callbackAttached && O(), this.callbackAttached = true, this.isDone ? this.error ? this.wrapFailure(e, this.error) : this.wrapSuccess(t, this.result) : new _Rt((n, s) => {
          this.nextCallback = (e2) => {
            this.wrapSuccess(t, e2).next(n, s);
          }, this.catchCallback = (t2) => {
            this.wrapFailure(e, t2).next(n, s);
          };
        });
      }
      toPromise() {
        return new Promise((t, e) => {
          this.next(t, e);
        });
      }
      wrapUserFunction(t) {
        try {
          const e = t();
          return e instanceof _Rt ? e : _Rt.resolve(e);
        } catch (t2) {
          return _Rt.reject(t2);
        }
      }
      wrapSuccess(t, e) {
        return t ? this.wrapUserFunction(() => t(e)) : _Rt.resolve(e);
      }
      wrapFailure(t, e) {
        return t ? this.wrapUserFunction(() => t(e)) : _Rt.reject(e);
      }
      static resolve(t) {
        return new _Rt((e, n) => {
          e(t);
        });
      }
      static reject(t) {
        return new _Rt((e, n) => {
          n(t);
        });
      }
      static waitFor(t) {
        return new _Rt((e, n) => {
          let s = 0, i = 0, r = false;
          t.forEach((t2) => {
            ++s, t2.next(() => {
              ++i, r && i === s && e();
            }, (t3) => n(t3));
          }), r = true, i === s && e();
        });
      }
      /**
       * Given an array of predicate functions that asynchronously evaluate to a
       * boolean, implements a short-circuiting `or` between the results. Predicates
       * will be evaluated until one of them returns `true`, then stop. The final
       * result will be whether any of them returned `true`.
       */
      static or(t) {
        let e = _Rt.resolve(false);
        for (const n of t)
          e = e.next((t2) => t2 ? _Rt.resolve(t2) : n());
        return e;
      }
      static forEach(t, e) {
        const n = [];
        return t.forEach((t2, s) => {
          n.push(e.call(this, t2, s));
        }), this.waitFor(n);
      }
      /**
       * Concurrently map all array elements through asynchronous function.
       */
      static mapArray(t, e) {
        return new _Rt((n, s) => {
          const i = t.length, r = new Array(i);
          let o = 0;
          for (let u = 0; u < i; u++) {
            const c = u;
            e(t[c]).next((t2) => {
              r[c] = t2, ++o, o === i && n(r);
            }, (t2) => s(t2));
          }
        });
      }
      /**
       * An alternative to recursive PersistencePromise calls, that avoids
       * potential memory problems from unbounded chains of promises.
       *
       * The `action` will be called repeatedly while `condition` is true.
       */
      static doWhile(t, e) {
        return new _Rt((n, s) => {
          const i = () => {
            true === t() ? e().next(() => {
              i();
            }, s) : n();
          };
          i();
        });
      }
    };
    var Pt = class _Pt {
      constructor(t, e) {
        this.action = t, this.transaction = e, this.aborted = false, /**
         * A `Promise` that resolves with the result of the IndexedDb transaction.
         */
        this.v = new K(), this.transaction.oncomplete = () => {
          this.v.resolve();
        }, this.transaction.onabort = () => {
          e.error ? this.v.reject(new St(t, e.error)) : this.v.resolve();
        }, this.transaction.onerror = (e2) => {
          const n = kt(e2.target.error);
          this.v.reject(new St(t, n));
        };
      }
      static open(t, e, n, s) {
        try {
          return new _Pt(e, t.transaction(s, n));
        } catch (t2) {
          throw new St(e, t2);
        }
      }
      get R() {
        return this.v.promise;
      }
      abort(t) {
        t && this.v.reject(t), this.aborted || (N("SimpleDb", "Aborting transaction:", t ? t.message : "Client-initiated abort"), this.aborted = true, this.transaction.abort());
      }
      P() {
        const t = this.transaction;
        this.aborted || "function" != typeof t.commit || t.commit();
      }
      /**
       * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All
       * operations performed on the SimpleDbStore happen within the context of this
       * transaction and it cannot be used anymore once the transaction is
       * completed.
       *
       * Note that we can't actually enforce that the KeyType and ValueType are
       * correct, but they allow type safety through the rest of the consuming code.
       */
      store(t) {
        const e = this.transaction.objectStore(t);
        return new Ct(e);
      }
    };
    var bt = class _bt {
      /*
       * Creates a new SimpleDb wrapper for IndexedDb database `name`.
       *
       * Note that `version` must not be a downgrade. IndexedDB does not support
       * downgrading the schema version. We currently do not support any way to do
       * versioning outside of IndexedDB's versioning mechanism, as only
       * version-upgrade transactions are allowed to do things like create
       * objectstores.
       */
      constructor(t, e, n) {
        this.name = t, this.version = e, this.V = n;
        12.2 === _bt.S(util.getUA()) && k("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
      }
      /** Deletes the specified database. */
      static delete(t) {
        return N("SimpleDb", "Removing database:", t), xt(window.indexedDB.deleteDatabase(t)).toPromise();
      }
      /** Returns true if IndexedDB is available in the current environment. */
      static D() {
        if (!util.isIndexedDBAvailable())
          return false;
        if (_bt.C())
          return true;
        const t = util.getUA(), e = _bt.S(t), n = 0 < e && e < 10, s = _bt.N(t), i = 0 < s && s < 4.5;
        return !(t.indexOf("MSIE ") > 0 || t.indexOf("Trident/") > 0 || t.indexOf("Edge/") > 0 || n || i);
      }
      /**
       * Returns true if the backing IndexedDB store is the Node IndexedDBShim
       * (see https://github.com/axemclion/IndexedDBShim).
       */
      static C() {
        var t;
        return "undefined" != typeof process && "YES" === (null === (t = process.env) || void 0 === t ? void 0 : t.k);
      }
      /** Helper to get a typed SimpleDbStore from a transaction. */
      static M(t, e) {
        return t.store(e);
      }
      // visible for testing
      /** Parse User Agent to determine iOS version. Returns -1 if not found. */
      static S(t) {
        const e = t.match(/i(?:phone|pad|pod) os ([\d_]+)/i), n = e ? e[1].split("_").slice(0, 2).join(".") : "-1";
        return Number(n);
      }
      // visible for testing
      /** Parse User Agent to determine Android version. Returns -1 if not found. */
      static N(t) {
        const e = t.match(/Android ([\d.]+)/i), n = e ? e[1].split(".").slice(0, 2).join(".") : "-1";
        return Number(n);
      }
      /**
       * Opens the specified database, creating or upgrading it if necessary.
       */
      async $(t) {
        return this.db || (N("SimpleDb", "Opening database:", this.name), this.db = await new Promise((e, n) => {
          const s = indexedDB.open(this.name, this.version);
          s.onsuccess = (t2) => {
            const n2 = t2.target.result;
            e(n2);
          }, s.onblocked = () => {
            n(new St(t, "Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."));
          }, s.onerror = (e2) => {
            const s2 = e2.target.error;
            "VersionError" === s2.name ? n(new U(q.FAILED_PRECONDITION, "A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")) : "InvalidStateError" === s2.name ? n(new U(q.FAILED_PRECONDITION, "Unable to open an IndexedDB connection. This could be due to running in a private browsing session on a browser whose private browsing sessions do not support IndexedDB: " + s2)) : n(new St(t, s2));
          }, s.onupgradeneeded = (t2) => {
            N("SimpleDb", 'Database "' + this.name + '" requires upgrade from version:', t2.oldVersion);
            const e2 = t2.target.result;
            this.V.O(e2, s.transaction, t2.oldVersion, this.version).next(() => {
              N("SimpleDb", "Database upgrade to version " + this.version + " complete");
            });
          };
        })), this.F && (this.db.onversionchange = (t2) => this.F(t2)), this.db;
      }
      B(t) {
        this.F = t, this.db && (this.db.onversionchange = (e) => t(e));
      }
      async runTransaction(t, e, n, s) {
        const i = "readonly" === e;
        let r = 0;
        for (; ; ) {
          ++r;
          try {
            this.db = await this.$(t);
            const e2 = Pt.open(this.db, t, i ? "readonly" : "readwrite", n), r2 = s(e2).next((t2) => (e2.P(), t2)).catch((t2) => (
              // Abort the transaction if there was an error.
              (e2.abort(t2), Rt.reject(t2))
            )).toPromise();
            return r2.catch(() => {
            }), // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
            // fire), but still return the original transactionFnResult back to the
            // caller.
            await e2.R, r2;
          } catch (t2) {
            const e2 = t2, n2 = "FirebaseError" !== e2.name && r < 3;
            if (N("SimpleDb", "Transaction failed with error:", e2.message, "Retrying:", n2), this.close(), !n2)
              return Promise.reject(e2);
          }
        }
      }
      close() {
        this.db && this.db.close(), this.db = void 0;
      }
    };
    var Vt = class {
      constructor(t) {
        this.L = t, this.q = false, this.U = null;
      }
      get isDone() {
        return this.q;
      }
      get K() {
        return this.U;
      }
      set cursor(t) {
        this.L = t;
      }
      /**
       * This function can be called to stop iteration at any point.
       */
      done() {
        this.q = true;
      }
      /**
       * This function can be called to skip to that next key, which could be
       * an index or a primary key.
       */
      G(t) {
        this.U = t;
      }
      /**
       * Delete the current cursor value from the object store.
       *
       * NOTE: You CANNOT do this with a keysOnly query.
       */
      delete() {
        return xt(this.L.delete());
      }
    };
    var St = class extends U {
      constructor(t, e) {
        super(q.UNAVAILABLE, `IndexedDB transaction '${t}' failed: ${e}`), this.name = "IndexedDbTransactionError";
      }
    };
    function Dt(t) {
      return "IndexedDbTransactionError" === t.name;
    }
    var Ct = class {
      constructor(t) {
        this.store = t;
      }
      put(t, e) {
        let n;
        return void 0 !== e ? (N("SimpleDb", "PUT", this.store.name, t, e), n = this.store.put(e, t)) : (N("SimpleDb", "PUT", this.store.name, "<auto-key>", t), n = this.store.put(t)), xt(n);
      }
      /**
       * Adds a new value into an Object Store and returns the new key. Similar to
       * IndexedDb's `add()`, this method will fail on primary key collisions.
       *
       * @param value - The object to write.
       * @returns The key of the value to add.
       */
      add(t) {
        N("SimpleDb", "ADD", this.store.name, t, t);
        return xt(this.store.add(t));
      }
      /**
       * Gets the object with the specified key from the specified store, or null
       * if no object exists with the specified key.
       *
       * @key The key of the object to get.
       * @returns The object with the specified key or null if no object exists.
       */
      get(t) {
        return xt(this.store.get(t)).next((e) => (
          // Normalize nonexistence to null.
          (void 0 === e && (e = null), N("SimpleDb", "GET", this.store.name, t, e), e)
        ));
      }
      delete(t) {
        N("SimpleDb", "DELETE", this.store.name, t);
        return xt(this.store.delete(t));
      }
      /**
       * If we ever need more of the count variants, we can add overloads. For now,
       * all we need is to count everything in a store.
       *
       * Returns the number of rows in the store.
       */
      count() {
        N("SimpleDb", "COUNT", this.store.name);
        return xt(this.store.count());
      }
      j(t, e) {
        const n = this.options(t, e);
        if (n.index || "function" != typeof this.store.getAll) {
          const t2 = this.cursor(n), e2 = [];
          return this.W(t2, (t3, n2) => {
            e2.push(n2);
          }).next(() => e2);
        }
        {
          const t2 = this.store.getAll(n.range);
          return new Rt((e2, n2) => {
            t2.onerror = (t3) => {
              n2(t3.target.error);
            }, t2.onsuccess = (t3) => {
              e2(t3.target.result);
            };
          });
        }
      }
      /**
       * Loads the first `count` elements from the provided index range. Loads all
       * elements if no limit is provided.
       */
      H(t, e) {
        const n = this.store.getAll(t, null === e ? void 0 : e);
        return new Rt((t2, e2) => {
          n.onerror = (t3) => {
            e2(t3.target.error);
          }, n.onsuccess = (e3) => {
            t2(e3.target.result);
          };
        });
      }
      J(t, e) {
        N("SimpleDb", "DELETE ALL", this.store.name);
        const n = this.options(t, e);
        n.Y = false;
        const s = this.cursor(n);
        return this.W(s, (t2, e2, n2) => n2.delete());
      }
      X(t, e) {
        let n;
        e ? n = t : (n = {}, e = t);
        const s = this.cursor(n);
        return this.W(s, e);
      }
      /**
       * Iterates over a store, but waits for the given callback to complete for
       * each entry before iterating the next entry. This allows the callback to do
       * asynchronous work to determine if this iteration should continue.
       *
       * The provided callback should return `true` to continue iteration, and
       * `false` otherwise.
       */
      Z(t) {
        const e = this.cursor({});
        return new Rt((n, s) => {
          e.onerror = (t2) => {
            const e2 = kt(t2.target.error);
            s(e2);
          }, e.onsuccess = (e2) => {
            const s2 = e2.target.result;
            s2 ? t(s2.primaryKey, s2.value).next((t2) => {
              t2 ? s2.continue() : n();
            }) : n();
          };
        });
      }
      W(t, e) {
        const n = [];
        return new Rt((s, i) => {
          t.onerror = (t2) => {
            i(t2.target.error);
          }, t.onsuccess = (t2) => {
            const i2 = t2.target.result;
            if (!i2)
              return void s();
            const r = new Vt(i2), o = e(i2.primaryKey, i2.value, r);
            if (o instanceof Rt) {
              const t3 = o.catch((t4) => (r.done(), Rt.reject(t4)));
              n.push(t3);
            }
            r.isDone ? s() : null === r.K ? i2.continue() : i2.continue(r.K);
          };
        }).next(() => Rt.waitFor(n));
      }
      options(t, e) {
        let n;
        return void 0 !== t && ("string" == typeof t ? n = t : e = t), {
          index: n,
          range: e
        };
      }
      cursor(t) {
        let e = "next";
        if (t.reverse && (e = "prev"), t.index) {
          const n = this.store.index(t.index);
          return t.Y ? n.openKeyCursor(t.range, e) : n.openCursor(t.range, e);
        }
        return this.store.openCursor(t.range, e);
      }
    };
    function xt(t) {
      return new Rt((e, n) => {
        t.onsuccess = (t2) => {
          const n2 = t2.target.result;
          e(n2);
        }, t.onerror = (t2) => {
          const e2 = kt(t2.target.error);
          n(e2);
        };
      });
    }
    var Nt = false;
    function kt(t) {
      const e = bt.S(util.getUA());
      if (e >= 12.2 && e < 13) {
        const e2 = "An internal error was encountered in the Indexed Database server";
        if (t.message.indexOf(e2) >= 0) {
          const t2 = new U("internal", `IOS_INDEXEDDB_BUG1: IndexedDb has thrown '${e2}'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.`);
          return Nt || (Nt = true, // Throw a global exception outside of this promise chain, for the user to
          // potentially catch.
          setTimeout(() => {
            throw t2;
          }, 0)), t2;
        }
      }
      return t;
    }
    var Mt = class {
      constructor(t, e) {
        this.asyncQueue = t, this.tt = e, this.task = null;
      }
      start() {
        this.et(15e3);
      }
      stop() {
        this.task && (this.task.cancel(), this.task = null);
      }
      get started() {
        return null !== this.task;
      }
      et(t) {
        N("IndexBackiller", `Scheduled in ${t}ms`), this.task = this.asyncQueue.enqueueAfterDelay("index_backfill", t, async () => {
          this.task = null;
          try {
            N("IndexBackiller", `Documents written: ${await this.tt.nt()}`);
          } catch (t2) {
            Dt(t2) ? N("IndexBackiller", "Ignoring IndexedDB error during index backfill: ", t2) : await vt(t2);
          }
          await this.et(6e4);
        });
      }
    };
    var $t = class {
      constructor(t, e) {
        this.localStore = t, this.persistence = e;
      }
      async nt(t = 50) {
        return this.persistence.runTransaction("Backfill Indexes", "readwrite-primary", (e) => this.st(e, t));
      }
      /** Writes index entries until the cap is reached. Returns the number of documents processed. */
      st(t, e) {
        const n = /* @__PURE__ */ new Set();
        let s = e, i = true;
        return Rt.doWhile(() => true === i && s > 0, () => this.localStore.indexManager.getNextCollectionGroupToUpdate(t).next((e2) => {
          if (null !== e2 && !n.has(e2))
            return N("IndexBackiller", `Processing collection: ${e2}`), this.it(t, e2, s).next((t2) => {
              s -= t2, n.add(e2);
            });
          i = false;
        })).next(() => e - s);
      }
      /**
       * Writes entries for the provided collection group. Returns the number of documents processed.
       */
      it(t, e, n) {
        return this.localStore.indexManager.getMinOffsetFromCollectionGroup(t, e).next((s) => this.localStore.localDocuments.getNextDocuments(t, e, s, n).next((n2) => {
          const i = n2.changes;
          return this.localStore.indexManager.updateIndexEntries(t, i).next(() => this.rt(s, n2)).next((n3) => (N("IndexBackiller", `Updating offset: ${n3}`), this.localStore.indexManager.updateCollectionGroup(t, e, n3))).next(() => i.size);
        }));
      }
      /** Returns the next offset based on the provided documents. */
      rt(t, e) {
        let n = t;
        return e.changes.forEach((t2, e2) => {
          const s = pt(e2);
          Tt(s, n) > 0 && (n = s);
        }), new It(n.readTime, n.documentKey, Math.max(e.batchId, t.largestBatchId));
      }
    };
    var Ot = class {
      constructor(t, e) {
        this.previousValue = t, e && (e.sequenceNumberHandler = (t2) => this.ot(t2), this.ut = (t2) => e.writeSequenceNumber(t2));
      }
      ot(t) {
        return this.previousValue = Math.max(t, this.previousValue), this.previousValue;
      }
      next() {
        const t = ++this.previousValue;
        return this.ut && this.ut(t), t;
      }
    };
    Ot.ct = -1;
    function Ft(t) {
      return null == t;
    }
    function Bt(t) {
      return 0 === t && 1 / t == -1 / 0;
    }
    function Lt(t) {
      return "number" == typeof t && Number.isInteger(t) && !Bt(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;
    }
    function qt(t) {
      let e = "";
      for (let n = 0; n < t.length; n++)
        e.length > 0 && (e = Kt(e)), e = Ut(t.get(n), e);
      return Kt(e);
    }
    function Ut(t, e) {
      let n = e;
      const s = t.length;
      for (let e2 = 0; e2 < s; e2++) {
        const s2 = t.charAt(e2);
        switch (s2) {
          case "\0":
            n += "";
            break;
          case "":
            n += "";
            break;
          default:
            n += s2;
        }
      }
      return n;
    }
    function Kt(t) {
      return t + "";
    }
    function Gt(t) {
      const e = t.length;
      if (F(e >= 2), 2 === e)
        return F("" === t.charAt(0) && "" === t.charAt(1)), ut.emptyPath();
      const __PRIVATE_lastReasonableEscapeIndex = e - 2, n = [];
      let s = "";
      for (let i = 0; i < e; ) {
        const e2 = t.indexOf("", i);
        (e2 < 0 || e2 > __PRIVATE_lastReasonableEscapeIndex) && O();
        switch (t.charAt(e2 + 1)) {
          case "":
            const r = t.substring(i, e2);
            let o;
            0 === s.length ? (
              // Avoid copying for the common case of a segment that excludes \0
              // and \001
              o = r
            ) : (s += r, o = s, s = ""), n.push(o);
            break;
          case "":
            s += t.substring(i, e2), s += "\0";
            break;
          case "":
            s += t.substring(i, e2 + 1);
            break;
          default:
            O();
        }
        i = e2 + 2;
      }
      return new ut(n);
    }
    var Qt = ["userId", "batchId"];
    function jt(t, e) {
      return [t, qt(e)];
    }
    function zt(t, e, n) {
      return [t, qt(e), n];
    }
    var Wt = {};
    var Ht = ["prefixPath", "collectionGroup", "readTime", "documentId"];
    var Jt = ["prefixPath", "collectionGroup", "documentId"];
    var Yt = ["collectionGroup", "readTime", "prefixPath", "documentId"];
    var Xt = ["canonicalId", "targetId"];
    var Zt = ["targetId", "path"];
    var te = ["path", "targetId"];
    var ee = ["collectionId", "parent"];
    var ne = ["indexId", "uid"];
    var se = ["uid", "sequenceNumber"];
    var ie = ["indexId", "uid", "arrayValue", "directionalValue", "orderedDocumentKey", "documentKey"];
    var re = ["indexId", "uid", "orderedDocumentKey"];
    var oe = ["userId", "collectionPath", "documentId"];
    var ue = ["userId", "collectionPath", "largestBatchId"];
    var ce = ["userId", "collectionGroup", "largestBatchId"];
    var ae = [...[...[...[...["mutationQueues", "mutations", "documentMutations", "remoteDocuments", "targets", "owner", "targetGlobal", "targetDocuments"], "clientMetadata"], "remoteDocumentGlobal"], "collectionParents"], "bundles", "namedQueries"];
    var he = [...ae, "documentOverlays"];
    var le = ["mutationQueues", "mutations", "documentMutations", "remoteDocumentsV14", "targets", "owner", "targetGlobal", "targetDocuments", "clientMetadata", "remoteDocumentGlobal", "collectionParents", "bundles", "namedQueries", "documentOverlays"];
    var fe = le;
    var de = [...fe, "indexConfiguration", "indexState", "indexEntries"];
    var we = class extends At {
      constructor(t, e) {
        super(), this.ht = t, this.currentSequenceNumber = e;
      }
    };
    function _e(t, e) {
      const n = L(t);
      return bt.M(n.ht, e);
    }
    function me(t) {
      let e = 0;
      for (const n in t)
        Object.prototype.hasOwnProperty.call(t, n) && e++;
      return e;
    }
    function ge(t, e) {
      for (const n in t)
        Object.prototype.hasOwnProperty.call(t, n) && e(n, t[n]);
    }
    function ye(t) {
      for (const e in t)
        if (Object.prototype.hasOwnProperty.call(t, e))
          return false;
      return true;
    }
    var pe = class _pe {
      constructor(t, e) {
        this.comparator = t, this.root = e || Te.EMPTY;
      }
      // Returns a copy of the map, with the specified key/value added or replaced.
      insert(t, e) {
        return new _pe(this.comparator, this.root.insert(t, e, this.comparator).copy(null, null, Te.BLACK, null, null));
      }
      // Returns a copy of the map, with the specified key removed.
      remove(t) {
        return new _pe(this.comparator, this.root.remove(t, this.comparator).copy(null, null, Te.BLACK, null, null));
      }
      // Returns the value of the node with the given key, or null.
      get(t) {
        let e = this.root;
        for (; !e.isEmpty(); ) {
          const n = this.comparator(t, e.key);
          if (0 === n)
            return e.value;
          n < 0 ? e = e.left : n > 0 && (e = e.right);
        }
        return null;
      }
      // Returns the index of the element in this sorted map, or -1 if it doesn't
      // exist.
      indexOf(t) {
        let e = 0, n = this.root;
        for (; !n.isEmpty(); ) {
          const s = this.comparator(t, n.key);
          if (0 === s)
            return e + n.left.size;
          s < 0 ? n = n.left : (
            // Count all nodes left of the node plus the node itself
            (e += n.left.size + 1, n = n.right)
          );
        }
        return -1;
      }
      isEmpty() {
        return this.root.isEmpty();
      }
      // Returns the total number of nodes in the map.
      get size() {
        return this.root.size;
      }
      // Returns the minimum key in the map.
      minKey() {
        return this.root.minKey();
      }
      // Returns the maximum key in the map.
      maxKey() {
        return this.root.maxKey();
      }
      // Traverses the map in key order and calls the specified action function
      // for each key/value pair. If action returns true, traversal is aborted.
      // Returns the first truthy value returned by action, or the last falsey
      // value returned by action.
      inorderTraversal(t) {
        return this.root.inorderTraversal(t);
      }
      forEach(t) {
        this.inorderTraversal((e, n) => (t(e, n), false));
      }
      toString() {
        const t = [];
        return this.inorderTraversal((e, n) => (t.push(`${e}:${n}`), false)), `{${t.join(", ")}}`;
      }
      // Traverses the map in reverse key order and calls the specified action
      // function for each key/value pair. If action returns true, traversal is
      // aborted.
      // Returns the first truthy value returned by action, or the last falsey
      // value returned by action.
      reverseTraversal(t) {
        return this.root.reverseTraversal(t);
      }
      // Returns an iterator over the SortedMap.
      getIterator() {
        return new Ie(this.root, null, this.comparator, false);
      }
      getIteratorFrom(t) {
        return new Ie(this.root, t, this.comparator, false);
      }
      getReverseIterator() {
        return new Ie(this.root, null, this.comparator, true);
      }
      getReverseIteratorFrom(t) {
        return new Ie(this.root, t, this.comparator, true);
      }
    };
    var Ie = class {
      constructor(t, e, n, s) {
        this.isReverse = s, this.nodeStack = [];
        let i = 1;
        for (; !t.isEmpty(); )
          if (i = e ? n(t.key, e) : 1, // flip the comparison if we're going in reverse
          e && s && (i *= -1), i < 0)
            t = this.isReverse ? t.left : t.right;
          else {
            if (0 === i) {
              this.nodeStack.push(t);
              break;
            }
            this.nodeStack.push(t), t = this.isReverse ? t.right : t.left;
          }
      }
      getNext() {
        let t = this.nodeStack.pop();
        const e = {
          key: t.key,
          value: t.value
        };
        if (this.isReverse)
          for (t = t.left; !t.isEmpty(); )
            this.nodeStack.push(t), t = t.right;
        else
          for (t = t.right; !t.isEmpty(); )
            this.nodeStack.push(t), t = t.left;
        return e;
      }
      hasNext() {
        return this.nodeStack.length > 0;
      }
      peek() {
        if (0 === this.nodeStack.length)
          return null;
        const t = this.nodeStack[this.nodeStack.length - 1];
        return {
          key: t.key,
          value: t.value
        };
      }
    };
    var Te = class _Te {
      constructor(t, e, n, s, i) {
        this.key = t, this.value = e, this.color = null != n ? n : _Te.RED, this.left = null != s ? s : _Te.EMPTY, this.right = null != i ? i : _Te.EMPTY, this.size = this.left.size + 1 + this.right.size;
      }
      // Returns a copy of the current node, optionally replacing pieces of it.
      copy(t, e, n, s, i) {
        return new _Te(null != t ? t : this.key, null != e ? e : this.value, null != n ? n : this.color, null != s ? s : this.left, null != i ? i : this.right);
      }
      isEmpty() {
        return false;
      }
      // Traverses the tree in key order and calls the specified action function
      // for each node. If action returns true, traversal is aborted.
      // Returns the first truthy value returned by action, or the last falsey
      // value returned by action.
      inorderTraversal(t) {
        return this.left.inorderTraversal(t) || t(this.key, this.value) || this.right.inorderTraversal(t);
      }
      // Traverses the tree in reverse key order and calls the specified action
      // function for each node. If action returns true, traversal is aborted.
      // Returns the first truthy value returned by action, or the last falsey
      // value returned by action.
      reverseTraversal(t) {
        return this.right.reverseTraversal(t) || t(this.key, this.value) || this.left.reverseTraversal(t);
      }
      // Returns the minimum node in the tree.
      min() {
        return this.left.isEmpty() ? this : this.left.min();
      }
      // Returns the maximum key in the tree.
      minKey() {
        return this.min().key;
      }
      // Returns the maximum key in the tree.
      maxKey() {
        return this.right.isEmpty() ? this.key : this.right.maxKey();
      }
      // Returns new tree, with the key/value added.
      insert(t, e, n) {
        let s = this;
        const i = n(t, s.key);
        return s = i < 0 ? s.copy(null, null, null, s.left.insert(t, e, n), null) : 0 === i ? s.copy(null, e, null, null, null) : s.copy(null, null, null, null, s.right.insert(t, e, n)), s.fixUp();
      }
      removeMin() {
        if (this.left.isEmpty())
          return _Te.EMPTY;
        let t = this;
        return t.left.isRed() || t.left.left.isRed() || (t = t.moveRedLeft()), t = t.copy(null, null, null, t.left.removeMin(), null), t.fixUp();
      }
      // Returns new tree, with the specified item removed.
      remove(t, e) {
        let n, s = this;
        if (e(t, s.key) < 0)
          s.left.isEmpty() || s.left.isRed() || s.left.left.isRed() || (s = s.moveRedLeft()), s = s.copy(null, null, null, s.left.remove(t, e), null);
        else {
          if (s.left.isRed() && (s = s.rotateRight()), s.right.isEmpty() || s.right.isRed() || s.right.left.isRed() || (s = s.moveRedRight()), 0 === e(t, s.key)) {
            if (s.right.isEmpty())
              return _Te.EMPTY;
            n = s.right.min(), s = s.copy(n.key, n.value, null, null, s.right.removeMin());
          }
          s = s.copy(null, null, null, null, s.right.remove(t, e));
        }
        return s.fixUp();
      }
      isRed() {
        return this.color;
      }
      // Returns new tree after performing any needed rotations.
      fixUp() {
        let t = this;
        return t.right.isRed() && !t.left.isRed() && (t = t.rotateLeft()), t.left.isRed() && t.left.left.isRed() && (t = t.rotateRight()), t.left.isRed() && t.right.isRed() && (t = t.colorFlip()), t;
      }
      moveRedLeft() {
        let t = this.colorFlip();
        return t.right.left.isRed() && (t = t.copy(null, null, null, null, t.right.rotateRight()), t = t.rotateLeft(), t = t.colorFlip()), t;
      }
      moveRedRight() {
        let t = this.colorFlip();
        return t.left.left.isRed() && (t = t.rotateRight(), t = t.colorFlip()), t;
      }
      rotateLeft() {
        const t = this.copy(null, null, _Te.RED, null, this.right.left);
        return this.right.copy(null, null, this.color, t, null);
      }
      rotateRight() {
        const t = this.copy(null, null, _Te.RED, this.left.right, null);
        return this.left.copy(null, null, this.color, null, t);
      }
      colorFlip() {
        const t = this.left.copy(null, null, !this.left.color, null, null), e = this.right.copy(null, null, !this.right.color, null, null);
        return this.copy(null, null, !this.color, t, e);
      }
      // For testing.
      checkMaxDepth() {
        const t = this.check();
        return Math.pow(2, t) <= this.size + 1;
      }
      // In a balanced RB tree, the black-depth (number of black nodes) from root to
      // leaves is equal on both sides.  This function verifies that or asserts.
      check() {
        if (this.isRed() && this.left.isRed())
          throw O();
        if (this.right.isRed())
          throw O();
        const t = this.left.check();
        if (t !== this.right.check())
          throw O();
        return t + (this.isRed() ? 0 : 1);
      }
    };
    Te.EMPTY = null, Te.RED = true, Te.BLACK = false;
    Te.EMPTY = new // Represents an empty node (a leaf node in the Red-Black Tree).
    class {
      constructor() {
        this.size = 0;
      }
      get key() {
        throw O();
      }
      get value() {
        throw O();
      }
      get color() {
        throw O();
      }
      get left() {
        throw O();
      }
      get right() {
        throw O();
      }
      // Returns a copy of the current node.
      copy(t, e, n, s, i) {
        return this;
      }
      // Returns a copy of the tree, with the specified key/value added.
      insert(t, e, n) {
        return new Te(t, e);
      }
      // Returns a copy of the tree, with the specified key removed.
      remove(t, e) {
        return this;
      }
      isEmpty() {
        return true;
      }
      inorderTraversal(t) {
        return false;
      }
      reverseTraversal(t) {
        return false;
      }
      minKey() {
        return null;
      }
      maxKey() {
        return null;
      }
      isRed() {
        return false;
      }
      // For testing.
      checkMaxDepth() {
        return true;
      }
      check() {
        return 0;
      }
    }();
    var Ee = class _Ee {
      constructor(t) {
        this.comparator = t, this.data = new pe(this.comparator);
      }
      has(t) {
        return null !== this.data.get(t);
      }
      first() {
        return this.data.minKey();
      }
      last() {
        return this.data.maxKey();
      }
      get size() {
        return this.data.size;
      }
      indexOf(t) {
        return this.data.indexOf(t);
      }
      /** Iterates elements in order defined by "comparator" */
      forEach(t) {
        this.data.inorderTraversal((e, n) => (t(e), false));
      }
      /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */
      forEachInRange(t, e) {
        const n = this.data.getIteratorFrom(t[0]);
        for (; n.hasNext(); ) {
          const s = n.getNext();
          if (this.comparator(s.key, t[1]) >= 0)
            return;
          e(s.key);
        }
      }
      /**
       * Iterates over `elem`s such that: start &lt;= elem until false is returned.
       */
      forEachWhile(t, e) {
        let n;
        for (n = void 0 !== e ? this.data.getIteratorFrom(e) : this.data.getIterator(); n.hasNext(); ) {
          if (!t(n.getNext().key))
            return;
        }
      }
      /** Finds the least element greater than or equal to `elem`. */
      firstAfterOrEqual(t) {
        const e = this.data.getIteratorFrom(t);
        return e.hasNext() ? e.getNext().key : null;
      }
      getIterator() {
        return new Ae(this.data.getIterator());
      }
      getIteratorFrom(t) {
        return new Ae(this.data.getIteratorFrom(t));
      }
      /** Inserts or updates an element */
      add(t) {
        return this.copy(this.data.remove(t).insert(t, true));
      }
      /** Deletes an element */
      delete(t) {
        return this.has(t) ? this.copy(this.data.remove(t)) : this;
      }
      isEmpty() {
        return this.data.isEmpty();
      }
      unionWith(t) {
        let e = this;
        return e.size < t.size && (e = t, t = this), t.forEach((t2) => {
          e = e.add(t2);
        }), e;
      }
      isEqual(t) {
        if (!(t instanceof _Ee))
          return false;
        if (this.size !== t.size)
          return false;
        const e = this.data.getIterator(), n = t.data.getIterator();
        for (; e.hasNext(); ) {
          const t2 = e.getNext().key, s = n.getNext().key;
          if (0 !== this.comparator(t2, s))
            return false;
        }
        return true;
      }
      toArray() {
        const t = [];
        return this.forEach((e) => {
          t.push(e);
        }), t;
      }
      toString() {
        const t = [];
        return this.forEach((e) => t.push(e)), "SortedSet(" + t.toString() + ")";
      }
      copy(t) {
        const e = new _Ee(this.comparator);
        return e.data = t, e;
      }
    };
    var Ae = class {
      constructor(t) {
        this.iter = t;
      }
      getNext() {
        return this.iter.getNext().key;
      }
      hasNext() {
        return this.iter.hasNext();
      }
    };
    function ve(t) {
      return t.hasNext() ? t.getNext() : void 0;
    }
    var Re = class _Re {
      constructor(t) {
        this.fields = t, // TODO(dimond): validation of FieldMask
        // Sort the field mask to support `FieldMask.isEqual()` and assert below.
        t.sort(at.comparator);
      }
      static empty() {
        return new _Re([]);
      }
      /**
       * Returns a new FieldMask object that is the result of adding all the given
       * fields paths to this field mask.
       */
      unionWith(t) {
        let e = new Ee(at.comparator);
        for (const t2 of this.fields)
          e = e.add(t2);
        for (const n of t)
          e = e.add(n);
        return new _Re(e.toArray());
      }
      /**
       * Verifies that `fieldPath` is included by at least one field in this field
       * mask.
       *
       * This is an O(n) operation, where `n` is the size of the field mask.
       */
      covers(t) {
        for (const e of this.fields)
          if (e.isPrefixOf(t))
            return true;
        return false;
      }
      isEqual(t) {
        return nt(this.fields, t.fields, (t2, e) => t2.isEqual(e));
      }
    };
    var Pe = class extends Error {
      constructor() {
        super(...arguments), this.name = "Base64DecodeError";
      }
    };
    function be() {
      return "undefined" != typeof atob;
    }
    var Ve = class _Ve {
      constructor(t) {
        this.binaryString = t;
      }
      static fromBase64String(t) {
        const e = function(t2) {
          try {
            return atob(t2);
          } catch (t3) {
            throw "undefined" != typeof DOMException && t3 instanceof DOMException ? new Pe("Invalid base64 string: " + t3) : t3;
          }
        }(t);
        return new _Ve(e);
      }
      static fromUint8Array(t) {
        const e = (
          /**
          * Helper function to convert an Uint8array to a binary string.
          */
          function(t2) {
            let e2 = "";
            for (let n = 0; n < t2.length; ++n)
              e2 += String.fromCharCode(t2[n]);
            return e2;
          }(t)
        );
        return new _Ve(e);
      }
      [Symbol.iterator]() {
        let t = 0;
        return {
          next: () => t < this.binaryString.length ? {
            value: this.binaryString.charCodeAt(t++),
            done: false
          } : {
            value: void 0,
            done: true
          }
        };
      }
      toBase64() {
        return t = this.binaryString, btoa(t);
        var t;
      }
      toUint8Array() {
        return function(t) {
          const e = new Uint8Array(t.length);
          for (let n = 0; n < t.length; n++)
            e[n] = t.charCodeAt(n);
          return e;
        }(this.binaryString);
      }
      approximateByteSize() {
        return 2 * this.binaryString.length;
      }
      compareTo(t) {
        return et(this.binaryString, t.binaryString);
      }
      isEqual(t) {
        return this.binaryString === t.binaryString;
      }
    };
    Ve.EMPTY_BYTE_STRING = new Ve("");
    var Se = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);
    function De(t) {
      if (F(!!t), "string" == typeof t) {
        let e = 0;
        const n = Se.exec(t);
        if (F(!!n), n[1]) {
          let t2 = n[1];
          t2 = (t2 + "000000000").substr(0, 9), e = Number(t2);
        }
        const s = new Date(t);
        return {
          seconds: Math.floor(s.getTime() / 1e3),
          nanos: e
        };
      }
      return {
        seconds: Ce(t.seconds),
        nanos: Ce(t.nanos)
      };
    }
    function Ce(t) {
      return "number" == typeof t ? t : "string" == typeof t ? Number(t) : 0;
    }
    function xe(t) {
      return "string" == typeof t ? Ve.fromBase64String(t) : Ve.fromUint8Array(t);
    }
    function Ne(t) {
      var e, n;
      return "server_timestamp" === (null === (n = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === n ? void 0 : n.stringValue);
    }
    function ke(t) {
      const e = t.mapValue.fields.__previous_value__;
      return Ne(e) ? ke(e) : e;
    }
    function Me(t) {
      const e = De(t.mapValue.fields.__local_write_time__.timestampValue);
      return new it(e.seconds, e.nanos);
    }
    var $e = class {
      /**
       * Constructs a DatabaseInfo using the provided host, databaseId and
       * persistenceKey.
       *
       * @param databaseId - The database to use.
       * @param appId - The Firebase App Id.
       * @param persistenceKey - A unique identifier for this Firestore's local
       * storage (used in conjunction with the databaseId).
       * @param host - The Firestore backend host to connect to.
       * @param ssl - Whether to use SSL when connecting.
       * @param forceLongPolling - Whether to use the forceLongPolling option
       * when using WebChannel as the network transport.
       * @param autoDetectLongPolling - Whether to use the detectBufferingProxy
       * option when using WebChannel as the network transport.
       * @param longPollingOptions Options that configure long-polling.
       * @param useFetchStreams Whether to use the Fetch API instead of
       * XMLHTTPRequest
       */
      constructor(t, e, n, s, i, r, o, u, c) {
        this.databaseId = t, this.appId = e, this.persistenceKey = n, this.host = s, this.ssl = i, this.forceLongPolling = r, this.autoDetectLongPolling = o, this.longPollingOptions = u, this.useFetchStreams = c;
      }
    };
    var Oe = class _Oe {
      constructor(t, e) {
        this.projectId = t, this.database = e || "(default)";
      }
      static empty() {
        return new _Oe("", "");
      }
      get isDefaultDatabase() {
        return "(default)" === this.database;
      }
      isEqual(t) {
        return t instanceof _Oe && t.projectId === this.projectId && t.database === this.database;
      }
    };
    var Fe = {
      mapValue: {
        fields: {
          __type__: {
            stringValue: "__max__"
          }
        }
      }
    };
    var Be = {
      nullValue: "NULL_VALUE"
    };
    function Le(t) {
      return "nullValue" in t ? 0 : "booleanValue" in t ? 1 : "integerValue" in t || "doubleValue" in t ? 2 : "timestampValue" in t ? 3 : "stringValue" in t ? 5 : "bytesValue" in t ? 6 : "referenceValue" in t ? 7 : "geoPointValue" in t ? 8 : "arrayValue" in t ? 9 : "mapValue" in t ? Ne(t) ? 4 : en(t) ? 9007199254740991 : 10 : O();
    }
    function qe(t, e) {
      if (t === e)
        return true;
      const n = Le(t);
      if (n !== Le(e))
        return false;
      switch (n) {
        case 0:
        case 9007199254740991:
          return true;
        case 1:
          return t.booleanValue === e.booleanValue;
        case 4:
          return Me(t).isEqual(Me(e));
        case 3:
          return function(t2, e2) {
            if ("string" == typeof t2.timestampValue && "string" == typeof e2.timestampValue && t2.timestampValue.length === e2.timestampValue.length)
              return t2.timestampValue === e2.timestampValue;
            const n2 = De(t2.timestampValue), s = De(e2.timestampValue);
            return n2.seconds === s.seconds && n2.nanos === s.nanos;
          }(t, e);
        case 5:
          return t.stringValue === e.stringValue;
        case 6:
          return function(t2, e2) {
            return xe(t2.bytesValue).isEqual(xe(e2.bytesValue));
          }(t, e);
        case 7:
          return t.referenceValue === e.referenceValue;
        case 8:
          return function(t2, e2) {
            return Ce(t2.geoPointValue.latitude) === Ce(e2.geoPointValue.latitude) && Ce(t2.geoPointValue.longitude) === Ce(e2.geoPointValue.longitude);
          }(t, e);
        case 2:
          return function(t2, e2) {
            if ("integerValue" in t2 && "integerValue" in e2)
              return Ce(t2.integerValue) === Ce(e2.integerValue);
            if ("doubleValue" in t2 && "doubleValue" in e2) {
              const n2 = Ce(t2.doubleValue), s = Ce(e2.doubleValue);
              return n2 === s ? Bt(n2) === Bt(s) : isNaN(n2) && isNaN(s);
            }
            return false;
          }(t, e);
        case 9:
          return nt(t.arrayValue.values || [], e.arrayValue.values || [], qe);
        case 10:
          return function(t2, e2) {
            const n2 = t2.mapValue.fields || {}, s = e2.mapValue.fields || {};
            if (me(n2) !== me(s))
              return false;
            for (const t3 in n2)
              if (n2.hasOwnProperty(t3) && (void 0 === s[t3] || !qe(n2[t3], s[t3])))
                return false;
            return true;
          }(t, e);
        default:
          return O();
      }
    }
    function Ue(t, e) {
      return void 0 !== (t.values || []).find((t2) => qe(t2, e));
    }
    function Ke(t, e) {
      if (t === e)
        return 0;
      const n = Le(t), s = Le(e);
      if (n !== s)
        return et(n, s);
      switch (n) {
        case 0:
        case 9007199254740991:
          return 0;
        case 1:
          return et(t.booleanValue, e.booleanValue);
        case 2:
          return function(t2, e2) {
            const n2 = Ce(t2.integerValue || t2.doubleValue), s2 = Ce(e2.integerValue || e2.doubleValue);
            return n2 < s2 ? -1 : n2 > s2 ? 1 : n2 === s2 ? 0 : (
              // one or both are NaN.
              isNaN(n2) ? isNaN(s2) ? 0 : -1 : 1
            );
          }(t, e);
        case 3:
          return Ge(t.timestampValue, e.timestampValue);
        case 4:
          return Ge(Me(t), Me(e));
        case 5:
          return et(t.stringValue, e.stringValue);
        case 6:
          return function(t2, e2) {
            const n2 = xe(t2), s2 = xe(e2);
            return n2.compareTo(s2);
          }(t.bytesValue, e.bytesValue);
        case 7:
          return function(t2, e2) {
            const n2 = t2.split("/"), s2 = e2.split("/");
            for (let t3 = 0; t3 < n2.length && t3 < s2.length; t3++) {
              const e3 = et(n2[t3], s2[t3]);
              if (0 !== e3)
                return e3;
            }
            return et(n2.length, s2.length);
          }(t.referenceValue, e.referenceValue);
        case 8:
          return function(t2, e2) {
            const n2 = et(Ce(t2.latitude), Ce(e2.latitude));
            if (0 !== n2)
              return n2;
            return et(Ce(t2.longitude), Ce(e2.longitude));
          }(t.geoPointValue, e.geoPointValue);
        case 9:
          return function(t2, e2) {
            const n2 = t2.values || [], s2 = e2.values || [];
            for (let t3 = 0; t3 < n2.length && t3 < s2.length; ++t3) {
              const e3 = Ke(n2[t3], s2[t3]);
              if (e3)
                return e3;
            }
            return et(n2.length, s2.length);
          }(t.arrayValue, e.arrayValue);
        case 10:
          return function(t2, e2) {
            if (t2 === Fe.mapValue && e2 === Fe.mapValue)
              return 0;
            if (t2 === Fe.mapValue)
              return 1;
            if (e2 === Fe.mapValue)
              return -1;
            const n2 = t2.fields || {}, s2 = Object.keys(n2), i = e2.fields || {}, r = Object.keys(i);
            s2.sort(), r.sort();
            for (let t3 = 0; t3 < s2.length && t3 < r.length; ++t3) {
              const e3 = et(s2[t3], r[t3]);
              if (0 !== e3)
                return e3;
              const o = Ke(n2[s2[t3]], i[r[t3]]);
              if (0 !== o)
                return o;
            }
            return et(s2.length, r.length);
          }(t.mapValue, e.mapValue);
        default:
          throw O();
      }
    }
    function Ge(t, e) {
      if ("string" == typeof t && "string" == typeof e && t.length === e.length)
        return et(t, e);
      const n = De(t), s = De(e), i = et(n.seconds, s.seconds);
      return 0 !== i ? i : et(n.nanos, s.nanos);
    }
    function Qe(t) {
      return je(t);
    }
    function je(t) {
      return "nullValue" in t ? "null" : "booleanValue" in t ? "" + t.booleanValue : "integerValue" in t ? "" + t.integerValue : "doubleValue" in t ? "" + t.doubleValue : "timestampValue" in t ? function(t2) {
        const e2 = De(t2);
        return `time(${e2.seconds},${e2.nanos})`;
      }(t.timestampValue) : "stringValue" in t ? t.stringValue : "bytesValue" in t ? xe(t.bytesValue).toBase64() : "referenceValue" in t ? (n = t.referenceValue, ht.fromName(n).toString()) : "geoPointValue" in t ? `geo(${(e = t.geoPointValue).latitude},${e.longitude})` : "arrayValue" in t ? function(t2) {
        let e2 = "[", n2 = true;
        for (const s of t2.values || [])
          n2 ? n2 = false : e2 += ",", e2 += je(s);
        return e2 + "]";
      }(t.arrayValue) : "mapValue" in t ? function(t2) {
        const e2 = Object.keys(t2.fields || {}).sort();
        let n2 = "{", s = true;
        for (const i of e2)
          s ? s = false : n2 += ",", n2 += `${i}:${je(t2.fields[i])}`;
        return n2 + "}";
      }(t.mapValue) : O();
      var e, n;
    }
    function ze(t) {
      switch (Le(t)) {
        case 0:
        case 1:
          return 4;
        case 2:
          return 8;
        case 3:
        case 8:
          return 16;
        case 4:
          const e = ke(t);
          return e ? 16 + ze(e) : 16;
        case 5:
          return 2 * t.stringValue.length;
        case 6:
          return xe(t.bytesValue).approximateByteSize();
        case 7:
          return t.referenceValue.length;
        case 9:
          return (t.arrayValue.values || []).reduce((t2, e2) => t2 + ze(e2), 0);
        case 10:
          return function(t2) {
            let e2 = 0;
            return ge(t2.fields, (t3, n) => {
              e2 += t3.length + ze(n);
            }), e2;
          }(t.mapValue);
        default:
          throw O();
      }
    }
    function We(t, e) {
      return {
        referenceValue: `projects/${t.projectId}/databases/${t.database}/documents/${e.path.canonicalString()}`
      };
    }
    function He(t) {
      return !!t && "integerValue" in t;
    }
    function Je(t) {
      return !!t && "arrayValue" in t;
    }
    function Ye(t) {
      return !!t && "nullValue" in t;
    }
    function Xe(t) {
      return !!t && "doubleValue" in t && isNaN(Number(t.doubleValue));
    }
    function Ze(t) {
      return !!t && "mapValue" in t;
    }
    function tn(t) {
      if (t.geoPointValue)
        return {
          geoPointValue: Object.assign({}, t.geoPointValue)
        };
      if (t.timestampValue && "object" == typeof t.timestampValue)
        return {
          timestampValue: Object.assign({}, t.timestampValue)
        };
      if (t.mapValue) {
        const e = {
          mapValue: {
            fields: {}
          }
        };
        return ge(t.mapValue.fields, (t2, n) => e.mapValue.fields[t2] = tn(n)), e;
      }
      if (t.arrayValue) {
        const e = {
          arrayValue: {
            values: []
          }
        };
        for (let n = 0; n < (t.arrayValue.values || []).length; ++n)
          e.arrayValue.values[n] = tn(t.arrayValue.values[n]);
        return e;
      }
      return Object.assign({}, t);
    }
    function en(t) {
      return "__max__" === (((t.mapValue || {}).fields || {}).__type__ || {}).stringValue;
    }
    function nn(t) {
      return "nullValue" in t ? Be : "booleanValue" in t ? {
        booleanValue: false
      } : "integerValue" in t || "doubleValue" in t ? {
        doubleValue: NaN
      } : "timestampValue" in t ? {
        timestampValue: {
          seconds: Number.MIN_SAFE_INTEGER
        }
      } : "stringValue" in t ? {
        stringValue: ""
      } : "bytesValue" in t ? {
        bytesValue: ""
      } : "referenceValue" in t ? We(Oe.empty(), ht.empty()) : "geoPointValue" in t ? {
        geoPointValue: {
          latitude: -90,
          longitude: -180
        }
      } : "arrayValue" in t ? {
        arrayValue: {}
      } : "mapValue" in t ? {
        mapValue: {}
      } : O();
    }
    function sn(t) {
      return "nullValue" in t ? {
        booleanValue: false
      } : "booleanValue" in t ? {
        doubleValue: NaN
      } : "integerValue" in t || "doubleValue" in t ? {
        timestampValue: {
          seconds: Number.MIN_SAFE_INTEGER
        }
      } : "timestampValue" in t ? {
        stringValue: ""
      } : "stringValue" in t ? {
        bytesValue: ""
      } : "bytesValue" in t ? We(Oe.empty(), ht.empty()) : "referenceValue" in t ? {
        geoPointValue: {
          latitude: -90,
          longitude: -180
        }
      } : "geoPointValue" in t ? {
        arrayValue: {}
      } : "arrayValue" in t ? {
        mapValue: {}
      } : "mapValue" in t ? Fe : O();
    }
    function rn(t, e) {
      const n = Ke(t.value, e.value);
      return 0 !== n ? n : t.inclusive && !e.inclusive ? -1 : !t.inclusive && e.inclusive ? 1 : 0;
    }
    function on(t, e) {
      const n = Ke(t.value, e.value);
      return 0 !== n ? n : t.inclusive && !e.inclusive ? 1 : !t.inclusive && e.inclusive ? -1 : 0;
    }
    var un = class _un {
      constructor(t) {
        this.value = t;
      }
      static empty() {
        return new _un({
          mapValue: {}
        });
      }
      /**
       * Returns the value at the given path or null.
       *
       * @param path - the path to search
       * @returns The value at the path or null if the path is not set.
       */
      field(t) {
        if (t.isEmpty())
          return this.value;
        {
          let e = this.value;
          for (let n = 0; n < t.length - 1; ++n)
            if (e = (e.mapValue.fields || {})[t.get(n)], !Ze(e))
              return null;
          return e = (e.mapValue.fields || {})[t.lastSegment()], e || null;
        }
      }
      /**
       * Sets the field to the provided value.
       *
       * @param path - The field path to set.
       * @param value - The value to set.
       */
      set(t, e) {
        this.getFieldsMap(t.popLast())[t.lastSegment()] = tn(e);
      }
      /**
       * Sets the provided fields to the provided values.
       *
       * @param data - A map of fields to values (or null for deletes).
       */
      setAll(t) {
        let e = at.emptyPath(), n = {}, s = [];
        t.forEach((t2, i2) => {
          if (!e.isImmediateParentOf(i2)) {
            const t3 = this.getFieldsMap(e);
            this.applyChanges(t3, n, s), n = {}, s = [], e = i2.popLast();
          }
          t2 ? n[i2.lastSegment()] = tn(t2) : s.push(i2.lastSegment());
        });
        const i = this.getFieldsMap(e);
        this.applyChanges(i, n, s);
      }
      /**
       * Removes the field at the specified path. If there is no field at the
       * specified path, nothing is changed.
       *
       * @param path - The field path to remove.
       */
      delete(t) {
        const e = this.field(t.popLast());
        Ze(e) && e.mapValue.fields && delete e.mapValue.fields[t.lastSegment()];
      }
      isEqual(t) {
        return qe(this.value, t.value);
      }
      /**
       * Returns the map that contains the leaf element of `path`. If the parent
       * entry does not yet exist, or if it is not a map, a new map will be created.
       */
      getFieldsMap(t) {
        let e = this.value;
        e.mapValue.fields || (e.mapValue = {
          fields: {}
        });
        for (let n = 0; n < t.length; ++n) {
          let s = e.mapValue.fields[t.get(n)];
          Ze(s) && s.mapValue.fields || (s = {
            mapValue: {
              fields: {}
            }
          }, e.mapValue.fields[t.get(n)] = s), e = s;
        }
        return e.mapValue.fields;
      }
      /**
       * Modifies `fieldsMap` by adding, replacing or deleting the specified
       * entries.
       */
      applyChanges(t, e, n) {
        ge(e, (e2, n2) => t[e2] = n2);
        for (const e2 of n)
          delete t[e2];
      }
      clone() {
        return new _un(tn(this.value));
      }
    };
    function cn(t) {
      const e = [];
      return ge(t.fields, (t2, n) => {
        const s = new at([t2]);
        if (Ze(n)) {
          const t3 = cn(n.mapValue).fields;
          if (0 === t3.length)
            e.push(s);
          else
            for (const n2 of t3)
              e.push(s.child(n2));
        } else
          e.push(s);
      }), new Re(e);
    }
    var an = class _an {
      constructor(t, e, n, s, i, r, o) {
        this.key = t, this.documentType = e, this.version = n, this.readTime = s, this.createTime = i, this.data = r, this.documentState = o;
      }
      /**
       * Creates a document with no known version or data, but which can serve as
       * base document for mutations.
       */
      static newInvalidDocument(t) {
        return new _an(
          t,
          0,
          /* version */
          rt.min(),
          /* readTime */
          rt.min(),
          /* createTime */
          rt.min(),
          un.empty(),
          0
          /* DocumentState.SYNCED */
        );
      }
      /**
       * Creates a new document that is known to exist with the given data at the
       * given version.
       */
      static newFoundDocument(t, e, n, s) {
        return new _an(
          t,
          1,
          /* version */
          e,
          /* readTime */
          rt.min(),
          /* createTime */
          n,
          s,
          0
          /* DocumentState.SYNCED */
        );
      }
      /** Creates a new document that is known to not exist at the given version. */
      static newNoDocument(t, e) {
        return new _an(
          t,
          2,
          /* version */
          e,
          /* readTime */
          rt.min(),
          /* createTime */
          rt.min(),
          un.empty(),
          0
          /* DocumentState.SYNCED */
        );
      }
      /**
       * Creates a new document that is known to exist at the given version but
       * whose data is not known (e.g. a document that was updated without a known
       * base document).
       */
      static newUnknownDocument(t, e) {
        return new _an(
          t,
          3,
          /* version */
          e,
          /* readTime */
          rt.min(),
          /* createTime */
          rt.min(),
          un.empty(),
          2
          /* DocumentState.HAS_COMMITTED_MUTATIONS */
        );
      }
      /**
       * Changes the document type to indicate that it exists and that its version
       * and data are known.
       */
      convertToFoundDocument(t, e) {
        return !this.createTime.isEqual(rt.min()) || 2 !== this.documentType && 0 !== this.documentType || (this.createTime = t), this.version = t, this.documentType = 1, this.data = e, this.documentState = 0, this;
      }
      /**
       * Changes the document type to indicate that it doesn't exist at the given
       * version.
       */
      convertToNoDocument(t) {
        return this.version = t, this.documentType = 2, this.data = un.empty(), this.documentState = 0, this;
      }
      /**
       * Changes the document type to indicate that it exists at a given version but
       * that its data is not known (e.g. a document that was updated without a known
       * base document).
       */
      convertToUnknownDocument(t) {
        return this.version = t, this.documentType = 3, this.data = un.empty(), this.documentState = 2, this;
      }
      setHasCommittedMutations() {
        return this.documentState = 2, this;
      }
      setHasLocalMutations() {
        return this.documentState = 1, this.version = rt.min(), this;
      }
      setReadTime(t) {
        return this.readTime = t, this;
      }
      get hasLocalMutations() {
        return 1 === this.documentState;
      }
      get hasCommittedMutations() {
        return 2 === this.documentState;
      }
      get hasPendingWrites() {
        return this.hasLocalMutations || this.hasCommittedMutations;
      }
      isValidDocument() {
        return 0 !== this.documentType;
      }
      isFoundDocument() {
        return 1 === this.documentType;
      }
      isNoDocument() {
        return 2 === this.documentType;
      }
      isUnknownDocument() {
        return 3 === this.documentType;
      }
      isEqual(t) {
        return t instanceof _an && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.documentType === t.documentType && this.documentState === t.documentState && this.data.isEqual(t.data);
      }
      mutableCopy() {
        return new _an(this.key, this.documentType, this.version, this.readTime, this.createTime, this.data.clone(), this.documentState);
      }
      toString() {
        return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {createTime: ${this.createTime}}), {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`;
      }
    };
    var hn = class {
      constructor(t, e) {
        this.position = t, this.inclusive = e;
      }
    };
    function ln(t, e, n) {
      let s = 0;
      for (let i = 0; i < t.position.length; i++) {
        const r = e[i], o = t.position[i];
        if (r.field.isKeyField())
          s = ht.comparator(ht.fromName(o.referenceValue), n.key);
        else {
          s = Ke(o, n.data.field(r.field));
        }
        if ("desc" === r.dir && (s *= -1), 0 !== s)
          break;
      }
      return s;
    }
    function fn(t, e) {
      if (null === t)
        return null === e;
      if (null === e)
        return false;
      if (t.inclusive !== e.inclusive || t.position.length !== e.position.length)
        return false;
      for (let n = 0; n < t.position.length; n++) {
        if (!qe(t.position[n], e.position[n]))
          return false;
      }
      return true;
    }
    var dn = class {
      constructor(t, e = "asc") {
        this.field = t, this.dir = e;
      }
    };
    function wn(t, e) {
      return t.dir === e.dir && t.field.isEqual(e.field);
    }
    var _n = class {
    };
    var mn = class _mn extends _n {
      constructor(t, e, n) {
        super(), this.field = t, this.op = e, this.value = n;
      }
      /**
       * Creates a filter based on the provided arguments.
       */
      static create(t, e, n) {
        return t.isKeyField() ? "in" === e || "not-in" === e ? this.createKeyFieldInFilter(t, e, n) : new Pn(t, e, n) : "array-contains" === e ? new Dn(t, n) : "in" === e ? new Cn(t, n) : "not-in" === e ? new xn(t, n) : "array-contains-any" === e ? new Nn(t, n) : new _mn(t, e, n);
      }
      static createKeyFieldInFilter(t, e, n) {
        return "in" === e ? new bn(t, n) : new Vn(t, n);
      }
      matches(t) {
        const e = t.data.field(this.field);
        return "!=" === this.op ? null !== e && this.matchesComparison(Ke(e, this.value)) : null !== e && Le(this.value) === Le(e) && this.matchesComparison(Ke(e, this.value));
      }
      matchesComparison(t) {
        switch (this.op) {
          case "<":
            return t < 0;
          case "<=":
            return t <= 0;
          case "==":
            return 0 === t;
          case "!=":
            return 0 !== t;
          case ">":
            return t > 0;
          case ">=":
            return t >= 0;
          default:
            return O();
        }
      }
      isInequality() {
        return [
          "<",
          "<=",
          ">",
          ">=",
          "!=",
          "not-in"
          /* Operator.NOT_IN */
        ].indexOf(this.op) >= 0;
      }
      getFlattenedFilters() {
        return [this];
      }
      getFilters() {
        return [this];
      }
      getFirstInequalityField() {
        return this.isInequality() ? this.field : null;
      }
    };
    var gn = class _gn extends _n {
      constructor(t, e) {
        super(), this.filters = t, this.op = e, this.lt = null;
      }
      /**
       * Creates a filter based on the provided arguments.
       */
      static create(t, e) {
        return new _gn(t, e);
      }
      matches(t) {
        return yn(this) ? void 0 === this.filters.find((e) => !e.matches(t)) : void 0 !== this.filters.find((e) => e.matches(t));
      }
      getFlattenedFilters() {
        return null !== this.lt || (this.lt = this.filters.reduce((t, e) => t.concat(e.getFlattenedFilters()), [])), this.lt;
      }
      // Returns a mutable copy of `this.filters`
      getFilters() {
        return Object.assign([], this.filters);
      }
      getFirstInequalityField() {
        const t = this.ft((t2) => t2.isInequality());
        return null !== t ? t.field : null;
      }
      // Performs a depth-first search to find and return the first FieldFilter in the composite filter
      // that satisfies the predicate. Returns `null` if none of the FieldFilters satisfy the
      // predicate.
      ft(t) {
        for (const e of this.getFlattenedFilters())
          if (t(e))
            return e;
        return null;
      }
    };
    function yn(t) {
      return "and" === t.op;
    }
    function pn(t) {
      return "or" === t.op;
    }
    function In(t) {
      return Tn(t) && yn(t);
    }
    function Tn(t) {
      for (const e of t.filters)
        if (e instanceof gn)
          return false;
      return true;
    }
    function En(t) {
      if (t instanceof mn)
        return t.field.canonicalString() + t.op.toString() + Qe(t.value);
      if (In(t))
        return t.filters.map((t2) => En(t2)).join(",");
      {
        const e = t.filters.map((t2) => En(t2)).join(",");
        return `${t.op}(${e})`;
      }
    }
    function An(t, e) {
      return t instanceof mn ? function(t2, e2) {
        return e2 instanceof mn && t2.op === e2.op && t2.field.isEqual(e2.field) && qe(t2.value, e2.value);
      }(t, e) : t instanceof gn ? function(t2, e2) {
        if (e2 instanceof gn && t2.op === e2.op && t2.filters.length === e2.filters.length) {
          return t2.filters.reduce((t3, n, s) => t3 && An(n, e2.filters[s]), true);
        }
        return false;
      }(t, e) : void O();
    }
    function vn(t, e) {
      const n = t.filters.concat(e);
      return gn.create(n, t.op);
    }
    function Rn(t) {
      return t instanceof mn ? function(t2) {
        return `${t2.field.canonicalString()} ${t2.op} ${Qe(t2.value)}`;
      }(t) : t instanceof gn ? function(t2) {
        return t2.op.toString() + " {" + t2.getFilters().map(Rn).join(" ,") + "}";
      }(t) : "Filter";
    }
    var Pn = class extends mn {
      constructor(t, e, n) {
        super(t, e, n), this.key = ht.fromName(n.referenceValue);
      }
      matches(t) {
        const e = ht.comparator(t.key, this.key);
        return this.matchesComparison(e);
      }
    };
    var bn = class extends mn {
      constructor(t, e) {
        super(t, "in", e), this.keys = Sn("in", e);
      }
      matches(t) {
        return this.keys.some((e) => e.isEqual(t.key));
      }
    };
    var Vn = class extends mn {
      constructor(t, e) {
        super(t, "not-in", e), this.keys = Sn("not-in", e);
      }
      matches(t) {
        return !this.keys.some((e) => e.isEqual(t.key));
      }
    };
    function Sn(t, e) {
      var n;
      return ((null === (n = e.arrayValue) || void 0 === n ? void 0 : n.values) || []).map((t2) => ht.fromName(t2.referenceValue));
    }
    var Dn = class extends mn {
      constructor(t, e) {
        super(t, "array-contains", e);
      }
      matches(t) {
        const e = t.data.field(this.field);
        return Je(e) && Ue(e.arrayValue, this.value);
      }
    };
    var Cn = class extends mn {
      constructor(t, e) {
        super(t, "in", e);
      }
      matches(t) {
        const e = t.data.field(this.field);
        return null !== e && Ue(this.value.arrayValue, e);
      }
    };
    var xn = class extends mn {
      constructor(t, e) {
        super(t, "not-in", e);
      }
      matches(t) {
        if (Ue(this.value.arrayValue, {
          nullValue: "NULL_VALUE"
        }))
          return false;
        const e = t.data.field(this.field);
        return null !== e && !Ue(this.value.arrayValue, e);
      }
    };
    var Nn = class extends mn {
      constructor(t, e) {
        super(t, "array-contains-any", e);
      }
      matches(t) {
        const e = t.data.field(this.field);
        return !(!Je(e) || !e.arrayValue.values) && e.arrayValue.values.some((t2) => Ue(this.value.arrayValue, t2));
      }
    };
    var kn = class {
      constructor(t, e = null, n = [], s = [], i = null, r = null, o = null) {
        this.path = t, this.collectionGroup = e, this.orderBy = n, this.filters = s, this.limit = i, this.startAt = r, this.endAt = o, this.dt = null;
      }
    };
    function Mn(t, e = null, n = [], s = [], i = null, r = null, o = null) {
      return new kn(t, e, n, s, i, r, o);
    }
    function $n(t) {
      const e = L(t);
      if (null === e.dt) {
        let t2 = e.path.canonicalString();
        null !== e.collectionGroup && (t2 += "|cg:" + e.collectionGroup), t2 += "|f:", t2 += e.filters.map((t3) => En(t3)).join(","), t2 += "|ob:", t2 += e.orderBy.map((t3) => function(t4) {
          return t4.field.canonicalString() + t4.dir;
        }(t3)).join(","), Ft(e.limit) || (t2 += "|l:", t2 += e.limit), e.startAt && (t2 += "|lb:", t2 += e.startAt.inclusive ? "b:" : "a:", t2 += e.startAt.position.map((t3) => Qe(t3)).join(",")), e.endAt && (t2 += "|ub:", t2 += e.endAt.inclusive ? "a:" : "b:", t2 += e.endAt.position.map((t3) => Qe(t3)).join(",")), e.dt = t2;
      }
      return e.dt;
    }
    function On(t, e) {
      if (t.limit !== e.limit)
        return false;
      if (t.orderBy.length !== e.orderBy.length)
        return false;
      for (let n = 0; n < t.orderBy.length; n++)
        if (!wn(t.orderBy[n], e.orderBy[n]))
          return false;
      if (t.filters.length !== e.filters.length)
        return false;
      for (let n = 0; n < t.filters.length; n++)
        if (!An(t.filters[n], e.filters[n]))
          return false;
      return t.collectionGroup === e.collectionGroup && (!!t.path.isEqual(e.path) && (!!fn(t.startAt, e.startAt) && fn(t.endAt, e.endAt)));
    }
    function Fn(t) {
      return ht.isDocumentKey(t.path) && null === t.collectionGroup && 0 === t.filters.length;
    }
    function Bn(t, e) {
      return t.filters.filter((t2) => t2 instanceof mn && t2.field.isEqual(e));
    }
    function Ln(t, e, n) {
      let s = Be, i = true;
      for (const n2 of Bn(t, e)) {
        let t2 = Be, e2 = true;
        switch (n2.op) {
          case "<":
          case "<=":
            t2 = nn(n2.value);
            break;
          case "==":
          case "in":
          case ">=":
            t2 = n2.value;
            break;
          case ">":
            t2 = n2.value, e2 = false;
            break;
          case "!=":
          case "not-in":
            t2 = Be;
        }
        rn({
          value: s,
          inclusive: i
        }, {
          value: t2,
          inclusive: e2
        }) < 0 && (s = t2, i = e2);
      }
      if (null !== n)
        for (let r = 0; r < t.orderBy.length; ++r) {
          if (t.orderBy[r].field.isEqual(e)) {
            const t2 = n.position[r];
            rn({
              value: s,
              inclusive: i
            }, {
              value: t2,
              inclusive: n.inclusive
            }) < 0 && (s = t2, i = n.inclusive);
            break;
          }
        }
      return {
        value: s,
        inclusive: i
      };
    }
    function qn(t, e, n) {
      let s = Fe, i = true;
      for (const n2 of Bn(t, e)) {
        let t2 = Fe, e2 = true;
        switch (n2.op) {
          case ">=":
          case ">":
            t2 = sn(n2.value), e2 = false;
            break;
          case "==":
          case "in":
          case "<=":
            t2 = n2.value;
            break;
          case "<":
            t2 = n2.value, e2 = false;
            break;
          case "!=":
          case "not-in":
            t2 = Fe;
        }
        on({
          value: s,
          inclusive: i
        }, {
          value: t2,
          inclusive: e2
        }) > 0 && (s = t2, i = e2);
      }
      if (null !== n)
        for (let r = 0; r < t.orderBy.length; ++r) {
          if (t.orderBy[r].field.isEqual(e)) {
            const t2 = n.position[r];
            on({
              value: s,
              inclusive: i
            }, {
              value: t2,
              inclusive: n.inclusive
            }) > 0 && (s = t2, i = n.inclusive);
            break;
          }
        }
      return {
        value: s,
        inclusive: i
      };
    }
    var Un = class {
      /**
       * Initializes a Query with a path and optional additional query constraints.
       * Path must currently be empty if this is a collection group query.
       */
      constructor(t, e = null, n = [], s = [], i = null, r = "F", o = null, u = null) {
        this.path = t, this.collectionGroup = e, this.explicitOrderBy = n, this.filters = s, this.limit = i, this.limitType = r, this.startAt = o, this.endAt = u, this.wt = null, // The corresponding `Target` of this `Query` instance.
        this._t = null, this.startAt, this.endAt;
      }
    };
    function Kn(t, e, n, s, i, r, o, u) {
      return new Un(t, e, n, s, i, r, o, u);
    }
    function Gn(t) {
      return new Un(t);
    }
    function Qn(t) {
      return 0 === t.filters.length && null === t.limit && null == t.startAt && null == t.endAt && (0 === t.explicitOrderBy.length || 1 === t.explicitOrderBy.length && t.explicitOrderBy[0].field.isKeyField());
    }
    function jn(t) {
      return t.explicitOrderBy.length > 0 ? t.explicitOrderBy[0].field : null;
    }
    function zn(t) {
      for (const e of t.filters) {
        const t2 = e.getFirstInequalityField();
        if (null !== t2)
          return t2;
      }
      return null;
    }
    function Wn(t) {
      return null !== t.collectionGroup;
    }
    function Hn(t) {
      const e = L(t);
      if (null === e.wt) {
        e.wt = [];
        const t2 = zn(e), n = jn(e);
        if (null !== t2 && null === n)
          t2.isKeyField() || e.wt.push(new dn(t2)), e.wt.push(new dn(
            at.keyField(),
            "asc"
            /* Direction.ASCENDING */
          ));
        else {
          let t3 = false;
          for (const n2 of e.explicitOrderBy)
            e.wt.push(n2), n2.field.isKeyField() && (t3 = true);
          if (!t3) {
            const t4 = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : "asc";
            e.wt.push(new dn(at.keyField(), t4));
          }
        }
      }
      return e.wt;
    }
    function Jn(t) {
      const e = L(t);
      if (!e._t)
        if ("F" === e.limitType)
          e._t = Mn(e.path, e.collectionGroup, Hn(e), e.filters, e.limit, e.startAt, e.endAt);
        else {
          const t2 = [];
          for (const n2 of Hn(e)) {
            const e2 = "desc" === n2.dir ? "asc" : "desc";
            t2.push(new dn(n2.field, e2));
          }
          const n = e.endAt ? new hn(e.endAt.position, e.endAt.inclusive) : null, s = e.startAt ? new hn(e.startAt.position, e.startAt.inclusive) : null;
          e._t = Mn(e.path, e.collectionGroup, t2, e.filters, e.limit, n, s);
        }
      return e._t;
    }
    function Yn(t, e) {
      e.getFirstInequalityField(), zn(t);
      const n = t.filters.concat([e]);
      return new Un(t.path, t.collectionGroup, t.explicitOrderBy.slice(), n, t.limit, t.limitType, t.startAt, t.endAt);
    }
    function Xn(t, e, n) {
      return new Un(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), e, n, t.startAt, t.endAt);
    }
    function Zn(t, e) {
      return On(Jn(t), Jn(e)) && t.limitType === e.limitType;
    }
    function ts(t) {
      return `${$n(Jn(t))}|lt:${t.limitType}`;
    }
    function es(t) {
      return `Query(target=${function(t2) {
        let e = t2.path.canonicalString();
        return null !== t2.collectionGroup && (e += " collectionGroup=" + t2.collectionGroup), t2.filters.length > 0 && (e += `, filters: [${t2.filters.map((t3) => Rn(t3)).join(", ")}]`), Ft(t2.limit) || (e += ", limit: " + t2.limit), t2.orderBy.length > 0 && (e += `, orderBy: [${t2.orderBy.map((t3) => function(t4) {
          return `${t4.field.canonicalString()} (${t4.dir})`;
        }(t3)).join(", ")}]`), t2.startAt && (e += ", startAt: ", e += t2.startAt.inclusive ? "b:" : "a:", e += t2.startAt.position.map((t3) => Qe(t3)).join(",")), t2.endAt && (e += ", endAt: ", e += t2.endAt.inclusive ? "a:" : "b:", e += t2.endAt.position.map((t3) => Qe(t3)).join(",")), `Target(${e})`;
      }(Jn(t))}; limitType=${t.limitType})`;
    }
    function ns(t, e) {
      return e.isFoundDocument() && function(t2, e2) {
        const n = e2.key.path;
        return null !== t2.collectionGroup ? e2.key.hasCollectionId(t2.collectionGroup) && t2.path.isPrefixOf(n) : ht.isDocumentKey(t2.path) ? t2.path.isEqual(n) : t2.path.isImmediateParentOf(n);
      }(t, e) && function(t2, e2) {
        for (const n of Hn(t2))
          if (!n.field.isKeyField() && null === e2.data.field(n.field))
            return false;
        return true;
      }(t, e) && function(t2, e2) {
        for (const n of t2.filters)
          if (!n.matches(e2))
            return false;
        return true;
      }(t, e) && function(t2, e2) {
        if (t2.startAt && !/**
        * Returns true if a document sorts before a bound using the provided sort
        * order.
        */
        function(t3, e3, n) {
          const s = ln(t3, e3, n);
          return t3.inclusive ? s <= 0 : s < 0;
        }(t2.startAt, Hn(t2), e2))
          return false;
        if (t2.endAt && !function(t3, e3, n) {
          const s = ln(t3, e3, n);
          return t3.inclusive ? s >= 0 : s > 0;
        }(t2.endAt, Hn(t2), e2))
          return false;
        return true;
      }(t, e);
    }
    function ss(t) {
      return t.collectionGroup || (t.path.length % 2 == 1 ? t.path.lastSegment() : t.path.get(t.path.length - 2));
    }
    function is(t) {
      return (e, n) => {
        let s = false;
        for (const i of Hn(t)) {
          const t2 = rs(i, e, n);
          if (0 !== t2)
            return t2;
          s = s || i.field.isKeyField();
        }
        return 0;
      };
    }
    function rs(t, e, n) {
      const s = t.field.isKeyField() ? ht.comparator(e.key, n.key) : function(t2, e2, n2) {
        const s2 = e2.data.field(t2), i = n2.data.field(t2);
        return null !== s2 && null !== i ? Ke(s2, i) : O();
      }(t.field, e, n);
      switch (t.dir) {
        case "asc":
          return s;
        case "desc":
          return -1 * s;
        default:
          return O();
      }
    }
    var os = class {
      constructor(t, e) {
        this.mapKeyFn = t, this.equalsFn = e, /**
         * The inner map for a key/value pair. Due to the possibility of collisions we
         * keep a list of entries that we do a linear search through to find an actual
         * match. Note that collisions should be rare, so we still expect near
         * constant time lookups in practice.
         */
        this.inner = {}, /** The number of entries stored in the map */
        this.innerSize = 0;
      }
      /** Get a value for this key, or undefined if it does not exist. */
      get(t) {
        const e = this.mapKeyFn(t), n = this.inner[e];
        if (void 0 !== n) {
          for (const [e2, s] of n)
            if (this.equalsFn(e2, t))
              return s;
        }
      }
      has(t) {
        return void 0 !== this.get(t);
      }
      /** Put this key and value in the map. */
      set(t, e) {
        const n = this.mapKeyFn(t), s = this.inner[n];
        if (void 0 === s)
          return this.inner[n] = [[t, e]], void this.innerSize++;
        for (let n2 = 0; n2 < s.length; n2++)
          if (this.equalsFn(s[n2][0], t))
            return void (s[n2] = [t, e]);
        s.push([t, e]), this.innerSize++;
      }
      /**
       * Remove this key from the map. Returns a boolean if anything was deleted.
       */
      delete(t) {
        const e = this.mapKeyFn(t), n = this.inner[e];
        if (void 0 === n)
          return false;
        for (let s = 0; s < n.length; s++)
          if (this.equalsFn(n[s][0], t))
            return 1 === n.length ? delete this.inner[e] : n.splice(s, 1), this.innerSize--, true;
        return false;
      }
      forEach(t) {
        ge(this.inner, (e, n) => {
          for (const [e2, s] of n)
            t(e2, s);
        });
      }
      isEmpty() {
        return ye(this.inner);
      }
      size() {
        return this.innerSize;
      }
    };
    var us = new pe(ht.comparator);
    function cs() {
      return us;
    }
    var as = new pe(ht.comparator);
    function hs(...t) {
      let e = as;
      for (const n of t)
        e = e.insert(n.key, n);
      return e;
    }
    function ls(t) {
      let e = as;
      return t.forEach((t2, n) => e = e.insert(t2, n.overlayedDocument)), e;
    }
    function fs() {
      return ws();
    }
    function ds() {
      return ws();
    }
    function ws() {
      return new os((t) => t.toString(), (t, e) => t.isEqual(e));
    }
    var _s = new pe(ht.comparator);
    var ms = new Ee(ht.comparator);
    function gs(...t) {
      let e = ms;
      for (const n of t)
        e = e.add(n);
      return e;
    }
    var ys = new Ee(et);
    function ps() {
      return ys;
    }
    function Is(t, e) {
      if (t.useProto3Json) {
        if (isNaN(e))
          return {
            doubleValue: "NaN"
          };
        if (e === 1 / 0)
          return {
            doubleValue: "Infinity"
          };
        if (e === -1 / 0)
          return {
            doubleValue: "-Infinity"
          };
      }
      return {
        doubleValue: Bt(e) ? "-0" : e
      };
    }
    function Ts(t) {
      return {
        integerValue: "" + t
      };
    }
    function Es(t, e) {
      return Lt(e) ? Ts(e) : Is(t, e);
    }
    var As = class {
      constructor() {
        this._ = void 0;
      }
    };
    function vs(t, e, n) {
      return t instanceof bs ? function(t2, e2) {
        const n2 = {
          fields: {
            __type__: {
              stringValue: "server_timestamp"
            },
            __local_write_time__: {
              timestampValue: {
                seconds: t2.seconds,
                nanos: t2.nanoseconds
              }
            }
          }
        };
        return e2 && Ne(e2) && (e2 = ke(e2)), e2 && (n2.fields.__previous_value__ = e2), {
          mapValue: n2
        };
      }(n, e) : t instanceof Vs ? Ss(t, e) : t instanceof Ds ? Cs(t, e) : function(t2, e2) {
        const n2 = Ps(t2, e2), s = Ns(n2) + Ns(t2.gt);
        return He(n2) && He(t2.gt) ? Ts(s) : Is(t2.serializer, s);
      }(t, e);
    }
    function Rs(t, e, n) {
      return t instanceof Vs ? Ss(t, e) : t instanceof Ds ? Cs(t, e) : n;
    }
    function Ps(t, e) {
      return t instanceof xs ? He(n = e) || function(t2) {
        return !!t2 && "doubleValue" in t2;
      }(n) ? e : {
        integerValue: 0
      } : null;
      var n;
    }
    var bs = class extends As {
    };
    var Vs = class extends As {
      constructor(t) {
        super(), this.elements = t;
      }
    };
    function Ss(t, e) {
      const n = ks(e);
      for (const e2 of t.elements)
        n.some((t2) => qe(t2, e2)) || n.push(e2);
      return {
        arrayValue: {
          values: n
        }
      };
    }
    var Ds = class extends As {
      constructor(t) {
        super(), this.elements = t;
      }
    };
    function Cs(t, e) {
      let n = ks(e);
      for (const e2 of t.elements)
        n = n.filter((t2) => !qe(t2, e2));
      return {
        arrayValue: {
          values: n
        }
      };
    }
    var xs = class extends As {
      constructor(t, e) {
        super(), this.serializer = t, this.gt = e;
      }
    };
    function Ns(t) {
      return Ce(t.integerValue || t.doubleValue);
    }
    function ks(t) {
      return Je(t) && t.arrayValue.values ? t.arrayValue.values.slice() : [];
    }
    var Ms = class {
      constructor(t, e) {
        this.field = t, this.transform = e;
      }
    };
    function $s(t, e) {
      return t.field.isEqual(e.field) && function(t2, e2) {
        return t2 instanceof Vs && e2 instanceof Vs || t2 instanceof Ds && e2 instanceof Ds ? nt(t2.elements, e2.elements, qe) : t2 instanceof xs && e2 instanceof xs ? qe(t2.gt, e2.gt) : t2 instanceof bs && e2 instanceof bs;
      }(t.transform, e.transform);
    }
    var Os = class {
      constructor(t, e) {
        this.version = t, this.transformResults = e;
      }
    };
    var Fs = class _Fs {
      constructor(t, e) {
        this.updateTime = t, this.exists = e;
      }
      /** Creates a new empty Precondition. */
      static none() {
        return new _Fs();
      }
      /** Creates a new Precondition with an exists flag. */
      static exists(t) {
        return new _Fs(void 0, t);
      }
      /** Creates a new Precondition based on a version a document exists at. */
      static updateTime(t) {
        return new _Fs(t);
      }
      /** Returns whether this Precondition is empty. */
      get isNone() {
        return void 0 === this.updateTime && void 0 === this.exists;
      }
      isEqual(t) {
        return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);
      }
    };
    function Bs(t, e) {
      return void 0 !== t.updateTime ? e.isFoundDocument() && e.version.isEqual(t.updateTime) : void 0 === t.exists || t.exists === e.isFoundDocument();
    }
    var Ls = class {
    };
    function qs(t, e) {
      if (!t.hasLocalMutations || e && 0 === e.fields.length)
        return null;
      if (null === e)
        return t.isNoDocument() ? new Ys(t.key, Fs.none()) : new js(t.key, t.data, Fs.none());
      {
        const n = t.data, s = un.empty();
        let i = new Ee(at.comparator);
        for (let t2 of e.fields)
          if (!i.has(t2)) {
            let e2 = n.field(t2);
            null === e2 && t2.length > 1 && (t2 = t2.popLast(), e2 = n.field(t2)), null === e2 ? s.delete(t2) : s.set(t2, e2), i = i.add(t2);
          }
        return new zs(t.key, s, new Re(i.toArray()), Fs.none());
      }
    }
    function Us(t, e, n) {
      t instanceof js ? function(t2, e2, n2) {
        const s = t2.value.clone(), i = Hs(t2.fieldTransforms, e2, n2.transformResults);
        s.setAll(i), e2.convertToFoundDocument(n2.version, s).setHasCommittedMutations();
      }(t, e, n) : t instanceof zs ? function(t2, e2, n2) {
        if (!Bs(t2.precondition, e2))
          return void e2.convertToUnknownDocument(n2.version);
        const s = Hs(t2.fieldTransforms, e2, n2.transformResults), i = e2.data;
        i.setAll(Ws(t2)), i.setAll(s), e2.convertToFoundDocument(n2.version, i).setHasCommittedMutations();
      }(t, e, n) : function(t2, e2, n2) {
        e2.convertToNoDocument(n2.version).setHasCommittedMutations();
      }(0, e, n);
    }
    function Ks(t, e, n, s) {
      return t instanceof js ? function(t2, e2, n2, s2) {
        if (!Bs(t2.precondition, e2))
          return n2;
        const i = t2.value.clone(), r = Js(t2.fieldTransforms, s2, e2);
        return i.setAll(r), e2.convertToFoundDocument(e2.version, i).setHasLocalMutations(), null;
      }(t, e, n, s) : t instanceof zs ? function(t2, e2, n2, s2) {
        if (!Bs(t2.precondition, e2))
          return n2;
        const i = Js(t2.fieldTransforms, s2, e2), r = e2.data;
        if (r.setAll(Ws(t2)), r.setAll(i), e2.convertToFoundDocument(e2.version, r).setHasLocalMutations(), null === n2)
          return null;
        return n2.unionWith(t2.fieldMask.fields).unionWith(t2.fieldTransforms.map((t3) => t3.field));
      }(t, e, n, s) : function(t2, e2, n2) {
        if (Bs(t2.precondition, e2))
          return e2.convertToNoDocument(e2.version).setHasLocalMutations(), null;
        return n2;
      }(t, e, n);
    }
    function Gs(t, e) {
      let n = null;
      for (const s of t.fieldTransforms) {
        const t2 = e.data.field(s.field), i = Ps(s.transform, t2 || null);
        null != i && (null === n && (n = un.empty()), n.set(s.field, i));
      }
      return n || null;
    }
    function Qs(t, e) {
      return t.type === e.type && (!!t.key.isEqual(e.key) && (!!t.precondition.isEqual(e.precondition) && (!!function(t2, e2) {
        return void 0 === t2 && void 0 === e2 || !(!t2 || !e2) && nt(t2, e2, (t3, e3) => $s(t3, e3));
      }(t.fieldTransforms, e.fieldTransforms) && (0 === t.type ? t.value.isEqual(e.value) : 1 !== t.type || t.data.isEqual(e.data) && t.fieldMask.isEqual(e.fieldMask)))));
    }
    var js = class extends Ls {
      constructor(t, e, n, s = []) {
        super(), this.key = t, this.value = e, this.precondition = n, this.fieldTransforms = s, this.type = 0;
      }
      getFieldMask() {
        return null;
      }
    };
    var zs = class extends Ls {
      constructor(t, e, n, s, i = []) {
        super(), this.key = t, this.data = e, this.fieldMask = n, this.precondition = s, this.fieldTransforms = i, this.type = 1;
      }
      getFieldMask() {
        return this.fieldMask;
      }
    };
    function Ws(t) {
      const e = /* @__PURE__ */ new Map();
      return t.fieldMask.fields.forEach((n) => {
        if (!n.isEmpty()) {
          const s = t.data.field(n);
          e.set(n, s);
        }
      }), e;
    }
    function Hs(t, e, n) {
      const s = /* @__PURE__ */ new Map();
      F(t.length === n.length);
      for (let i = 0; i < n.length; i++) {
        const r = t[i], o = r.transform, u = e.data.field(r.field);
        s.set(r.field, Rs(o, u, n[i]));
      }
      return s;
    }
    function Js(t, e, n) {
      const s = /* @__PURE__ */ new Map();
      for (const i of t) {
        const t2 = i.transform, r = n.data.field(i.field);
        s.set(i.field, vs(t2, r, e));
      }
      return s;
    }
    var Ys = class extends Ls {
      constructor(t, e) {
        super(), this.key = t, this.precondition = e, this.type = 2, this.fieldTransforms = [];
      }
      getFieldMask() {
        return null;
      }
    };
    var Xs = class extends Ls {
      constructor(t, e) {
        super(), this.key = t, this.precondition = e, this.type = 3, this.fieldTransforms = [];
      }
      getFieldMask() {
        return null;
      }
    };
    var Zs = class {
      /**
       * @param batchId - The unique ID of this mutation batch.
       * @param localWriteTime - The original write time of this mutation.
       * @param baseMutations - Mutations that are used to populate the base
       * values when this mutation is applied locally. This can be used to locally
       * overwrite values that are persisted in the remote document cache. Base
       * mutations are never sent to the backend.
       * @param mutations - The user-provided mutations in this mutation batch.
       * User-provided mutations are applied both locally and remotely on the
       * backend.
       */
      constructor(t, e, n, s) {
        this.batchId = t, this.localWriteTime = e, this.baseMutations = n, this.mutations = s;
      }
      /**
       * Applies all the mutations in this MutationBatch to the specified document
       * to compute the state of the remote document
       *
       * @param document - The document to apply mutations to.
       * @param batchResult - The result of applying the MutationBatch to the
       * backend.
       */
      applyToRemoteDocument(t, e) {
        const n = e.mutationResults;
        for (let e2 = 0; e2 < this.mutations.length; e2++) {
          const s = this.mutations[e2];
          if (s.key.isEqual(t.key)) {
            Us(s, t, n[e2]);
          }
        }
      }
      /**
       * Computes the local view of a document given all the mutations in this
       * batch.
       *
       * @param document - The document to apply mutations to.
       * @param mutatedFields - Fields that have been updated before applying this mutation batch.
       * @returns A `FieldMask` representing all the fields that are mutated.
       */
      applyToLocalView(t, e) {
        for (const n of this.baseMutations)
          n.key.isEqual(t.key) && (e = Ks(n, t, e, this.localWriteTime));
        for (const n of this.mutations)
          n.key.isEqual(t.key) && (e = Ks(n, t, e, this.localWriteTime));
        return e;
      }
      /**
       * Computes the local view for all provided documents given the mutations in
       * this batch. Returns a `DocumentKey` to `Mutation` map which can be used to
       * replace all the mutation applications.
       */
      applyToLocalDocumentSet(t, e) {
        const n = ds();
        return this.mutations.forEach((s) => {
          const i = t.get(s.key), r = i.overlayedDocument;
          let o = this.applyToLocalView(r, i.mutatedFields);
          o = e.has(s.key) ? null : o;
          const u = qs(r, o);
          null !== u && n.set(s.key, u), r.isValidDocument() || r.convertToNoDocument(rt.min());
        }), n;
      }
      keys() {
        return this.mutations.reduce((t, e) => t.add(e.key), gs());
      }
      isEqual(t) {
        return this.batchId === t.batchId && nt(this.mutations, t.mutations, (t2, e) => Qs(t2, e)) && nt(this.baseMutations, t.baseMutations, (t2, e) => Qs(t2, e));
      }
    };
    var ti = class _ti {
      constructor(t, e, n, s) {
        this.batch = t, this.commitVersion = e, this.mutationResults = n, this.docVersions = s;
      }
      /**
       * Creates a new MutationBatchResult for the given batch and results. There
       * must be one result for each mutation in the batch. This static factory
       * caches a document=&gt;version mapping (docVersions).
       */
      static from(t, e, n) {
        F(t.mutations.length === n.length);
        let s = _s;
        const i = t.mutations;
        for (let t2 = 0; t2 < i.length; t2++)
          s = s.insert(i[t2].key, n[t2].version);
        return new _ti(t, e, n, s);
      }
    };
    var ei = class {
      constructor(t, e) {
        this.largestBatchId = t, this.mutation = e;
      }
      getKey() {
        return this.mutation.key;
      }
      isEqual(t) {
        return null !== t && this.mutation === t.mutation;
      }
      toString() {
        return `Overlay{
      largestBatchId: ${this.largestBatchId},
      mutation: ${this.mutation.toString()}
    }`;
      }
    };
    var ni = class {
      constructor(t, e, n) {
        this.alias = t, this.yt = e, this.fieldPath = n;
      }
    };
    var si = class {
      constructor(t, e) {
        this.count = t, this.unchangedNames = e;
      }
    };
    var ii;
    var ri;
    function oi(t) {
      switch (t) {
        default:
          return O();
        case q.CANCELLED:
        case q.UNKNOWN:
        case q.DEADLINE_EXCEEDED:
        case q.RESOURCE_EXHAUSTED:
        case q.INTERNAL:
        case q.UNAVAILABLE:
        case q.UNAUTHENTICATED:
          return false;
        case q.INVALID_ARGUMENT:
        case q.NOT_FOUND:
        case q.ALREADY_EXISTS:
        case q.PERMISSION_DENIED:
        case q.FAILED_PRECONDITION:
        case q.ABORTED:
        case q.OUT_OF_RANGE:
        case q.UNIMPLEMENTED:
        case q.DATA_LOSS:
          return true;
      }
    }
    function ui(t) {
      if (void 0 === t)
        return k("GRPC error has no .code"), q.UNKNOWN;
      switch (t) {
        case ii.OK:
          return q.OK;
        case ii.CANCELLED:
          return q.CANCELLED;
        case ii.UNKNOWN:
          return q.UNKNOWN;
        case ii.DEADLINE_EXCEEDED:
          return q.DEADLINE_EXCEEDED;
        case ii.RESOURCE_EXHAUSTED:
          return q.RESOURCE_EXHAUSTED;
        case ii.INTERNAL:
          return q.INTERNAL;
        case ii.UNAVAILABLE:
          return q.UNAVAILABLE;
        case ii.UNAUTHENTICATED:
          return q.UNAUTHENTICATED;
        case ii.INVALID_ARGUMENT:
          return q.INVALID_ARGUMENT;
        case ii.NOT_FOUND:
          return q.NOT_FOUND;
        case ii.ALREADY_EXISTS:
          return q.ALREADY_EXISTS;
        case ii.PERMISSION_DENIED:
          return q.PERMISSION_DENIED;
        case ii.FAILED_PRECONDITION:
          return q.FAILED_PRECONDITION;
        case ii.ABORTED:
          return q.ABORTED;
        case ii.OUT_OF_RANGE:
          return q.OUT_OF_RANGE;
        case ii.UNIMPLEMENTED:
          return q.UNIMPLEMENTED;
        case ii.DATA_LOSS:
          return q.DATA_LOSS;
        default:
          return O();
      }
    }
    (ri = ii || (ii = {}))[ri.OK = 0] = "OK", ri[ri.CANCELLED = 1] = "CANCELLED", ri[ri.UNKNOWN = 2] = "UNKNOWN", ri[ri.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", ri[ri.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", ri[ri.NOT_FOUND = 5] = "NOT_FOUND", ri[ri.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", ri[ri.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", ri[ri.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", ri[ri.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", ri[ri.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", ri[ri.ABORTED = 10] = "ABORTED", ri[ri.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", ri[ri.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", ri[ri.INTERNAL = 13] = "INTERNAL", ri[ri.UNAVAILABLE = 14] = "UNAVAILABLE", ri[ri.DATA_LOSS = 15] = "DATA_LOSS";
    var ci = class _ci {
      constructor() {
        this.onExistenceFilterMismatchCallbacks = /* @__PURE__ */ new Map();
      }
      /**
       * Returns the singleton instance of this class, or null if it has not been
       * initialized.
       */
      static get instance() {
        return ai;
      }
      /**
       * Returns the singleton instance of this class, creating it if is has never
       * been created before.
       */
      static getOrCreateInstance() {
        return null === ai && (ai = new _ci()), ai;
      }
      /**
       * Registers a callback to be notified when an existence filter mismatch
       * occurs in the Watch listen stream.
       *
       * The relative order in which callbacks are notified is unspecified; do not
       * rely on any particular ordering. If a given callback is registered multiple
       * times then it will be notified multiple times, once per registration.
       *
       * @param callback the callback to invoke upon existence filter mismatch.
       *
       * @return a function that, when called, unregisters the given callback; only
       * the first invocation of the returned function does anything; all subsequent
       * invocations do nothing.
       */
      onExistenceFilterMismatch(t) {
        const e = Symbol();
        return this.onExistenceFilterMismatchCallbacks.set(e, t), () => this.onExistenceFilterMismatchCallbacks.delete(e);
      }
      /**
       * Invokes all currently-registered `onExistenceFilterMismatch` callbacks.
       * @param info Information about the existence filter mismatch.
       */
      notifyOnExistenceFilterMismatch(t) {
        this.onExistenceFilterMismatchCallbacks.forEach((e) => e(t));
      }
    };
    var ai = null;
    function hi() {
      return new TextEncoder();
    }
    var li = new webchannelWrapper.Integer([4294967295, 4294967295], 0);
    function fi(t) {
      const e = hi().encode(t), n = new webchannelWrapper.Md5();
      return n.update(e), new Uint8Array(n.digest());
    }
    function di(t) {
      const e = new DataView(t.buffer), n = e.getUint32(
        0,
        /* littleEndian= */
        true
      ), s = e.getUint32(
        4,
        /* littleEndian= */
        true
      ), i = e.getUint32(
        8,
        /* littleEndian= */
        true
      ), r = e.getUint32(
        12,
        /* littleEndian= */
        true
      );
      return [new webchannelWrapper.Integer([n, s], 0), new webchannelWrapper.Integer([i, r], 0)];
    }
    var wi = class _wi {
      constructor(t, e, n) {
        if (this.bitmap = t, this.padding = e, this.hashCount = n, e < 0 || e >= 8)
          throw new _i(`Invalid padding: ${e}`);
        if (n < 0)
          throw new _i(`Invalid hash count: ${n}`);
        if (t.length > 0 && 0 === this.hashCount)
          throw new _i(`Invalid hash count: ${n}`);
        if (0 === t.length && 0 !== e)
          throw new _i(`Invalid padding when bitmap length is 0: ${e}`);
        this.It = 8 * t.length - e, // Set the bit count in Integer to avoid repetition in mightContain().
        this.Tt = webchannelWrapper.Integer.fromNumber(this.It);
      }
      // Calculate the ith hash value based on the hashed 64bit integers,
      // and calculate its corresponding bit index in the bitmap to be checked.
      Et(t, e, n) {
        let s = t.add(e.multiply(webchannelWrapper.Integer.fromNumber(n)));
        return 1 === s.compare(li) && (s = new webchannelWrapper.Integer([s.getBits(0), s.getBits(1)], 0)), s.modulo(this.Tt).toNumber();
      }
      // Return whether the bit on the given index in the bitmap is set to 1.
      At(t) {
        return 0 != (this.bitmap[Math.floor(t / 8)] & 1 << t % 8);
      }
      vt(t) {
        if (0 === this.It)
          return false;
        const e = fi(t), [n, s] = di(e);
        for (let t2 = 0; t2 < this.hashCount; t2++) {
          const e2 = this.Et(n, s, t2);
          if (!this.At(e2))
            return false;
        }
        return true;
      }
      /** Create bloom filter for testing purposes only. */
      static create(t, e, n) {
        const s = t % 8 == 0 ? 0 : 8 - t % 8, i = new Uint8Array(Math.ceil(t / 8)), r = new _wi(i, s, e);
        return n.forEach((t2) => r.insert(t2)), r;
      }
      insert(t) {
        if (0 === this.It)
          return;
        const e = fi(t), [n, s] = di(e);
        for (let t2 = 0; t2 < this.hashCount; t2++) {
          const e2 = this.Et(n, s, t2);
          this.Rt(e2);
        }
      }
      Rt(t) {
        const e = Math.floor(t / 8), n = t % 8;
        this.bitmap[e] |= 1 << n;
      }
    };
    var _i = class extends Error {
      constructor() {
        super(...arguments), this.name = "BloomFilterError";
      }
    };
    var mi = class _mi {
      constructor(t, e, n, s, i) {
        this.snapshotVersion = t, this.targetChanges = e, this.targetMismatches = n, this.documentUpdates = s, this.resolvedLimboDocuments = i;
      }
      /**
       * HACK: Views require RemoteEvents in order to determine whether the view is
       * CURRENT, but secondary tabs don't receive remote events. So this method is
       * used to create a synthesized RemoteEvent that can be used to apply a
       * CURRENT status change to a View, for queries executed in a different tab.
       */
      // PORTING NOTE: Multi-tab only
      static createSynthesizedRemoteEventForCurrentChange(t, e, n) {
        const s = /* @__PURE__ */ new Map();
        return s.set(t, gi.createSynthesizedTargetChangeForCurrentChange(t, e, n)), new _mi(rt.min(), s, new pe(et), cs(), gs());
      }
    };
    var gi = class _gi {
      constructor(t, e, n, s, i) {
        this.resumeToken = t, this.current = e, this.addedDocuments = n, this.modifiedDocuments = s, this.removedDocuments = i;
      }
      /**
       * This method is used to create a synthesized TargetChanges that can be used to
       * apply a CURRENT status change to a View (for queries executed in a different
       * tab) or for new queries (to raise snapshots with correct CURRENT status).
       */
      static createSynthesizedTargetChangeForCurrentChange(t, e, n) {
        return new _gi(n, e, gs(), gs(), gs());
      }
    };
    var yi = class {
      constructor(t, e, n, s) {
        this.Pt = t, this.removedTargetIds = e, this.key = n, this.bt = s;
      }
    };
    var pi = class {
      constructor(t, e) {
        this.targetId = t, this.Vt = e;
      }
    };
    var Ii = class {
      constructor(t, e, n = Ve.EMPTY_BYTE_STRING, s = null) {
        this.state = t, this.targetIds = e, this.resumeToken = n, this.cause = s;
      }
    };
    var Ti = class {
      constructor() {
        this.St = 0, /**
         * Keeps track of the document changes since the last raised snapshot.
         *
         * These changes are continuously updated as we receive document updates and
         * always reflect the current set of changes against the last issued snapshot.
         */
        this.Dt = vi(), /** See public getters for explanations of these fields. */
        this.Ct = Ve.EMPTY_BYTE_STRING, this.xt = false, /**
         * Whether this target state should be included in the next snapshot. We
         * initialize to true so that newly-added targets are included in the next
         * RemoteEvent.
         */
        this.Nt = true;
      }
      /**
       * Whether this target has been marked 'current'.
       *
       * 'Current' has special meaning in the RPC protocol: It implies that the
       * Watch backend has sent us all changes up to the point at which the target
       * was added and that the target is consistent with the rest of the watch
       * stream.
       */
      get current() {
        return this.xt;
      }
      /** The last resume token sent to us for this target. */
      get resumeToken() {
        return this.Ct;
      }
      /** Whether this target has pending target adds or target removes. */
      get kt() {
        return 0 !== this.St;
      }
      /** Whether we have modified any state that should trigger a snapshot. */
      get Mt() {
        return this.Nt;
      }
      /**
       * Applies the resume token to the TargetChange, but only when it has a new
       * value. Empty resumeTokens are discarded.
       */
      $t(t) {
        t.approximateByteSize() > 0 && (this.Nt = true, this.Ct = t);
      }
      /**
       * Creates a target change from the current set of changes.
       *
       * To reset the document changes after raising this snapshot, call
       * `clearPendingChanges()`.
       */
      Ot() {
        let t = gs(), e = gs(), n = gs();
        return this.Dt.forEach((s, i) => {
          switch (i) {
            case 0:
              t = t.add(s);
              break;
            case 2:
              e = e.add(s);
              break;
            case 1:
              n = n.add(s);
              break;
            default:
              O();
          }
        }), new gi(this.Ct, this.xt, t, e, n);
      }
      /**
       * Resets the document changes and sets `hasPendingChanges` to false.
       */
      Ft() {
        this.Nt = false, this.Dt = vi();
      }
      Bt(t, e) {
        this.Nt = true, this.Dt = this.Dt.insert(t, e);
      }
      Lt(t) {
        this.Nt = true, this.Dt = this.Dt.remove(t);
      }
      qt() {
        this.St += 1;
      }
      Ut() {
        this.St -= 1;
      }
      Kt() {
        this.Nt = true, this.xt = true;
      }
    };
    var Ei = class {
      constructor(t) {
        this.Gt = t, /** The internal state of all tracked targets. */
        this.Qt = /* @__PURE__ */ new Map(), /** Keeps track of the documents to update since the last raised snapshot. */
        this.jt = cs(), /** A mapping of document keys to their set of target IDs. */
        this.zt = Ai(), /**
         * A map of targets with existence filter mismatches. These targets are
         * known to be inconsistent and their listens needs to be re-established by
         * RemoteStore.
         */
        this.Wt = new pe(et);
      }
      /**
       * Processes and adds the DocumentWatchChange to the current set of changes.
       */
      Ht(t) {
        for (const e of t.Pt)
          t.bt && t.bt.isFoundDocument() ? this.Jt(e, t.bt) : this.Yt(e, t.key, t.bt);
        for (const e of t.removedTargetIds)
          this.Yt(e, t.key, t.bt);
      }
      /** Processes and adds the WatchTargetChange to the current set of changes. */
      Xt(t) {
        this.forEachTarget(t, (e) => {
          const n = this.Zt(e);
          switch (t.state) {
            case 0:
              this.te(e) && n.$t(t.resumeToken);
              break;
            case 1:
              n.Ut(), n.kt || // We have a freshly added target, so we need to reset any state
              // that we had previously. This can happen e.g. when remove and add
              // back a target for existence filter mismatches.
              n.Ft(), n.$t(t.resumeToken);
              break;
            case 2:
              n.Ut(), n.kt || this.removeTarget(e);
              break;
            case 3:
              this.te(e) && (n.Kt(), n.$t(t.resumeToken));
              break;
            case 4:
              this.te(e) && // Reset the target and synthesizes removes for all existing
              // documents. The backend will re-add any documents that still
              // match the target before it sends the next global snapshot.
              (this.ee(e), n.$t(t.resumeToken));
              break;
            default:
              O();
          }
        });
      }
      /**
       * Iterates over all targetIds that the watch change applies to: either the
       * targetIds explicitly listed in the change or the targetIds of all currently
       * active targets.
       */
      forEachTarget(t, e) {
        t.targetIds.length > 0 ? t.targetIds.forEach(e) : this.Qt.forEach((t2, n) => {
          this.te(n) && e(n);
        });
      }
      /**
       * Handles existence filters and synthesizes deletes for filter mismatches.
       * Targets that are invalidated by filter mismatches are added to
       * `pendingTargetResets`.
       */
      ne(t) {
        var e;
        const n = t.targetId, s = t.Vt.count, i = this.se(n);
        if (i) {
          const r = i.target;
          if (Fn(r))
            if (0 === s) {
              const t2 = new ht(r.path);
              this.Yt(n, t2, an.newNoDocument(t2, rt.min()));
            } else
              F(1 === s);
          else {
            const i2 = this.ie(n);
            if (i2 !== s) {
              const s2 = this.re(t, i2);
              if (0 !== s2) {
                this.ee(n);
                const t2 = 2 === s2 ? "TargetPurposeExistenceFilterMismatchBloom" : "TargetPurposeExistenceFilterMismatch";
                this.Wt = this.Wt.insert(n, t2);
              }
              null === (e = ci.instance) || void 0 === e || e.notifyOnExistenceFilterMismatch(function(t2, e2, n2) {
                var s3, i3, r2, o, u, c;
                const a = {
                  localCacheCount: e2,
                  existenceFilterCount: n2.count
                }, h = n2.unchangedNames;
                h && (a.bloomFilter = {
                  applied: 0 === t2,
                  hashCount: null !== (s3 = null == h ? void 0 : h.hashCount) && void 0 !== s3 ? s3 : 0,
                  bitmapLength: null !== (o = null === (r2 = null === (i3 = null == h ? void 0 : h.bits) || void 0 === i3 ? void 0 : i3.bitmap) || void 0 === r2 ? void 0 : r2.length) && void 0 !== o ? o : 0,
                  padding: null !== (c = null === (u = null == h ? void 0 : h.bits) || void 0 === u ? void 0 : u.padding) && void 0 !== c ? c : 0
                });
                return a;
              }(s2, i2, t.Vt));
            }
          }
        }
      }
      /**
       * Apply bloom filter to remove the deleted documents, and return the
       * application status.
       */
      re(t, e) {
        const { unchangedNames: n, count: s } = t.Vt;
        if (!n || !n.bits)
          return 1;
        const { bits: { bitmap: i = "", padding: r = 0 }, hashCount: o = 0 } = n;
        let u, c;
        try {
          u = xe(i).toUint8Array();
        } catch (t2) {
          if (t2 instanceof Pe)
            return M("Decoding the base64 bloom filter in existence filter failed (" + t2.message + "); ignoring the bloom filter and falling back to full re-query."), 1;
          throw t2;
        }
        try {
          c = new wi(u, r, o);
        } catch (t2) {
          return M(t2 instanceof _i ? "BloomFilter error: " : "Applying bloom filter failed: ", t2), 1;
        }
        if (0 === c.It)
          return 1;
        return s !== e - this.oe(t.targetId, c) ? 2 : 0;
      }
      /**
       * Filter out removed documents based on bloom filter membership result and
       * return number of documents removed.
       */
      oe(t, e) {
        const n = this.Gt.getRemoteKeysForTarget(t);
        let s = 0;
        return n.forEach((n2) => {
          const i = this.Gt.ue(), r = `projects/${i.projectId}/databases/${i.database}/documents/${n2.path.canonicalString()}`;
          e.vt(r) || (this.Yt(
            t,
            n2,
            /*updatedDocument=*/
            null
          ), s++);
        }), s;
      }
      /**
       * Converts the currently accumulated state into a remote event at the
       * provided snapshot version. Resets the accumulated changes before returning.
       */
      ce(t) {
        const e = /* @__PURE__ */ new Map();
        this.Qt.forEach((n2, s2) => {
          const i = this.se(s2);
          if (i) {
            if (n2.current && Fn(i.target)) {
              const e2 = new ht(i.target.path);
              null !== this.jt.get(e2) || this.ae(s2, e2) || this.Yt(s2, e2, an.newNoDocument(e2, t));
            }
            n2.Mt && (e.set(s2, n2.Ot()), n2.Ft());
          }
        });
        let n = gs();
        this.zt.forEach((t2, e2) => {
          let s2 = true;
          e2.forEachWhile((t3) => {
            const e3 = this.se(t3);
            return !e3 || "TargetPurposeLimboResolution" === e3.purpose || (s2 = false, false);
          }), s2 && (n = n.add(t2));
        }), this.jt.forEach((e2, n2) => n2.setReadTime(t));
        const s = new mi(t, e, this.Wt, this.jt, n);
        return this.jt = cs(), this.zt = Ai(), this.Wt = new pe(et), s;
      }
      /**
       * Adds the provided document to the internal list of document updates and
       * its document key to the given target's mapping.
       */
      // Visible for testing.
      Jt(t, e) {
        if (!this.te(t))
          return;
        const n = this.ae(t, e.key) ? 2 : 0;
        this.Zt(t).Bt(e.key, n), this.jt = this.jt.insert(e.key, e), this.zt = this.zt.insert(e.key, this.he(e.key).add(t));
      }
      /**
       * Removes the provided document from the target mapping. If the
       * document no longer matches the target, but the document's state is still
       * known (e.g. we know that the document was deleted or we received the change
       * that caused the filter mismatch), the new document can be provided
       * to update the remote document cache.
       */
      // Visible for testing.
      Yt(t, e, n) {
        if (!this.te(t))
          return;
        const s = this.Zt(t);
        this.ae(t, e) ? s.Bt(
          e,
          1
          /* ChangeType.Removed */
        ) : (
          // The document may have entered and left the target before we raised a
          // snapshot, so we can just ignore the change.
          s.Lt(e)
        ), this.zt = this.zt.insert(e, this.he(e).delete(t)), n && (this.jt = this.jt.insert(e, n));
      }
      removeTarget(t) {
        this.Qt.delete(t);
      }
      /**
       * Returns the current count of documents in the target. This includes both
       * the number of documents that the LocalStore considers to be part of the
       * target as well as any accumulated changes.
       */
      ie(t) {
        const e = this.Zt(t).Ot();
        return this.Gt.getRemoteKeysForTarget(t).size + e.addedDocuments.size - e.removedDocuments.size;
      }
      /**
       * Increment the number of acks needed from watch before we can consider the
       * server to be 'in-sync' with the client's active targets.
       */
      qt(t) {
        this.Zt(t).qt();
      }
      Zt(t) {
        let e = this.Qt.get(t);
        return e || (e = new Ti(), this.Qt.set(t, e)), e;
      }
      he(t) {
        let e = this.zt.get(t);
        return e || (e = new Ee(et), this.zt = this.zt.insert(t, e)), e;
      }
      /**
       * Verifies that the user is still interested in this target (by calling
       * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs
       * from watch.
       */
      te(t) {
        const e = null !== this.se(t);
        return e || N("WatchChangeAggregator", "Detected inactive target", t), e;
      }
      /**
       * Returns the TargetData for an active target (i.e. a target that the user
       * is still interested in that has no outstanding target change requests).
       */
      se(t) {
        const e = this.Qt.get(t);
        return e && e.kt ? null : this.Gt.le(t);
      }
      /**
       * Resets the state of a Watch target to its initial state (e.g. sets
       * 'current' to false, clears the resume token and removes its target mapping
       * from all documents).
       */
      ee(t) {
        this.Qt.set(t, new Ti());
        this.Gt.getRemoteKeysForTarget(t).forEach((e) => {
          this.Yt(
            t,
            e,
            /*updatedDocument=*/
            null
          );
        });
      }
      /**
       * Returns whether the LocalStore considers the document to be part of the
       * specified target.
       */
      ae(t, e) {
        return this.Gt.getRemoteKeysForTarget(t).has(e);
      }
    };
    function Ai() {
      return new pe(ht.comparator);
    }
    function vi() {
      return new pe(ht.comparator);
    }
    var Ri = (() => {
      const t = {
        asc: "ASCENDING",
        desc: "DESCENDING"
      };
      return t;
    })();
    var Pi = (() => {
      const t = {
        "<": "LESS_THAN",
        "<=": "LESS_THAN_OR_EQUAL",
        ">": "GREATER_THAN",
        ">=": "GREATER_THAN_OR_EQUAL",
        "==": "EQUAL",
        "!=": "NOT_EQUAL",
        "array-contains": "ARRAY_CONTAINS",
        in: "IN",
        "not-in": "NOT_IN",
        "array-contains-any": "ARRAY_CONTAINS_ANY"
      };
      return t;
    })();
    var bi = (() => {
      const t = {
        and: "AND",
        or: "OR"
      };
      return t;
    })();
    var Vi = class {
      constructor(t, e) {
        this.databaseId = t, this.useProto3Json = e;
      }
    };
    function Si(t, e) {
      return t.useProto3Json || Ft(e) ? e : {
        value: e
      };
    }
    function Di(t, e) {
      if (t.useProto3Json) {
        return `${new Date(1e3 * e.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "")}.${("000000000" + e.nanoseconds).slice(-9)}Z`;
      }
      return {
        seconds: "" + e.seconds,
        nanos: e.nanoseconds
      };
    }
    function Ci(t, e) {
      return t.useProto3Json ? e.toBase64() : e.toUint8Array();
    }
    function xi(t, e) {
      return Di(t, e.toTimestamp());
    }
    function Ni(t) {
      return F(!!t), rt.fromTimestamp(function(t2) {
        const e = De(t2);
        return new it(e.seconds, e.nanos);
      }(t));
    }
    function ki(t, e) {
      return function(t2) {
        return new ut(["projects", t2.projectId, "databases", t2.database]);
      }(t).child("documents").child(e).canonicalString();
    }
    function Mi(t) {
      const e = ut.fromString(t);
      return F(ur(e)), e;
    }
    function $i(t, e) {
      return ki(t.databaseId, e.path);
    }
    function Oi(t, e) {
      const n = Mi(e);
      if (n.get(1) !== t.databaseId.projectId)
        throw new U(q.INVALID_ARGUMENT, "Tried to deserialize key from different project: " + n.get(1) + " vs " + t.databaseId.projectId);
      if (n.get(3) !== t.databaseId.database)
        throw new U(q.INVALID_ARGUMENT, "Tried to deserialize key from different database: " + n.get(3) + " vs " + t.databaseId.database);
      return new ht(qi(n));
    }
    function Fi(t, e) {
      return ki(t.databaseId, e);
    }
    function Bi(t) {
      const e = Mi(t);
      return 4 === e.length ? ut.emptyPath() : qi(e);
    }
    function Li(t) {
      return new ut(["projects", t.databaseId.projectId, "databases", t.databaseId.database]).canonicalString();
    }
    function qi(t) {
      return F(t.length > 4 && "documents" === t.get(4)), t.popFirst(5);
    }
    function Ui(t, e, n) {
      return {
        name: $i(t, e),
        fields: n.value.mapValue.fields
      };
    }
    function Ki(t, e, n) {
      const s = Oi(t, e.name), i = Ni(e.updateTime), r = e.createTime ? Ni(e.createTime) : rt.min(), o = new un({
        mapValue: {
          fields: e.fields
        }
      }), u = an.newFoundDocument(s, i, r, o);
      return n && u.setHasCommittedMutations(), n ? u.setHasCommittedMutations() : u;
    }
    function Gi(t, e) {
      return "found" in e ? function(t2, e2) {
        F(!!e2.found), e2.found.name, e2.found.updateTime;
        const n = Oi(t2, e2.found.name), s = Ni(e2.found.updateTime), i = e2.found.createTime ? Ni(e2.found.createTime) : rt.min(), r = new un({
          mapValue: {
            fields: e2.found.fields
          }
        });
        return an.newFoundDocument(n, s, i, r);
      }(t, e) : "missing" in e ? function(t2, e2) {
        F(!!e2.missing), F(!!e2.readTime);
        const n = Oi(t2, e2.missing), s = Ni(e2.readTime);
        return an.newNoDocument(n, s);
      }(t, e) : O();
    }
    function Qi(t, e) {
      let n;
      if ("targetChange" in e) {
        e.targetChange;
        const s = function(t2) {
          return "NO_CHANGE" === t2 ? 0 : "ADD" === t2 ? 1 : "REMOVE" === t2 ? 2 : "CURRENT" === t2 ? 3 : "RESET" === t2 ? 4 : O();
        }(e.targetChange.targetChangeType || "NO_CHANGE"), i = e.targetChange.targetIds || [], r = function(t2, e2) {
          return t2.useProto3Json ? (F(void 0 === e2 || "string" == typeof e2), Ve.fromBase64String(e2 || "")) : (F(void 0 === e2 || e2 instanceof Uint8Array), Ve.fromUint8Array(e2 || new Uint8Array()));
        }(t, e.targetChange.resumeToken), o = e.targetChange.cause, u = o && function(t2) {
          const e2 = void 0 === t2.code ? q.UNKNOWN : ui(t2.code);
          return new U(e2, t2.message || "");
        }(o);
        n = new Ii(s, i, r, u || null);
      } else if ("documentChange" in e) {
        e.documentChange;
        const s = e.documentChange;
        s.document, s.document.name, s.document.updateTime;
        const i = Oi(t, s.document.name), r = Ni(s.document.updateTime), o = s.document.createTime ? Ni(s.document.createTime) : rt.min(), u = new un({
          mapValue: {
            fields: s.document.fields
          }
        }), c = an.newFoundDocument(i, r, o, u), a = s.targetIds || [], h = s.removedTargetIds || [];
        n = new yi(a, h, c.key, c);
      } else if ("documentDelete" in e) {
        e.documentDelete;
        const s = e.documentDelete;
        s.document;
        const i = Oi(t, s.document), r = s.readTime ? Ni(s.readTime) : rt.min(), o = an.newNoDocument(i, r), u = s.removedTargetIds || [];
        n = new yi([], u, o.key, o);
      } else if ("documentRemove" in e) {
        e.documentRemove;
        const s = e.documentRemove;
        s.document;
        const i = Oi(t, s.document), r = s.removedTargetIds || [];
        n = new yi([], r, i, null);
      } else {
        if (!("filter" in e))
          return O();
        {
          e.filter;
          const t2 = e.filter;
          t2.targetId;
          const { count: s = 0, unchangedNames: i } = t2, r = new si(s, i), o = t2.targetId;
          n = new pi(o, r);
        }
      }
      return n;
    }
    function ji(t, e) {
      let n;
      if (e instanceof js)
        n = {
          update: Ui(t, e.key, e.value)
        };
      else if (e instanceof Ys)
        n = {
          delete: $i(t, e.key)
        };
      else if (e instanceof zs)
        n = {
          update: Ui(t, e.key, e.data),
          updateMask: or(e.fieldMask)
        };
      else {
        if (!(e instanceof Xs))
          return O();
        n = {
          verify: $i(t, e.key)
        };
      }
      return e.fieldTransforms.length > 0 && (n.updateTransforms = e.fieldTransforms.map((t2) => function(t3, e2) {
        const n2 = e2.transform;
        if (n2 instanceof bs)
          return {
            fieldPath: e2.field.canonicalString(),
            setToServerValue: "REQUEST_TIME"
          };
        if (n2 instanceof Vs)
          return {
            fieldPath: e2.field.canonicalString(),
            appendMissingElements: {
              values: n2.elements
            }
          };
        if (n2 instanceof Ds)
          return {
            fieldPath: e2.field.canonicalString(),
            removeAllFromArray: {
              values: n2.elements
            }
          };
        if (n2 instanceof xs)
          return {
            fieldPath: e2.field.canonicalString(),
            increment: n2.gt
          };
        throw O();
      }(0, t2))), e.precondition.isNone || (n.currentDocument = function(t2, e2) {
        return void 0 !== e2.updateTime ? {
          updateTime: xi(t2, e2.updateTime)
        } : void 0 !== e2.exists ? {
          exists: e2.exists
        } : O();
      }(t, e.precondition)), n;
    }
    function zi(t, e) {
      const n = e.currentDocument ? function(t2) {
        return void 0 !== t2.updateTime ? Fs.updateTime(Ni(t2.updateTime)) : void 0 !== t2.exists ? Fs.exists(t2.exists) : Fs.none();
      }(e.currentDocument) : Fs.none(), s = e.updateTransforms ? e.updateTransforms.map((e2) => function(t2, e3) {
        let n2 = null;
        if ("setToServerValue" in e3)
          F("REQUEST_TIME" === e3.setToServerValue), n2 = new bs();
        else if ("appendMissingElements" in e3) {
          const t3 = e3.appendMissingElements.values || [];
          n2 = new Vs(t3);
        } else if ("removeAllFromArray" in e3) {
          const t3 = e3.removeAllFromArray.values || [];
          n2 = new Ds(t3);
        } else
          "increment" in e3 ? n2 = new xs(t2, e3.increment) : O();
        const s2 = at.fromServerFormat(e3.fieldPath);
        return new Ms(s2, n2);
      }(t, e2)) : [];
      if (e.update) {
        e.update.name;
        const i = Oi(t, e.update.name), r = new un({
          mapValue: {
            fields: e.update.fields
          }
        });
        if (e.updateMask) {
          const t2 = function(t3) {
            const e2 = t3.fieldPaths || [];
            return new Re(e2.map((t4) => at.fromServerFormat(t4)));
          }(e.updateMask);
          return new zs(i, r, t2, n, s);
        }
        return new js(i, r, n, s);
      }
      if (e.delete) {
        const s2 = Oi(t, e.delete);
        return new Ys(s2, n);
      }
      if (e.verify) {
        const s2 = Oi(t, e.verify);
        return new Xs(s2, n);
      }
      return O();
    }
    function Wi(t, e) {
      return t && t.length > 0 ? (F(void 0 !== e), t.map((t2) => function(t3, e2) {
        let n = t3.updateTime ? Ni(t3.updateTime) : Ni(e2);
        return n.isEqual(rt.min()) && // The Firestore Emulator currently returns an update time of 0 for
        // deletes of non-existing documents (rather than null). This breaks the
        // test "get deleted doc while offline with source=cache" as NoDocuments
        // with version 0 are filtered by IndexedDb's RemoteDocumentCache.
        // TODO(#2149): Remove this when Emulator is fixed
        (n = Ni(e2)), new Os(n, t3.transformResults || []);
      }(t2, e))) : [];
    }
    function Hi(t, e) {
      return {
        documents: [Fi(t, e.path)]
      };
    }
    function Ji(t, e) {
      const n = {
        structuredQuery: {}
      }, s = e.path;
      null !== e.collectionGroup ? (n.parent = Fi(t, s), n.structuredQuery.from = [{
        collectionId: e.collectionGroup,
        allDescendants: true
      }]) : (n.parent = Fi(t, s.popLast()), n.structuredQuery.from = [{
        collectionId: s.lastSegment()
      }]);
      const i = function(t2) {
        if (0 === t2.length)
          return;
        return rr(gn.create(
          t2,
          "and"
          /* CompositeOperator.AND */
        ));
      }(e.filters);
      i && (n.structuredQuery.where = i);
      const r = function(t2) {
        if (0 === t2.length)
          return;
        return t2.map((t3) => (
          // visible for testing
          function(t4) {
            return {
              field: sr(t4.field),
              direction: tr(t4.dir)
            };
          }(t3)
        ));
      }(e.orderBy);
      r && (n.structuredQuery.orderBy = r);
      const o = Si(t, e.limit);
      var u;
      return null !== o && (n.structuredQuery.limit = o), e.startAt && (n.structuredQuery.startAt = {
        before: (u = e.startAt).inclusive,
        values: u.position
      }), e.endAt && (n.structuredQuery.endAt = function(t2) {
        return {
          before: !t2.inclusive,
          values: t2.position
        };
      }(e.endAt)), n;
    }
    function Yi(t) {
      let e = Bi(t.parent);
      const n = t.structuredQuery, s = n.from ? n.from.length : 0;
      let i = null;
      if (s > 0) {
        F(1 === s);
        const t2 = n.from[0];
        t2.allDescendants ? i = t2.collectionId : e = e.child(t2.collectionId);
      }
      let r = [];
      n.where && (r = function(t2) {
        const e2 = Zi(t2);
        if (e2 instanceof gn && In(e2))
          return e2.getFilters();
        return [e2];
      }(n.where));
      let o = [];
      n.orderBy && (o = n.orderBy.map((t2) => function(t3) {
        return new dn(
          ir(t3.field),
          // visible for testing
          function(t4) {
            switch (t4) {
              case "ASCENDING":
                return "asc";
              case "DESCENDING":
                return "desc";
              default:
                return;
            }
          }(t3.direction)
        );
      }(t2)));
      let u = null;
      n.limit && (u = function(t2) {
        let e2;
        return e2 = "object" == typeof t2 ? t2.value : t2, Ft(e2) ? null : e2;
      }(n.limit));
      let c = null;
      n.startAt && (c = function(t2) {
        const e2 = !!t2.before, n2 = t2.values || [];
        return new hn(n2, e2);
      }(n.startAt));
      let a = null;
      return n.endAt && (a = function(t2) {
        const e2 = !t2.before, n2 = t2.values || [];
        return new hn(n2, e2);
      }(n.endAt)), Kn(e, i, o, r, u, "F", c, a);
    }
    function Xi(t, e) {
      const n = function(t2) {
        switch (t2) {
          case "TargetPurposeListen":
            return null;
          case "TargetPurposeExistenceFilterMismatch":
            return "existence-filter-mismatch";
          case "TargetPurposeExistenceFilterMismatchBloom":
            return "existence-filter-mismatch-bloom";
          case "TargetPurposeLimboResolution":
            return "limbo-document";
          default:
            return O();
        }
      }(e.purpose);
      return null == n ? null : {
        "goog-listen-tags": n
      };
    }
    function Zi(t) {
      return void 0 !== t.unaryFilter ? function(t2) {
        switch (t2.unaryFilter.op) {
          case "IS_NAN":
            const e = ir(t2.unaryFilter.field);
            return mn.create(e, "==", {
              doubleValue: NaN
            });
          case "IS_NULL":
            const n = ir(t2.unaryFilter.field);
            return mn.create(n, "==", {
              nullValue: "NULL_VALUE"
            });
          case "IS_NOT_NAN":
            const s = ir(t2.unaryFilter.field);
            return mn.create(s, "!=", {
              doubleValue: NaN
            });
          case "IS_NOT_NULL":
            const i = ir(t2.unaryFilter.field);
            return mn.create(i, "!=", {
              nullValue: "NULL_VALUE"
            });
          default:
            return O();
        }
      }(t) : void 0 !== t.fieldFilter ? function(t2) {
        return mn.create(ir(t2.fieldFilter.field), function(t3) {
          switch (t3) {
            case "EQUAL":
              return "==";
            case "NOT_EQUAL":
              return "!=";
            case "GREATER_THAN":
              return ">";
            case "GREATER_THAN_OR_EQUAL":
              return ">=";
            case "LESS_THAN":
              return "<";
            case "LESS_THAN_OR_EQUAL":
              return "<=";
            case "ARRAY_CONTAINS":
              return "array-contains";
            case "IN":
              return "in";
            case "NOT_IN":
              return "not-in";
            case "ARRAY_CONTAINS_ANY":
              return "array-contains-any";
            default:
              return O();
          }
        }(t2.fieldFilter.op), t2.fieldFilter.value);
      }(t) : void 0 !== t.compositeFilter ? function(t2) {
        return gn.create(t2.compositeFilter.filters.map((t3) => Zi(t3)), function(t3) {
          switch (t3) {
            case "AND":
              return "and";
            case "OR":
              return "or";
            default:
              return O();
          }
        }(t2.compositeFilter.op));
      }(t) : O();
    }
    function tr(t) {
      return Ri[t];
    }
    function er(t) {
      return Pi[t];
    }
    function nr(t) {
      return bi[t];
    }
    function sr(t) {
      return {
        fieldPath: t.canonicalString()
      };
    }
    function ir(t) {
      return at.fromServerFormat(t.fieldPath);
    }
    function rr(t) {
      return t instanceof mn ? function(t2) {
        if ("==" === t2.op) {
          if (Xe(t2.value))
            return {
              unaryFilter: {
                field: sr(t2.field),
                op: "IS_NAN"
              }
            };
          if (Ye(t2.value))
            return {
              unaryFilter: {
                field: sr(t2.field),
                op: "IS_NULL"
              }
            };
        } else if ("!=" === t2.op) {
          if (Xe(t2.value))
            return {
              unaryFilter: {
                field: sr(t2.field),
                op: "IS_NOT_NAN"
              }
            };
          if (Ye(t2.value))
            return {
              unaryFilter: {
                field: sr(t2.field),
                op: "IS_NOT_NULL"
              }
            };
        }
        return {
          fieldFilter: {
            field: sr(t2.field),
            op: er(t2.op),
            value: t2.value
          }
        };
      }(t) : t instanceof gn ? function(t2) {
        const e = t2.getFilters().map((t3) => rr(t3));
        if (1 === e.length)
          return e[0];
        return {
          compositeFilter: {
            op: nr(t2.op),
            filters: e
          }
        };
      }(t) : O();
    }
    function or(t) {
      const e = [];
      return t.fields.forEach((t2) => e.push(t2.canonicalString())), {
        fieldPaths: e
      };
    }
    function ur(t) {
      return t.length >= 4 && "projects" === t.get(0) && "databases" === t.get(2);
    }
    var cr = class _cr {
      constructor(t, e, n, s, i = rt.min(), r = rt.min(), o = Ve.EMPTY_BYTE_STRING, u = null) {
        this.target = t, this.targetId = e, this.purpose = n, this.sequenceNumber = s, this.snapshotVersion = i, this.lastLimboFreeSnapshotVersion = r, this.resumeToken = o, this.expectedCount = u;
      }
      /** Creates a new target data instance with an updated sequence number. */
      withSequenceNumber(t) {
        return new _cr(this.target, this.targetId, this.purpose, t, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken, this.expectedCount);
      }
      /**
       * Creates a new target data instance with an updated resume token and
       * snapshot version.
       */
      withResumeToken(t, e) {
        return new _cr(
          this.target,
          this.targetId,
          this.purpose,
          this.sequenceNumber,
          e,
          this.lastLimboFreeSnapshotVersion,
          t,
          /* expectedCount= */
          null
        );
      }
      /**
       * Creates a new target data instance with an updated expected count.
       */
      withExpectedCount(t) {
        return new _cr(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken, t);
      }
      /**
       * Creates a new target data instance with an updated last limbo free
       * snapshot version number.
       */
      withLastLimboFreeSnapshotVersion(t) {
        return new _cr(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, t, this.resumeToken, this.expectedCount);
      }
    };
    var ar = class {
      constructor(t) {
        this.fe = t;
      }
    };
    function hr(t, e) {
      let n;
      if (e.document)
        n = Ki(t.fe, e.document, !!e.hasCommittedMutations);
      else if (e.noDocument) {
        const t2 = ht.fromSegments(e.noDocument.path), s = wr(e.noDocument.readTime);
        n = an.newNoDocument(t2, s), e.hasCommittedMutations && n.setHasCommittedMutations();
      } else {
        if (!e.unknownDocument)
          return O();
        {
          const t2 = ht.fromSegments(e.unknownDocument.path), s = wr(e.unknownDocument.version);
          n = an.newUnknownDocument(t2, s);
        }
      }
      return e.readTime && n.setReadTime(function(t2) {
        const e2 = new it(t2[0], t2[1]);
        return rt.fromTimestamp(e2);
      }(e.readTime)), n;
    }
    function lr(t, e) {
      const n = e.key, s = {
        prefixPath: n.getCollectionPath().popLast().toArray(),
        collectionGroup: n.collectionGroup,
        documentId: n.path.lastSegment(),
        readTime: fr(e.readTime),
        hasCommittedMutations: e.hasCommittedMutations
      };
      if (e.isFoundDocument())
        s.document = function(t2, e2) {
          return {
            name: $i(t2, e2.key),
            fields: e2.data.value.mapValue.fields,
            updateTime: Di(t2, e2.version.toTimestamp()),
            createTime: Di(t2, e2.createTime.toTimestamp())
          };
        }(t.fe, e);
      else if (e.isNoDocument())
        s.noDocument = {
          path: n.path.toArray(),
          readTime: dr(e.version)
        };
      else {
        if (!e.isUnknownDocument())
          return O();
        s.unknownDocument = {
          path: n.path.toArray(),
          version: dr(e.version)
        };
      }
      return s;
    }
    function fr(t) {
      const e = t.toTimestamp();
      return [e.seconds, e.nanoseconds];
    }
    function dr(t) {
      const e = t.toTimestamp();
      return {
        seconds: e.seconds,
        nanoseconds: e.nanoseconds
      };
    }
    function wr(t) {
      const e = new it(t.seconds, t.nanoseconds);
      return rt.fromTimestamp(e);
    }
    function _r(t, e) {
      const n = (e.baseMutations || []).map((e2) => zi(t.fe, e2));
      for (let t2 = 0; t2 < e.mutations.length - 1; ++t2) {
        const n2 = e.mutations[t2];
        if (t2 + 1 < e.mutations.length && void 0 !== e.mutations[t2 + 1].transform) {
          const s2 = e.mutations[t2 + 1];
          n2.updateTransforms = s2.transform.fieldTransforms, e.mutations.splice(t2 + 1, 1), ++t2;
        }
      }
      const s = e.mutations.map((e2) => zi(t.fe, e2)), i = it.fromMillis(e.localWriteTimeMs);
      return new Zs(e.batchId, i, n, s);
    }
    function mr(t) {
      const e = wr(t.readTime), n = void 0 !== t.lastLimboFreeSnapshotVersion ? wr(t.lastLimboFreeSnapshotVersion) : rt.min();
      let s;
      var i;
      return void 0 !== t.query.documents ? (F(1 === (i = t.query).documents.length), s = Jn(Gn(Bi(i.documents[0])))) : s = function(t2) {
        return Jn(Yi(t2));
      }(t.query), new cr(s, t.targetId, "TargetPurposeListen", t.lastListenSequenceNumber, e, n, Ve.fromBase64String(t.resumeToken));
    }
    function gr(t, e) {
      const n = dr(e.snapshotVersion), s = dr(e.lastLimboFreeSnapshotVersion);
      let i;
      i = Fn(e.target) ? Hi(t.fe, e.target) : Ji(t.fe, e.target);
      const r = e.resumeToken.toBase64();
      return {
        targetId: e.targetId,
        canonicalId: $n(e.target),
        readTime: n,
        resumeToken: r,
        lastListenSequenceNumber: e.sequenceNumber,
        lastLimboFreeSnapshotVersion: s,
        query: i
      };
    }
    function yr(t) {
      const e = Yi({
        parent: t.parent,
        structuredQuery: t.structuredQuery
      });
      return "LAST" === t.limitType ? Xn(
        e,
        e.limit,
        "L"
        /* LimitType.Last */
      ) : e;
    }
    function pr(t, e) {
      return new ei(e.largestBatchId, zi(t.fe, e.overlayMutation));
    }
    function Ir(t, e) {
      const n = e.path.lastSegment();
      return [t, qt(e.path.popLast()), n];
    }
    function Tr(t, e, n, s) {
      return {
        indexId: t,
        uid: e.uid || "",
        sequenceNumber: n,
        readTime: dr(s.readTime),
        documentKey: qt(s.documentKey.path),
        largestBatchId: s.largestBatchId
      };
    }
    var Er = class {
      getBundleMetadata(t, e) {
        return Ar(t).get(e).next((t2) => {
          if (t2)
            return {
              id: (e2 = t2).bundleId,
              createTime: wr(e2.createTime),
              version: e2.version
            };
          var e2;
        });
      }
      saveBundleMetadata(t, e) {
        return Ar(t).put({
          bundleId: (n = e).id,
          createTime: dr(Ni(n.createTime)),
          version: n.version
        });
        var n;
      }
      getNamedQuery(t, e) {
        return vr(t).get(e).next((t2) => {
          if (t2)
            return {
              name: (e2 = t2).name,
              query: yr(e2.bundledQuery),
              readTime: wr(e2.readTime)
            };
          var e2;
        });
      }
      saveNamedQuery(t, e) {
        return vr(t).put(function(t2) {
          return {
            name: t2.name,
            readTime: dr(Ni(t2.readTime)),
            bundledQuery: t2.bundledQuery
          };
        }(e));
      }
    };
    function Ar(t) {
      return _e(t, "bundles");
    }
    function vr(t) {
      return _e(t, "namedQueries");
    }
    var Rr = class _Rr {
      /**
       * @param serializer - The document serializer.
       * @param userId - The userId for which we are accessing overlays.
       */
      constructor(t, e) {
        this.serializer = t, this.userId = e;
      }
      static de(t, e) {
        const n = e.uid || "";
        return new _Rr(t, n);
      }
      getOverlay(t, e) {
        return Pr(t).get(Ir(this.userId, e)).next((t2) => t2 ? pr(this.serializer, t2) : null);
      }
      getOverlays(t, e) {
        const n = fs();
        return Rt.forEach(e, (e2) => this.getOverlay(t, e2).next((t2) => {
          null !== t2 && n.set(e2, t2);
        })).next(() => n);
      }
      saveOverlays(t, e, n) {
        const s = [];
        return n.forEach((n2, i) => {
          const r = new ei(e, i);
          s.push(this.we(t, r));
        }), Rt.waitFor(s);
      }
      removeOverlaysForBatchId(t, e, n) {
        const s = /* @__PURE__ */ new Set();
        e.forEach((t2) => s.add(qt(t2.getCollectionPath())));
        const i = [];
        return s.forEach((e2) => {
          const s2 = IDBKeyRange.bound(
            [this.userId, e2, n],
            [this.userId, e2, n + 1],
            /*lowerOpen=*/
            false,
            /*upperOpen=*/
            true
          );
          i.push(Pr(t).J("collectionPathOverlayIndex", s2));
        }), Rt.waitFor(i);
      }
      getOverlaysForCollection(t, e, n) {
        const s = fs(), i = qt(e), r = IDBKeyRange.bound(
          [this.userId, i, n],
          [this.userId, i, Number.POSITIVE_INFINITY],
          /*lowerOpen=*/
          true
        );
        return Pr(t).j("collectionPathOverlayIndex", r).next((t2) => {
          for (const e2 of t2) {
            const t3 = pr(this.serializer, e2);
            s.set(t3.getKey(), t3);
          }
          return s;
        });
      }
      getOverlaysForCollectionGroup(t, e, n, s) {
        const i = fs();
        let r;
        const o = IDBKeyRange.bound(
          [this.userId, e, n],
          [this.userId, e, Number.POSITIVE_INFINITY],
          /*lowerOpen=*/
          true
        );
        return Pr(t).X({
          index: "collectionGroupOverlayIndex",
          range: o
        }, (t2, e2, n2) => {
          const o2 = pr(this.serializer, e2);
          i.size() < s || o2.largestBatchId === r ? (i.set(o2.getKey(), o2), r = o2.largestBatchId) : n2.done();
        }).next(() => i);
      }
      we(t, e) {
        return Pr(t).put(function(t2, e2, n) {
          const [s, i, r] = Ir(e2, n.mutation.key);
          return {
            userId: e2,
            collectionPath: i,
            documentId: r,
            collectionGroup: n.mutation.key.getCollectionGroup(),
            largestBatchId: n.largestBatchId,
            overlayMutation: ji(t2.fe, n.mutation)
          };
        }(this.serializer, this.userId, e));
      }
    };
    function Pr(t) {
      return _e(t, "documentOverlays");
    }
    var br = class {
      constructor() {
      }
      // The write methods below short-circuit writing terminators for values
      // containing a (terminating) truncated value.
      // As an example, consider the resulting encoding for:
      // ["bar", [2, "foo"]] -> (STRING, "bar", TERM, ARRAY, NUMBER, 2, STRING, "foo", TERM, TERM, TERM)
      // ["bar", [2, truncated("foo")]] -> (STRING, "bar", TERM, ARRAY, NUMBER, 2, STRING, "foo", TRUNC)
      // ["bar", truncated(["foo"])] -> (STRING, "bar", TERM, ARRAY. STRING, "foo", TERM, TRUNC)
      /** Writes an index value.  */
      _e(t, e) {
        this.me(t, e), // Write separator to split index values
        // (see go/firestore-storage-format#encodings).
        e.ge();
      }
      me(t, e) {
        if ("nullValue" in t)
          this.ye(e, 5);
        else if ("booleanValue" in t)
          this.ye(e, 10), e.pe(t.booleanValue ? 1 : 0);
        else if ("integerValue" in t)
          this.ye(e, 15), e.pe(Ce(t.integerValue));
        else if ("doubleValue" in t) {
          const n = Ce(t.doubleValue);
          isNaN(n) ? this.ye(e, 13) : (this.ye(e, 15), Bt(n) ? (
            // -0.0, 0 and 0.0 are all considered the same
            e.pe(0)
          ) : e.pe(n));
        } else if ("timestampValue" in t) {
          const n = t.timestampValue;
          this.ye(e, 20), "string" == typeof n ? e.Ie(n) : (e.Ie(`${n.seconds || ""}`), e.pe(n.nanos || 0));
        } else if ("stringValue" in t)
          this.Te(t.stringValue, e), this.Ee(e);
        else if ("bytesValue" in t)
          this.ye(e, 30), e.Ae(xe(t.bytesValue)), this.Ee(e);
        else if ("referenceValue" in t)
          this.ve(t.referenceValue, e);
        else if ("geoPointValue" in t) {
          const n = t.geoPointValue;
          this.ye(e, 45), e.pe(n.latitude || 0), e.pe(n.longitude || 0);
        } else
          "mapValue" in t ? en(t) ? this.ye(e, Number.MAX_SAFE_INTEGER) : (this.Re(t.mapValue, e), this.Ee(e)) : "arrayValue" in t ? (this.Pe(t.arrayValue, e), this.Ee(e)) : O();
      }
      Te(t, e) {
        this.ye(e, 25), this.be(t, e);
      }
      be(t, e) {
        e.Ie(t);
      }
      Re(t, e) {
        const n = t.fields || {};
        this.ye(e, 55);
        for (const t2 of Object.keys(n))
          this.Te(t2, e), this.me(n[t2], e);
      }
      Pe(t, e) {
        const n = t.values || [];
        this.ye(e, 50);
        for (const t2 of n)
          this.me(t2, e);
      }
      ve(t, e) {
        this.ye(e, 37);
        ht.fromName(t).path.forEach((t2) => {
          this.ye(e, 60), this.be(t2, e);
        });
      }
      ye(t, e) {
        t.pe(e);
      }
      Ee(t) {
        t.pe(2);
      }
    };
    br.Ve = new br();
    function Vr(t) {
      if (0 === t)
        return 8;
      let e = 0;
      return t >> 4 == 0 && // Test if the first four bits are zero.
      (e += 4, t <<= 4), t >> 6 == 0 && // Test if the first two (or next two) bits are zero.
      (e += 2, t <<= 2), t >> 7 == 0 && // Test if the remaining bit is zero.
      (e += 1), e;
    }
    function Sr(t) {
      const e = 64 - function(t2) {
        let e2 = 0;
        for (let n = 0; n < 8; ++n) {
          const s = Vr(255 & t2[n]);
          if (e2 += s, 8 !== s)
            break;
        }
        return e2;
      }(t);
      return Math.ceil(e / 8);
    }
    var Dr = class {
      constructor() {
        this.buffer = new Uint8Array(1024), this.position = 0;
      }
      Se(t) {
        const e = t[Symbol.iterator]();
        let n = e.next();
        for (; !n.done; )
          this.De(n.value), n = e.next();
        this.Ce();
      }
      xe(t) {
        const e = t[Symbol.iterator]();
        let n = e.next();
        for (; !n.done; )
          this.Ne(n.value), n = e.next();
        this.ke();
      }
      /** Writes utf8 bytes into this byte sequence, ascending. */
      Me(t) {
        for (const e of t) {
          const t2 = e.charCodeAt(0);
          if (t2 < 128)
            this.De(t2);
          else if (t2 < 2048)
            this.De(960 | t2 >>> 6), this.De(128 | 63 & t2);
          else if (e < "\uD800" || "\uDBFF" < e)
            this.De(480 | t2 >>> 12), this.De(128 | 63 & t2 >>> 6), this.De(128 | 63 & t2);
          else {
            const t3 = e.codePointAt(0);
            this.De(240 | t3 >>> 18), this.De(128 | 63 & t3 >>> 12), this.De(128 | 63 & t3 >>> 6), this.De(128 | 63 & t3);
          }
        }
        this.Ce();
      }
      /** Writes utf8 bytes into this byte sequence, descending */
      $e(t) {
        for (const e of t) {
          const t2 = e.charCodeAt(0);
          if (t2 < 128)
            this.Ne(t2);
          else if (t2 < 2048)
            this.Ne(960 | t2 >>> 6), this.Ne(128 | 63 & t2);
          else if (e < "\uD800" || "\uDBFF" < e)
            this.Ne(480 | t2 >>> 12), this.Ne(128 | 63 & t2 >>> 6), this.Ne(128 | 63 & t2);
          else {
            const t3 = e.codePointAt(0);
            this.Ne(240 | t3 >>> 18), this.Ne(128 | 63 & t3 >>> 12), this.Ne(128 | 63 & t3 >>> 6), this.Ne(128 | 63 & t3);
          }
        }
        this.ke();
      }
      Oe(t) {
        const e = this.Fe(t), n = Sr(e);
        this.Be(1 + n), this.buffer[this.position++] = 255 & n;
        for (let t2 = e.length - n; t2 < e.length; ++t2)
          this.buffer[this.position++] = 255 & e[t2];
      }
      Le(t) {
        const e = this.Fe(t), n = Sr(e);
        this.Be(1 + n), this.buffer[this.position++] = ~(255 & n);
        for (let t2 = e.length - n; t2 < e.length; ++t2)
          this.buffer[this.position++] = ~(255 & e[t2]);
      }
      /**
       * Writes the "infinity" byte sequence that sorts after all other byte
       * sequences written in ascending order.
       */
      qe() {
        this.Ue(255), this.Ue(255);
      }
      /**
       * Writes the "infinity" byte sequence that sorts before all other byte
       * sequences written in descending order.
       */
      Ke() {
        this.Ge(255), this.Ge(255);
      }
      /**
       * Resets the buffer such that it is the same as when it was newly
       * constructed.
       */
      reset() {
        this.position = 0;
      }
      seed(t) {
        this.Be(t.length), this.buffer.set(t, this.position), this.position += t.length;
      }
      /** Makes a copy of the encoded bytes in this buffer.  */
      Qe() {
        return this.buffer.slice(0, this.position);
      }
      /**
       * Encodes `val` into an encoding so that the order matches the IEEE 754
       * floating-point comparison results with the following exceptions:
       *   -0.0 < 0.0
       *   all non-NaN < NaN
       *   NaN = NaN
       */
      Fe(t) {
        const e = (
          /** Converts a JavaScript number to a byte array (using big endian encoding). */
          function(t2) {
            const e2 = new DataView(new ArrayBuffer(8));
            return e2.setFloat64(
              0,
              t2,
              /* littleEndian= */
              false
            ), new Uint8Array(e2.buffer);
          }(t)
        ), n = 0 != (128 & e[0]);
        e[0] ^= n ? 255 : 128;
        for (let t2 = 1; t2 < e.length; ++t2)
          e[t2] ^= n ? 255 : 0;
        return e;
      }
      /** Writes a single byte ascending to the buffer. */
      De(t) {
        const e = 255 & t;
        0 === e ? (this.Ue(0), this.Ue(255)) : 255 === e ? (this.Ue(255), this.Ue(0)) : this.Ue(e);
      }
      /** Writes a single byte descending to the buffer.  */
      Ne(t) {
        const e = 255 & t;
        0 === e ? (this.Ge(0), this.Ge(255)) : 255 === e ? (this.Ge(255), this.Ge(0)) : this.Ge(t);
      }
      Ce() {
        this.Ue(0), this.Ue(1);
      }
      ke() {
        this.Ge(0), this.Ge(1);
      }
      Ue(t) {
        this.Be(1), this.buffer[this.position++] = t;
      }
      Ge(t) {
        this.Be(1), this.buffer[this.position++] = ~t;
      }
      Be(t) {
        const e = t + this.position;
        if (e <= this.buffer.length)
          return;
        let n = 2 * this.buffer.length;
        n < e && (n = e);
        const s = new Uint8Array(n);
        s.set(this.buffer), // copy old data
        this.buffer = s;
      }
    };
    var Cr = class {
      constructor(t) {
        this.je = t;
      }
      Ae(t) {
        this.je.Se(t);
      }
      Ie(t) {
        this.je.Me(t);
      }
      pe(t) {
        this.je.Oe(t);
      }
      ge() {
        this.je.qe();
      }
    };
    var xr = class {
      constructor(t) {
        this.je = t;
      }
      Ae(t) {
        this.je.xe(t);
      }
      Ie(t) {
        this.je.$e(t);
      }
      pe(t) {
        this.je.Le(t);
      }
      ge() {
        this.je.Ke();
      }
    };
    var Nr = class {
      constructor() {
        this.je = new Dr(), this.ze = new Cr(this.je), this.We = new xr(this.je);
      }
      seed(t) {
        this.je.seed(t);
      }
      He(t) {
        return 0 === t ? this.ze : this.We;
      }
      Qe() {
        return this.je.Qe();
      }
      reset() {
        this.je.reset();
      }
    };
    var kr = class _kr {
      constructor(t, e, n, s) {
        this.indexId = t, this.documentKey = e, this.arrayValue = n, this.directionalValue = s;
      }
      /**
       * Returns an IndexEntry entry that sorts immediately after the current
       * directional value.
       */
      Je() {
        const t = this.directionalValue.length, e = 0 === t || 255 === this.directionalValue[t - 1] ? t + 1 : t, n = new Uint8Array(e);
        return n.set(this.directionalValue, 0), e !== t ? n.set([0], this.directionalValue.length) : ++n[n.length - 1], new _kr(this.indexId, this.documentKey, this.arrayValue, n);
      }
    };
    function Mr(t, e) {
      let n = t.indexId - e.indexId;
      return 0 !== n ? n : (n = $r(t.arrayValue, e.arrayValue), 0 !== n ? n : (n = $r(t.directionalValue, e.directionalValue), 0 !== n ? n : ht.comparator(t.documentKey, e.documentKey)));
    }
    function $r(t, e) {
      for (let n = 0; n < t.length && n < e.length; ++n) {
        const s = t[n] - e[n];
        if (0 !== s)
          return s;
      }
      return t.length - e.length;
    }
    var Or = class {
      constructor(t) {
        this.collectionId = null != t.collectionGroup ? t.collectionGroup : t.path.lastSegment(), this.Ye = t.orderBy, this.Xe = [];
        for (const e of t.filters) {
          const t2 = e;
          t2.isInequality() ? this.Ze = t2 : this.Xe.push(t2);
        }
      }
      /**
       * Returns whether the index can be used to serve the TargetIndexMatcher's
       * target.
       *
       * An index is considered capable of serving the target when:
       * - The target uses all index segments for its filters and orderBy clauses.
       *   The target can have additional filter and orderBy clauses, but not
       *   fewer.
       * - If an ArrayContains/ArrayContainsAnyfilter is used, the index must also
       *   have a corresponding `CONTAINS` segment.
       * - All directional index segments can be mapped to the target as a series of
       *   equality filters, a single inequality filter and a series of orderBy
       *   clauses.
       * - The segments that represent the equality filters may appear out of order.
       * - The optional segment for the inequality filter must appear after all
       *   equality segments.
       * - The segments that represent that orderBy clause of the target must appear
       *   in order after all equality and inequality segments. Single orderBy
       *   clauses cannot be skipped, but a continuous orderBy suffix may be
       *   omitted.
       */
      tn(t) {
        F(t.collectionGroup === this.collectionId);
        const e = ft(t);
        if (void 0 !== e && !this.en(e))
          return false;
        const n = dt(t);
        let s = /* @__PURE__ */ new Set(), i = 0, r = 0;
        for (; i < n.length && this.en(n[i]); ++i)
          s = s.add(n[i].fieldPath.canonicalString());
        if (i === n.length)
          return true;
        if (void 0 !== this.Ze) {
          if (!s.has(this.Ze.field.canonicalString())) {
            const t2 = n[i];
            if (!this.nn(this.Ze, t2) || !this.sn(this.Ye[r++], t2))
              return false;
          }
          ++i;
        }
        for (; i < n.length; ++i) {
          const t2 = n[i];
          if (r >= this.Ye.length || !this.sn(this.Ye[r++], t2))
            return false;
        }
        return true;
      }
      en(t) {
        for (const e of this.Xe)
          if (this.nn(e, t))
            return true;
        return false;
      }
      nn(t, e) {
        if (void 0 === t || !t.field.isEqual(e.fieldPath))
          return false;
        const n = "array-contains" === t.op || "array-contains-any" === t.op;
        return 2 === e.kind === n;
      }
      sn(t, e) {
        return !!t.field.isEqual(e.fieldPath) && (0 === e.kind && "asc" === t.dir || 1 === e.kind && "desc" === t.dir);
      }
    };
    function Fr(t) {
      var e, n;
      if (F(t instanceof mn || t instanceof gn), t instanceof mn) {
        if (t instanceof Cn) {
          const s2 = (null === (n = null === (e = t.value.arrayValue) || void 0 === e ? void 0 : e.values) || void 0 === n ? void 0 : n.map((e2) => mn.create(t.field, "==", e2))) || [];
          return gn.create(
            s2,
            "or"
            /* CompositeOperator.OR */
          );
        }
        return t;
      }
      const s = t.filters.map((t2) => Fr(t2));
      return gn.create(s, t.op);
    }
    function Br(t) {
      if (0 === t.getFilters().length)
        return [];
      const e = Kr(Fr(t));
      return F(Ur(e)), Lr(e) || qr(e) ? [e] : e.getFilters();
    }
    function Lr(t) {
      return t instanceof mn;
    }
    function qr(t) {
      return t instanceof gn && In(t);
    }
    function Ur(t) {
      return Lr(t) || qr(t) || /**
      * Returns true if the given filter is the disjunction of one or more "flat conjunctions" and
      * field filters. e.g. (a == 10) || (b==20 && c==30)
      */
      function(t2) {
        if (t2 instanceof gn && pn(t2)) {
          for (const e of t2.getFilters())
            if (!Lr(e) && !qr(e))
              return false;
          return true;
        }
        return false;
      }(t);
    }
    function Kr(t) {
      if (F(t instanceof mn || t instanceof gn), t instanceof mn)
        return t;
      if (1 === t.filters.length)
        return Kr(t.filters[0]);
      const e = t.filters.map((t2) => Kr(t2));
      let n = gn.create(e, t.op);
      return n = jr(n), Ur(n) ? n : (F(n instanceof gn), F(yn(n)), F(n.filters.length > 1), n.filters.reduce((t2, e2) => Gr(t2, e2)));
    }
    function Gr(t, e) {
      let n;
      return F(t instanceof mn || t instanceof gn), F(e instanceof mn || e instanceof gn), // FieldFilter FieldFilter
      n = t instanceof mn ? e instanceof mn ? function(t2, e2) {
        return gn.create(
          [t2, e2],
          "and"
          /* CompositeOperator.AND */
        );
      }(t, e) : Qr(t, e) : e instanceof mn ? Qr(e, t) : function(t2, e2) {
        if (F(t2.filters.length > 0 && e2.filters.length > 0), yn(t2) && yn(e2))
          return vn(t2, e2.getFilters());
        const n2 = pn(t2) ? t2 : e2, s = pn(t2) ? e2 : t2, i = n2.filters.map((t3) => Gr(t3, s));
        return gn.create(
          i,
          "or"
          /* CompositeOperator.OR */
        );
      }(t, e), jr(n);
    }
    function Qr(t, e) {
      if (yn(e))
        return vn(e, t.getFilters());
      {
        const n = e.filters.map((e2) => Gr(t, e2));
        return gn.create(
          n,
          "or"
          /* CompositeOperator.OR */
        );
      }
    }
    function jr(t) {
      if (F(t instanceof mn || t instanceof gn), t instanceof mn)
        return t;
      const e = t.getFilters();
      if (1 === e.length)
        return jr(e[0]);
      if (Tn(t))
        return t;
      const n = e.map((t2) => jr(t2)), s = [];
      return n.forEach((e2) => {
        e2 instanceof mn ? s.push(e2) : e2 instanceof gn && (e2.op === t.op ? (
          // compositeFilter: (A | (B | C))
          // compositeSubfilter: (B | C)
          // Result: (A | B | C)
          s.push(...e2.filters)
        ) : (
          // compositeFilter: (A | (B & C))
          // compositeSubfilter: (B & C)
          // Result: (A | (B & C))
          s.push(e2)
        ));
      }), 1 === s.length ? s[0] : gn.create(s, t.op);
    }
    var zr = class {
      constructor() {
        this.rn = new Wr();
      }
      addToCollectionParentIndex(t, e) {
        return this.rn.add(e), Rt.resolve();
      }
      getCollectionParents(t, e) {
        return Rt.resolve(this.rn.getEntries(e));
      }
      addFieldIndex(t, e) {
        return Rt.resolve();
      }
      deleteFieldIndex(t, e) {
        return Rt.resolve();
      }
      getDocumentsMatchingTarget(t, e) {
        return Rt.resolve(null);
      }
      getIndexType(t, e) {
        return Rt.resolve(
          0
          /* IndexType.NONE */
        );
      }
      getFieldIndexes(t, e) {
        return Rt.resolve([]);
      }
      getNextCollectionGroupToUpdate(t) {
        return Rt.resolve(null);
      }
      getMinOffset(t, e) {
        return Rt.resolve(It.min());
      }
      getMinOffsetFromCollectionGroup(t, e) {
        return Rt.resolve(It.min());
      }
      updateCollectionGroup(t, e, n) {
        return Rt.resolve();
      }
      updateIndexEntries(t, e) {
        return Rt.resolve();
      }
    };
    var Wr = class {
      constructor() {
        this.index = {};
      }
      // Returns false if the entry already existed.
      add(t) {
        const e = t.lastSegment(), n = t.popLast(), s = this.index[e] || new Ee(ut.comparator), i = !s.has(n);
        return this.index[e] = s.add(n), i;
      }
      has(t) {
        const e = t.lastSegment(), n = t.popLast(), s = this.index[e];
        return s && s.has(n);
      }
      getEntries(t) {
        return (this.index[t] || new Ee(ut.comparator)).toArray();
      }
    };
    var Hr = new Uint8Array(0);
    var Jr = class {
      constructor(t, e) {
        this.user = t, this.databaseId = e, /**
         * An in-memory copy of the index entries we've already written since the SDK
         * launched. Used to avoid re-writing the same entry repeatedly.
         *
         * This is *NOT* a complete cache of what's in persistence and so can never be
         * used to satisfy reads.
         */
        this.on = new Wr(), /**
         * Maps from a target to its equivalent list of sub-targets. Each sub-target
         * contains only one term from the target's disjunctive normal form (DNF).
         */
        this.un = new os((t2) => $n(t2), (t2, e2) => On(t2, e2)), this.uid = t.uid || "";
      }
      /**
       * Adds a new entry to the collection parent index.
       *
       * Repeated calls for the same collectionPath should be avoided within a
       * transaction as IndexedDbIndexManager only caches writes once a transaction
       * has been committed.
       */
      addToCollectionParentIndex(t, e) {
        if (!this.on.has(e)) {
          const n = e.lastSegment(), s = e.popLast();
          t.addOnCommittedListener(() => {
            this.on.add(e);
          });
          const i = {
            collectionId: n,
            parent: qt(s)
          };
          return Yr(t).put(i);
        }
        return Rt.resolve();
      }
      getCollectionParents(t, e) {
        const n = [], s = IDBKeyRange.bound(
          [e, ""],
          [st(e), ""],
          /*lowerOpen=*/
          false,
          /*upperOpen=*/
          true
        );
        return Yr(t).j(s).next((t2) => {
          for (const s2 of t2) {
            if (s2.collectionId !== e)
              break;
            n.push(Gt(s2.parent));
          }
          return n;
        });
      }
      addFieldIndex(t, e) {
        const n = Zr(t), s = function(t2) {
          return {
            indexId: t2.indexId,
            collectionGroup: t2.collectionGroup,
            fields: t2.fields.map((t3) => [t3.fieldPath.canonicalString(), t3.kind])
          };
        }(e);
        delete s.indexId;
        const i = n.add(s);
        if (e.indexState) {
          const n2 = to(t);
          return i.next((t2) => {
            n2.put(Tr(t2, this.user, e.indexState.sequenceNumber, e.indexState.offset));
          });
        }
        return i.next();
      }
      deleteFieldIndex(t, e) {
        const n = Zr(t), s = to(t), i = Xr(t);
        return n.delete(e.indexId).next(() => s.delete(IDBKeyRange.bound(
          [e.indexId],
          [e.indexId + 1],
          /*lowerOpen=*/
          false,
          /*upperOpen=*/
          true
        ))).next(() => i.delete(IDBKeyRange.bound(
          [e.indexId],
          [e.indexId + 1],
          /*lowerOpen=*/
          false,
          /*upperOpen=*/
          true
        )));
      }
      getDocumentsMatchingTarget(t, e) {
        const n = Xr(t);
        let s = true;
        const i = /* @__PURE__ */ new Map();
        return Rt.forEach(this.cn(e), (e2) => this.an(t, e2).next((t2) => {
          s && (s = !!t2), i.set(e2, t2);
        })).next(() => {
          if (s) {
            let t2 = gs();
            const s2 = [];
            return Rt.forEach(i, (i2, r) => {
              var o;
              N("IndexedDbIndexManager", `Using index ${o = i2, `id=${o.indexId}|cg=${o.collectionGroup}|f=${o.fields.map((t3) => `${t3.fieldPath}:${t3.kind}`).join(",")}`} to execute ${$n(e)}`);
              const u = function(t3, e2) {
                const n2 = ft(e2);
                if (void 0 === n2)
                  return null;
                for (const e3 of Bn(t3, n2.fieldPath))
                  switch (e3.op) {
                    case "array-contains-any":
                      return e3.value.arrayValue.values || [];
                    case "array-contains":
                      return [e3.value];
                  }
                return null;
              }(r, i2), c = function(t3, e2) {
                const n2 = /* @__PURE__ */ new Map();
                for (const s3 of dt(e2))
                  for (const e3 of Bn(t3, s3.fieldPath))
                    switch (e3.op) {
                      case "==":
                      case "in":
                        n2.set(s3.fieldPath.canonicalString(), e3.value);
                        break;
                      case "not-in":
                      case "!=":
                        return n2.set(s3.fieldPath.canonicalString(), e3.value), Array.from(n2.values());
                    }
                return null;
              }(r, i2), a = function(t3, e2) {
                const n2 = [];
                let s3 = true;
                for (const i3 of dt(e2)) {
                  const e3 = 0 === i3.kind ? Ln(t3, i3.fieldPath, t3.startAt) : qn(t3, i3.fieldPath, t3.startAt);
                  n2.push(e3.value), s3 && (s3 = e3.inclusive);
                }
                return new hn(n2, s3);
              }(r, i2), h = function(t3, e2) {
                const n2 = [];
                let s3 = true;
                for (const i3 of dt(e2)) {
                  const e3 = 0 === i3.kind ? qn(t3, i3.fieldPath, t3.endAt) : Ln(t3, i3.fieldPath, t3.endAt);
                  n2.push(e3.value), s3 && (s3 = e3.inclusive);
                }
                return new hn(n2, s3);
              }(r, i2), l = this.hn(i2, r, a), f = this.hn(i2, r, h), d = this.ln(i2, r, c), w = this.fn(i2.indexId, u, l, a.inclusive, f, h.inclusive, d);
              return Rt.forEach(w, (i3) => n.H(i3, e.limit).next((e2) => {
                e2.forEach((e3) => {
                  const n2 = ht.fromSegments(e3.documentKey);
                  t2.has(n2) || (t2 = t2.add(n2), s2.push(n2));
                });
              }));
            }).next(() => s2);
          }
          return Rt.resolve(null);
        });
      }
      cn(t) {
        let e = this.un.get(t);
        if (e)
          return e;
        if (0 === t.filters.length)
          e = [t];
        else {
          e = Br(gn.create(
            t.filters,
            "and"
            /* CompositeOperator.AND */
          )).map((e2) => Mn(t.path, t.collectionGroup, t.orderBy, e2.getFilters(), t.limit, t.startAt, t.endAt));
        }
        return this.un.set(t, e), e;
      }
      /**
       * Constructs a key range query on `DbIndexEntryStore` that unions all
       * bounds.
       */
      fn(t, e, n, s, i, r, o) {
        const u = (null != e ? e.length : 1) * Math.max(n.length, i.length), c = u / (null != e ? e.length : 1), a = [];
        for (let h = 0; h < u; ++h) {
          const u2 = e ? this.dn(e[h / c]) : Hr, l = this.wn(t, u2, n[h % c], s), f = this._n(t, u2, i[h % c], r), d = o.map((e2) => this.wn(
            t,
            u2,
            e2,
            /* inclusive= */
            true
          ));
          a.push(...this.createRange(l, f, d));
        }
        return a;
      }
      /** Generates the lower bound for `arrayValue` and `directionalValue`. */
      wn(t, e, n, s) {
        const i = new kr(t, ht.empty(), e, n);
        return s ? i : i.Je();
      }
      /** Generates the upper bound for `arrayValue` and `directionalValue`. */
      _n(t, e, n, s) {
        const i = new kr(t, ht.empty(), e, n);
        return s ? i.Je() : i;
      }
      an(t, e) {
        const n = new Or(e), s = null != e.collectionGroup ? e.collectionGroup : e.path.lastSegment();
        return this.getFieldIndexes(t, s).next((t2) => {
          let e2 = null;
          for (const s2 of t2) {
            n.tn(s2) && (!e2 || s2.fields.length > e2.fields.length) && (e2 = s2);
          }
          return e2;
        });
      }
      getIndexType(t, e) {
        let n = 2;
        const s = this.cn(e);
        return Rt.forEach(s, (e2) => this.an(t, e2).next((t2) => {
          t2 ? 0 !== n && t2.fields.length < function(t3) {
            let e3 = new Ee(at.comparator), n2 = false;
            for (const s2 of t3.filters)
              for (const t4 of s2.getFlattenedFilters())
                t4.field.isKeyField() || // ARRAY_CONTAINS or ARRAY_CONTAINS_ANY filters must be counted separately.
                // For instance, it is possible to have an index for "a ARRAY a ASC". Even
                // though these are on the same field, they should be counted as two
                // separate segments in an index.
                ("array-contains" === t4.op || "array-contains-any" === t4.op ? n2 = true : e3 = e3.add(t4.field));
            for (const n3 of t3.orderBy)
              n3.field.isKeyField() || (e3 = e3.add(n3.field));
            return e3.size + (n2 ? 1 : 0);
          }(e2) && (n = 1) : n = 0;
        })).next(() => (
          // OR queries have more than one sub-target (one sub-target per DNF term). We currently consider
          // OR queries that have a `limit` to have a partial index. For such queries we perform sorting
          // and apply the limit in memory as a post-processing step.
          function(t2) {
            return null !== t2.limit;
          }(e) && s.length > 1 && 2 === n ? 1 : n
        ));
      }
      /**
       * Returns the byte encoded form of the directional values in the field index.
       * Returns `null` if the document does not have all fields specified in the
       * index.
       */
      mn(t, e) {
        const n = new Nr();
        for (const s of dt(t)) {
          const t2 = e.data.field(s.fieldPath);
          if (null == t2)
            return null;
          const i = n.He(s.kind);
          br.Ve._e(t2, i);
        }
        return n.Qe();
      }
      /** Encodes a single value to the ascending index format. */
      dn(t) {
        const e = new Nr();
        return br.Ve._e(t, e.He(
          0
          /* IndexKind.ASCENDING */
        )), e.Qe();
      }
      /**
       * Returns an encoded form of the document key that sorts based on the key
       * ordering of the field index.
       */
      gn(t, e) {
        const n = new Nr();
        return br.Ve._e(We(this.databaseId, e), n.He(function(t2) {
          const e2 = dt(t2);
          return 0 === e2.length ? 0 : e2[e2.length - 1].kind;
        }(t))), n.Qe();
      }
      /**
       * Encodes the given field values according to the specification in `target`.
       * For IN queries, a list of possible values is returned.
       */
      ln(t, e, n) {
        if (null === n)
          return [];
        let s = [];
        s.push(new Nr());
        let i = 0;
        for (const r of dt(t)) {
          const t2 = n[i++];
          for (const n2 of s)
            if (this.yn(e, r.fieldPath) && Je(t2))
              s = this.pn(s, r, t2);
            else {
              const e2 = n2.He(r.kind);
              br.Ve._e(t2, e2);
            }
        }
        return this.In(s);
      }
      /**
       * Encodes the given bounds according to the specification in `target`. For IN
       * queries, a list of possible values is returned.
       */
      hn(t, e, n) {
        return this.ln(t, e, n.position);
      }
      /** Returns the byte representation for the provided encoders. */
      In(t) {
        const e = [];
        for (let n = 0; n < t.length; ++n)
          e[n] = t[n].Qe();
        return e;
      }
      /**
       * Creates a separate encoder for each element of an array.
       *
       * The method appends each value to all existing encoders (e.g. filter("a",
       * "==", "a1").filter("b", "in", ["b1", "b2"]) becomes ["a1,b1", "a1,b2"]). A
       * list of new encoders is returned.
       */
      pn(t, e, n) {
        const s = [...t], i = [];
        for (const t2 of n.arrayValue.values || [])
          for (const n2 of s) {
            const s2 = new Nr();
            s2.seed(n2.Qe()), br.Ve._e(t2, s2.He(e.kind)), i.push(s2);
          }
        return i;
      }
      yn(t, e) {
        return !!t.filters.find((t2) => t2 instanceof mn && t2.field.isEqual(e) && ("in" === t2.op || "not-in" === t2.op));
      }
      getFieldIndexes(t, e) {
        const n = Zr(t), s = to(t);
        return (e ? n.j("collectionGroupIndex", IDBKeyRange.bound(e, e)) : n.j()).next((t2) => {
          const e2 = [];
          return Rt.forEach(t2, (t3) => s.get([t3.indexId, this.uid]).next((n2) => {
            e2.push(function(t4, e3) {
              const n3 = e3 ? new gt(e3.sequenceNumber, new It(wr(e3.readTime), new ht(Gt(e3.documentKey)), e3.largestBatchId)) : gt.empty(), s2 = t4.fields.map(([t5, e4]) => new _t(at.fromServerFormat(t5), e4));
              return new lt(t4.indexId, t4.collectionGroup, s2, n3);
            }(t3, n2));
          })).next(() => e2);
        });
      }
      getNextCollectionGroupToUpdate(t) {
        return this.getFieldIndexes(t).next((t2) => 0 === t2.length ? null : (t2.sort((t3, e) => {
          const n = t3.indexState.sequenceNumber - e.indexState.sequenceNumber;
          return 0 !== n ? n : et(t3.collectionGroup, e.collectionGroup);
        }), t2[0].collectionGroup));
      }
      updateCollectionGroup(t, e, n) {
        const s = Zr(t), i = to(t);
        return this.Tn(t).next((t2) => s.j("collectionGroupIndex", IDBKeyRange.bound(e, e)).next((e2) => Rt.forEach(e2, (e3) => i.put(Tr(e3.indexId, this.user, t2, n)))));
      }
      updateIndexEntries(t, e) {
        const n = /* @__PURE__ */ new Map();
        return Rt.forEach(e, (e2, s) => {
          const i = n.get(e2.collectionGroup);
          return (i ? Rt.resolve(i) : this.getFieldIndexes(t, e2.collectionGroup)).next((i2) => (n.set(e2.collectionGroup, i2), Rt.forEach(i2, (n2) => this.En(t, e2, n2).next((e3) => {
            const i3 = this.An(s, n2);
            return e3.isEqual(i3) ? Rt.resolve() : this.vn(t, s, n2, e3, i3);
          }))));
        });
      }
      Rn(t, e, n, s) {
        return Xr(t).put({
          indexId: s.indexId,
          uid: this.uid,
          arrayValue: s.arrayValue,
          directionalValue: s.directionalValue,
          orderedDocumentKey: this.gn(n, e.key),
          documentKey: e.key.path.toArray()
        });
      }
      Pn(t, e, n, s) {
        return Xr(t).delete([s.indexId, this.uid, s.arrayValue, s.directionalValue, this.gn(n, e.key), e.key.path.toArray()]);
      }
      En(t, e, n) {
        const s = Xr(t);
        let i = new Ee(Mr);
        return s.X({
          index: "documentKeyIndex",
          range: IDBKeyRange.only([n.indexId, this.uid, this.gn(n, e)])
        }, (t2, s2) => {
          i = i.add(new kr(n.indexId, e, s2.arrayValue, s2.directionalValue));
        }).next(() => i);
      }
      /** Creates the index entries for the given document. */
      An(t, e) {
        let n = new Ee(Mr);
        const s = this.mn(e, t);
        if (null == s)
          return n;
        const i = ft(e);
        if (null != i) {
          const r = t.data.field(i.fieldPath);
          if (Je(r))
            for (const i2 of r.arrayValue.values || [])
              n = n.add(new kr(e.indexId, t.key, this.dn(i2), s));
        } else
          n = n.add(new kr(e.indexId, t.key, Hr, s));
        return n;
      }
      /**
       * Updates the index entries for the provided document by deleting entries
       * that are no longer referenced in `newEntries` and adding all newly added
       * entries.
       */
      vn(t, e, n, s, i) {
        N("IndexedDbIndexManager", "Updating index entries for document '%s'", e.key);
        const r = [];
        return function(t2, e2, n2, s2, i2) {
          const r2 = t2.getIterator(), o = e2.getIterator();
          let u = ve(r2), c = ve(o);
          for (; u || c; ) {
            let t3 = false, e3 = false;
            if (u && c) {
              const s3 = n2(u, c);
              s3 < 0 ? (
                // The element was removed if the next element in our ordered
                // walkthrough is only in `before`.
                e3 = true
              ) : s3 > 0 && // The element was added if the next element in our ordered walkthrough
              // is only in `after`.
              (t3 = true);
            } else
              null != u ? e3 = true : t3 = true;
            t3 ? (s2(c), c = ve(o)) : e3 ? (i2(u), u = ve(r2)) : (u = ve(r2), c = ve(o));
          }
        }(
          s,
          i,
          Mr,
          /* onAdd= */
          (s2) => {
            r.push(this.Rn(t, e, n, s2));
          },
          /* onRemove= */
          (s2) => {
            r.push(this.Pn(t, e, n, s2));
          }
        ), Rt.waitFor(r);
      }
      Tn(t) {
        let e = 1;
        return to(t).X({
          index: "sequenceNumberIndex",
          reverse: true,
          range: IDBKeyRange.upperBound([this.uid, Number.MAX_SAFE_INTEGER])
        }, (t2, n, s) => {
          s.done(), e = n.sequenceNumber + 1;
        }).next(() => e);
      }
      /**
       * Returns a new set of IDB ranges that splits the existing range and excludes
       * any values that match the `notInValue` from these ranges. As an example,
       * '[foo > 2 && foo != 3]` becomes  `[foo > 2 && < 3, foo > 3]`.
       */
      createRange(t, e, n) {
        n = n.sort((t2, e2) => Mr(t2, e2)).filter((t2, e2, n2) => !e2 || 0 !== Mr(t2, n2[e2 - 1]));
        const s = [];
        s.push(t);
        for (const i2 of n) {
          const n2 = Mr(i2, t), r = Mr(i2, e);
          if (0 === n2)
            s[0] = t.Je();
          else if (n2 > 0 && r < 0)
            s.push(i2), s.push(i2.Je());
          else if (r > 0)
            break;
        }
        s.push(e);
        const i = [];
        for (let t2 = 0; t2 < s.length; t2 += 2) {
          if (this.bn(s[t2], s[t2 + 1]))
            return [];
          const e2 = [s[t2].indexId, this.uid, s[t2].arrayValue, s[t2].directionalValue, Hr, []], n2 = [s[t2 + 1].indexId, this.uid, s[t2 + 1].arrayValue, s[t2 + 1].directionalValue, Hr, []];
          i.push(IDBKeyRange.bound(e2, n2));
        }
        return i;
      }
      bn(t, e) {
        return Mr(t, e) > 0;
      }
      getMinOffsetFromCollectionGroup(t, e) {
        return this.getFieldIndexes(t, e).next(eo);
      }
      getMinOffset(t, e) {
        return Rt.mapArray(this.cn(e), (e2) => this.an(t, e2).next((t2) => t2 || O())).next(eo);
      }
    };
    function Yr(t) {
      return _e(t, "collectionParents");
    }
    function Xr(t) {
      return _e(t, "indexEntries");
    }
    function Zr(t) {
      return _e(t, "indexConfiguration");
    }
    function to(t) {
      return _e(t, "indexState");
    }
    function eo(t) {
      F(0 !== t.length);
      let e = t[0].indexState.offset, n = e.largestBatchId;
      for (let s = 1; s < t.length; s++) {
        const i = t[s].indexState.offset;
        Tt(i, e) < 0 && (e = i), n < i.largestBatchId && (n = i.largestBatchId);
      }
      return new It(e.readTime, e.documentKey, n);
    }
    var no = {
      didRun: false,
      sequenceNumbersCollected: 0,
      targetsRemoved: 0,
      documentsRemoved: 0
    };
    var so = class _so {
      constructor(t, e, n) {
        this.cacheSizeCollectionThreshold = t, this.percentileToCollect = e, this.maximumSequenceNumbersToCollect = n;
      }
      static withCacheSize(t) {
        return new _so(t, _so.DEFAULT_COLLECTION_PERCENTILE, _so.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);
      }
    };
    function io(t, e, n) {
      const s = t.store("mutations"), i = t.store("documentMutations"), r = [], o = IDBKeyRange.only(n.batchId);
      let u = 0;
      const c = s.X({
        range: o
      }, (t2, e2, n2) => (u++, n2.delete()));
      r.push(c.next(() => {
        F(1 === u);
      }));
      const a = [];
      for (const t2 of n.mutations) {
        const s2 = zt(e, t2.key.path, n.batchId);
        r.push(i.delete(s2)), a.push(t2.key);
      }
      return Rt.waitFor(r).next(() => a);
    }
    function ro(t) {
      if (!t)
        return 0;
      let e;
      if (t.document)
        e = t.document;
      else if (t.unknownDocument)
        e = t.unknownDocument;
      else {
        if (!t.noDocument)
          throw O();
        e = t.noDocument;
      }
      return JSON.stringify(e).length;
    }
    so.DEFAULT_COLLECTION_PERCENTILE = 10, so.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1e3, so.DEFAULT = new so(41943040, so.DEFAULT_COLLECTION_PERCENTILE, so.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT), so.DISABLED = new so(-1, 0, 0);
    var oo = class _oo {
      constructor(t, e, n, s) {
        this.userId = t, this.serializer = e, this.indexManager = n, this.referenceDelegate = s, /**
         * Caches the document keys for pending mutation batches. If the mutation
         * has been removed from IndexedDb, the cached value may continue to
         * be used to retrieve the batch's document keys. To remove a cached value
         * locally, `removeCachedMutationKeys()` should be invoked either directly
         * or through `removeMutationBatches()`.
         *
         * With multi-tab, when the primary client acknowledges or rejects a mutation,
         * this cache is used by secondary clients to invalidate the local
         * view of the documents that were previously affected by the mutation.
         */
        // PORTING NOTE: Multi-tab only.
        this.Vn = {};
      }
      /**
       * Creates a new mutation queue for the given user.
       * @param user - The user for which to create a mutation queue.
       * @param serializer - The serializer to use when persisting to IndexedDb.
       */
      static de(t, e, n, s) {
        F("" !== t.uid);
        const i = t.isAuthenticated() ? t.uid : "";
        return new _oo(i, e, n, s);
      }
      checkEmpty(t) {
        let e = true;
        const n = IDBKeyRange.bound([this.userId, Number.NEGATIVE_INFINITY], [this.userId, Number.POSITIVE_INFINITY]);
        return co(t).X({
          index: "userMutationsIndex",
          range: n
        }, (t2, n2, s) => {
          e = false, s.done();
        }).next(() => e);
      }
      addMutationBatch(t, e, n, s) {
        const i = ao(t), r = co(t);
        return r.add({}).next((o) => {
          F("number" == typeof o);
          const u = new Zs(o, e, n, s), c = function(t2, e2, n2) {
            const s2 = n2.baseMutations.map((e3) => ji(t2.fe, e3)), i2 = n2.mutations.map((e3) => ji(t2.fe, e3));
            return {
              userId: e2,
              batchId: n2.batchId,
              localWriteTimeMs: n2.localWriteTime.toMillis(),
              baseMutations: s2,
              mutations: i2
            };
          }(this.serializer, this.userId, u), a = [];
          let h = new Ee((t2, e2) => et(t2.canonicalString(), e2.canonicalString()));
          for (const t2 of s) {
            const e2 = zt(this.userId, t2.key.path, o);
            h = h.add(t2.key.path.popLast()), a.push(r.put(c)), a.push(i.put(e2, Wt));
          }
          return h.forEach((e2) => {
            a.push(this.indexManager.addToCollectionParentIndex(t, e2));
          }), t.addOnCommittedListener(() => {
            this.Vn[o] = u.keys();
          }), Rt.waitFor(a).next(() => u);
        });
      }
      lookupMutationBatch(t, e) {
        return co(t).get(e).next((t2) => t2 ? (F(t2.userId === this.userId), _r(this.serializer, t2)) : null);
      }
      /**
       * Returns the document keys for the mutation batch with the given batchId.
       * For primary clients, this method returns `null` after
       * `removeMutationBatches()` has been called. Secondary clients return a
       * cached result until `removeCachedMutationKeys()` is invoked.
       */
      // PORTING NOTE: Multi-tab only.
      Sn(t, e) {
        return this.Vn[e] ? Rt.resolve(this.Vn[e]) : this.lookupMutationBatch(t, e).next((t2) => {
          if (t2) {
            const n = t2.keys();
            return this.Vn[e] = n, n;
          }
          return null;
        });
      }
      getNextMutationBatchAfterBatchId(t, e) {
        const n = e + 1, s = IDBKeyRange.lowerBound([this.userId, n]);
        let i = null;
        return co(t).X({
          index: "userMutationsIndex",
          range: s
        }, (t2, e2, s2) => {
          e2.userId === this.userId && (F(e2.batchId >= n), i = _r(this.serializer, e2)), s2.done();
        }).next(() => i);
      }
      getHighestUnacknowledgedBatchId(t) {
        const e = IDBKeyRange.upperBound([this.userId, Number.POSITIVE_INFINITY]);
        let n = -1;
        return co(t).X({
          index: "userMutationsIndex",
          range: e,
          reverse: true
        }, (t2, e2, s) => {
          n = e2.batchId, s.done();
        }).next(() => n);
      }
      getAllMutationBatches(t) {
        const e = IDBKeyRange.bound([this.userId, -1], [this.userId, Number.POSITIVE_INFINITY]);
        return co(t).j("userMutationsIndex", e).next((t2) => t2.map((t3) => _r(this.serializer, t3)));
      }
      getAllMutationBatchesAffectingDocumentKey(t, e) {
        const n = jt(this.userId, e.path), s = IDBKeyRange.lowerBound(n), i = [];
        return ao(t).X({
          range: s
        }, (n2, s2, r) => {
          const [o, u, c] = n2, a = Gt(u);
          if (o === this.userId && e.path.isEqual(a))
            return co(t).get(c).next((t2) => {
              if (!t2)
                throw O();
              F(t2.userId === this.userId), i.push(_r(this.serializer, t2));
            });
          r.done();
        }).next(() => i);
      }
      getAllMutationBatchesAffectingDocumentKeys(t, e) {
        let n = new Ee(et);
        const s = [];
        return e.forEach((e2) => {
          const i = jt(this.userId, e2.path), r = IDBKeyRange.lowerBound(i), o = ao(t).X({
            range: r
          }, (t2, s2, i2) => {
            const [r2, o2, u] = t2, c = Gt(o2);
            r2 === this.userId && e2.path.isEqual(c) ? n = n.add(u) : i2.done();
          });
          s.push(o);
        }), Rt.waitFor(s).next(() => this.Dn(t, n));
      }
      getAllMutationBatchesAffectingQuery(t, e) {
        const n = e.path, s = n.length + 1, i = jt(this.userId, n), r = IDBKeyRange.lowerBound(i);
        let o = new Ee(et);
        return ao(t).X({
          range: r
        }, (t2, e2, i2) => {
          const [r2, u, c] = t2, a = Gt(u);
          r2 === this.userId && n.isPrefixOf(a) ? (
            // Rows with document keys more than one segment longer than the
            // query path can't be matches. For example, a query on 'rooms'
            // can't match the document /rooms/abc/messages/xyx.
            // TODO(mcg): we'll need a different scanner when we implement
            // ancestor queries.
            a.length === s && (o = o.add(c))
          ) : i2.done();
        }).next(() => this.Dn(t, o));
      }
      Dn(t, e) {
        const n = [], s = [];
        return e.forEach((e2) => {
          s.push(co(t).get(e2).next((t2) => {
            if (null === t2)
              throw O();
            F(t2.userId === this.userId), n.push(_r(this.serializer, t2));
          }));
        }), Rt.waitFor(s).next(() => n);
      }
      removeMutationBatch(t, e) {
        return io(t.ht, this.userId, e).next((n) => (t.addOnCommittedListener(() => {
          this.Cn(e.batchId);
        }), Rt.forEach(n, (e2) => this.referenceDelegate.markPotentiallyOrphaned(t, e2))));
      }
      /**
       * Clears the cached keys for a mutation batch. This method should be
       * called by secondary clients after they process mutation updates.
       *
       * Note that this method does not have to be called from primary clients as
       * the corresponding cache entries are cleared when an acknowledged or
       * rejected batch is removed from the mutation queue.
       */
      // PORTING NOTE: Multi-tab only
      Cn(t) {
        delete this.Vn[t];
      }
      performConsistencyCheck(t) {
        return this.checkEmpty(t).next((e) => {
          if (!e)
            return Rt.resolve();
          const n = IDBKeyRange.lowerBound([this.userId]);
          const s = [];
          return ao(t).X({
            range: n
          }, (t2, e2, n2) => {
            if (t2[0] === this.userId) {
              const e3 = Gt(t2[1]);
              s.push(e3);
            } else
              n2.done();
          }).next(() => {
            F(0 === s.length);
          });
        });
      }
      containsKey(t, e) {
        return uo(t, this.userId, e);
      }
      // PORTING NOTE: Multi-tab only (state is held in memory in other clients).
      /** Returns the mutation queue's metadata from IndexedDb. */
      xn(t) {
        return ho(t).get(this.userId).next((t2) => t2 || {
          userId: this.userId,
          lastAcknowledgedBatchId: -1,
          lastStreamToken: ""
        });
      }
    };
    function uo(t, e, n) {
      const s = jt(e, n.path), i = s[1], r = IDBKeyRange.lowerBound(s);
      let o = false;
      return ao(t).X({
        range: r,
        Y: true
      }, (t2, n2, s2) => {
        const [
          r2,
          u,
          /*batchID*/
          c
        ] = t2;
        r2 === e && u === i && (o = true), s2.done();
      }).next(() => o);
    }
    function co(t) {
      return _e(t, "mutations");
    }
    function ao(t) {
      return _e(t, "documentMutations");
    }
    function ho(t) {
      return _e(t, "mutationQueues");
    }
    var lo = class _lo {
      constructor(t) {
        this.Nn = t;
      }
      next() {
        return this.Nn += 2, this.Nn;
      }
      static kn() {
        return new _lo(0);
      }
      static Mn() {
        return new _lo(-1);
      }
    };
    var fo = class {
      constructor(t, e) {
        this.referenceDelegate = t, this.serializer = e;
      }
      // PORTING NOTE: We don't cache global metadata for the target cache, since
      // some of it (in particular `highestTargetId`) can be modified by secondary
      // tabs. We could perhaps be more granular (and e.g. still cache
      // `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go
      // to IndexedDb whenever we need to read metadata. We can revisit if it turns
      // out to have a meaningful performance impact.
      allocateTargetId(t) {
        return this.$n(t).next((e) => {
          const n = new lo(e.highestTargetId);
          return e.highestTargetId = n.next(), this.On(t, e).next(() => e.highestTargetId);
        });
      }
      getLastRemoteSnapshotVersion(t) {
        return this.$n(t).next((t2) => rt.fromTimestamp(new it(t2.lastRemoteSnapshotVersion.seconds, t2.lastRemoteSnapshotVersion.nanoseconds)));
      }
      getHighestSequenceNumber(t) {
        return this.$n(t).next((t2) => t2.highestListenSequenceNumber);
      }
      setTargetsMetadata(t, e, n) {
        return this.$n(t).next((s) => (s.highestListenSequenceNumber = e, n && (s.lastRemoteSnapshotVersion = n.toTimestamp()), e > s.highestListenSequenceNumber && (s.highestListenSequenceNumber = e), this.On(t, s)));
      }
      addTargetData(t, e) {
        return this.Fn(t, e).next(() => this.$n(t).next((n) => (n.targetCount += 1, this.Bn(e, n), this.On(t, n))));
      }
      updateTargetData(t, e) {
        return this.Fn(t, e);
      }
      removeTargetData(t, e) {
        return this.removeMatchingKeysForTargetId(t, e.targetId).next(() => wo(t).delete(e.targetId)).next(() => this.$n(t)).next((e2) => (F(e2.targetCount > 0), e2.targetCount -= 1, this.On(t, e2)));
      }
      /**
       * Drops any targets with sequence number less than or equal to the upper bound, excepting those
       * present in `activeTargetIds`. Document associations for the removed targets are also removed.
       * Returns the number of targets removed.
       */
      removeTargets(t, e, n) {
        let s = 0;
        const i = [];
        return wo(t).X((r, o) => {
          const u = mr(o);
          u.sequenceNumber <= e && null === n.get(u.targetId) && (s++, i.push(this.removeTargetData(t, u)));
        }).next(() => Rt.waitFor(i)).next(() => s);
      }
      /**
       * Call provided function with each `TargetData` that we have cached.
       */
      forEachTarget(t, e) {
        return wo(t).X((t2, n) => {
          const s = mr(n);
          e(s);
        });
      }
      $n(t) {
        return _o(t).get("targetGlobalKey").next((t2) => (F(null !== t2), t2));
      }
      On(t, e) {
        return _o(t).put("targetGlobalKey", e);
      }
      Fn(t, e) {
        return wo(t).put(gr(this.serializer, e));
      }
      /**
       * In-place updates the provided metadata to account for values in the given
       * TargetData. Saving is done separately. Returns true if there were any
       * changes to the metadata.
       */
      Bn(t, e) {
        let n = false;
        return t.targetId > e.highestTargetId && (e.highestTargetId = t.targetId, n = true), t.sequenceNumber > e.highestListenSequenceNumber && (e.highestListenSequenceNumber = t.sequenceNumber, n = true), n;
      }
      getTargetCount(t) {
        return this.$n(t).next((t2) => t2.targetCount);
      }
      getTargetData(t, e) {
        const n = $n(e), s = IDBKeyRange.bound([n, Number.NEGATIVE_INFINITY], [n, Number.POSITIVE_INFINITY]);
        let i = null;
        return wo(t).X({
          range: s,
          index: "queryTargetsIndex"
        }, (t2, n2, s2) => {
          const r = mr(n2);
          On(e, r.target) && (i = r, s2.done());
        }).next(() => i);
      }
      addMatchingKeys(t, e, n) {
        const s = [], i = mo(t);
        return e.forEach((e2) => {
          const r = qt(e2.path);
          s.push(i.put({
            targetId: n,
            path: r
          })), s.push(this.referenceDelegate.addReference(t, n, e2));
        }), Rt.waitFor(s);
      }
      removeMatchingKeys(t, e, n) {
        const s = mo(t);
        return Rt.forEach(e, (e2) => {
          const i = qt(e2.path);
          return Rt.waitFor([s.delete([n, i]), this.referenceDelegate.removeReference(t, n, e2)]);
        });
      }
      removeMatchingKeysForTargetId(t, e) {
        const n = mo(t), s = IDBKeyRange.bound(
          [e],
          [e + 1],
          /*lowerOpen=*/
          false,
          /*upperOpen=*/
          true
        );
        return n.delete(s);
      }
      getMatchingKeysForTargetId(t, e) {
        const n = IDBKeyRange.bound(
          [e],
          [e + 1],
          /*lowerOpen=*/
          false,
          /*upperOpen=*/
          true
        ), s = mo(t);
        let i = gs();
        return s.X({
          range: n,
          Y: true
        }, (t2, e2, n2) => {
          const s2 = Gt(t2[1]), r = new ht(s2);
          i = i.add(r);
        }).next(() => i);
      }
      containsKey(t, e) {
        const n = qt(e.path), s = IDBKeyRange.bound(
          [n],
          [st(n)],
          /*lowerOpen=*/
          false,
          /*upperOpen=*/
          true
        );
        let i = 0;
        return mo(t).X({
          index: "documentTargetsIndex",
          Y: true,
          range: s
        }, ([t2, e2], n2, s2) => {
          0 !== t2 && (i++, s2.done());
        }).next(() => i > 0);
      }
      /**
       * Looks up a TargetData entry by target ID.
       *
       * @param targetId - The target ID of the TargetData entry to look up.
       * @returns The cached TargetData entry, or null if the cache has no entry for
       * the target.
       */
      // PORTING NOTE: Multi-tab only.
      le(t, e) {
        return wo(t).get(e).next((t2) => t2 ? mr(t2) : null);
      }
    };
    function wo(t) {
      return _e(t, "targets");
    }
    function _o(t) {
      return _e(t, "targetGlobal");
    }
    function mo(t) {
      return _e(t, "targetDocuments");
    }
    function go([t, e], [n, s]) {
      const i = et(t, n);
      return 0 === i ? et(e, s) : i;
    }
    var yo = class {
      constructor(t) {
        this.Ln = t, this.buffer = new Ee(go), this.qn = 0;
      }
      Un() {
        return ++this.qn;
      }
      Kn(t) {
        const e = [t, this.Un()];
        if (this.buffer.size < this.Ln)
          this.buffer = this.buffer.add(e);
        else {
          const t2 = this.buffer.last();
          go(e, t2) < 0 && (this.buffer = this.buffer.delete(t2).add(e));
        }
      }
      get maxValue() {
        return this.buffer.last()[0];
      }
    };
    var po = class {
      constructor(t, e, n) {
        this.garbageCollector = t, this.asyncQueue = e, this.localStore = n, this.Gn = null;
      }
      start() {
        -1 !== this.garbageCollector.params.cacheSizeCollectionThreshold && this.Qn(6e4);
      }
      stop() {
        this.Gn && (this.Gn.cancel(), this.Gn = null);
      }
      get started() {
        return null !== this.Gn;
      }
      Qn(t) {
        N("LruGarbageCollector", `Garbage collection scheduled in ${t}ms`), this.Gn = this.asyncQueue.enqueueAfterDelay("lru_garbage_collection", t, async () => {
          this.Gn = null;
          try {
            await this.localStore.collectGarbage(this.garbageCollector);
          } catch (t2) {
            Dt(t2) ? N("LruGarbageCollector", "Ignoring IndexedDB error during garbage collection: ", t2) : await vt(t2);
          }
          await this.Qn(3e5);
        });
      }
    };
    var Io = class {
      constructor(t, e) {
        this.jn = t, this.params = e;
      }
      calculateTargetCount(t, e) {
        return this.jn.zn(t).next((t2) => Math.floor(e / 100 * t2));
      }
      nthSequenceNumber(t, e) {
        if (0 === e)
          return Rt.resolve(Ot.ct);
        const n = new yo(e);
        return this.jn.forEachTarget(t, (t2) => n.Kn(t2.sequenceNumber)).next(() => this.jn.Wn(t, (t2) => n.Kn(t2))).next(() => n.maxValue);
      }
      removeTargets(t, e, n) {
        return this.jn.removeTargets(t, e, n);
      }
      removeOrphanedDocuments(t, e) {
        return this.jn.removeOrphanedDocuments(t, e);
      }
      collect(t, e) {
        return -1 === this.params.cacheSizeCollectionThreshold ? (N("LruGarbageCollector", "Garbage collection skipped; disabled"), Rt.resolve(no)) : this.getCacheSize(t).next((n) => n < this.params.cacheSizeCollectionThreshold ? (N("LruGarbageCollector", `Garbage collection skipped; Cache size ${n} is lower than threshold ${this.params.cacheSizeCollectionThreshold}`), no) : this.Hn(t, e));
      }
      getCacheSize(t) {
        return this.jn.getCacheSize(t);
      }
      Hn(t, e) {
        let n, s, i, r, o, c, a;
        const h = Date.now();
        return this.calculateTargetCount(t, this.params.percentileToCollect).next((e2) => (
          // Cap at the configured max
          (e2 > this.params.maximumSequenceNumbersToCollect ? (N("LruGarbageCollector", `Capping sequence numbers to collect down to the maximum of ${this.params.maximumSequenceNumbersToCollect} from ${e2}`), s = this.params.maximumSequenceNumbersToCollect) : s = e2, r = Date.now(), this.nthSequenceNumber(t, s))
        )).next((s2) => (n = s2, o = Date.now(), this.removeTargets(t, n, e))).next((e2) => (i = e2, c = Date.now(), this.removeOrphanedDocuments(t, n))).next((t2) => {
          if (a = Date.now(), C() <= logger.LogLevel.DEBUG) {
            N("LruGarbageCollector", `LRU Garbage Collection
	Counted targets in ${r - h}ms
	Determined least recently used ${s} in ` + (o - r) + `ms
	Removed ${i} targets in ` + (c - o) + `ms
	Removed ${t2} documents in ` + (a - c) + `ms
Total Duration: ${a - h}ms`);
          }
          return Rt.resolve({
            didRun: true,
            sequenceNumbersCollected: s,
            targetsRemoved: i,
            documentsRemoved: t2
          });
        });
      }
    };
    function To(t, e) {
      return new Io(t, e);
    }
    var Eo = class {
      constructor(t, e) {
        this.db = t, this.garbageCollector = To(this, e);
      }
      zn(t) {
        const e = this.Jn(t);
        return this.db.getTargetCache().getTargetCount(t).next((t2) => e.next((e2) => t2 + e2));
      }
      Jn(t) {
        let e = 0;
        return this.Wn(t, (t2) => {
          e++;
        }).next(() => e);
      }
      forEachTarget(t, e) {
        return this.db.getTargetCache().forEachTarget(t, e);
      }
      Wn(t, e) {
        return this.Yn(t, (t2, n) => e(n));
      }
      addReference(t, e, n) {
        return Ao(t, n);
      }
      removeReference(t, e, n) {
        return Ao(t, n);
      }
      removeTargets(t, e, n) {
        return this.db.getTargetCache().removeTargets(t, e, n);
      }
      markPotentiallyOrphaned(t, e) {
        return Ao(t, e);
      }
      /**
       * Returns true if anything would prevent this document from being garbage
       * collected, given that the document in question is not present in any
       * targets and has a sequence number less than or equal to the upper bound for
       * the collection run.
       */
      Xn(t, e) {
        return function(t2, e2) {
          let n = false;
          return ho(t2).Z((s) => uo(t2, s, e2).next((t3) => (t3 && (n = true), Rt.resolve(!t3)))).next(() => n);
        }(t, e);
      }
      removeOrphanedDocuments(t, e) {
        const n = this.db.getRemoteDocumentCache().newChangeBuffer(), s = [];
        let i = 0;
        return this.Yn(t, (r, o) => {
          if (o <= e) {
            const e2 = this.Xn(t, r).next((e3) => {
              if (!e3)
                return i++, n.getEntry(t, r).next(() => (n.removeEntry(r, rt.min()), mo(t).delete([0, qt(r.path)])));
            });
            s.push(e2);
          }
        }).next(() => Rt.waitFor(s)).next(() => n.apply(t)).next(() => i);
      }
      removeTarget(t, e) {
        const n = e.withSequenceNumber(t.currentSequenceNumber);
        return this.db.getTargetCache().updateTargetData(t, n);
      }
      updateLimboDocument(t, e) {
        return Ao(t, e);
      }
      /**
       * Call provided function for each document in the cache that is 'orphaned'. Orphaned
       * means not a part of any target, so the only entry in the target-document index for
       * that document will be the sentinel row (targetId 0), which will also have the sequence
       * number for the last time the document was accessed.
       */
      Yn(t, e) {
        const n = mo(t);
        let s, i = Ot.ct;
        return n.X({
          index: "documentTargetsIndex"
        }, ([t2, n2], { path: r, sequenceNumber: o }) => {
          0 === t2 ? (
            // if nextToReport is valid, report it, this is a new key so the
            // last one must not be a member of any targets.
            (i !== Ot.ct && e(new ht(Gt(s)), i), // set nextToReport to be this sequence number. It's the next one we
            // might report, if we don't find any targets for this document.
            // Note that the sequence number must be defined when the targetId
            // is 0.
            i = o, s = r)
          ) : (
            // set nextToReport to be invalid, we know we don't need to report
            // this one since we found a target for it.
            i = Ot.ct
          );
        }).next(() => {
          i !== Ot.ct && e(new ht(Gt(s)), i);
        });
      }
      getCacheSize(t) {
        return this.db.getRemoteDocumentCache().getSize(t);
      }
    };
    function Ao(t, e) {
      return mo(t).put(
        /**
        * @returns A value suitable for writing a sentinel row in the target-document
        * store.
        */
        function(t2, e2) {
          return {
            targetId: 0,
            path: qt(t2.path),
            sequenceNumber: e2
          };
        }(e, t.currentSequenceNumber)
      );
    }
    var vo = class {
      constructor() {
        this.changes = new os((t) => t.toString(), (t, e) => t.isEqual(e)), this.changesApplied = false;
      }
      /**
       * Buffers a `RemoteDocumentCache.addEntry()` call.
       *
       * You can only modify documents that have already been retrieved via
       * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
       */
      addEntry(t) {
        this.assertNotApplied(), this.changes.set(t.key, t);
      }
      /**
       * Buffers a `RemoteDocumentCache.removeEntry()` call.
       *
       * You can only remove documents that have already been retrieved via
       * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
       */
      removeEntry(t, e) {
        this.assertNotApplied(), this.changes.set(t, an.newInvalidDocument(t).setReadTime(e));
      }
      /**
       * Looks up an entry in the cache. The buffered changes will first be checked,
       * and if no buffered change applies, this will forward to
       * `RemoteDocumentCache.getEntry()`.
       *
       * @param transaction - The transaction in which to perform any persistence
       *     operations.
       * @param documentKey - The key of the entry to look up.
       * @returns The cached document or an invalid document if we have nothing
       * cached.
       */
      getEntry(t, e) {
        this.assertNotApplied();
        const n = this.changes.get(e);
        return void 0 !== n ? Rt.resolve(n) : this.getFromCache(t, e);
      }
      /**
       * Looks up several entries in the cache, forwarding to
       * `RemoteDocumentCache.getEntry()`.
       *
       * @param transaction - The transaction in which to perform any persistence
       *     operations.
       * @param documentKeys - The keys of the entries to look up.
       * @returns A map of cached documents, indexed by key. If an entry cannot be
       *     found, the corresponding key will be mapped to an invalid document.
       */
      getEntries(t, e) {
        return this.getAllFromCache(t, e);
      }
      /**
       * Applies buffered changes to the underlying RemoteDocumentCache, using
       * the provided transaction.
       */
      apply(t) {
        return this.assertNotApplied(), this.changesApplied = true, this.applyChanges(t);
      }
      /** Helper to assert this.changes is not null  */
      assertNotApplied() {
      }
    };
    var Ro = class {
      constructor(t) {
        this.serializer = t;
      }
      setIndexManager(t) {
        this.indexManager = t;
      }
      /**
       * Adds the supplied entries to the cache.
       *
       * All calls of `addEntry` are required to go through the RemoteDocumentChangeBuffer
       * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
       */
      addEntry(t, e, n) {
        return So(t).put(n);
      }
      /**
       * Removes a document from the cache.
       *
       * All calls of `removeEntry`  are required to go through the RemoteDocumentChangeBuffer
       * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
       */
      removeEntry(t, e, n) {
        return So(t).delete(
          /**
          * Returns a key that can be used for document lookups via the primary key of
          * the DbRemoteDocument object store.
          */
          function(t2, e2) {
            const n2 = t2.path.toArray();
            return [
              /* prefix path */
              n2.slice(0, n2.length - 2),
              /* collection id */
              n2[n2.length - 2],
              fr(e2),
              /* document id */
              n2[n2.length - 1]
            ];
          }(e, n)
        );
      }
      /**
       * Updates the current cache size.
       *
       * Callers to `addEntry()` and `removeEntry()` *must* call this afterwards to update the
       * cache's metadata.
       */
      updateMetadata(t, e) {
        return this.getMetadata(t).next((n) => (n.byteSize += e, this.Zn(t, n)));
      }
      getEntry(t, e) {
        let n = an.newInvalidDocument(e);
        return So(t).X({
          index: "documentKeyIndex",
          range: IDBKeyRange.only(Do(e))
        }, (t2, s) => {
          n = this.ts(e, s);
        }).next(() => n);
      }
      /**
       * Looks up an entry in the cache.
       *
       * @param documentKey - The key of the entry to look up.
       * @returns The cached document entry and its size.
       */
      es(t, e) {
        let n = {
          size: 0,
          document: an.newInvalidDocument(e)
        };
        return So(t).X({
          index: "documentKeyIndex",
          range: IDBKeyRange.only(Do(e))
        }, (t2, s) => {
          n = {
            document: this.ts(e, s),
            size: ro(s)
          };
        }).next(() => n);
      }
      getEntries(t, e) {
        let n = cs();
        return this.ns(t, e, (t2, e2) => {
          const s = this.ts(t2, e2);
          n = n.insert(t2, s);
        }).next(() => n);
      }
      /**
       * Looks up several entries in the cache.
       *
       * @param documentKeys - The set of keys entries to look up.
       * @returns A map of documents indexed by key and a map of sizes indexed by
       *     key (zero if the document does not exist).
       */
      ss(t, e) {
        let n = cs(), s = new pe(ht.comparator);
        return this.ns(t, e, (t2, e2) => {
          const i = this.ts(t2, e2);
          n = n.insert(t2, i), s = s.insert(t2, ro(e2));
        }).next(() => ({
          documents: n,
          rs: s
        }));
      }
      ns(t, e, n) {
        if (e.isEmpty())
          return Rt.resolve();
        let s = new Ee(xo);
        e.forEach((t2) => s = s.add(t2));
        const i = IDBKeyRange.bound(Do(s.first()), Do(s.last())), r = s.getIterator();
        let o = r.getNext();
        return So(t).X({
          index: "documentKeyIndex",
          range: i
        }, (t2, e2, s2) => {
          const i2 = ht.fromSegments([...e2.prefixPath, e2.collectionGroup, e2.documentId]);
          for (; o && xo(o, i2) < 0; )
            n(o, null), o = r.getNext();
          o && o.isEqual(i2) && // Key found in cache.
          (n(o, e2), o = r.hasNext() ? r.getNext() : null), // Skip to the next key (if there is one).
          o ? s2.G(Do(o)) : s2.done();
        }).next(() => {
          for (; o; )
            n(o, null), o = r.hasNext() ? r.getNext() : null;
        });
      }
      getDocumentsMatchingQuery(t, e, n, s) {
        const i = e.path, r = [i.popLast().toArray(), i.lastSegment(), fr(n.readTime), n.documentKey.path.isEmpty() ? "" : n.documentKey.path.lastSegment()], o = [i.popLast().toArray(), i.lastSegment(), [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER], ""];
        return So(t).j(IDBKeyRange.bound(r, o, true)).next((t2) => {
          let n2 = cs();
          for (const i2 of t2) {
            const t3 = this.ts(ht.fromSegments(i2.prefixPath.concat(i2.collectionGroup, i2.documentId)), i2);
            t3.isFoundDocument() && (ns(e, t3) || s.has(t3.key)) && // Either the document matches the given query, or it is mutated.
            (n2 = n2.insert(t3.key, t3));
          }
          return n2;
        });
      }
      getAllFromCollectionGroup(t, e, n, s) {
        let i = cs();
        const r = Co(e, n), o = Co(e, It.max());
        return So(t).X({
          index: "collectionGroupIndex",
          range: IDBKeyRange.bound(r, o, true)
        }, (t2, e2, n2) => {
          const r2 = this.ts(ht.fromSegments(e2.prefixPath.concat(e2.collectionGroup, e2.documentId)), e2);
          i = i.insert(r2.key, r2), i.size === s && n2.done();
        }).next(() => i);
      }
      newChangeBuffer(t) {
        return new bo(this, !!t && t.trackRemovals);
      }
      getSize(t) {
        return this.getMetadata(t).next((t2) => t2.byteSize);
      }
      getMetadata(t) {
        return Vo(t).get("remoteDocumentGlobalKey").next((t2) => (F(!!t2), t2));
      }
      Zn(t, e) {
        return Vo(t).put("remoteDocumentGlobalKey", e);
      }
      /**
       * Decodes `dbRemoteDoc` and returns the document (or an invalid document if
       * the document corresponds to the format used for sentinel deletes).
       */
      ts(t, e) {
        if (e) {
          const t2 = hr(this.serializer, e);
          if (!(t2.isNoDocument() && t2.version.isEqual(rt.min())))
            return t2;
        }
        return an.newInvalidDocument(t);
      }
    };
    function Po(t) {
      return new Ro(t);
    }
    var bo = class extends vo {
      /**
       * @param documentCache - The IndexedDbRemoteDocumentCache to apply the changes to.
       * @param trackRemovals - Whether to create sentinel deletes that can be tracked by
       * `getNewDocumentChanges()`.
       */
      constructor(t, e) {
        super(), this.os = t, this.trackRemovals = e, // A map of document sizes and read times prior to applying the changes in
        // this buffer.
        this.us = new os((t2) => t2.toString(), (t2, e2) => t2.isEqual(e2));
      }
      applyChanges(t) {
        const e = [];
        let n = 0, s = new Ee((t2, e2) => et(t2.canonicalString(), e2.canonicalString()));
        return this.changes.forEach((i, r) => {
          const o = this.us.get(i);
          if (e.push(this.os.removeEntry(t, i, o.readTime)), r.isValidDocument()) {
            const u = lr(this.os.serializer, r);
            s = s.add(i.path.popLast());
            const c = ro(u);
            n += c - o.size, e.push(this.os.addEntry(t, i, u));
          } else if (n -= o.size, this.trackRemovals) {
            const n2 = lr(this.os.serializer, r.convertToNoDocument(rt.min()));
            e.push(this.os.addEntry(t, i, n2));
          }
        }), s.forEach((n2) => {
          e.push(this.os.indexManager.addToCollectionParentIndex(t, n2));
        }), e.push(this.os.updateMetadata(t, n)), Rt.waitFor(e);
      }
      getFromCache(t, e) {
        return this.os.es(t, e).next((t2) => (this.us.set(e, {
          size: t2.size,
          readTime: t2.document.readTime
        }), t2.document));
      }
      getAllFromCache(t, e) {
        return this.os.ss(t, e).next(({ documents: t2, rs: e2 }) => (
          // Note: `getAllFromCache` returns two maps instead of a single map from
          // keys to `DocumentSizeEntry`s. This is to allow returning the
          // `MutableDocumentMap` directly, without a conversion.
          (e2.forEach((e3, n) => {
            this.us.set(e3, {
              size: n,
              readTime: t2.get(e3).readTime
            });
          }), t2)
        ));
      }
    };
    function Vo(t) {
      return _e(t, "remoteDocumentGlobal");
    }
    function So(t) {
      return _e(t, "remoteDocumentsV14");
    }
    function Do(t) {
      const e = t.path.toArray();
      return [
        /* prefix path */
        e.slice(0, e.length - 2),
        /* collection id */
        e[e.length - 2],
        /* document id */
        e[e.length - 1]
      ];
    }
    function Co(t, e) {
      const n = e.documentKey.path.toArray();
      return [
        /* collection id */
        t,
        fr(e.readTime),
        /* prefix path */
        n.slice(0, n.length - 2),
        /* document id */
        n.length > 0 ? n[n.length - 1] : ""
      ];
    }
    function xo(t, e) {
      const n = t.path.toArray(), s = e.path.toArray();
      let i = 0;
      for (let t2 = 0; t2 < n.length - 2 && t2 < s.length - 2; ++t2)
        if (i = et(n[t2], s[t2]), i)
          return i;
      return i = et(n.length, s.length), i || (i = et(n[n.length - 2], s[s.length - 2]), i || et(n[n.length - 1], s[s.length - 1]));
    }
    var No = class {
      constructor(t, e) {
        this.overlayedDocument = t, this.mutatedFields = e;
      }
    };
    var ko = class {
      constructor(t, e, n, s) {
        this.remoteDocumentCache = t, this.mutationQueue = e, this.documentOverlayCache = n, this.indexManager = s;
      }
      /**
       * Get the local view of the document identified by `key`.
       *
       * @returns Local view of the document or null if we don't have any cached
       * state for it.
       */
      getDocument(t, e) {
        let n = null;
        return this.documentOverlayCache.getOverlay(t, e).next((s) => (n = s, this.remoteDocumentCache.getEntry(t, e))).next((t2) => (null !== n && Ks(n.mutation, t2, Re.empty(), it.now()), t2));
      }
      /**
       * Gets the local view of the documents identified by `keys`.
       *
       * If we don't have cached state for a document in `keys`, a NoDocument will
       * be stored for that key in the resulting set.
       */
      getDocuments(t, e) {
        return this.remoteDocumentCache.getEntries(t, e).next((e2) => this.getLocalViewOfDocuments(t, e2, gs()).next(() => e2));
      }
      /**
       * Similar to `getDocuments`, but creates the local view from the given
       * `baseDocs` without retrieving documents from the local store.
       *
       * @param transaction - The transaction this operation is scoped to.
       * @param docs - The documents to apply local mutations to get the local views.
       * @param existenceStateChanged - The set of document keys whose existence state
       *   is changed. This is useful to determine if some documents overlay needs
       *   to be recalculated.
       */
      getLocalViewOfDocuments(t, e, n = gs()) {
        const s = fs();
        return this.populateOverlays(t, s, e).next(() => this.computeViews(t, e, s, n).next((t2) => {
          let e2 = hs();
          return t2.forEach((t3, n2) => {
            e2 = e2.insert(t3, n2.overlayedDocument);
          }), e2;
        }));
      }
      /**
       * Gets the overlayed documents for the given document map, which will include
       * the local view of those documents and a `FieldMask` indicating which fields
       * are mutated locally, `null` if overlay is a Set or Delete mutation.
       */
      getOverlayedDocuments(t, e) {
        const n = fs();
        return this.populateOverlays(t, n, e).next(() => this.computeViews(t, e, n, gs()));
      }
      /**
       * Fetches the overlays for {@code docs} and adds them to provided overlay map
       * if the map does not already contain an entry for the given document key.
       */
      populateOverlays(t, e, n) {
        const s = [];
        return n.forEach((t2) => {
          e.has(t2) || s.push(t2);
        }), this.documentOverlayCache.getOverlays(t, s).next((t2) => {
          t2.forEach((t3, n2) => {
            e.set(t3, n2);
          });
        });
      }
      /**
       * Computes the local view for the given documents.
       *
       * @param docs - The documents to compute views for. It also has the base
       *   version of the documents.
       * @param overlays - The overlays that need to be applied to the given base
       *   version of the documents.
       * @param existenceStateChanged - A set of documents whose existence states
       *   might have changed. This is used to determine if we need to re-calculate
       *   overlays from mutation queues.
       * @return A map represents the local documents view.
       */
      computeViews(t, e, n, s) {
        let i = cs();
        const r = ws(), o = ws();
        return e.forEach((t2, e2) => {
          const o2 = n.get(e2.key);
          s.has(e2.key) && (void 0 === o2 || o2.mutation instanceof zs) ? i = i.insert(e2.key, e2) : void 0 !== o2 ? (r.set(e2.key, o2.mutation.getFieldMask()), Ks(o2.mutation, e2, o2.mutation.getFieldMask(), it.now())) : (
            // no overlay exists
            // Using EMPTY to indicate there is no overlay for the document.
            r.set(e2.key, Re.empty())
          );
        }), this.recalculateAndSaveOverlays(t, i).next((t2) => (t2.forEach((t3, e2) => r.set(t3, e2)), e.forEach((t3, e2) => {
          var n2;
          return o.set(t3, new No(e2, null !== (n2 = r.get(t3)) && void 0 !== n2 ? n2 : null));
        }), o));
      }
      recalculateAndSaveOverlays(t, e) {
        const n = ws();
        let s = new pe((t2, e2) => t2 - e2), i = gs();
        return this.mutationQueue.getAllMutationBatchesAffectingDocumentKeys(t, e).next((t2) => {
          for (const i2 of t2)
            i2.keys().forEach((t3) => {
              const r = e.get(t3);
              if (null === r)
                return;
              let o = n.get(t3) || Re.empty();
              o = i2.applyToLocalView(r, o), n.set(t3, o);
              const u = (s.get(i2.batchId) || gs()).add(t3);
              s = s.insert(i2.batchId, u);
            });
        }).next(() => {
          const r = [], o = s.getReverseIterator();
          for (; o.hasNext(); ) {
            const s2 = o.getNext(), u = s2.key, c = s2.value, a = ds();
            c.forEach((t2) => {
              if (!i.has(t2)) {
                const s3 = qs(e.get(t2), n.get(t2));
                null !== s3 && a.set(t2, s3), i = i.add(t2);
              }
            }), r.push(this.documentOverlayCache.saveOverlays(t, u, a));
          }
          return Rt.waitFor(r);
        }).next(() => n);
      }
      /**
       * Recalculates overlays by reading the documents from remote document cache
       * first, and saves them after they are calculated.
       */
      recalculateAndSaveOverlaysForDocumentKeys(t, e) {
        return this.remoteDocumentCache.getEntries(t, e).next((e2) => this.recalculateAndSaveOverlays(t, e2));
      }
      /**
       * Performs a query against the local view of all documents.
       *
       * @param transaction - The persistence transaction.
       * @param query - The query to match documents against.
       * @param offset - Read time and key to start scanning by (exclusive).
       */
      getDocumentsMatchingQuery(t, e, n) {
        return function(t2) {
          return ht.isDocumentKey(t2.path) && null === t2.collectionGroup && 0 === t2.filters.length;
        }(e) ? this.getDocumentsMatchingDocumentQuery(t, e.path) : Wn(e) ? this.getDocumentsMatchingCollectionGroupQuery(t, e, n) : this.getDocumentsMatchingCollectionQuery(t, e, n);
      }
      /**
       * Given a collection group, returns the next documents that follow the provided offset, along
       * with an updated batch ID.
       *
       * <p>The documents returned by this method are ordered by remote version from the provided
       * offset. If there are no more remote documents after the provided offset, documents with
       * mutations in order of batch id from the offset are returned. Since all documents in a batch are
       * returned together, the total number of documents returned can exceed {@code count}.
       *
       * @param transaction
       * @param collectionGroup The collection group for the documents.
       * @param offset The offset to index into.
       * @param count The number of documents to return
       * @return A LocalWriteResult with the documents that follow the provided offset and the last processed batch id.
       */
      getNextDocuments(t, e, n, s) {
        return this.remoteDocumentCache.getAllFromCollectionGroup(t, e, n, s).next((i) => {
          const r = s - i.size > 0 ? this.documentOverlayCache.getOverlaysForCollectionGroup(t, e, n.largestBatchId, s - i.size) : Rt.resolve(fs());
          let o = -1, u = i;
          return r.next((e2) => Rt.forEach(e2, (e3, n2) => (o < n2.largestBatchId && (o = n2.largestBatchId), i.get(e3) ? Rt.resolve() : this.remoteDocumentCache.getEntry(t, e3).next((t2) => {
            u = u.insert(e3, t2);
          }))).next(() => this.populateOverlays(t, e2, i)).next(() => this.computeViews(t, u, e2, gs())).next((t2) => ({
            batchId: o,
            changes: ls(t2)
          })));
        });
      }
      getDocumentsMatchingDocumentQuery(t, e) {
        return this.getDocument(t, new ht(e)).next((t2) => {
          let e2 = hs();
          return t2.isFoundDocument() && (e2 = e2.insert(t2.key, t2)), e2;
        });
      }
      getDocumentsMatchingCollectionGroupQuery(t, e, n) {
        const s = e.collectionGroup;
        let i = hs();
        return this.indexManager.getCollectionParents(t, s).next((r) => Rt.forEach(r, (r2) => {
          const o = function(t2, e2) {
            return new Un(
              e2,
              /*collectionGroup=*/
              null,
              t2.explicitOrderBy.slice(),
              t2.filters.slice(),
              t2.limit,
              t2.limitType,
              t2.startAt,
              t2.endAt
            );
          }(e, r2.child(s));
          return this.getDocumentsMatchingCollectionQuery(t, o, n).next((t2) => {
            t2.forEach((t3, e2) => {
              i = i.insert(t3, e2);
            });
          });
        }).next(() => i));
      }
      getDocumentsMatchingCollectionQuery(t, e, n) {
        let s;
        return this.documentOverlayCache.getOverlaysForCollection(t, e.path, n.largestBatchId).next((i) => (s = i, this.remoteDocumentCache.getDocumentsMatchingQuery(t, e, n, s))).next((t2) => {
          s.forEach((e2, n3) => {
            const s2 = n3.getKey();
            null === t2.get(s2) && (t2 = t2.insert(s2, an.newInvalidDocument(s2)));
          });
          let n2 = hs();
          return t2.forEach((t3, i) => {
            const r = s.get(t3);
            void 0 !== r && Ks(r.mutation, i, Re.empty(), it.now()), // Finally, insert the documents that still match the query
            ns(e, i) && (n2 = n2.insert(t3, i));
          }), n2;
        });
      }
    };
    var Mo = class {
      constructor(t) {
        this.serializer = t, this.cs = /* @__PURE__ */ new Map(), this.hs = /* @__PURE__ */ new Map();
      }
      getBundleMetadata(t, e) {
        return Rt.resolve(this.cs.get(e));
      }
      saveBundleMetadata(t, e) {
        var n;
        return this.cs.set(e.id, {
          id: (n = e).id,
          version: n.version,
          createTime: Ni(n.createTime)
        }), Rt.resolve();
      }
      getNamedQuery(t, e) {
        return Rt.resolve(this.hs.get(e));
      }
      saveNamedQuery(t, e) {
        return this.hs.set(e.name, function(t2) {
          return {
            name: t2.name,
            query: yr(t2.bundledQuery),
            readTime: Ni(t2.readTime)
          };
        }(e)), Rt.resolve();
      }
    };
    var $o = class {
      constructor() {
        this.overlays = new pe(ht.comparator), this.ls = /* @__PURE__ */ new Map();
      }
      getOverlay(t, e) {
        return Rt.resolve(this.overlays.get(e));
      }
      getOverlays(t, e) {
        const n = fs();
        return Rt.forEach(e, (e2) => this.getOverlay(t, e2).next((t2) => {
          null !== t2 && n.set(e2, t2);
        })).next(() => n);
      }
      saveOverlays(t, e, n) {
        return n.forEach((n2, s) => {
          this.we(t, e, s);
        }), Rt.resolve();
      }
      removeOverlaysForBatchId(t, e, n) {
        const s = this.ls.get(n);
        return void 0 !== s && (s.forEach((t2) => this.overlays = this.overlays.remove(t2)), this.ls.delete(n)), Rt.resolve();
      }
      getOverlaysForCollection(t, e, n) {
        const s = fs(), i = e.length + 1, r = new ht(e.child("")), o = this.overlays.getIteratorFrom(r);
        for (; o.hasNext(); ) {
          const t2 = o.getNext().value, r2 = t2.getKey();
          if (!e.isPrefixOf(r2.path))
            break;
          r2.path.length === i && (t2.largestBatchId > n && s.set(t2.getKey(), t2));
        }
        return Rt.resolve(s);
      }
      getOverlaysForCollectionGroup(t, e, n, s) {
        let i = new pe((t2, e2) => t2 - e2);
        const r = this.overlays.getIterator();
        for (; r.hasNext(); ) {
          const t2 = r.getNext().value;
          if (t2.getKey().getCollectionGroup() === e && t2.largestBatchId > n) {
            let e2 = i.get(t2.largestBatchId);
            null === e2 && (e2 = fs(), i = i.insert(t2.largestBatchId, e2)), e2.set(t2.getKey(), t2);
          }
        }
        const o = fs(), u = i.getIterator();
        for (; u.hasNext(); ) {
          if (u.getNext().value.forEach((t2, e2) => o.set(t2, e2)), o.size() >= s)
            break;
        }
        return Rt.resolve(o);
      }
      we(t, e, n) {
        const s = this.overlays.get(n.key);
        if (null !== s) {
          const t2 = this.ls.get(s.largestBatchId).delete(n.key);
          this.ls.set(s.largestBatchId, t2);
        }
        this.overlays = this.overlays.insert(n.key, new ei(e, n));
        let i = this.ls.get(e);
        void 0 === i && (i = gs(), this.ls.set(e, i)), this.ls.set(e, i.add(n.key));
      }
    };
    var Oo = class {
      constructor() {
        this.fs = new Ee(Fo.ds), // A set of outstanding references to a document sorted by target id.
        this.ws = new Ee(Fo._s);
      }
      /** Returns true if the reference set contains no references. */
      isEmpty() {
        return this.fs.isEmpty();
      }
      /** Adds a reference to the given document key for the given ID. */
      addReference(t, e) {
        const n = new Fo(t, e);
        this.fs = this.fs.add(n), this.ws = this.ws.add(n);
      }
      /** Add references to the given document keys for the given ID. */
      gs(t, e) {
        t.forEach((t2) => this.addReference(t2, e));
      }
      /**
       * Removes a reference to the given document key for the given
       * ID.
       */
      removeReference(t, e) {
        this.ys(new Fo(t, e));
      }
      ps(t, e) {
        t.forEach((t2) => this.removeReference(t2, e));
      }
      /**
       * Clears all references with a given ID. Calls removeRef() for each key
       * removed.
       */
      Is(t) {
        const e = new ht(new ut([])), n = new Fo(e, t), s = new Fo(e, t + 1), i = [];
        return this.ws.forEachInRange([n, s], (t2) => {
          this.ys(t2), i.push(t2.key);
        }), i;
      }
      Ts() {
        this.fs.forEach((t) => this.ys(t));
      }
      ys(t) {
        this.fs = this.fs.delete(t), this.ws = this.ws.delete(t);
      }
      Es(t) {
        const e = new ht(new ut([])), n = new Fo(e, t), s = new Fo(e, t + 1);
        let i = gs();
        return this.ws.forEachInRange([n, s], (t2) => {
          i = i.add(t2.key);
        }), i;
      }
      containsKey(t) {
        const e = new Fo(t, 0), n = this.fs.firstAfterOrEqual(e);
        return null !== n && t.isEqual(n.key);
      }
    };
    var Fo = class {
      constructor(t, e) {
        this.key = t, this.As = e;
      }
      /** Compare by key then by ID */
      static ds(t, e) {
        return ht.comparator(t.key, e.key) || et(t.As, e.As);
      }
      /** Compare by ID then by key */
      static _s(t, e) {
        return et(t.As, e.As) || ht.comparator(t.key, e.key);
      }
    };
    var Bo = class {
      constructor(t, e) {
        this.indexManager = t, this.referenceDelegate = e, /**
         * The set of all mutations that have been sent but not yet been applied to
         * the backend.
         */
        this.mutationQueue = [], /** Next value to use when assigning sequential IDs to each mutation batch. */
        this.vs = 1, /** An ordered mapping between documents and the mutations batch IDs. */
        this.Rs = new Ee(Fo.ds);
      }
      checkEmpty(t) {
        return Rt.resolve(0 === this.mutationQueue.length);
      }
      addMutationBatch(t, e, n, s) {
        const i = this.vs;
        this.vs++, this.mutationQueue.length > 0 && this.mutationQueue[this.mutationQueue.length - 1];
        const r = new Zs(i, e, n, s);
        this.mutationQueue.push(r);
        for (const e2 of s)
          this.Rs = this.Rs.add(new Fo(e2.key, i)), this.indexManager.addToCollectionParentIndex(t, e2.key.path.popLast());
        return Rt.resolve(r);
      }
      lookupMutationBatch(t, e) {
        return Rt.resolve(this.Ps(e));
      }
      getNextMutationBatchAfterBatchId(t, e) {
        const n = e + 1, s = this.bs(n), i = s < 0 ? 0 : s;
        return Rt.resolve(this.mutationQueue.length > i ? this.mutationQueue[i] : null);
      }
      getHighestUnacknowledgedBatchId() {
        return Rt.resolve(0 === this.mutationQueue.length ? -1 : this.vs - 1);
      }
      getAllMutationBatches(t) {
        return Rt.resolve(this.mutationQueue.slice());
      }
      getAllMutationBatchesAffectingDocumentKey(t, e) {
        const n = new Fo(e, 0), s = new Fo(e, Number.POSITIVE_INFINITY), i = [];
        return this.Rs.forEachInRange([n, s], (t2) => {
          const e2 = this.Ps(t2.As);
          i.push(e2);
        }), Rt.resolve(i);
      }
      getAllMutationBatchesAffectingDocumentKeys(t, e) {
        let n = new Ee(et);
        return e.forEach((t2) => {
          const e2 = new Fo(t2, 0), s = new Fo(t2, Number.POSITIVE_INFINITY);
          this.Rs.forEachInRange([e2, s], (t3) => {
            n = n.add(t3.As);
          });
        }), Rt.resolve(this.Vs(n));
      }
      getAllMutationBatchesAffectingQuery(t, e) {
        const n = e.path, s = n.length + 1;
        let i = n;
        ht.isDocumentKey(i) || (i = i.child(""));
        const r = new Fo(new ht(i), 0);
        let o = new Ee(et);
        return this.Rs.forEachWhile((t2) => {
          const e2 = t2.key.path;
          return !!n.isPrefixOf(e2) && // Rows with document keys more than one segment longer than the query
          // path can't be matches. For example, a query on 'rooms' can't match
          // the document /rooms/abc/messages/xyx.
          // TODO(mcg): we'll need a different scanner when we implement
          // ancestor queries.
          (e2.length === s && (o = o.add(t2.As)), true);
        }, r), Rt.resolve(this.Vs(o));
      }
      Vs(t) {
        const e = [];
        return t.forEach((t2) => {
          const n = this.Ps(t2);
          null !== n && e.push(n);
        }), e;
      }
      removeMutationBatch(t, e) {
        F(0 === this.Ss(e.batchId, "removed")), this.mutationQueue.shift();
        let n = this.Rs;
        return Rt.forEach(e.mutations, (s) => {
          const i = new Fo(s.key, e.batchId);
          return n = n.delete(i), this.referenceDelegate.markPotentiallyOrphaned(t, s.key);
        }).next(() => {
          this.Rs = n;
        });
      }
      Cn(t) {
      }
      containsKey(t, e) {
        const n = new Fo(e, 0), s = this.Rs.firstAfterOrEqual(n);
        return Rt.resolve(e.isEqual(s && s.key));
      }
      performConsistencyCheck(t) {
        return this.mutationQueue.length, Rt.resolve();
      }
      /**
       * Finds the index of the given batchId in the mutation queue and asserts that
       * the resulting index is within the bounds of the queue.
       *
       * @param batchId - The batchId to search for
       * @param action - A description of what the caller is doing, phrased in passive
       * form (e.g. "acknowledged" in a routine that acknowledges batches).
       */
      Ss(t, e) {
        return this.bs(t);
      }
      /**
       * Finds the index of the given batchId in the mutation queue. This operation
       * is O(1).
       *
       * @returns The computed index of the batch with the given batchId, based on
       * the state of the queue. Note this index can be negative if the requested
       * batchId has already been remvoed from the queue or past the end of the
       * queue if the batchId is larger than the last added batch.
       */
      bs(t) {
        if (0 === this.mutationQueue.length)
          return 0;
        return t - this.mutationQueue[0].batchId;
      }
      /**
       * A version of lookupMutationBatch that doesn't return a promise, this makes
       * other functions that uses this code easier to read and more efficent.
       */
      Ps(t) {
        const e = this.bs(t);
        if (e < 0 || e >= this.mutationQueue.length)
          return null;
        return this.mutationQueue[e];
      }
    };
    var Lo = class {
      /**
       * @param sizer - Used to assess the size of a document. For eager GC, this is
       * expected to just return 0 to avoid unnecessarily doing the work of
       * calculating the size.
       */
      constructor(t) {
        this.Ds = t, /** Underlying cache of documents and their read times. */
        this.docs = new pe(ht.comparator), /** Size of all cached documents. */
        this.size = 0;
      }
      setIndexManager(t) {
        this.indexManager = t;
      }
      /**
       * Adds the supplied entry to the cache and updates the cache size as appropriate.
       *
       * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer
       * returned by `newChangeBuffer()`.
       */
      addEntry(t, e) {
        const n = e.key, s = this.docs.get(n), i = s ? s.size : 0, r = this.Ds(e);
        return this.docs = this.docs.insert(n, {
          document: e.mutableCopy(),
          size: r
        }), this.size += r - i, this.indexManager.addToCollectionParentIndex(t, n.path.popLast());
      }
      /**
       * Removes the specified entry from the cache and updates the cache size as appropriate.
       *
       * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer
       * returned by `newChangeBuffer()`.
       */
      removeEntry(t) {
        const e = this.docs.get(t);
        e && (this.docs = this.docs.remove(t), this.size -= e.size);
      }
      getEntry(t, e) {
        const n = this.docs.get(e);
        return Rt.resolve(n ? n.document.mutableCopy() : an.newInvalidDocument(e));
      }
      getEntries(t, e) {
        let n = cs();
        return e.forEach((t2) => {
          const e2 = this.docs.get(t2);
          n = n.insert(t2, e2 ? e2.document.mutableCopy() : an.newInvalidDocument(t2));
        }), Rt.resolve(n);
      }
      getDocumentsMatchingQuery(t, e, n, s) {
        let i = cs();
        const r = e.path, o = new ht(r.child("")), u = this.docs.getIteratorFrom(o);
        for (; u.hasNext(); ) {
          const { key: t2, value: { document: o2 } } = u.getNext();
          if (!r.isPrefixOf(t2.path))
            break;
          t2.path.length > r.length + 1 || (Tt(pt(o2), n) <= 0 || (s.has(o2.key) || ns(e, o2)) && (i = i.insert(o2.key, o2.mutableCopy())));
        }
        return Rt.resolve(i);
      }
      getAllFromCollectionGroup(t, e, n, s) {
        O();
      }
      Cs(t, e) {
        return Rt.forEach(this.docs, (t2) => e(t2));
      }
      newChangeBuffer(t) {
        return new qo(this);
      }
      getSize(t) {
        return Rt.resolve(this.size);
      }
    };
    var qo = class extends vo {
      constructor(t) {
        super(), this.os = t;
      }
      applyChanges(t) {
        const e = [];
        return this.changes.forEach((n, s) => {
          s.isValidDocument() ? e.push(this.os.addEntry(t, s)) : this.os.removeEntry(n);
        }), Rt.waitFor(e);
      }
      getFromCache(t, e) {
        return this.os.getEntry(t, e);
      }
      getAllFromCache(t, e) {
        return this.os.getEntries(t, e);
      }
    };
    var Uo = class {
      constructor(t) {
        this.persistence = t, /**
         * Maps a target to the data about that target
         */
        this.xs = new os((t2) => $n(t2), On), /** The last received snapshot version. */
        this.lastRemoteSnapshotVersion = rt.min(), /** The highest numbered target ID encountered. */
        this.highestTargetId = 0, /** The highest sequence number encountered. */
        this.Ns = 0, /**
         * A ordered bidirectional mapping between documents and the remote target
         * IDs.
         */
        this.ks = new Oo(), this.targetCount = 0, this.Ms = lo.kn();
      }
      forEachTarget(t, e) {
        return this.xs.forEach((t2, n) => e(n)), Rt.resolve();
      }
      getLastRemoteSnapshotVersion(t) {
        return Rt.resolve(this.lastRemoteSnapshotVersion);
      }
      getHighestSequenceNumber(t) {
        return Rt.resolve(this.Ns);
      }
      allocateTargetId(t) {
        return this.highestTargetId = this.Ms.next(), Rt.resolve(this.highestTargetId);
      }
      setTargetsMetadata(t, e, n) {
        return n && (this.lastRemoteSnapshotVersion = n), e > this.Ns && (this.Ns = e), Rt.resolve();
      }
      Fn(t) {
        this.xs.set(t.target, t);
        const e = t.targetId;
        e > this.highestTargetId && (this.Ms = new lo(e), this.highestTargetId = e), t.sequenceNumber > this.Ns && (this.Ns = t.sequenceNumber);
      }
      addTargetData(t, e) {
        return this.Fn(e), this.targetCount += 1, Rt.resolve();
      }
      updateTargetData(t, e) {
        return this.Fn(e), Rt.resolve();
      }
      removeTargetData(t, e) {
        return this.xs.delete(e.target), this.ks.Is(e.targetId), this.targetCount -= 1, Rt.resolve();
      }
      removeTargets(t, e, n) {
        let s = 0;
        const i = [];
        return this.xs.forEach((r, o) => {
          o.sequenceNumber <= e && null === n.get(o.targetId) && (this.xs.delete(r), i.push(this.removeMatchingKeysForTargetId(t, o.targetId)), s++);
        }), Rt.waitFor(i).next(() => s);
      }
      getTargetCount(t) {
        return Rt.resolve(this.targetCount);
      }
      getTargetData(t, e) {
        const n = this.xs.get(e) || null;
        return Rt.resolve(n);
      }
      addMatchingKeys(t, e, n) {
        return this.ks.gs(e, n), Rt.resolve();
      }
      removeMatchingKeys(t, e, n) {
        this.ks.ps(e, n);
        const s = this.persistence.referenceDelegate, i = [];
        return s && e.forEach((e2) => {
          i.push(s.markPotentiallyOrphaned(t, e2));
        }), Rt.waitFor(i);
      }
      removeMatchingKeysForTargetId(t, e) {
        return this.ks.Is(e), Rt.resolve();
      }
      getMatchingKeysForTargetId(t, e) {
        const n = this.ks.Es(e);
        return Rt.resolve(n);
      }
      containsKey(t, e) {
        return Rt.resolve(this.ks.containsKey(e));
      }
    };
    var Ko = class {
      /**
       * The constructor accepts a factory for creating a reference delegate. This
       * allows both the delegate and this instance to have strong references to
       * each other without having nullable fields that would then need to be
       * checked or asserted on every access.
       */
      constructor(t, e) {
        this.$s = {}, this.overlays = {}, this.Os = new Ot(0), this.Fs = false, this.Fs = true, this.referenceDelegate = t(this), this.Bs = new Uo(this);
        this.indexManager = new zr(), this.remoteDocumentCache = function(t2) {
          return new Lo(t2);
        }((t2) => this.referenceDelegate.Ls(t2)), this.serializer = new ar(e), this.qs = new Mo(this.serializer);
      }
      start() {
        return Promise.resolve();
      }
      shutdown() {
        return this.Fs = false, Promise.resolve();
      }
      get started() {
        return this.Fs;
      }
      setDatabaseDeletedListener() {
      }
      setNetworkEnabled() {
      }
      getIndexManager(t) {
        return this.indexManager;
      }
      getDocumentOverlayCache(t) {
        let e = this.overlays[t.toKey()];
        return e || (e = new $o(), this.overlays[t.toKey()] = e), e;
      }
      getMutationQueue(t, e) {
        let n = this.$s[t.toKey()];
        return n || (n = new Bo(e, this.referenceDelegate), this.$s[t.toKey()] = n), n;
      }
      getTargetCache() {
        return this.Bs;
      }
      getRemoteDocumentCache() {
        return this.remoteDocumentCache;
      }
      getBundleCache() {
        return this.qs;
      }
      runTransaction(t, e, n) {
        N("MemoryPersistence", "Starting transaction:", t);
        const s = new Go(this.Os.next());
        return this.referenceDelegate.Us(), n(s).next((t2) => this.referenceDelegate.Ks(s).next(() => t2)).toPromise().then((t2) => (s.raiseOnCommittedEvent(), t2));
      }
      Gs(t, e) {
        return Rt.or(Object.values(this.$s).map((n) => () => n.containsKey(t, e)));
      }
    };
    var Go = class extends At {
      constructor(t) {
        super(), this.currentSequenceNumber = t;
      }
    };
    var Qo = class _Qo {
      constructor(t) {
        this.persistence = t, /** Tracks all documents that are active in Query views. */
        this.Qs = new Oo(), /** The list of documents that are potentially GCed after each transaction. */
        this.js = null;
      }
      static zs(t) {
        return new _Qo(t);
      }
      get Ws() {
        if (this.js)
          return this.js;
        throw O();
      }
      addReference(t, e, n) {
        return this.Qs.addReference(n, e), this.Ws.delete(n.toString()), Rt.resolve();
      }
      removeReference(t, e, n) {
        return this.Qs.removeReference(n, e), this.Ws.add(n.toString()), Rt.resolve();
      }
      markPotentiallyOrphaned(t, e) {
        return this.Ws.add(e.toString()), Rt.resolve();
      }
      removeTarget(t, e) {
        this.Qs.Is(e.targetId).forEach((t2) => this.Ws.add(t2.toString()));
        const n = this.persistence.getTargetCache();
        return n.getMatchingKeysForTargetId(t, e.targetId).next((t2) => {
          t2.forEach((t3) => this.Ws.add(t3.toString()));
        }).next(() => n.removeTargetData(t, e));
      }
      Us() {
        this.js = /* @__PURE__ */ new Set();
      }
      Ks(t) {
        const e = this.persistence.getRemoteDocumentCache().newChangeBuffer();
        return Rt.forEach(this.Ws, (n) => {
          const s = ht.fromPath(n);
          return this.Hs(t, s).next((t2) => {
            t2 || e.removeEntry(s, rt.min());
          });
        }).next(() => (this.js = null, e.apply(t)));
      }
      updateLimboDocument(t, e) {
        return this.Hs(t, e).next((t2) => {
          t2 ? this.Ws.delete(e.toString()) : this.Ws.add(e.toString());
        });
      }
      Ls(t) {
        return 0;
      }
      Hs(t, e) {
        return Rt.or([() => Rt.resolve(this.Qs.containsKey(e)), () => this.persistence.getTargetCache().containsKey(t, e), () => this.persistence.Gs(t, e)]);
      }
    };
    var jo = class _jo {
      constructor(t, e) {
        this.persistence = t, this.Js = new os((t2) => qt(t2.path), (t2, e2) => t2.isEqual(e2)), this.garbageCollector = To(this, e);
      }
      static zs(t, e) {
        return new _jo(t, e);
      }
      // No-ops, present so memory persistence doesn't have to care which delegate
      // it has.
      Us() {
      }
      Ks(t) {
        return Rt.resolve();
      }
      forEachTarget(t, e) {
        return this.persistence.getTargetCache().forEachTarget(t, e);
      }
      zn(t) {
        const e = this.Jn(t);
        return this.persistence.getTargetCache().getTargetCount(t).next((t2) => e.next((e2) => t2 + e2));
      }
      Jn(t) {
        let e = 0;
        return this.Wn(t, (t2) => {
          e++;
        }).next(() => e);
      }
      Wn(t, e) {
        return Rt.forEach(this.Js, (n, s) => this.Xn(t, n, s).next((t2) => t2 ? Rt.resolve() : e(s)));
      }
      removeTargets(t, e, n) {
        return this.persistence.getTargetCache().removeTargets(t, e, n);
      }
      removeOrphanedDocuments(t, e) {
        let n = 0;
        const s = this.persistence.getRemoteDocumentCache(), i = s.newChangeBuffer();
        return s.Cs(t, (s2) => this.Xn(t, s2, e).next((t2) => {
          t2 || (n++, i.removeEntry(s2, rt.min()));
        })).next(() => i.apply(t)).next(() => n);
      }
      markPotentiallyOrphaned(t, e) {
        return this.Js.set(e, t.currentSequenceNumber), Rt.resolve();
      }
      removeTarget(t, e) {
        const n = e.withSequenceNumber(t.currentSequenceNumber);
        return this.persistence.getTargetCache().updateTargetData(t, n);
      }
      addReference(t, e, n) {
        return this.Js.set(n, t.currentSequenceNumber), Rt.resolve();
      }
      removeReference(t, e, n) {
        return this.Js.set(n, t.currentSequenceNumber), Rt.resolve();
      }
      updateLimboDocument(t, e) {
        return this.Js.set(e, t.currentSequenceNumber), Rt.resolve();
      }
      Ls(t) {
        let e = t.key.toString().length;
        return t.isFoundDocument() && (e += ze(t.data.value)), e;
      }
      Xn(t, e, n) {
        return Rt.or([() => this.persistence.Gs(t, e), () => this.persistence.getTargetCache().containsKey(t, e), () => {
          const t2 = this.Js.get(e);
          return Rt.resolve(void 0 !== t2 && t2 > n);
        }]);
      }
      getCacheSize(t) {
        return this.persistence.getRemoteDocumentCache().getSize(t);
      }
    };
    var zo = class {
      constructor(t) {
        this.serializer = t;
      }
      /**
       * Performs database creation and schema upgrades.
       *
       * Note that in production, this method is only ever used to upgrade the schema
       * to SCHEMA_VERSION. Different values of toVersion are only used for testing
       * and local feature development.
       */
      O(t, e, n, s) {
        const i = new Pt("createOrUpgrade", e);
        n < 1 && s >= 1 && (function(t2) {
          t2.createObjectStore("owner");
        }(t), function(t2) {
          t2.createObjectStore("mutationQueues", {
            keyPath: "userId"
          });
          t2.createObjectStore("mutations", {
            keyPath: "batchId",
            autoIncrement: true
          }).createIndex("userMutationsIndex", Qt, {
            unique: true
          }), t2.createObjectStore("documentMutations");
        }(t), Wo(t), function(t2) {
          t2.createObjectStore("remoteDocuments");
        }(t));
        let r = Rt.resolve();
        return n < 3 && s >= 3 && // Brand new clients don't need to drop and recreate--only clients that
        // potentially have corrupt data.
        (0 !== n && (!function(t2) {
          t2.deleteObjectStore("targetDocuments"), t2.deleteObjectStore("targets"), t2.deleteObjectStore("targetGlobal");
        }(t), Wo(t)), r = r.next(() => (
          /**
          * Creates the target global singleton row.
          *
          * @param txn - The version upgrade transaction for indexeddb
          */
          function(t2) {
            const e2 = t2.store("targetGlobal"), n2 = {
              highestTargetId: 0,
              highestListenSequenceNumber: 0,
              lastRemoteSnapshotVersion: rt.min().toTimestamp(),
              targetCount: 0
            };
            return e2.put("targetGlobalKey", n2);
          }(i)
        ))), n < 4 && s >= 4 && (0 !== n && // Schema version 3 uses auto-generated keys to generate globally unique
        // mutation batch IDs (this was previously ensured internally by the
        // client). To migrate to the new schema, we have to read all mutations
        // and write them back out. We preserve the existing batch IDs to guarantee
        // consistency with other object stores. Any further mutation batch IDs will
        // be auto-generated.
        (r = r.next(() => function(t2, e2) {
          return e2.store("mutations").j().next((n2) => {
            t2.deleteObjectStore("mutations");
            t2.createObjectStore("mutations", {
              keyPath: "batchId",
              autoIncrement: true
            }).createIndex("userMutationsIndex", Qt, {
              unique: true
            });
            const s2 = e2.store("mutations"), i2 = n2.map((t3) => s2.put(t3));
            return Rt.waitFor(i2);
          });
        }(t, i))), r = r.next(() => {
          !function(t2) {
            t2.createObjectStore("clientMetadata", {
              keyPath: "clientId"
            });
          }(t);
        })), n < 5 && s >= 5 && (r = r.next(() => this.Ys(i))), n < 6 && s >= 6 && (r = r.next(() => (function(t2) {
          t2.createObjectStore("remoteDocumentGlobal");
        }(t), this.Xs(i)))), n < 7 && s >= 7 && (r = r.next(() => this.Zs(i))), n < 8 && s >= 8 && (r = r.next(() => this.ti(t, i))), n < 9 && s >= 9 && (r = r.next(() => {
          !function(t2) {
            t2.objectStoreNames.contains("remoteDocumentChanges") && t2.deleteObjectStore("remoteDocumentChanges");
          }(t);
        })), n < 10 && s >= 10 && (r = r.next(() => this.ei(i))), n < 11 && s >= 11 && (r = r.next(() => {
          !function(t2) {
            t2.createObjectStore("bundles", {
              keyPath: "bundleId"
            });
          }(t), function(t2) {
            t2.createObjectStore("namedQueries", {
              keyPath: "name"
            });
          }(t);
        })), n < 12 && s >= 12 && (r = r.next(() => {
          !function(t2) {
            const e2 = t2.createObjectStore("documentOverlays", {
              keyPath: oe
            });
            e2.createIndex("collectionPathOverlayIndex", ue, {
              unique: false
            }), e2.createIndex("collectionGroupOverlayIndex", ce, {
              unique: false
            });
          }(t);
        })), n < 13 && s >= 13 && (r = r.next(() => function(t2) {
          const e2 = t2.createObjectStore("remoteDocumentsV14", {
            keyPath: Ht
          });
          e2.createIndex("documentKeyIndex", Jt), e2.createIndex("collectionGroupIndex", Yt);
        }(t)).next(() => this.ni(t, i)).next(() => t.deleteObjectStore("remoteDocuments"))), n < 14 && s >= 14 && (r = r.next(() => this.si(t, i))), n < 15 && s >= 15 && (r = r.next(() => function(t2) {
          t2.createObjectStore("indexConfiguration", {
            keyPath: "indexId",
            autoIncrement: true
          }).createIndex("collectionGroupIndex", "collectionGroup", {
            unique: false
          });
          t2.createObjectStore("indexState", {
            keyPath: ne
          }).createIndex("sequenceNumberIndex", se, {
            unique: false
          });
          t2.createObjectStore("indexEntries", {
            keyPath: ie
          }).createIndex("documentKeyIndex", re, {
            unique: false
          });
        }(t))), r;
      }
      Xs(t) {
        let e = 0;
        return t.store("remoteDocuments").X((t2, n) => {
          e += ro(n);
        }).next(() => {
          const n = {
            byteSize: e
          };
          return t.store("remoteDocumentGlobal").put("remoteDocumentGlobalKey", n);
        });
      }
      Ys(t) {
        const e = t.store("mutationQueues"), n = t.store("mutations");
        return e.j().next((e2) => Rt.forEach(e2, (e3) => {
          const s = IDBKeyRange.bound([e3.userId, -1], [e3.userId, e3.lastAcknowledgedBatchId]);
          return n.j("userMutationsIndex", s).next((n2) => Rt.forEach(n2, (n3) => {
            F(n3.userId === e3.userId);
            const s2 = _r(this.serializer, n3);
            return io(t, e3.userId, s2).next(() => {
            });
          }));
        }));
      }
      /**
       * Ensures that every document in the remote document cache has a corresponding sentinel row
       * with a sequence number. Missing rows are given the most recently used sequence number.
       */
      Zs(t) {
        const e = t.store("targetDocuments"), n = t.store("remoteDocuments");
        return t.store("targetGlobal").get("targetGlobalKey").next((t2) => {
          const s = [];
          return n.X((n2, i) => {
            const r = new ut(n2), o = function(t3) {
              return [0, qt(t3)];
            }(r);
            s.push(e.get(o).next((n3) => n3 ? Rt.resolve() : ((n4) => e.put({
              targetId: 0,
              path: qt(n4),
              sequenceNumber: t2.highestListenSequenceNumber
            }))(r)));
          }).next(() => Rt.waitFor(s));
        });
      }
      ti(t, e) {
        t.createObjectStore("collectionParents", {
          keyPath: ee
        });
        const n = e.store("collectionParents"), s = new Wr(), i = (t2) => {
          if (s.add(t2)) {
            const e2 = t2.lastSegment(), s2 = t2.popLast();
            return n.put({
              collectionId: e2,
              parent: qt(s2)
            });
          }
        };
        return e.store("remoteDocuments").X({
          Y: true
        }, (t2, e2) => {
          const n2 = new ut(t2);
          return i(n2.popLast());
        }).next(() => e.store("documentMutations").X({
          Y: true
        }, ([t2, e2, n2], s2) => {
          const r = Gt(e2);
          return i(r.popLast());
        }));
      }
      ei(t) {
        const e = t.store("targets");
        return e.X((t2, n) => {
          const s = mr(n), i = gr(this.serializer, s);
          return e.put(i);
        });
      }
      ni(t, e) {
        const n = e.store("remoteDocuments"), s = [];
        return n.X((t2, n2) => {
          const i = e.store("remoteDocumentsV14"), r = (o = n2, o.document ? new ht(ut.fromString(o.document.name).popFirst(5)) : o.noDocument ? ht.fromSegments(o.noDocument.path) : o.unknownDocument ? ht.fromSegments(o.unknownDocument.path) : O()).path.toArray();
          var o;
          const u = {
            prefixPath: r.slice(0, r.length - 2),
            collectionGroup: r[r.length - 2],
            documentId: r[r.length - 1],
            readTime: n2.readTime || [0, 0],
            unknownDocument: n2.unknownDocument,
            noDocument: n2.noDocument,
            document: n2.document,
            hasCommittedMutations: !!n2.hasCommittedMutations
          };
          s.push(i.put(u));
        }).next(() => Rt.waitFor(s));
      }
      si(t, e) {
        const n = e.store("mutations"), s = Po(this.serializer), i = new Ko(Qo.zs, this.serializer.fe);
        return n.j().next((t2) => {
          const n2 = /* @__PURE__ */ new Map();
          return t2.forEach((t3) => {
            var e2;
            let s2 = null !== (e2 = n2.get(t3.userId)) && void 0 !== e2 ? e2 : gs();
            _r(this.serializer, t3).keys().forEach((t4) => s2 = s2.add(t4)), n2.set(t3.userId, s2);
          }), Rt.forEach(n2, (t3, n3) => {
            const r = new V(n3), o = Rr.de(this.serializer, r), u = i.getIndexManager(r), c = oo.de(r, this.serializer, u, i.referenceDelegate);
            return new ko(s, c, o, u).recalculateAndSaveOverlaysForDocumentKeys(new we(e, Ot.ct), t3).next();
          });
        });
      }
    };
    function Wo(t) {
      t.createObjectStore("targetDocuments", {
        keyPath: Zt
      }).createIndex("documentTargetsIndex", te, {
        unique: true
      });
      t.createObjectStore("targets", {
        keyPath: "targetId"
      }).createIndex("queryTargetsIndex", Xt, {
        unique: true
      }), t.createObjectStore("targetGlobal");
    }
    var Ho = "Failed to obtain exclusive access to the persistence layer. To allow shared access, multi-tab synchronization has to be enabled in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.";
    var Jo = class _Jo {
      constructor(t, e, n, s, i, r, o, u, c, a, h = 15) {
        if (this.allowTabSynchronization = t, this.persistenceKey = e, this.clientId = n, this.ii = i, this.window = r, this.document = o, this.ri = c, this.oi = a, this.ui = h, this.Os = null, this.Fs = false, this.isPrimary = false, this.networkEnabled = true, /** Our window.unload handler, if registered. */
        this.ci = null, this.inForeground = false, /** Our 'visibilitychange' listener if registered. */
        this.ai = null, /** The client metadata refresh task. */
        this.hi = null, /** The last time we garbage collected the client metadata object store. */
        this.li = Number.NEGATIVE_INFINITY, /** A listener to notify on primary state changes. */
        this.fi = (t2) => Promise.resolve(), !_Jo.D())
          throw new U(q.UNIMPLEMENTED, "This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.");
        this.referenceDelegate = new Eo(this, s), this.di = e + "main", this.serializer = new ar(u), this.wi = new bt(this.di, this.ui, new zo(this.serializer)), this.Bs = new fo(this.referenceDelegate, this.serializer), this.remoteDocumentCache = Po(this.serializer), this.qs = new Er(), this.window && this.window.localStorage ? this._i = this.window.localStorage : (this._i = null, false === a && k("IndexedDbPersistence", "LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page."));
      }
      /**
       * Attempt to start IndexedDb persistence.
       *
       * @returns Whether persistence was enabled.
       */
      start() {
        return this.mi().then(() => {
          if (!this.isPrimary && !this.allowTabSynchronization)
            throw new U(q.FAILED_PRECONDITION, Ho);
          return this.gi(), this.yi(), this.pi(), this.runTransaction("getHighestListenSequenceNumber", "readonly", (t) => this.Bs.getHighestSequenceNumber(t));
        }).then((t) => {
          this.Os = new Ot(t, this.ri);
        }).then(() => {
          this.Fs = true;
        }).catch((t) => (this.wi && this.wi.close(), Promise.reject(t)));
      }
      /**
       * Registers a listener that gets called when the primary state of the
       * instance changes. Upon registering, this listener is invoked immediately
       * with the current primary state.
       *
       * PORTING NOTE: This is only used for Web multi-tab.
       */
      Ii(t) {
        return this.fi = async (e) => {
          if (this.started)
            return t(e);
        }, t(this.isPrimary);
      }
      /**
       * Registers a listener that gets called when the database receives a
       * version change event indicating that it has deleted.
       *
       * PORTING NOTE: This is only used for Web multi-tab.
       */
      setDatabaseDeletedListener(t) {
        this.wi.B(async (e) => {
          null === e.newVersion && await t();
        });
      }
      /**
       * Adjusts the current network state in the client's metadata, potentially
       * affecting the primary lease.
       *
       * PORTING NOTE: This is only used for Web multi-tab.
       */
      setNetworkEnabled(t) {
        this.networkEnabled !== t && (this.networkEnabled = t, // Schedule a primary lease refresh for immediate execution. The eventual
        // lease update will be propagated via `primaryStateListener`.
        this.ii.enqueueAndForget(async () => {
          this.started && await this.mi();
        }));
      }
      /**
       * Updates the client metadata in IndexedDb and attempts to either obtain or
       * extend the primary lease for the local client. Asynchronously notifies the
       * primary state listener if the client either newly obtained or released its
       * primary lease.
       */
      mi() {
        return this.runTransaction("updateClientMetadataAndTryBecomePrimary", "readwrite", (t) => Xo(t).put({
          clientId: this.clientId,
          updateTimeMs: Date.now(),
          networkEnabled: this.networkEnabled,
          inForeground: this.inForeground
        }).next(() => {
          if (this.isPrimary)
            return this.Ti(t).next((t2) => {
              t2 || (this.isPrimary = false, this.ii.enqueueRetryable(() => this.fi(false)));
            });
        }).next(() => this.Ei(t)).next((e) => this.isPrimary && !e ? this.Ai(t).next(() => false) : !!e && this.vi(t).next(() => true))).catch((t) => {
          if (Dt(t))
            return N("IndexedDbPersistence", "Failed to extend owner lease: ", t), this.isPrimary;
          if (!this.allowTabSynchronization)
            throw t;
          return N("IndexedDbPersistence", "Releasing owner lease after error during lease refresh", t), /* isPrimary= */
          false;
        }).then((t) => {
          this.isPrimary !== t && this.ii.enqueueRetryable(() => this.fi(t)), this.isPrimary = t;
        });
      }
      Ti(t) {
        return Yo(t).get("owner").next((t2) => Rt.resolve(this.Ri(t2)));
      }
      Pi(t) {
        return Xo(t).delete(this.clientId);
      }
      /**
       * If the garbage collection threshold has passed, prunes the
       * RemoteDocumentChanges and the ClientMetadata store based on the last update
       * time of all clients.
       */
      async bi() {
        if (this.isPrimary && !this.Vi(this.li, 18e5)) {
          this.li = Date.now();
          const t = await this.runTransaction("maybeGarbageCollectMultiClientState", "readwrite-primary", (t2) => {
            const e = _e(t2, "clientMetadata");
            return e.j().next((t3) => {
              const n = this.Si(t3, 18e5), s = t3.filter((t4) => -1 === n.indexOf(t4));
              return Rt.forEach(s, (t4) => e.delete(t4.clientId)).next(() => s);
            });
          }).catch(() => []);
          if (this._i)
            for (const e of t)
              this._i.removeItem(this.Di(e.clientId));
        }
      }
      /**
       * Schedules a recurring timer to update the client metadata and to either
       * extend or acquire the primary lease if the client is eligible.
       */
      pi() {
        this.hi = this.ii.enqueueAfterDelay("client_metadata_refresh", 4e3, () => this.mi().then(() => this.bi()).then(() => this.pi()));
      }
      /** Checks whether `client` is the local client. */
      Ri(t) {
        return !!t && t.ownerId === this.clientId;
      }
      /**
       * Evaluate the state of all active clients and determine whether the local
       * client is or can act as the holder of the primary lease. Returns whether
       * the client is eligible for the lease, but does not actually acquire it.
       * May return 'false' even if there is no active leaseholder and another
       * (foreground) client should become leaseholder instead.
       */
      Ei(t) {
        if (this.oi)
          return Rt.resolve(true);
        return Yo(t).get("owner").next((e) => {
          if (null !== e && this.Vi(e.leaseTimestampMs, 5e3) && !this.Ci(e.ownerId)) {
            if (this.Ri(e) && this.networkEnabled)
              return true;
            if (!this.Ri(e)) {
              if (!e.allowTabSynchronization)
                throw new U(q.FAILED_PRECONDITION, Ho);
              return false;
            }
          }
          return !(!this.networkEnabled || !this.inForeground) || Xo(t).j().next((t2) => void 0 === this.Si(t2, 5e3).find((t3) => {
            if (this.clientId !== t3.clientId) {
              const e2 = !this.networkEnabled && t3.networkEnabled, n = !this.inForeground && t3.inForeground, s = this.networkEnabled === t3.networkEnabled;
              if (e2 || n && s)
                return true;
            }
            return false;
          }));
        }).next((t2) => (this.isPrimary !== t2 && N("IndexedDbPersistence", `Client ${t2 ? "is" : "is not"} eligible for a primary lease.`), t2));
      }
      async shutdown() {
        this.Fs = false, this.xi(), this.hi && (this.hi.cancel(), this.hi = null), this.Ni(), this.ki(), // Use `SimpleDb.runTransaction` directly to avoid failing if another tab
        // has obtained the primary lease.
        await this.wi.runTransaction("shutdown", "readwrite", ["owner", "clientMetadata"], (t) => {
          const e = new we(t, Ot.ct);
          return this.Ai(e).next(() => this.Pi(e));
        }), this.wi.close(), // Remove the entry marking the client as zombied from LocalStorage since
        // we successfully deleted its metadata from IndexedDb.
        this.Mi();
      }
      /**
       * Returns clients that are not zombied and have an updateTime within the
       * provided threshold.
       */
      Si(t, e) {
        return t.filter((t2) => this.Vi(t2.updateTimeMs, e) && !this.Ci(t2.clientId));
      }
      /**
       * Returns the IDs of the clients that are currently active. If multi-tab
       * is not supported, returns an array that only contains the local client's
       * ID.
       *
       * PORTING NOTE: This is only used for Web multi-tab.
       */
      $i() {
        return this.runTransaction("getActiveClients", "readonly", (t) => Xo(t).j().next((t2) => this.Si(t2, 18e5).map((t3) => t3.clientId)));
      }
      get started() {
        return this.Fs;
      }
      getMutationQueue(t, e) {
        return oo.de(t, this.serializer, e, this.referenceDelegate);
      }
      getTargetCache() {
        return this.Bs;
      }
      getRemoteDocumentCache() {
        return this.remoteDocumentCache;
      }
      getIndexManager(t) {
        return new Jr(t, this.serializer.fe.databaseId);
      }
      getDocumentOverlayCache(t) {
        return Rr.de(this.serializer, t);
      }
      getBundleCache() {
        return this.qs;
      }
      runTransaction(t, e, n) {
        N("IndexedDbPersistence", "Starting transaction:", t);
        const s = "readonly" === e ? "readonly" : "readwrite", i = 15 === (r = this.ui) ? de : 14 === r ? fe : 13 === r ? le : 12 === r ? he : 11 === r ? ae : void O();
        var r;
        let o;
        return this.wi.runTransaction(t, s, i, (s2) => (o = new we(s2, this.Os ? this.Os.next() : Ot.ct), "readwrite-primary" === e ? this.Ti(o).next((t2) => !!t2 || this.Ei(o)).next((e2) => {
          if (!e2)
            throw k(`Failed to obtain primary lease for action '${t}'.`), this.isPrimary = false, this.ii.enqueueRetryable(() => this.fi(false)), new U(q.FAILED_PRECONDITION, Et);
          return n(o);
        }).next((t2) => this.vi(o).next(() => t2)) : this.Oi(o).next(() => n(o)))).then((t2) => (o.raiseOnCommittedEvent(), t2));
      }
      /**
       * Verifies that the current tab is the primary leaseholder or alternatively
       * that the leaseholder has opted into multi-tab synchronization.
       */
      // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer
      // be turned off.
      Oi(t) {
        return Yo(t).get("owner").next((t2) => {
          if (null !== t2 && this.Vi(t2.leaseTimestampMs, 5e3) && !this.Ci(t2.ownerId) && !this.Ri(t2) && !(this.oi || this.allowTabSynchronization && t2.allowTabSynchronization))
            throw new U(q.FAILED_PRECONDITION, Ho);
        });
      }
      /**
       * Obtains or extends the new primary lease for the local client. This
       * method does not verify that the client is eligible for this lease.
       */
      vi(t) {
        const e = {
          ownerId: this.clientId,
          allowTabSynchronization: this.allowTabSynchronization,
          leaseTimestampMs: Date.now()
        };
        return Yo(t).put("owner", e);
      }
      static D() {
        return bt.D();
      }
      /** Checks the primary lease and removes it if we are the current primary. */
      Ai(t) {
        const e = Yo(t);
        return e.get("owner").next((t2) => this.Ri(t2) ? (N("IndexedDbPersistence", "Releasing primary lease."), e.delete("owner")) : Rt.resolve());
      }
      /** Verifies that `updateTimeMs` is within `maxAgeMs`. */
      Vi(t, e) {
        const n = Date.now();
        return !(t < n - e) && (!(t > n) || (k(`Detected an update time that is in the future: ${t} > ${n}`), false));
      }
      gi() {
        null !== this.document && "function" == typeof this.document.addEventListener && (this.ai = () => {
          this.ii.enqueueAndForget(() => (this.inForeground = "visible" === this.document.visibilityState, this.mi()));
        }, this.document.addEventListener("visibilitychange", this.ai), this.inForeground = "visible" === this.document.visibilityState);
      }
      Ni() {
        this.ai && (this.document.removeEventListener("visibilitychange", this.ai), this.ai = null);
      }
      /**
       * Attaches a window.unload handler that will synchronously write our
       * clientId to a "zombie client id" location in LocalStorage. This can be used
       * by tabs trying to acquire the primary lease to determine that the lease
       * is no longer valid even if the timestamp is recent. This is particularly
       * important for the refresh case (so the tab correctly re-acquires the
       * primary lease). LocalStorage is used for this rather than IndexedDb because
       * it is a synchronous API and so can be used reliably from  an unload
       * handler.
       */
      yi() {
        var t;
        "function" == typeof (null === (t = this.window) || void 0 === t ? void 0 : t.addEventListener) && (this.ci = () => {
          this.xi();
          const t2 = /(?:Version|Mobile)\/1[456]/;
          util.isSafari() && (navigator.appVersion.match(t2) || navigator.userAgent.match(t2)) && // On Safari 14, 15, and 16, we do not run any cleanup actions as it might
          // trigger a bug that prevents Safari from re-opening IndexedDB during
          // the next page load.
          // See https://bugs.webkit.org/show_bug.cgi?id=226547
          this.ii.enterRestrictedMode(
            /* purgeExistingTasks= */
            true
          ), this.ii.enqueueAndForget(() => this.shutdown());
        }, this.window.addEventListener("pagehide", this.ci));
      }
      ki() {
        this.ci && (this.window.removeEventListener("pagehide", this.ci), this.ci = null);
      }
      /**
       * Returns whether a client is "zombied" based on its LocalStorage entry.
       * Clients become zombied when their tab closes without running all of the
       * cleanup logic in `shutdown()`.
       */
      Ci(t) {
        var e;
        try {
          const n = null !== (null === (e = this._i) || void 0 === e ? void 0 : e.getItem(this.Di(t)));
          return N("IndexedDbPersistence", `Client '${t}' ${n ? "is" : "is not"} zombied in LocalStorage`), n;
        } catch (t2) {
          return k("IndexedDbPersistence", "Failed to get zombied client id.", t2), false;
        }
      }
      /**
       * Record client as zombied (a client that had its tab closed). Zombied
       * clients are ignored during primary tab selection.
       */
      xi() {
        if (this._i)
          try {
            this._i.setItem(this.Di(this.clientId), String(Date.now()));
          } catch (t) {
            k("Failed to set zombie client id.", t);
          }
      }
      /** Removes the zombied client entry if it exists. */
      Mi() {
        if (this._i)
          try {
            this._i.removeItem(this.Di(this.clientId));
          } catch (t) {
          }
      }
      Di(t) {
        return `firestore_zombie_${this.persistenceKey}_${t}`;
      }
    };
    function Yo(t) {
      return _e(t, "owner");
    }
    function Xo(t) {
      return _e(t, "clientMetadata");
    }
    function Zo(t, e) {
      let n = t.projectId;
      return t.isDefaultDatabase || (n += "." + t.database), "firestore/" + e + "/" + n + "/";
    }
    var tu = class _tu {
      constructor(t, e, n, s) {
        this.targetId = t, this.fromCache = e, this.Fi = n, this.Bi = s;
      }
      static Li(t, e) {
        let n = gs(), s = gs();
        for (const t2 of e.docChanges)
          switch (t2.type) {
            case 0:
              n = n.add(t2.doc.key);
              break;
            case 1:
              s = s.add(t2.doc.key);
          }
        return new _tu(t, e.fromCache, n, s);
      }
    };
    var eu = class {
      constructor() {
        this.qi = false;
      }
      /** Sets the document view to query against. */
      initialize(t, e) {
        this.Ui = t, this.indexManager = e, this.qi = true;
      }
      /** Returns all local documents matching the specified query. */
      getDocumentsMatchingQuery(t, e, n, s) {
        return this.Ki(t, e).next((i) => i || this.Gi(t, e, s, n)).next((n2) => n2 || this.Qi(t, e));
      }
      /**
       * Performs an indexed query that evaluates the query based on a collection's
       * persisted index values. Returns `null` if an index is not available.
       */
      Ki(t, e) {
        if (Qn(e))
          return Rt.resolve(null);
        let n = Jn(e);
        return this.indexManager.getIndexType(t, n).next((s) => 0 === s ? null : (null !== e.limit && 1 === s && // We cannot apply a limit for targets that are served using a partial
        // index. If a partial index will be used to serve the target, the
        // query may return a superset of documents that match the target
        // (e.g. if the index doesn't include all the target's filters), or
        // may return the correct set of documents in the wrong order (e.g. if
        // the index doesn't include a segment for one of the orderBys).
        // Therefore, a limit should not be applied in such cases.
        (e = Xn(
          e,
          null,
          "F"
          /* LimitType.First */
        ), n = Jn(e)), this.indexManager.getDocumentsMatchingTarget(t, n).next((s2) => {
          const i = gs(...s2);
          return this.Ui.getDocuments(t, i).next((s3) => this.indexManager.getMinOffset(t, n).next((n2) => {
            const r = this.ji(e, s3);
            return this.zi(e, r, i, n2.readTime) ? this.Ki(t, Xn(
              e,
              null,
              "F"
              /* LimitType.First */
            )) : this.Wi(t, r, e, n2);
          }));
        })));
      }
      /**
       * Performs a query based on the target's persisted query mapping. Returns
       * `null` if the mapping is not available or cannot be used.
       */
      Gi(t, e, n, s) {
        return Qn(e) || s.isEqual(rt.min()) ? this.Qi(t, e) : this.Ui.getDocuments(t, n).next((i) => {
          const r = this.ji(e, i);
          return this.zi(e, r, n, s) ? this.Qi(t, e) : (C() <= logger.LogLevel.DEBUG && N("QueryEngine", "Re-using previous result from %s to execute query: %s", s.toString(), es(e)), this.Wi(t, r, e, yt(s, -1)));
        });
      }
      /** Applies the query filter and sorting to the provided documents.  */
      ji(t, e) {
        let n = new Ee(is(t));
        return e.forEach((e2, s) => {
          ns(t, s) && (n = n.add(s));
        }), n;
      }
      /**
       * Determines if a limit query needs to be refilled from cache, making it
       * ineligible for index-free execution.
       *
       * @param query - The query.
       * @param sortedPreviousResults - The documents that matched the query when it
       * was last synchronized, sorted by the query's comparator.
       * @param remoteKeys - The document keys that matched the query at the last
       * snapshot.
       * @param limboFreeSnapshotVersion - The version of the snapshot when the
       * query was last synchronized.
       */
      zi(t, e, n, s) {
        if (null === t.limit)
          return false;
        if (n.size !== e.size)
          return true;
        const i = "F" === t.limitType ? e.last() : e.first();
        return !!i && (i.hasPendingWrites || i.version.compareTo(s) > 0);
      }
      Qi(t, e) {
        return C() <= logger.LogLevel.DEBUG && N("QueryEngine", "Using full collection scan to execute query:", es(e)), this.Ui.getDocumentsMatchingQuery(t, e, It.min());
      }
      /**
       * Combines the results from an indexed execution with the remaining documents
       * that have not yet been indexed.
       */
      Wi(t, e, n, s) {
        return this.Ui.getDocumentsMatchingQuery(t, n, s).next((t2) => (
          // Merge with existing results
          (e.forEach((e2) => {
            t2 = t2.insert(e2.key, e2);
          }), t2)
        ));
      }
    };
    var nu = class {
      constructor(t, e, n, s) {
        this.persistence = t, this.Hi = e, this.serializer = s, /**
         * Maps a targetID to data about its target.
         *
         * PORTING NOTE: We are using an immutable data structure on Web to make re-runs
         * of `applyRemoteEvent()` idempotent.
         */
        this.Ji = new pe(et), /** Maps a target to its targetID. */
        // TODO(wuandy): Evaluate if TargetId can be part of Target.
        this.Yi = new os((t2) => $n(t2), On), /**
         * A per collection group index of the last read time processed by
         * `getNewDocumentChanges()`.
         *
         * PORTING NOTE: This is only used for multi-tab synchronization.
         */
        this.Xi = /* @__PURE__ */ new Map(), this.Zi = t.getRemoteDocumentCache(), this.Bs = t.getTargetCache(), this.qs = t.getBundleCache(), this.tr(n);
      }
      tr(t) {
        this.documentOverlayCache = this.persistence.getDocumentOverlayCache(t), this.indexManager = this.persistence.getIndexManager(t), this.mutationQueue = this.persistence.getMutationQueue(t, this.indexManager), this.localDocuments = new ko(this.Zi, this.mutationQueue, this.documentOverlayCache, this.indexManager), this.Zi.setIndexManager(this.indexManager), this.Hi.initialize(this.localDocuments, this.indexManager);
      }
      collectGarbage(t) {
        return this.persistence.runTransaction("Collect garbage", "readwrite-primary", (e) => t.collect(e, this.Ji));
      }
    };
    function su(t, e, n, s) {
      return new nu(t, e, n, s);
    }
    async function iu(t, e) {
      const n = L(t);
      return await n.persistence.runTransaction("Handle user change", "readonly", (t2) => {
        let s;
        return n.mutationQueue.getAllMutationBatches(t2).next((i) => (s = i, n.tr(e), n.mutationQueue.getAllMutationBatches(t2))).next((e2) => {
          const i = [], r = [];
          let o = gs();
          for (const t3 of s) {
            i.push(t3.batchId);
            for (const e3 of t3.mutations)
              o = o.add(e3.key);
          }
          for (const t3 of e2) {
            r.push(t3.batchId);
            for (const e3 of t3.mutations)
              o = o.add(e3.key);
          }
          return n.localDocuments.getDocuments(t2, o).next((t3) => ({
            er: t3,
            removedBatchIds: i,
            addedBatchIds: r
          }));
        });
      });
    }
    function ru(t, e) {
      const n = L(t);
      return n.persistence.runTransaction("Acknowledge batch", "readwrite-primary", (t2) => {
        const s = e.batch.keys(), i = n.Zi.newChangeBuffer({
          trackRemovals: true
        });
        return function(t3, e2, n2, s2) {
          const i2 = n2.batch, r = i2.keys();
          let o = Rt.resolve();
          return r.forEach((t4) => {
            o = o.next(() => s2.getEntry(e2, t4)).next((e3) => {
              const r2 = n2.docVersions.get(t4);
              F(null !== r2), e3.version.compareTo(r2) < 0 && (i2.applyToRemoteDocument(e3, n2), e3.isValidDocument() && // We use the commitVersion as the readTime rather than the
              // document's updateTime since the updateTime is not advanced
              // for updates that do not modify the underlying document.
              (e3.setReadTime(n2.commitVersion), s2.addEntry(e3)));
            });
          }), o.next(() => t3.mutationQueue.removeMutationBatch(e2, i2));
        }(n, t2, e, i).next(() => i.apply(t2)).next(() => n.mutationQueue.performConsistencyCheck(t2)).next(() => n.documentOverlayCache.removeOverlaysForBatchId(t2, s, e.batch.batchId)).next(() => n.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(t2, function(t3) {
          let e2 = gs();
          for (let n2 = 0; n2 < t3.mutationResults.length; ++n2) {
            t3.mutationResults[n2].transformResults.length > 0 && (e2 = e2.add(t3.batch.mutations[n2].key));
          }
          return e2;
        }(e))).next(() => n.localDocuments.getDocuments(t2, s));
      });
    }
    function ou(t) {
      const e = L(t);
      return e.persistence.runTransaction("Get last remote snapshot version", "readonly", (t2) => e.Bs.getLastRemoteSnapshotVersion(t2));
    }
    function uu(t, e) {
      const n = L(t), s = e.snapshotVersion;
      let i = n.Ji;
      return n.persistence.runTransaction("Apply remote event", "readwrite-primary", (t2) => {
        const r = n.Zi.newChangeBuffer({
          trackRemovals: true
        });
        i = n.Ji;
        const o = [];
        e.targetChanges.forEach((r2, u2) => {
          const c2 = i.get(u2);
          if (!c2)
            return;
          o.push(n.Bs.removeMatchingKeys(t2, r2.removedDocuments, u2).next(() => n.Bs.addMatchingKeys(t2, r2.addedDocuments, u2)));
          let a = c2.withSequenceNumber(t2.currentSequenceNumber);
          null !== e.targetMismatches.get(u2) ? a = a.withResumeToken(Ve.EMPTY_BYTE_STRING, rt.min()).withLastLimboFreeSnapshotVersion(rt.min()) : r2.resumeToken.approximateByteSize() > 0 && (a = a.withResumeToken(r2.resumeToken, s)), i = i.insert(u2, a), // Update the target data if there are target changes (or if
          // sufficient time has passed since the last update).
          /**
          * Returns true if the newTargetData should be persisted during an update of
          * an active target. TargetData should always be persisted when a target is
          * being released and should not call this function.
          *
          * While the target is active, TargetData updates can be omitted when nothing
          * about the target has changed except metadata like the resume token or
          * snapshot version. Occasionally it's worth the extra write to prevent these
          * values from getting too stale after a crash, but this doesn't have to be
          * too frequent.
          */
          function(t3, e2, n2) {
            if (0 === t3.resumeToken.approximateByteSize())
              return true;
            if (e2.snapshotVersion.toMicroseconds() - t3.snapshotVersion.toMicroseconds() >= 3e8)
              return true;
            return n2.addedDocuments.size + n2.modifiedDocuments.size + n2.removedDocuments.size > 0;
          }(c2, a, r2) && o.push(n.Bs.updateTargetData(t2, a));
        });
        let u = cs(), c = gs();
        if (e.documentUpdates.forEach((s2) => {
          e.resolvedLimboDocuments.has(s2) && o.push(n.persistence.referenceDelegate.updateLimboDocument(t2, s2));
        }), // Each loop iteration only affects its "own" doc, so it's safe to get all
        // the remote documents in advance in a single call.
        o.push(cu(t2, r, e.documentUpdates).next((t3) => {
          u = t3.nr, c = t3.sr;
        })), !s.isEqual(rt.min())) {
          const e2 = n.Bs.getLastRemoteSnapshotVersion(t2).next((e3) => n.Bs.setTargetsMetadata(t2, t2.currentSequenceNumber, s));
          o.push(e2);
        }
        return Rt.waitFor(o).next(() => r.apply(t2)).next(() => n.localDocuments.getLocalViewOfDocuments(t2, u, c)).next(() => u);
      }).then((t2) => (n.Ji = i, t2));
    }
    function cu(t, e, n) {
      let s = gs(), i = gs();
      return n.forEach((t2) => s = s.add(t2)), e.getEntries(t, s).next((t2) => {
        let s2 = cs();
        return n.forEach((n2, r) => {
          const o = t2.get(n2);
          r.isFoundDocument() !== o.isFoundDocument() && (i = i.add(n2)), // Note: The order of the steps below is important, since we want
          // to ensure that rejected limbo resolutions (which fabricate
          // NoDocuments with SnapshotVersion.min()) never add documents to
          // cache.
          r.isNoDocument() && r.version.isEqual(rt.min()) ? (
            // NoDocuments with SnapshotVersion.min() are used in manufactured
            // events. We remove these documents from cache since we lost
            // access.
            (e.removeEntry(n2, r.readTime), s2 = s2.insert(n2, r))
          ) : !o.isValidDocument() || r.version.compareTo(o.version) > 0 || 0 === r.version.compareTo(o.version) && o.hasPendingWrites ? (e.addEntry(r), s2 = s2.insert(n2, r)) : N("LocalStore", "Ignoring outdated watch update for ", n2, ". Current version:", o.version, " Watch version:", r.version);
        }), {
          nr: s2,
          sr: i
        };
      });
    }
    function au(t, e) {
      const n = L(t);
      return n.persistence.runTransaction("Get next mutation batch", "readonly", (t2) => (void 0 === e && (e = -1), n.mutationQueue.getNextMutationBatchAfterBatchId(t2, e)));
    }
    function hu(t, e) {
      const n = L(t);
      return n.persistence.runTransaction("Allocate target", "readwrite", (t2) => {
        let s;
        return n.Bs.getTargetData(t2, e).next((i) => i ? (
          // This target has been listened to previously, so reuse the
          // previous targetID.
          // TODO(mcg): freshen last accessed date?
          (s = i, Rt.resolve(s))
        ) : n.Bs.allocateTargetId(t2).next((i2) => (s = new cr(e, i2, "TargetPurposeListen", t2.currentSequenceNumber), n.Bs.addTargetData(t2, s).next(() => s))));
      }).then((t2) => {
        const s = n.Ji.get(t2.targetId);
        return (null === s || t2.snapshotVersion.compareTo(s.snapshotVersion) > 0) && (n.Ji = n.Ji.insert(t2.targetId, t2), n.Yi.set(e, t2.targetId)), t2;
      });
    }
    async function lu(t, e, n) {
      const s = L(t), i = s.Ji.get(e), r = n ? "readwrite" : "readwrite-primary";
      try {
        n || await s.persistence.runTransaction("Release target", r, (t2) => s.persistence.referenceDelegate.removeTarget(t2, i));
      } catch (t2) {
        if (!Dt(t2))
          throw t2;
        N("LocalStore", `Failed to update sequence numbers for target ${e}: ${t2}`);
      }
      s.Ji = s.Ji.remove(e), s.Yi.delete(i.target);
    }
    function fu(t, e, n) {
      const s = L(t);
      let i = rt.min(), r = gs();
      return s.persistence.runTransaction("Execute query", "readonly", (t2) => function(t3, e2, n2) {
        const s2 = L(t3), i2 = s2.Yi.get(n2);
        return void 0 !== i2 ? Rt.resolve(s2.Ji.get(i2)) : s2.Bs.getTargetData(e2, n2);
      }(s, t2, Jn(e)).next((e2) => {
        if (e2)
          return i = e2.lastLimboFreeSnapshotVersion, s.Bs.getMatchingKeysForTargetId(t2, e2.targetId).next((t3) => {
            r = t3;
          });
      }).next(() => s.Hi.getDocumentsMatchingQuery(t2, e, n ? i : rt.min(), n ? r : gs())).next((t3) => (_u(s, ss(e), t3), {
        documents: t3,
        ir: r
      })));
    }
    function du(t, e) {
      const n = L(t), s = L(n.Bs), i = n.Ji.get(e);
      return i ? Promise.resolve(i.target) : n.persistence.runTransaction("Get target data", "readonly", (t2) => s.le(t2, e).next((t3) => t3 ? t3.target : null));
    }
    function wu(t, e) {
      const n = L(t), s = n.Xi.get(e) || rt.min();
      return n.persistence.runTransaction("Get new document changes", "readonly", (t2) => n.Zi.getAllFromCollectionGroup(
        t2,
        e,
        yt(s, -1),
        /* limit= */
        Number.MAX_SAFE_INTEGER
      )).then((t2) => (_u(n, e, t2), t2));
    }
    function _u(t, e, n) {
      let s = t.Xi.get(e) || rt.min();
      n.forEach((t2, e2) => {
        e2.readTime.compareTo(s) > 0 && (s = e2.readTime);
      }), t.Xi.set(e, s);
    }
    async function mu(t, e, n, s) {
      const i = L(t);
      let r = gs(), o = cs();
      for (const t2 of n) {
        const n2 = e.rr(t2.metadata.name);
        t2.document && (r = r.add(n2));
        const s2 = e.ur(t2);
        s2.setReadTime(e.cr(t2.metadata.readTime)), o = o.insert(n2, s2);
      }
      const u = i.Zi.newChangeBuffer({
        trackRemovals: true
      }), c = await hu(i, function(t2) {
        return Jn(Gn(ut.fromString(`__bundle__/docs/${t2}`)));
      }(s));
      return i.persistence.runTransaction("Apply bundle documents", "readwrite", (t2) => cu(t2, u, o).next((e2) => (u.apply(t2), e2)).next((e2) => i.Bs.removeMatchingKeysForTargetId(t2, c.targetId).next(() => i.Bs.addMatchingKeys(t2, r, c.targetId)).next(() => i.localDocuments.getLocalViewOfDocuments(t2, e2.nr, e2.sr)).next(() => e2.nr)));
    }
    async function gu(t, e, n = gs()) {
      const s = await hu(t, Jn(yr(e.bundledQuery))), i = L(t);
      return i.persistence.runTransaction("Save named query", "readwrite", (t2) => {
        const r = Ni(e.readTime);
        if (s.snapshotVersion.compareTo(r) >= 0)
          return i.qs.saveNamedQuery(t2, e);
        const o = s.withResumeToken(Ve.EMPTY_BYTE_STRING, r);
        return i.Ji = i.Ji.insert(o.targetId, o), i.Bs.updateTargetData(t2, o).next(() => i.Bs.removeMatchingKeysForTargetId(t2, s.targetId)).next(() => i.Bs.addMatchingKeys(t2, n, s.targetId)).next(() => i.qs.saveNamedQuery(t2, e));
      });
    }
    function yu(t, e) {
      return `firestore_clients_${t}_${e}`;
    }
    function pu(t, e, n) {
      let s = `firestore_mutations_${t}_${n}`;
      return e.isAuthenticated() && (s += `_${e.uid}`), s;
    }
    function Iu(t, e) {
      return `firestore_targets_${t}_${e}`;
    }
    var Tu = class _Tu {
      constructor(t, e, n, s) {
        this.user = t, this.batchId = e, this.state = n, this.error = s;
      }
      /**
       * Parses a MutationMetadata from its JSON representation in WebStorage.
       * Logs a warning and returns null if the format of the data is not valid.
       */
      static ar(t, e, n) {
        const s = JSON.parse(n);
        let i, r = "object" == typeof s && -1 !== ["pending", "acknowledged", "rejected"].indexOf(s.state) && (void 0 === s.error || "object" == typeof s.error);
        return r && s.error && (r = "string" == typeof s.error.message && "string" == typeof s.error.code, r && (i = new U(s.error.code, s.error.message))), r ? new _Tu(t, e, s.state, i) : (k("SharedClientState", `Failed to parse mutation state for ID '${e}': ${n}`), null);
      }
      hr() {
        const t = {
          state: this.state,
          updateTimeMs: Date.now()
        };
        return this.error && (t.error = {
          code: this.error.code,
          message: this.error.message
        }), JSON.stringify(t);
      }
    };
    var Eu = class _Eu {
      constructor(t, e, n) {
        this.targetId = t, this.state = e, this.error = n;
      }
      /**
       * Parses a QueryTargetMetadata from its JSON representation in WebStorage.
       * Logs a warning and returns null if the format of the data is not valid.
       */
      static ar(t, e) {
        const n = JSON.parse(e);
        let s, i = "object" == typeof n && -1 !== ["not-current", "current", "rejected"].indexOf(n.state) && (void 0 === n.error || "object" == typeof n.error);
        return i && n.error && (i = "string" == typeof n.error.message && "string" == typeof n.error.code, i && (s = new U(n.error.code, n.error.message))), i ? new _Eu(t, n.state, s) : (k("SharedClientState", `Failed to parse target state for ID '${t}': ${e}`), null);
      }
      hr() {
        const t = {
          state: this.state,
          updateTimeMs: Date.now()
        };
        return this.error && (t.error = {
          code: this.error.code,
          message: this.error.message
        }), JSON.stringify(t);
      }
    };
    var Au = class _Au {
      constructor(t, e) {
        this.clientId = t, this.activeTargetIds = e;
      }
      /**
       * Parses a RemoteClientState from the JSON representation in WebStorage.
       * Logs a warning and returns null if the format of the data is not valid.
       */
      static ar(t, e) {
        const n = JSON.parse(e);
        let s = "object" == typeof n && n.activeTargetIds instanceof Array, i = ps();
        for (let t2 = 0; s && t2 < n.activeTargetIds.length; ++t2)
          s = Lt(n.activeTargetIds[t2]), i = i.add(n.activeTargetIds[t2]);
        return s ? new _Au(t, i) : (k("SharedClientState", `Failed to parse client data for instance '${t}': ${e}`), null);
      }
    };
    var vu = class _vu {
      constructor(t, e) {
        this.clientId = t, this.onlineState = e;
      }
      /**
       * Parses a SharedOnlineState from its JSON representation in WebStorage.
       * Logs a warning and returns null if the format of the data is not valid.
       */
      static ar(t) {
        const e = JSON.parse(t);
        return "object" == typeof e && -1 !== ["Unknown", "Online", "Offline"].indexOf(e.onlineState) && "string" == typeof e.clientId ? new _vu(e.clientId, e.onlineState) : (k("SharedClientState", `Failed to parse online state: ${t}`), null);
      }
    };
    var Ru = class {
      constructor() {
        this.activeTargetIds = ps();
      }
      lr(t) {
        this.activeTargetIds = this.activeTargetIds.add(t);
      }
      dr(t) {
        this.activeTargetIds = this.activeTargetIds.delete(t);
      }
      /**
       * Converts this entry into a JSON-encoded format we can use for WebStorage.
       * Does not encode `clientId` as it is part of the key in WebStorage.
       */
      hr() {
        const t = {
          activeTargetIds: this.activeTargetIds.toArray(),
          updateTimeMs: Date.now()
        };
        return JSON.stringify(t);
      }
    };
    var Pu = class {
      constructor(t, e, n, s, i) {
        this.window = t, this.ii = e, this.persistenceKey = n, this.wr = s, this.syncEngine = null, this.onlineStateHandler = null, this.sequenceNumberHandler = null, this._r = this.mr.bind(this), this.gr = new pe(et), this.started = false, /**
         * Captures WebStorage events that occur before `start()` is called. These
         * events are replayed once `WebStorageSharedClientState` is started.
         */
        this.yr = [];
        const r = n.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
        this.storage = this.window.localStorage, this.currentUser = i, this.pr = yu(this.persistenceKey, this.wr), this.Ir = /** Assembles the key for the current sequence number. */
        function(t2) {
          return `firestore_sequence_number_${t2}`;
        }(this.persistenceKey), this.gr = this.gr.insert(this.wr, new Ru()), this.Tr = new RegExp(`^firestore_clients_${r}_([^_]*)$`), this.Er = new RegExp(`^firestore_mutations_${r}_(\\d+)(?:_(.*))?$`), this.Ar = new RegExp(`^firestore_targets_${r}_(\\d+)$`), this.vr = /** Assembles the key for the online state of the primary tab. */
        function(t2) {
          return `firestore_online_state_${t2}`;
        }(this.persistenceKey), this.Rr = function(t2) {
          return `firestore_bundle_loaded_v2_${t2}`;
        }(this.persistenceKey), // Rather than adding the storage observer during start(), we add the
        // storage observer during initialization. This ensures that we collect
        // events before other components populate their initial state (during their
        // respective start() calls). Otherwise, we might for example miss a
        // mutation that is added after LocalStore's start() processed the existing
        // mutations but before we observe WebStorage events.
        this.window.addEventListener("storage", this._r);
      }
      /** Returns 'true' if WebStorage is available in the current environment. */
      static D(t) {
        return !(!t || !t.localStorage);
      }
      async start() {
        const t = await this.syncEngine.$i();
        for (const e2 of t) {
          if (e2 === this.wr)
            continue;
          const t2 = this.getItem(yu(this.persistenceKey, e2));
          if (t2) {
            const n = Au.ar(e2, t2);
            n && (this.gr = this.gr.insert(n.clientId, n));
          }
        }
        this.Pr();
        const e = this.storage.getItem(this.vr);
        if (e) {
          const t2 = this.br(e);
          t2 && this.Vr(t2);
        }
        for (const t2 of this.yr)
          this.mr(t2);
        this.yr = [], // Register a window unload hook to remove the client metadata entry from
        // WebStorage even if `shutdown()` was not called.
        this.window.addEventListener("pagehide", () => this.shutdown()), this.started = true;
      }
      writeSequenceNumber(t) {
        this.setItem(this.Ir, JSON.stringify(t));
      }
      getAllActiveQueryTargets() {
        return this.Sr(this.gr);
      }
      isActiveQueryTarget(t) {
        let e = false;
        return this.gr.forEach((n, s) => {
          s.activeTargetIds.has(t) && (e = true);
        }), e;
      }
      addPendingMutation(t) {
        this.Dr(t, "pending");
      }
      updateMutationState(t, e, n) {
        this.Dr(t, e, n), // Once a final mutation result is observed by other clients, they no longer
        // access the mutation's metadata entry. Since WebStorage replays events
        // in order, it is safe to delete the entry right after updating it.
        this.Cr(t);
      }
      addLocalQueryTarget(t) {
        let e = "not-current";
        if (this.isActiveQueryTarget(t)) {
          const n = this.storage.getItem(Iu(this.persistenceKey, t));
          if (n) {
            const s = Eu.ar(t, n);
            s && (e = s.state);
          }
        }
        return this.Nr.lr(t), this.Pr(), e;
      }
      removeLocalQueryTarget(t) {
        this.Nr.dr(t), this.Pr();
      }
      isLocalQueryTarget(t) {
        return this.Nr.activeTargetIds.has(t);
      }
      clearQueryState(t) {
        this.removeItem(Iu(this.persistenceKey, t));
      }
      updateQueryState(t, e, n) {
        this.kr(t, e, n);
      }
      handleUserChange(t, e, n) {
        e.forEach((t2) => {
          this.Cr(t2);
        }), this.currentUser = t, n.forEach((t2) => {
          this.addPendingMutation(t2);
        });
      }
      setOnlineState(t) {
        this.Mr(t);
      }
      notifyBundleLoaded(t) {
        this.$r(t);
      }
      shutdown() {
        this.started && (this.window.removeEventListener("storage", this._r), this.removeItem(this.pr), this.started = false);
      }
      getItem(t) {
        const e = this.storage.getItem(t);
        return N("SharedClientState", "READ", t, e), e;
      }
      setItem(t, e) {
        N("SharedClientState", "SET", t, e), this.storage.setItem(t, e);
      }
      removeItem(t) {
        N("SharedClientState", "REMOVE", t), this.storage.removeItem(t);
      }
      mr(t) {
        const e = t;
        if (e.storageArea === this.storage) {
          if (N("SharedClientState", "EVENT", e.key, e.newValue), e.key === this.pr)
            return void k("Received WebStorage notification for local change. Another client might have garbage-collected our state");
          this.ii.enqueueRetryable(async () => {
            if (this.started) {
              if (null !== e.key) {
                if (this.Tr.test(e.key)) {
                  if (null == e.newValue) {
                    const t2 = this.Or(e.key);
                    return this.Fr(t2, null);
                  }
                  {
                    const t2 = this.Br(e.key, e.newValue);
                    if (t2)
                      return this.Fr(t2.clientId, t2);
                  }
                } else if (this.Er.test(e.key)) {
                  if (null !== e.newValue) {
                    const t2 = this.Lr(e.key, e.newValue);
                    if (t2)
                      return this.qr(t2);
                  }
                } else if (this.Ar.test(e.key)) {
                  if (null !== e.newValue) {
                    const t2 = this.Ur(e.key, e.newValue);
                    if (t2)
                      return this.Kr(t2);
                  }
                } else if (e.key === this.vr) {
                  if (null !== e.newValue) {
                    const t2 = this.br(e.newValue);
                    if (t2)
                      return this.Vr(t2);
                  }
                } else if (e.key === this.Ir) {
                  const t2 = function(t3) {
                    let e2 = Ot.ct;
                    if (null != t3)
                      try {
                        const n = JSON.parse(t3);
                        F("number" == typeof n), e2 = n;
                      } catch (t4) {
                        k("SharedClientState", "Failed to read sequence number from WebStorage", t4);
                      }
                    return e2;
                  }(e.newValue);
                  t2 !== Ot.ct && this.sequenceNumberHandler(t2);
                } else if (e.key === this.Rr) {
                  const t2 = this.Gr(e.newValue);
                  await Promise.all(t2.map((t3) => this.syncEngine.Qr(t3)));
                }
              }
            } else
              this.yr.push(e);
          });
        }
      }
      get Nr() {
        return this.gr.get(this.wr);
      }
      Pr() {
        this.setItem(this.pr, this.Nr.hr());
      }
      Dr(t, e, n) {
        const s = new Tu(this.currentUser, t, e, n), i = pu(this.persistenceKey, this.currentUser, t);
        this.setItem(i, s.hr());
      }
      Cr(t) {
        const e = pu(this.persistenceKey, this.currentUser, t);
        this.removeItem(e);
      }
      Mr(t) {
        const e = {
          clientId: this.wr,
          onlineState: t
        };
        this.storage.setItem(this.vr, JSON.stringify(e));
      }
      kr(t, e, n) {
        const s = Iu(this.persistenceKey, t), i = new Eu(t, e, n);
        this.setItem(s, i.hr());
      }
      $r(t) {
        const e = JSON.stringify(Array.from(t));
        this.setItem(this.Rr, e);
      }
      /**
       * Parses a client state key in WebStorage. Returns null if the key does not
       * match the expected key format.
       */
      Or(t) {
        const e = this.Tr.exec(t);
        return e ? e[1] : null;
      }
      /**
       * Parses a client state in WebStorage. Returns 'null' if the value could not
       * be parsed.
       */
      Br(t, e) {
        const n = this.Or(t);
        return Au.ar(n, e);
      }
      /**
       * Parses a mutation batch state in WebStorage. Returns 'null' if the value
       * could not be parsed.
       */
      Lr(t, e) {
        const n = this.Er.exec(t), s = Number(n[1]), i = void 0 !== n[2] ? n[2] : null;
        return Tu.ar(new V(i), s, e);
      }
      /**
       * Parses a query target state from WebStorage. Returns 'null' if the value
       * could not be parsed.
       */
      Ur(t, e) {
        const n = this.Ar.exec(t), s = Number(n[1]);
        return Eu.ar(s, e);
      }
      /**
       * Parses an online state from WebStorage. Returns 'null' if the value
       * could not be parsed.
       */
      br(t) {
        return vu.ar(t);
      }
      Gr(t) {
        return JSON.parse(t);
      }
      async qr(t) {
        if (t.user.uid === this.currentUser.uid)
          return this.syncEngine.jr(t.batchId, t.state, t.error);
        N("SharedClientState", `Ignoring mutation for non-active user ${t.user.uid}`);
      }
      Kr(t) {
        return this.syncEngine.zr(t.targetId, t.state, t.error);
      }
      Fr(t, e) {
        const n = e ? this.gr.insert(t, e) : this.gr.remove(t), s = this.Sr(this.gr), i = this.Sr(n), r = [], o = [];
        return i.forEach((t2) => {
          s.has(t2) || r.push(t2);
        }), s.forEach((t2) => {
          i.has(t2) || o.push(t2);
        }), this.syncEngine.Wr(r, o).then(() => {
          this.gr = n;
        });
      }
      Vr(t) {
        this.gr.get(t.clientId) && this.onlineStateHandler(t.onlineState);
      }
      Sr(t) {
        let e = ps();
        return t.forEach((t2, n) => {
          e = e.unionWith(n.activeTargetIds);
        }), e;
      }
    };
    var bu = class {
      constructor() {
        this.Hr = new Ru(), this.Jr = {}, this.onlineStateHandler = null, this.sequenceNumberHandler = null;
      }
      addPendingMutation(t) {
      }
      updateMutationState(t, e, n) {
      }
      addLocalQueryTarget(t) {
        return this.Hr.lr(t), this.Jr[t] || "not-current";
      }
      updateQueryState(t, e, n) {
        this.Jr[t] = e;
      }
      removeLocalQueryTarget(t) {
        this.Hr.dr(t);
      }
      isLocalQueryTarget(t) {
        return this.Hr.activeTargetIds.has(t);
      }
      clearQueryState(t) {
        delete this.Jr[t];
      }
      getAllActiveQueryTargets() {
        return this.Hr.activeTargetIds;
      }
      isActiveQueryTarget(t) {
        return this.Hr.activeTargetIds.has(t);
      }
      start() {
        return this.Hr = new Ru(), Promise.resolve();
      }
      handleUserChange(t, e, n) {
      }
      setOnlineState(t) {
      }
      shutdown() {
      }
      writeSequenceNumber(t) {
      }
      notifyBundleLoaded(t) {
      }
    };
    var Vu = class {
      Yr(t) {
      }
      shutdown() {
      }
    };
    var Su = class {
      constructor() {
        this.Xr = () => this.Zr(), this.eo = () => this.no(), this.so = [], this.io();
      }
      Yr(t) {
        this.so.push(t);
      }
      shutdown() {
        window.removeEventListener("online", this.Xr), window.removeEventListener("offline", this.eo);
      }
      io() {
        window.addEventListener("online", this.Xr), window.addEventListener("offline", this.eo);
      }
      Zr() {
        N("ConnectivityMonitor", "Network connectivity changed: AVAILABLE");
        for (const t of this.so)
          t(
            0
            /* NetworkStatus.AVAILABLE */
          );
      }
      no() {
        N("ConnectivityMonitor", "Network connectivity changed: UNAVAILABLE");
        for (const t of this.so)
          t(
            1
            /* NetworkStatus.UNAVAILABLE */
          );
      }
      // TODO(chenbrian): Consider passing in window either into this component or
      // here for testing via FakeWindow.
      /** Checks that all used attributes of window are available. */
      static D() {
        return "undefined" != typeof window && void 0 !== window.addEventListener && void 0 !== window.removeEventListener;
      }
    };
    var Du = null;
    function Cu() {
      return null === Du ? Du = 268435456 + Math.round(2147483648 * Math.random()) : Du++, "0x" + Du.toString(16);
    }
    var xu = {
      BatchGetDocuments: "batchGet",
      Commit: "commit",
      RunQuery: "runQuery",
      RunAggregationQuery: "runAggregationQuery"
    };
    var Nu = class {
      constructor(t) {
        this.ro = t.ro, this.oo = t.oo;
      }
      uo(t) {
        this.co = t;
      }
      ao(t) {
        this.ho = t;
      }
      onMessage(t) {
        this.lo = t;
      }
      close() {
        this.oo();
      }
      send(t) {
        this.ro(t);
      }
      fo() {
        this.co();
      }
      wo(t) {
        this.ho(t);
      }
      _o(t) {
        this.lo(t);
      }
    };
    var ku = "WebChannelConnection";
    var Mu = class extends /**
     * Base class for all Rest-based connections to the backend (WebChannel and
     * HTTP).
     */
    class {
      constructor(t) {
        this.databaseInfo = t, this.databaseId = t.databaseId;
        const e = t.ssl ? "https" : "http";
        this.mo = e + "://" + t.host, this.yo = "projects/" + this.databaseId.projectId + "/databases/" + this.databaseId.database + "/documents";
      }
      get po() {
        return false;
      }
      Io(t, e, n, s, i) {
        const r = Cu(), o = this.To(t, e);
        N("RestConnection", `Sending RPC '${t}' ${r}:`, o, n);
        const u = {};
        return this.Eo(u, s, i), this.Ao(t, o, u, n).then((e2) => (N("RestConnection", `Received RPC '${t}' ${r}: `, e2), e2), (e2) => {
          throw M("RestConnection", `RPC '${t}' ${r} failed with error: `, e2, "url: ", o, "request:", n), e2;
        });
      }
      vo(t, e, n, s, i, r) {
        return this.Io(t, e, n, s, i);
      }
      /**
       * Modifies the headers for a request, adding any authorization token if
       * present and any additional headers for the request.
       */
      Eo(t, e, n) {
        t["X-Goog-Api-Client"] = "gl-js/ fire/" + S, // Content-Type: text/plain will avoid preflight requests which might
        // mess with CORS and redirects by proxies. If we add custom headers
        // we will need to change this code to potentially use the $httpOverwrite
        // parameter supported by ESF to avoid triggering preflight requests.
        t["Content-Type"] = "text/plain", this.databaseInfo.appId && (t["X-Firebase-GMPID"] = this.databaseInfo.appId), e && e.headers.forEach((e2, n2) => t[n2] = e2), n && n.headers.forEach((e2, n2) => t[n2] = e2);
      }
      To(t, e) {
        const n = xu[t];
        return `${this.mo}/v1/${e}:${n}`;
      }
    } {
      constructor(t) {
        super(t), this.forceLongPolling = t.forceLongPolling, this.autoDetectLongPolling = t.autoDetectLongPolling, this.useFetchStreams = t.useFetchStreams, this.longPollingOptions = t.longPollingOptions;
      }
      Ao(t, e, n, s) {
        const i = Cu();
        return new Promise((r, o) => {
          const u = new webchannelWrapper.XhrIo();
          u.setWithCredentials(true), u.listenOnce(webchannelWrapper.EventType.COMPLETE, () => {
            try {
              switch (u.getLastErrorCode()) {
                case webchannelWrapper.ErrorCode.NO_ERROR:
                  const e2 = u.getResponseJson();
                  N(ku, `XHR for RPC '${t}' ${i} received:`, JSON.stringify(e2)), r(e2);
                  break;
                case webchannelWrapper.ErrorCode.TIMEOUT:
                  N(ku, `RPC '${t}' ${i} timed out`), o(new U(q.DEADLINE_EXCEEDED, "Request time out"));
                  break;
                case webchannelWrapper.ErrorCode.HTTP_ERROR:
                  const n2 = u.getStatus();
                  if (N(ku, `RPC '${t}' ${i} failed with status:`, n2, "response text:", u.getResponseText()), n2 > 0) {
                    let t2 = u.getResponseJson();
                    Array.isArray(t2) && (t2 = t2[0]);
                    const e3 = null == t2 ? void 0 : t2.error;
                    if (e3 && e3.status && e3.message) {
                      const t3 = function(t4) {
                        const e4 = t4.toLowerCase().replace(/_/g, "-");
                        return Object.values(q).indexOf(e4) >= 0 ? e4 : q.UNKNOWN;
                      }(e3.status);
                      o(new U(t3, e3.message));
                    } else
                      o(new U(q.UNKNOWN, "Server responded with status " + u.getStatus()));
                  } else
                    o(new U(q.UNAVAILABLE, "Connection failed."));
                  break;
                default:
                  O();
              }
            } finally {
              N(ku, `RPC '${t}' ${i} completed.`);
            }
          });
          const c = JSON.stringify(s);
          N(ku, `RPC '${t}' ${i} sending request:`, s), u.send(e, "POST", c, n, 15);
        });
      }
      Ro(t, e, n) {
        const s = Cu(), i = [this.mo, "/", "google.firestore.v1.Firestore", "/", t, "/channel"], r = webchannelWrapper.createWebChannelTransport(), o = webchannelWrapper.getStatEventTarget(), u = {
          // Required for backend stickiness, routing behavior is based on this
          // parameter.
          httpSessionIdParam: "gsessionid",
          initMessageHeaders: {},
          messageUrlParams: {
            // This param is used to improve routing and project isolation by the
            // backend and must be included in every request.
            database: `projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`
          },
          sendRawJson: true,
          supportsCrossDomainXhr: true,
          internalChannelParams: {
            // Override the default timeout (randomized between 10-20 seconds) since
            // a large write batch on a slow internet connection may take a long
            // time to send to the backend. Rather than have WebChannel impose a
            // tight timeout which could lead to infinite timeouts and retries, we
            // set it very large (5-10 minutes) and rely on the browser's builtin
            // timeouts to kick in if the request isn't working.
            forwardChannelRequestTimeoutMs: 6e5
          },
          forceLongPolling: this.forceLongPolling,
          detectBufferingProxy: this.autoDetectLongPolling
        }, c = this.longPollingOptions.timeoutSeconds;
        void 0 !== c && (u.longPollingTimeout = Math.round(1e3 * c)), this.useFetchStreams && (u.xmlHttpFactory = new webchannelWrapper.FetchXmlHttpFactory({})), this.Eo(u.initMessageHeaders, e, n), // Sending the custom headers we just added to request.initMessageHeaders
        // (Authorization, etc.) will trigger the browser to make a CORS preflight
        // request because the XHR will no longer meet the criteria for a "simple"
        // CORS request:
        // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
        // Therefore to avoid the CORS preflight request (an extra network
        // roundtrip), we use the encodeInitMessageHeaders option to specify that
        // the headers should instead be encoded in the request's POST payload,
        // which is recognized by the webchannel backend.
        u.encodeInitMessageHeaders = true;
        const a = i.join("");
        N(ku, `Creating RPC '${t}' stream ${s}: ${a}`, u);
        const h = r.createWebChannel(a, u);
        let l = false, f = false;
        const d = new Nu({
          ro: (e2) => {
            f ? N(ku, `Not sending because RPC '${t}' stream ${s} is closed:`, e2) : (l || (N(ku, `Opening RPC '${t}' stream ${s} transport.`), h.open(), l = true), N(ku, `RPC '${t}' stream ${s} sending:`, e2), h.send(e2));
          },
          oo: () => h.close()
        }), w = (t2, e2, n2) => {
          t2.listen(e2, (t3) => {
            try {
              n2(t3);
            } catch (t4) {
              setTimeout(() => {
                throw t4;
              }, 0);
            }
          });
        };
        return w(h, webchannelWrapper.WebChannel.EventType.OPEN, () => {
          f || N(ku, `RPC '${t}' stream ${s} transport opened.`);
        }), w(h, webchannelWrapper.WebChannel.EventType.CLOSE, () => {
          f || (f = true, N(ku, `RPC '${t}' stream ${s} transport closed`), d.wo());
        }), w(h, webchannelWrapper.WebChannel.EventType.ERROR, (e2) => {
          f || (f = true, M(ku, `RPC '${t}' stream ${s} transport errored:`, e2), d.wo(new U(q.UNAVAILABLE, "The operation could not be completed")));
        }), w(h, webchannelWrapper.WebChannel.EventType.MESSAGE, (e2) => {
          var n2;
          if (!f) {
            const i2 = e2.data[0];
            F(!!i2);
            const r2 = i2, o2 = r2.error || (null === (n2 = r2[0]) || void 0 === n2 ? void 0 : n2.error);
            if (o2) {
              N(ku, `RPC '${t}' stream ${s} received error:`, o2);
              const e3 = o2.status;
              let n3 = (
                /**
                * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.
                *
                * @returns The Code equivalent to the given status string or undefined if
                *     there is no match.
                */
                function(t2) {
                  const e4 = ii[t2];
                  if (void 0 !== e4)
                    return ui(e4);
                }(e3)
              ), i3 = o2.message;
              void 0 === n3 && (n3 = q.INTERNAL, i3 = "Unknown error status: " + e3 + " with message " + o2.message), // Mark closed so no further events are propagated
              f = true, d.wo(new U(n3, i3)), h.close();
            } else
              N(ku, `RPC '${t}' stream ${s} received:`, i2), d._o(i2);
          }
        }), w(o, webchannelWrapper.Event.STAT_EVENT, (e2) => {
          e2.stat === webchannelWrapper.Stat.PROXY ? N(ku, `RPC '${t}' stream ${s} detected buffering proxy`) : e2.stat === webchannelWrapper.Stat.NOPROXY && N(ku, `RPC '${t}' stream ${s} detected no buffering proxy`);
        }), setTimeout(() => {
          d.fo();
        }, 0), d;
      }
    };
    function $u() {
      return "undefined" != typeof window ? window : null;
    }
    function Ou() {
      return "undefined" != typeof document ? document : null;
    }
    function Fu(t) {
      return new Vi(
        t,
        /* useProto3Json= */
        true
      );
    }
    var Bu = class {
      constructor(t, e, n = 1e3, s = 1.5, i = 6e4) {
        this.ii = t, this.timerId = e, this.Po = n, this.bo = s, this.Vo = i, this.So = 0, this.Do = null, /** The last backoff attempt, as epoch milliseconds. */
        this.Co = Date.now(), this.reset();
      }
      /**
       * Resets the backoff delay.
       *
       * The very next backoffAndWait() will have no delay. If it is called again
       * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
       * subsequent ones will increase according to the backoffFactor.
       */
      reset() {
        this.So = 0;
      }
      /**
       * Resets the backoff delay to the maximum delay (e.g. for use after a
       * RESOURCE_EXHAUSTED error).
       */
      xo() {
        this.So = this.Vo;
      }
      /**
       * Returns a promise that resolves after currentDelayMs, and increases the
       * delay for any subsequent attempts. If there was a pending backoff operation
       * already, it will be canceled.
       */
      No(t) {
        this.cancel();
        const e = Math.floor(this.So + this.ko()), n = Math.max(0, Date.now() - this.Co), s = Math.max(0, e - n);
        s > 0 && N("ExponentialBackoff", `Backing off for ${s} ms (base delay: ${this.So} ms, delay with jitter: ${e} ms, last attempt: ${n} ms ago)`), this.Do = this.ii.enqueueAfterDelay(this.timerId, s, () => (this.Co = Date.now(), t())), // Apply backoff factor to determine next delay and ensure it is within
        // bounds.
        this.So *= this.bo, this.So < this.Po && (this.So = this.Po), this.So > this.Vo && (this.So = this.Vo);
      }
      Mo() {
        null !== this.Do && (this.Do.skipDelay(), this.Do = null);
      }
      cancel() {
        null !== this.Do && (this.Do.cancel(), this.Do = null);
      }
      /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */
      ko() {
        return (Math.random() - 0.5) * this.So;
      }
    };
    var Lu = class {
      constructor(t, e, n, s, i, r, o, u) {
        this.ii = t, this.$o = n, this.Oo = s, this.connection = i, this.authCredentialsProvider = r, this.appCheckCredentialsProvider = o, this.listener = u, this.state = 0, /**
         * A close count that's incremented every time the stream is closed; used by
         * getCloseGuardedDispatcher() to invalidate callbacks that happen after
         * close.
         */
        this.Fo = 0, this.Bo = null, this.Lo = null, this.stream = null, this.qo = new Bu(t, e);
      }
      /**
       * Returns true if start() has been called and no error has occurred. True
       * indicates the stream is open or in the process of opening (which
       * encompasses respecting backoff, getting auth tokens, and starting the
       * actual RPC). Use isOpen() to determine if the stream is open and ready for
       * outbound requests.
       */
      Uo() {
        return 1 === this.state || 5 === this.state || this.Ko();
      }
      /**
       * Returns true if the underlying RPC is open (the onOpen() listener has been
       * called) and the stream is ready for outbound requests.
       */
      Ko() {
        return 2 === this.state || 3 === this.state;
      }
      /**
       * Starts the RPC. Only allowed if isStarted() returns false. The stream is
       * not immediately ready for use: onOpen() will be invoked when the RPC is
       * ready for outbound requests, at which point isOpen() will return true.
       *
       * When start returns, isStarted() will return true.
       */
      start() {
        4 !== this.state ? this.auth() : this.Go();
      }
      /**
       * Stops the RPC. This call is idempotent and allowed regardless of the
       * current isStarted() state.
       *
       * When stop returns, isStarted() and isOpen() will both return false.
       */
      async stop() {
        this.Uo() && await this.close(
          0
          /* PersistentStreamState.Initial */
        );
      }
      /**
       * After an error the stream will usually back off on the next attempt to
       * start it. If the error warrants an immediate restart of the stream, the
       * sender can use this to indicate that the receiver should not back off.
       *
       * Each error will call the onClose() listener. That function can decide to
       * inhibit backoff if required.
       */
      Qo() {
        this.state = 0, this.qo.reset();
      }
      /**
       * Marks this stream as idle. If no further actions are performed on the
       * stream for one minute, the stream will automatically close itself and
       * notify the stream's onClose() handler with Status.OK. The stream will then
       * be in a !isStarted() state, requiring the caller to start the stream again
       * before further use.
       *
       * Only streams that are in state 'Open' can be marked idle, as all other
       * states imply pending network operations.
       */
      jo() {
        this.Ko() && null === this.Bo && (this.Bo = this.ii.enqueueAfterDelay(this.$o, 6e4, () => this.zo()));
      }
      /** Sends a message to the underlying stream. */
      Wo(t) {
        this.Ho(), this.stream.send(t);
      }
      /** Called by the idle timer when the stream should close due to inactivity. */
      async zo() {
        if (this.Ko())
          return this.close(
            0
            /* PersistentStreamState.Initial */
          );
      }
      /** Marks the stream as active again. */
      Ho() {
        this.Bo && (this.Bo.cancel(), this.Bo = null);
      }
      /** Cancels the health check delayed operation. */
      Jo() {
        this.Lo && (this.Lo.cancel(), this.Lo = null);
      }
      /**
       * Closes the stream and cleans up as necessary:
       *
       * * closes the underlying GRPC stream;
       * * calls the onClose handler with the given 'error';
       * * sets internal stream state to 'finalState';
       * * adjusts the backoff timer based on the error
       *
       * A new stream can be opened by calling start().
       *
       * @param finalState - the intended state of the stream after closing.
       * @param error - the error the connection was closed with.
       */
      async close(t, e) {
        this.Ho(), this.Jo(), this.qo.cancel(), // Invalidates any stream-related callbacks (e.g. from auth or the
        // underlying stream), guaranteeing they won't execute.
        this.Fo++, 4 !== t ? (
          // If this is an intentional close ensure we don't delay our next connection attempt.
          this.qo.reset()
        ) : e && e.code === q.RESOURCE_EXHAUSTED ? (
          // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
          (k(e.toString()), k("Using maximum backoff delay to prevent overloading the backend."), this.qo.xo())
        ) : e && e.code === q.UNAUTHENTICATED && 3 !== this.state && // "unauthenticated" error means the token was rejected. This should rarely
        // happen since both Auth and AppCheck ensure a sufficient TTL when we
        // request a token. If a user manually resets their system clock this can
        // fail, however. In this case, we should get a Code.UNAUTHENTICATED error
        // before we received the first message and we need to invalidate the token
        // to ensure that we fetch a new token.
        (this.authCredentialsProvider.invalidateToken(), this.appCheckCredentialsProvider.invalidateToken()), // Clean up the underlying stream because we are no longer interested in events.
        null !== this.stream && (this.Yo(), this.stream.close(), this.stream = null), // This state must be assigned before calling onClose() to allow the callback to
        // inhibit backoff or otherwise manipulate the state in its non-started state.
        this.state = t, // Notify the listener that the stream closed.
        await this.listener.ao(e);
      }
      /**
       * Can be overridden to perform additional cleanup before the stream is closed.
       * Calling super.tearDown() is not required.
       */
      Yo() {
      }
      auth() {
        this.state = 1;
        const t = this.Xo(this.Fo), e = this.Fo;
        Promise.all([this.authCredentialsProvider.getToken(), this.appCheckCredentialsProvider.getToken()]).then(([t2, n]) => {
          this.Fo === e && // Normally we'd have to schedule the callback on the AsyncQueue.
          // However, the following calls are safe to be called outside the
          // AsyncQueue since they don't chain asynchronous calls
          this.Zo(t2, n);
        }, (e2) => {
          t(() => {
            const t2 = new U(q.UNKNOWN, "Fetching auth token failed: " + e2.message);
            return this.tu(t2);
          });
        });
      }
      Zo(t, e) {
        const n = this.Xo(this.Fo);
        this.stream = this.eu(t, e), this.stream.uo(() => {
          n(() => (this.state = 2, this.Lo = this.ii.enqueueAfterDelay(this.Oo, 1e4, () => (this.Ko() && (this.state = 3), Promise.resolve())), this.listener.uo()));
        }), this.stream.ao((t2) => {
          n(() => this.tu(t2));
        }), this.stream.onMessage((t2) => {
          n(() => this.onMessage(t2));
        });
      }
      Go() {
        this.state = 5, this.qo.No(async () => {
          this.state = 0, this.start();
        });
      }
      // Visible for tests
      tu(t) {
        return N("PersistentStream", `close with error: ${t}`), this.stream = null, this.close(4, t);
      }
      /**
       * Returns a "dispatcher" function that dispatches operations onto the
       * AsyncQueue but only runs them if closeCount remains unchanged. This allows
       * us to turn auth / stream callbacks into no-ops if the stream is closed /
       * re-opened, etc.
       */
      Xo(t) {
        return (e) => {
          this.ii.enqueueAndForget(() => this.Fo === t ? e() : (N("PersistentStream", "stream callback skipped by getCloseGuardedDispatcher."), Promise.resolve()));
        };
      }
    };
    var qu = class extends Lu {
      constructor(t, e, n, s, i, r) {
        super(t, "listen_stream_connection_backoff", "listen_stream_idle", "health_check_timeout", e, n, s, r), this.serializer = i;
      }
      eu(t, e) {
        return this.connection.Ro("Listen", t, e);
      }
      onMessage(t) {
        this.qo.reset();
        const e = Qi(this.serializer, t), n = function(t2) {
          if (!("targetChange" in t2))
            return rt.min();
          const e2 = t2.targetChange;
          return e2.targetIds && e2.targetIds.length ? rt.min() : e2.readTime ? Ni(e2.readTime) : rt.min();
        }(t);
        return this.listener.nu(e, n);
      }
      /**
       * Registers interest in the results of the given target. If the target
       * includes a resumeToken it will be included in the request. Results that
       * affect the target will be streamed back as WatchChange messages that
       * reference the targetId.
       */
      su(t) {
        const e = {};
        e.database = Li(this.serializer), e.addTarget = function(t2, e2) {
          let n2;
          const s = e2.target;
          if (n2 = Fn(s) ? {
            documents: Hi(t2, s)
          } : {
            query: Ji(t2, s)
          }, n2.targetId = e2.targetId, e2.resumeToken.approximateByteSize() > 0) {
            n2.resumeToken = Ci(t2, e2.resumeToken);
            const s2 = Si(t2, e2.expectedCount);
            null !== s2 && (n2.expectedCount = s2);
          } else if (e2.snapshotVersion.compareTo(rt.min()) > 0) {
            n2.readTime = Di(t2, e2.snapshotVersion.toTimestamp());
            const s2 = Si(t2, e2.expectedCount);
            null !== s2 && (n2.expectedCount = s2);
          }
          return n2;
        }(this.serializer, t);
        const n = Xi(this.serializer, t);
        n && (e.labels = n), this.Wo(e);
      }
      /**
       * Unregisters interest in the results of the target associated with the
       * given targetId.
       */
      iu(t) {
        const e = {};
        e.database = Li(this.serializer), e.removeTarget = t, this.Wo(e);
      }
    };
    var Uu = class extends Lu {
      constructor(t, e, n, s, i, r) {
        super(t, "write_stream_connection_backoff", "write_stream_idle", "health_check_timeout", e, n, s, r), this.serializer = i, this.ru = false;
      }
      /**
       * Tracks whether or not a handshake has been successfully exchanged and
       * the stream is ready to accept mutations.
       */
      get ou() {
        return this.ru;
      }
      // Override of PersistentStream.start
      start() {
        this.ru = false, this.lastStreamToken = void 0, super.start();
      }
      Yo() {
        this.ru && this.uu([]);
      }
      eu(t, e) {
        return this.connection.Ro("Write", t, e);
      }
      onMessage(t) {
        if (
          // Always capture the last stream token.
          F(!!t.streamToken), this.lastStreamToken = t.streamToken, this.ru
        ) {
          this.qo.reset();
          const e = Wi(t.writeResults, t.commitTime), n = Ni(t.commitTime);
          return this.listener.cu(n, e);
        }
        return F(!t.writeResults || 0 === t.writeResults.length), this.ru = true, this.listener.au();
      }
      /**
       * Sends an initial streamToken to the server, performing the handshake
       * required to make the StreamingWrite RPC work. Subsequent
       * calls should wait until onHandshakeComplete was called.
       */
      hu() {
        const t = {};
        t.database = Li(this.serializer), this.Wo(t);
      }
      /** Sends a group of mutations to the Firestore backend to apply. */
      uu(t) {
        const e = {
          streamToken: this.lastStreamToken,
          writes: t.map((t2) => ji(this.serializer, t2))
        };
        this.Wo(e);
      }
    };
    var Ku = class extends class {
    } {
      constructor(t, e, n, s) {
        super(), this.authCredentials = t, this.appCheckCredentials = e, this.connection = n, this.serializer = s, this.lu = false;
      }
      fu() {
        if (this.lu)
          throw new U(q.FAILED_PRECONDITION, "The client has already been terminated.");
      }
      /** Invokes the provided RPC with auth and AppCheck tokens. */
      Io(t, e, n) {
        return this.fu(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(([s, i]) => this.connection.Io(t, e, n, s, i)).catch((t2) => {
          throw "FirebaseError" === t2.name ? (t2.code === q.UNAUTHENTICATED && (this.authCredentials.invalidateToken(), this.appCheckCredentials.invalidateToken()), t2) : new U(q.UNKNOWN, t2.toString());
        });
      }
      /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */
      vo(t, e, n, s) {
        return this.fu(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(([i, r]) => this.connection.vo(t, e, n, i, r, s)).catch((t2) => {
          throw "FirebaseError" === t2.name ? (t2.code === q.UNAUTHENTICATED && (this.authCredentials.invalidateToken(), this.appCheckCredentials.invalidateToken()), t2) : new U(q.UNKNOWN, t2.toString());
        });
      }
      terminate() {
        this.lu = true;
      }
    };
    async function Gu(t, e, n) {
      var s;
      const i = L(t), { request: r, du: o } = function(t2, e2, n2) {
        const s2 = Ji(t2, e2), i2 = {}, r2 = [];
        let o2 = 0;
        return n2.forEach((t3) => {
          const e3 = "aggregate_" + o2++;
          i2[e3] = t3.alias, "count" === t3.yt ? r2.push({
            alias: e3,
            count: {}
          }) : "avg" === t3.yt ? r2.push({
            alias: e3,
            avg: {
              field: sr(t3.fieldPath)
            }
          }) : "sum" === t3.yt && r2.push({
            alias: e3,
            sum: {
              field: sr(t3.fieldPath)
            }
          });
        }), {
          request: {
            structuredAggregationQuery: {
              aggregations: r2,
              structuredQuery: s2.structuredQuery
            },
            parent: s2.parent
          },
          du: i2
        };
      }(i.serializer, Jn(e), n), u = r.parent;
      i.connection.po || delete r.parent;
      const c = (await i.vo(
        "RunAggregationQuery",
        u,
        r,
        /*expectedResponseCount=*/
        1
      )).filter((t2) => !!t2.result);
      F(1 === c.length);
      const a = null === (s = c[0].result) || void 0 === s ? void 0 : s.aggregateFields;
      return Object.keys(a).reduce((t2, e2) => (t2[o[e2]] = a[e2], t2), {});
    }
    var Qu = class {
      constructor(t, e) {
        this.asyncQueue = t, this.onlineStateHandler = e, /** The current OnlineState. */
        this.state = "Unknown", /**
         * A count of consecutive failures to open the stream. If it reaches the
         * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
         * Offline.
         */
        this.wu = 0, /**
         * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
         * transition from OnlineState.Unknown to OnlineState.Offline without waiting
         * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
         */
        this._u = null, /**
         * Whether the client should log a warning message if it fails to connect to
         * the backend (initially true, cleared after a successful stream, or if we've
         * logged the message already).
         */
        this.mu = true;
      }
      /**
       * Called by RemoteStore when a watch stream is started (including on each
       * backoff attempt).
       *
       * If this is the first attempt, it sets the OnlineState to Unknown and starts
       * the onlineStateTimer.
       */
      gu() {
        0 === this.wu && (this.yu(
          "Unknown"
          /* OnlineState.Unknown */
        ), this._u = this.asyncQueue.enqueueAfterDelay("online_state_timeout", 1e4, () => (this._u = null, this.pu("Backend didn't respond within 10 seconds."), this.yu(
          "Offline"
          /* OnlineState.Offline */
        ), Promise.resolve())));
      }
      /**
       * Updates our OnlineState as appropriate after the watch stream reports a
       * failure. The first failure moves us to the 'Unknown' state. We then may
       * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
       * actually transition to the 'Offline' state.
       */
      Iu(t) {
        "Online" === this.state ? this.yu(
          "Unknown"
          /* OnlineState.Unknown */
        ) : (this.wu++, this.wu >= 1 && (this.Tu(), this.pu(`Connection failed 1 times. Most recent error: ${t.toString()}`), this.yu(
          "Offline"
          /* OnlineState.Offline */
        )));
      }
      /**
       * Explicitly sets the OnlineState to the specified state.
       *
       * Note that this resets our timers / failure counters, etc. used by our
       * Offline heuristics, so must not be used in place of
       * handleWatchStreamStart() and handleWatchStreamFailure().
       */
      set(t) {
        this.Tu(), this.wu = 0, "Online" === t && // We've connected to watch at least once. Don't warn the developer
        // about being offline going forward.
        (this.mu = false), this.yu(t);
      }
      yu(t) {
        t !== this.state && (this.state = t, this.onlineStateHandler(t));
      }
      pu(t) {
        const e = `Could not reach Cloud Firestore backend. ${t}
This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;
        this.mu ? (k(e), this.mu = false) : N("OnlineStateTracker", e);
      }
      Tu() {
        null !== this._u && (this._u.cancel(), this._u = null);
      }
    };
    var ju = class {
      constructor(t, e, n, s, i) {
        this.localStore = t, this.datastore = e, this.asyncQueue = n, this.remoteSyncer = {}, /**
         * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
         * LocalStore via fillWritePipeline() and have or will send to the write
         * stream.
         *
         * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
         * restart the write stream. When the stream is established the writes in the
         * pipeline will be sent in order.
         *
         * Writes remain in writePipeline until they are acknowledged by the backend
         * and thus will automatically be re-sent if the stream is interrupted /
         * restarted before they're acknowledged.
         *
         * Write responses from the backend are linked to their originating request
         * purely based on order, and so we can just shift() writes from the front of
         * the writePipeline as we receive responses.
         */
        this.Eu = [], /**
         * A mapping of watched targets that the client cares about tracking and the
         * user has explicitly called a 'listen' for this target.
         *
         * These targets may or may not have been sent to or acknowledged by the
         * server. On re-establishing the listen stream, these targets should be sent
         * to the server. The targets removed with unlistens are removed eagerly
         * without waiting for confirmation from the listen stream.
         */
        this.Au = /* @__PURE__ */ new Map(), /**
         * A set of reasons for why the RemoteStore may be offline. If empty, the
         * RemoteStore may start its network connections.
         */
        this.vu = /* @__PURE__ */ new Set(), /**
         * Event handlers that get called when the network is disabled or enabled.
         *
         * PORTING NOTE: These functions are used on the Web client to create the
         * underlying streams (to support tree-shakeable streams). On Android and iOS,
         * the streams are created during construction of RemoteStore.
         */
        this.Ru = [], this.Pu = i, this.Pu.Yr((t2) => {
          n.enqueueAndForget(async () => {
            ec(this) && (N("RemoteStore", "Restarting streams for network reachability change."), await async function(t3) {
              const e2 = L(t3);
              e2.vu.add(
                4
                /* OfflineCause.ConnectivityChange */
              ), await Wu(e2), e2.bu.set(
                "Unknown"
                /* OnlineState.Unknown */
              ), e2.vu.delete(
                4
                /* OfflineCause.ConnectivityChange */
              ), await zu(e2);
            }(this));
          });
        }), this.bu = new Qu(n, s);
      }
    };
    async function zu(t) {
      if (ec(t))
        for (const e of t.Ru)
          await e(
            /* enabled= */
            true
          );
    }
    async function Wu(t) {
      for (const e of t.Ru)
        await e(
          /* enabled= */
          false
        );
    }
    function Hu(t, e) {
      const n = L(t);
      n.Au.has(e.targetId) || // Mark this as something the client is currently listening for.
      (n.Au.set(e.targetId, e), tc(n) ? (
        // The listen will be sent in onWatchStreamOpen
        Zu(n)
      ) : pc(n).Ko() && Yu(n, e));
    }
    function Ju(t, e) {
      const n = L(t), s = pc(n);
      n.Au.delete(e), s.Ko() && Xu(n, e), 0 === n.Au.size && (s.Ko() ? s.jo() : ec(n) && // Revert to OnlineState.Unknown if the watch stream is not open and we
      // have no listeners, since without any listens to send we cannot
      // confirm if the stream is healthy and upgrade to OnlineState.Online.
      n.bu.set(
        "Unknown"
        /* OnlineState.Unknown */
      ));
    }
    function Yu(t, e) {
      if (t.Vu.qt(e.targetId), e.resumeToken.approximateByteSize() > 0 || e.snapshotVersion.compareTo(rt.min()) > 0) {
        const n = t.remoteSyncer.getRemoteKeysForTarget(e.targetId).size;
        e = e.withExpectedCount(n);
      }
      pc(t).su(e);
    }
    function Xu(t, e) {
      t.Vu.qt(e), pc(t).iu(e);
    }
    function Zu(t) {
      t.Vu = new Ei({
        getRemoteKeysForTarget: (e) => t.remoteSyncer.getRemoteKeysForTarget(e),
        le: (e) => t.Au.get(e) || null,
        ue: () => t.datastore.serializer.databaseId
      }), pc(t).start(), t.bu.gu();
    }
    function tc(t) {
      return ec(t) && !pc(t).Uo() && t.Au.size > 0;
    }
    function ec(t) {
      return 0 === L(t).vu.size;
    }
    function nc(t) {
      t.Vu = void 0;
    }
    async function sc(t) {
      t.Au.forEach((e, n) => {
        Yu(t, e);
      });
    }
    async function ic(t, e) {
      nc(t), // If we still need the watch stream, retry the connection.
      tc(t) ? (t.bu.Iu(e), Zu(t)) : (
        // No need to restart watch stream because there are no active targets.
        // The online state is set to unknown because there is no active attempt
        // at establishing a connection
        t.bu.set(
          "Unknown"
          /* OnlineState.Unknown */
        )
      );
    }
    async function rc(t, e, n) {
      if (
        // Mark the client as online since we got a message from the server
        t.bu.set(
          "Online"
          /* OnlineState.Online */
        ), e instanceof Ii && 2 === e.state && e.cause
      )
        try {
          await /** Handles an error on a target */
          async function(t2, e2) {
            const n2 = e2.cause;
            for (const s of e2.targetIds)
              t2.Au.has(s) && (await t2.remoteSyncer.rejectListen(s, n2), t2.Au.delete(s), t2.Vu.removeTarget(s));
          }(t, e);
        } catch (n2) {
          N("RemoteStore", "Failed to remove targets %s: %s ", e.targetIds.join(","), n2), await oc(t, n2);
        }
      else if (e instanceof yi ? t.Vu.Ht(e) : e instanceof pi ? t.Vu.ne(e) : t.Vu.Xt(e), !n.isEqual(rt.min()))
        try {
          const e2 = await ou(t.localStore);
          n.compareTo(e2) >= 0 && // We have received a target change with a global snapshot if the snapshot
          // version is not equal to SnapshotVersion.min().
          await /**
          * Takes a batch of changes from the Datastore, repackages them as a
          * RemoteEvent, and passes that on to the listener, which is typically the
          * SyncEngine.
          */
          function(t2, e3) {
            const n2 = t2.Vu.ce(e3);
            return n2.targetChanges.forEach((n3, s) => {
              if (n3.resumeToken.approximateByteSize() > 0) {
                const i = t2.Au.get(s);
                i && t2.Au.set(s, i.withResumeToken(n3.resumeToken, e3));
              }
            }), // Re-establish listens for the targets that have been invalidated by
            // existence filter mismatches.
            n2.targetMismatches.forEach((e4, n3) => {
              const s = t2.Au.get(e4);
              if (!s)
                return;
              t2.Au.set(e4, s.withResumeToken(Ve.EMPTY_BYTE_STRING, s.snapshotVersion)), // Cause a hard reset by unwatching and rewatching immediately, but
              // deliberately don't send a resume token so that we get a full update.
              Xu(t2, e4);
              const i = new cr(s.target, e4, n3, s.sequenceNumber);
              Yu(t2, i);
            }), t2.remoteSyncer.applyRemoteEvent(n2);
          }(t, n);
        } catch (e2) {
          N("RemoteStore", "Failed to raise snapshot:", e2), await oc(t, e2);
        }
    }
    async function oc(t, e, n) {
      if (!Dt(e))
        throw e;
      t.vu.add(
        1
        /* OfflineCause.IndexedDbFailed */
      ), // Disable network and raise offline snapshots
      await Wu(t), t.bu.set(
        "Offline"
        /* OnlineState.Offline */
      ), n || // Use a simple read operation to determine if IndexedDB recovered.
      // Ideally, we would expose a health check directly on SimpleDb, but
      // RemoteStore only has access to persistence through LocalStore.
      (n = () => ou(t.localStore)), // Probe IndexedDB periodically and re-enable network
      t.asyncQueue.enqueueRetryable(async () => {
        N("RemoteStore", "Retrying IndexedDB access"), await n(), t.vu.delete(
          1
          /* OfflineCause.IndexedDbFailed */
        ), await zu(t);
      });
    }
    function uc(t, e) {
      return e().catch((n) => oc(t, n, e));
    }
    async function cc(t) {
      const e = L(t), n = Ic(e);
      let s = e.Eu.length > 0 ? e.Eu[e.Eu.length - 1].batchId : -1;
      for (; ac(e); )
        try {
          const t2 = await au(e.localStore, s);
          if (null === t2) {
            0 === e.Eu.length && n.jo();
            break;
          }
          s = t2.batchId, hc(e, t2);
        } catch (t2) {
          await oc(e, t2);
        }
      lc(e) && fc(e);
    }
    function ac(t) {
      return ec(t) && t.Eu.length < 10;
    }
    function hc(t, e) {
      t.Eu.push(e);
      const n = Ic(t);
      n.Ko() && n.ou && n.uu(e.mutations);
    }
    function lc(t) {
      return ec(t) && !Ic(t).Uo() && t.Eu.length > 0;
    }
    function fc(t) {
      Ic(t).start();
    }
    async function dc(t) {
      Ic(t).hu();
    }
    async function wc(t) {
      const e = Ic(t);
      for (const n of t.Eu)
        e.uu(n.mutations);
    }
    async function _c(t, e, n) {
      const s = t.Eu.shift(), i = ti.from(s, e, n);
      await uc(t, () => t.remoteSyncer.applySuccessfulWrite(i)), // It's possible that with the completion of this mutation another
      // slot has freed up.
      await cc(t);
    }
    async function mc(t, e) {
      e && Ic(t).ou && // This error affects the actual write.
      await async function(t2, e2) {
        if (n = e2.code, oi(n) && n !== q.ABORTED) {
          const n2 = t2.Eu.shift();
          Ic(t2).Qo(), await uc(t2, () => t2.remoteSyncer.rejectFailedWrite(n2.batchId, e2)), // It's possible that with the completion of this mutation
          // another slot has freed up.
          await cc(t2);
        }
        var n;
      }(t, e), // The write stream might have been started by refilling the write
      // pipeline for failed writes
      lc(t) && fc(t);
    }
    async function gc(t, e) {
      const n = L(t);
      n.asyncQueue.verifyOperationInProgress(), N("RemoteStore", "RemoteStore received new credentials");
      const s = ec(n);
      n.vu.add(
        3
        /* OfflineCause.CredentialChange */
      ), await Wu(n), s && // Don't set the network status to Unknown if we are offline.
      n.bu.set(
        "Unknown"
        /* OnlineState.Unknown */
      ), await n.remoteSyncer.handleCredentialChange(e), n.vu.delete(
        3
        /* OfflineCause.CredentialChange */
      ), await zu(n);
    }
    async function yc(t, e) {
      const n = L(t);
      e ? (n.vu.delete(
        2
        /* OfflineCause.IsSecondary */
      ), await zu(n)) : e || (n.vu.add(
        2
        /* OfflineCause.IsSecondary */
      ), await Wu(n), n.bu.set(
        "Unknown"
        /* OnlineState.Unknown */
      ));
    }
    function pc(t) {
      return t.Su || // Create stream (but note that it is not started yet).
      (t.Su = function(t2, e, n) {
        const s = L(t2);
        return s.fu(), new qu(e, s.connection, s.authCredentials, s.appCheckCredentials, s.serializer, n);
      }(t.datastore, t.asyncQueue, {
        uo: sc.bind(null, t),
        ao: ic.bind(null, t),
        nu: rc.bind(null, t)
      }), t.Ru.push(async (e) => {
        e ? (t.Su.Qo(), tc(t) ? Zu(t) : t.bu.set(
          "Unknown"
          /* OnlineState.Unknown */
        )) : (await t.Su.stop(), nc(t));
      })), t.Su;
    }
    function Ic(t) {
      return t.Du || // Create stream (but note that it is not started yet).
      (t.Du = function(t2, e, n) {
        const s = L(t2);
        return s.fu(), new Uu(e, s.connection, s.authCredentials, s.appCheckCredentials, s.serializer, n);
      }(t.datastore, t.asyncQueue, {
        uo: dc.bind(null, t),
        ao: mc.bind(null, t),
        au: wc.bind(null, t),
        cu: _c.bind(null, t)
      }), t.Ru.push(async (e) => {
        e ? (t.Du.Qo(), // This will start the write stream if necessary.
        await cc(t)) : (await t.Du.stop(), t.Eu.length > 0 && (N("RemoteStore", `Stopping write stream with ${t.Eu.length} pending writes`), t.Eu = []));
      })), t.Du;
    }
    var Tc = class _Tc {
      constructor(t, e, n, s, i) {
        this.asyncQueue = t, this.timerId = e, this.targetTimeMs = n, this.op = s, this.removalCallback = i, this.deferred = new K(), this.then = this.deferred.promise.then.bind(this.deferred.promise), // It's normal for the deferred promise to be canceled (due to cancellation)
        // and so we attach a dummy catch callback to avoid
        // 'UnhandledPromiseRejectionWarning' log spam.
        this.deferred.promise.catch((t2) => {
        });
      }
      /**
       * Creates and returns a DelayedOperation that has been scheduled to be
       * executed on the provided asyncQueue after the provided delayMs.
       *
       * @param asyncQueue - The queue to schedule the operation on.
       * @param id - A Timer ID identifying the type of operation this is.
       * @param delayMs - The delay (ms) before the operation should be scheduled.
       * @param op - The operation to run.
       * @param removalCallback - A callback to be called synchronously once the
       *   operation is executed or canceled, notifying the AsyncQueue to remove it
       *   from its delayedOperations list.
       *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
       *   the DelayedOperation class public.
       */
      static createAndSchedule(t, e, n, s, i) {
        const r = Date.now() + n, o = new _Tc(t, e, r, s, i);
        return o.start(n), o;
      }
      /**
       * Starts the timer. This is called immediately after construction by
       * createAndSchedule().
       */
      start(t) {
        this.timerHandle = setTimeout(() => this.handleDelayElapsed(), t);
      }
      /**
       * Queues the operation to run immediately (if it hasn't already been run or
       * canceled).
       */
      skipDelay() {
        return this.handleDelayElapsed();
      }
      /**
       * Cancels the operation if it hasn't already been executed or canceled. The
       * promise will be rejected.
       *
       * As long as the operation has not yet been run, calling cancel() provides a
       * guarantee that the operation will not be run.
       */
      cancel(t) {
        null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new U(q.CANCELLED, "Operation cancelled" + (t ? ": " + t : ""))));
      }
      handleDelayElapsed() {
        this.asyncQueue.enqueueAndForget(() => null !== this.timerHandle ? (this.clearTimeout(), this.op().then((t) => this.deferred.resolve(t))) : Promise.resolve());
      }
      clearTimeout() {
        null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), this.timerHandle = null);
      }
    };
    function Ec(t, e) {
      if (k("AsyncQueue", `${e}: ${t}`), Dt(t))
        return new U(q.UNAVAILABLE, `${e}: ${t}`);
      throw t;
    }
    var Ac = class _Ac {
      /** The default ordering is by key if the comparator is omitted */
      constructor(t) {
        this.comparator = t ? (e, n) => t(e, n) || ht.comparator(e.key, n.key) : (t2, e) => ht.comparator(t2.key, e.key), this.keyedMap = hs(), this.sortedSet = new pe(this.comparator);
      }
      /**
       * Returns an empty copy of the existing DocumentSet, using the same
       * comparator.
       */
      static emptySet(t) {
        return new _Ac(t.comparator);
      }
      has(t) {
        return null != this.keyedMap.get(t);
      }
      get(t) {
        return this.keyedMap.get(t);
      }
      first() {
        return this.sortedSet.minKey();
      }
      last() {
        return this.sortedSet.maxKey();
      }
      isEmpty() {
        return this.sortedSet.isEmpty();
      }
      /**
       * Returns the index of the provided key in the document set, or -1 if the
       * document key is not present in the set;
       */
      indexOf(t) {
        const e = this.keyedMap.get(t);
        return e ? this.sortedSet.indexOf(e) : -1;
      }
      get size() {
        return this.sortedSet.size;
      }
      /** Iterates documents in order defined by "comparator" */
      forEach(t) {
        this.sortedSet.inorderTraversal((e, n) => (t(e), false));
      }
      /** Inserts or updates a document with the same key */
      add(t) {
        const e = this.delete(t.key);
        return e.copy(e.keyedMap.insert(t.key, t), e.sortedSet.insert(t, null));
      }
      /** Deletes a document with a given key */
      delete(t) {
        const e = this.get(t);
        return e ? this.copy(this.keyedMap.remove(t), this.sortedSet.remove(e)) : this;
      }
      isEqual(t) {
        if (!(t instanceof _Ac))
          return false;
        if (this.size !== t.size)
          return false;
        const e = this.sortedSet.getIterator(), n = t.sortedSet.getIterator();
        for (; e.hasNext(); ) {
          const t2 = e.getNext().key, s = n.getNext().key;
          if (!t2.isEqual(s))
            return false;
        }
        return true;
      }
      toString() {
        const t = [];
        return this.forEach((e) => {
          t.push(e.toString());
        }), 0 === t.length ? "DocumentSet ()" : "DocumentSet (\n  " + t.join("  \n") + "\n)";
      }
      copy(t, e) {
        const n = new _Ac();
        return n.comparator = this.comparator, n.keyedMap = t, n.sortedSet = e, n;
      }
    };
    var vc = class {
      constructor() {
        this.Cu = new pe(ht.comparator);
      }
      track(t) {
        const e = t.doc.key, n = this.Cu.get(e);
        n ? (
          // Merge the new change with the existing change.
          0 !== t.type && 3 === n.type ? this.Cu = this.Cu.insert(e, t) : 3 === t.type && 1 !== n.type ? this.Cu = this.Cu.insert(e, {
            type: n.type,
            doc: t.doc
          }) : 2 === t.type && 2 === n.type ? this.Cu = this.Cu.insert(e, {
            type: 2,
            doc: t.doc
          }) : 2 === t.type && 0 === n.type ? this.Cu = this.Cu.insert(e, {
            type: 0,
            doc: t.doc
          }) : 1 === t.type && 0 === n.type ? this.Cu = this.Cu.remove(e) : 1 === t.type && 2 === n.type ? this.Cu = this.Cu.insert(e, {
            type: 1,
            doc: n.doc
          }) : 0 === t.type && 1 === n.type ? this.Cu = this.Cu.insert(e, {
            type: 2,
            doc: t.doc
          }) : (
            // This includes these cases, which don't make sense:
            // Added->Added
            // Removed->Removed
            // Modified->Added
            // Removed->Modified
            // Metadata->Added
            // Removed->Metadata
            O()
          )
        ) : this.Cu = this.Cu.insert(e, t);
      }
      xu() {
        const t = [];
        return this.Cu.inorderTraversal((e, n) => {
          t.push(n);
        }), t;
      }
    };
    var Rc = class _Rc {
      constructor(t, e, n, s, i, r, o, u, c) {
        this.query = t, this.docs = e, this.oldDocs = n, this.docChanges = s, this.mutatedKeys = i, this.fromCache = r, this.syncStateChanged = o, this.excludesMetadataChanges = u, this.hasCachedResults = c;
      }
      /** Returns a view snapshot as if all documents in the snapshot were added. */
      static fromInitialDocuments(t, e, n, s, i) {
        const r = [];
        return e.forEach((t2) => {
          r.push({
            type: 0,
            doc: t2
          });
        }), new _Rc(
          t,
          e,
          Ac.emptySet(e),
          r,
          n,
          s,
          /* syncStateChanged= */
          true,
          /* excludesMetadataChanges= */
          false,
          i
        );
      }
      get hasPendingWrites() {
        return !this.mutatedKeys.isEmpty();
      }
      isEqual(t) {
        if (!(this.fromCache === t.fromCache && this.hasCachedResults === t.hasCachedResults && this.syncStateChanged === t.syncStateChanged && this.mutatedKeys.isEqual(t.mutatedKeys) && Zn(this.query, t.query) && this.docs.isEqual(t.docs) && this.oldDocs.isEqual(t.oldDocs)))
          return false;
        const e = this.docChanges, n = t.docChanges;
        if (e.length !== n.length)
          return false;
        for (let t2 = 0; t2 < e.length; t2++)
          if (e[t2].type !== n[t2].type || !e[t2].doc.isEqual(n[t2].doc))
            return false;
        return true;
      }
    };
    var Pc = class {
      constructor() {
        this.Nu = void 0, this.listeners = [];
      }
    };
    var bc = class {
      constructor() {
        this.queries = new os((t) => ts(t), Zn), this.onlineState = "Unknown", this.ku = /* @__PURE__ */ new Set();
      }
    };
    async function Vc(t, e) {
      const n = L(t), s = e.query;
      let i = false, r = n.queries.get(s);
      if (r || (i = true, r = new Pc()), i)
        try {
          r.Nu = await n.onListen(s);
        } catch (t2) {
          const n2 = Ec(t2, `Initialization of query '${es(e.query)}' failed`);
          return void e.onError(n2);
        }
      if (n.queries.set(s, r), r.listeners.push(e), // Run global snapshot listeners if a consistent snapshot has been emitted.
      e.Mu(n.onlineState), r.Nu) {
        e.$u(r.Nu) && xc(n);
      }
    }
    async function Sc(t, e) {
      const n = L(t), s = e.query;
      let i = false;
      const r = n.queries.get(s);
      if (r) {
        const t2 = r.listeners.indexOf(e);
        t2 >= 0 && (r.listeners.splice(t2, 1), i = 0 === r.listeners.length);
      }
      if (i)
        return n.queries.delete(s), n.onUnlisten(s);
    }
    function Dc(t, e) {
      const n = L(t);
      let s = false;
      for (const t2 of e) {
        const e2 = t2.query, i = n.queries.get(e2);
        if (i) {
          for (const e3 of i.listeners)
            e3.$u(t2) && (s = true);
          i.Nu = t2;
        }
      }
      s && xc(n);
    }
    function Cc(t, e, n) {
      const s = L(t), i = s.queries.get(e);
      if (i)
        for (const t2 of i.listeners)
          t2.onError(n);
      s.queries.delete(e);
    }
    function xc(t) {
      t.ku.forEach((t2) => {
        t2.next();
      });
    }
    var Nc = class {
      constructor(t, e, n) {
        this.query = t, this.Ou = e, /**
         * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
         * observer. This flag is set to true once we've actually raised an event.
         */
        this.Fu = false, this.Bu = null, this.onlineState = "Unknown", this.options = n || {};
      }
      /**
       * Applies the new ViewSnapshot to this listener, raising a user-facing event
       * if applicable (depending on what changed, whether the user has opted into
       * metadata-only changes, etc.). Returns true if a user-facing event was
       * indeed raised.
       */
      $u(t) {
        if (!this.options.includeMetadataChanges) {
          const e2 = [];
          for (const n of t.docChanges)
            3 !== n.type && e2.push(n);
          t = new Rc(
            t.query,
            t.docs,
            t.oldDocs,
            e2,
            t.mutatedKeys,
            t.fromCache,
            t.syncStateChanged,
            /* excludesMetadataChanges= */
            true,
            t.hasCachedResults
          );
        }
        let e = false;
        return this.Fu ? this.Lu(t) && (this.Ou.next(t), e = true) : this.qu(t, this.onlineState) && (this.Uu(t), e = true), this.Bu = t, e;
      }
      onError(t) {
        this.Ou.error(t);
      }
      /** Returns whether a snapshot was raised. */
      Mu(t) {
        this.onlineState = t;
        let e = false;
        return this.Bu && !this.Fu && this.qu(this.Bu, t) && (this.Uu(this.Bu), e = true), e;
      }
      qu(t, e) {
        if (!t.fromCache)
          return true;
        const n = "Offline" !== e;
        return (!this.options.Ku || !n) && (!t.docs.isEmpty() || t.hasCachedResults || "Offline" === e);
      }
      Lu(t) {
        if (t.docChanges.length > 0)
          return true;
        const e = this.Bu && this.Bu.hasPendingWrites !== t.hasPendingWrites;
        return !(!t.syncStateChanged && !e) && true === this.options.includeMetadataChanges;
      }
      Uu(t) {
        t = Rc.fromInitialDocuments(t.query, t.docs, t.mutatedKeys, t.fromCache, t.hasCachedResults), this.Fu = true, this.Ou.next(t);
      }
    };
    var kc = class {
      constructor(t, e) {
        this.Gu = t, this.byteLength = e;
      }
      Qu() {
        return "metadata" in this.Gu;
      }
    };
    var Mc = class {
      constructor(t) {
        this.serializer = t;
      }
      rr(t) {
        return Oi(this.serializer, t);
      }
      /**
       * Converts a BundleDocument to a MutableDocument.
       */
      ur(t) {
        return t.metadata.exists ? Ki(this.serializer, t.document, false) : an.newNoDocument(this.rr(t.metadata.name), this.cr(t.metadata.readTime));
      }
      cr(t) {
        return Ni(t);
      }
    };
    var $c = class {
      constructor(t, e, n) {
        this.ju = t, this.localStore = e, this.serializer = n, /** Batched queries to be saved into storage */
        this.queries = [], /** Batched documents to be saved into storage */
        this.documents = [], /** The collection groups affected by this bundle. */
        this.collectionGroups = /* @__PURE__ */ new Set(), this.progress = Oc(t);
      }
      /**
       * Adds an element from the bundle to the loader.
       *
       * Returns a new progress if adding the element leads to a new progress,
       * otherwise returns null.
       */
      zu(t) {
        this.progress.bytesLoaded += t.byteLength;
        let e = this.progress.documentsLoaded;
        if (t.Gu.namedQuery)
          this.queries.push(t.Gu.namedQuery);
        else if (t.Gu.documentMetadata) {
          this.documents.push({
            metadata: t.Gu.documentMetadata
          }), t.Gu.documentMetadata.exists || ++e;
          const n = ut.fromString(t.Gu.documentMetadata.name);
          this.collectionGroups.add(n.get(n.length - 2));
        } else
          t.Gu.document && (this.documents[this.documents.length - 1].document = t.Gu.document, ++e);
        return e !== this.progress.documentsLoaded ? (this.progress.documentsLoaded = e, Object.assign({}, this.progress)) : null;
      }
      Wu(t) {
        const e = /* @__PURE__ */ new Map(), n = new Mc(this.serializer);
        for (const s of t)
          if (s.metadata.queries) {
            const t2 = n.rr(s.metadata.name);
            for (const n2 of s.metadata.queries) {
              const s2 = (e.get(n2) || gs()).add(t2);
              e.set(n2, s2);
            }
          }
        return e;
      }
      /**
       * Update the progress to 'Success' and return the updated progress.
       */
      async complete() {
        const t = await mu(this.localStore, new Mc(this.serializer), this.documents, this.ju.id), e = this.Wu(this.documents);
        for (const t2 of this.queries)
          await gu(this.localStore, t2, e.get(t2.name));
        return this.progress.taskState = "Success", {
          progress: this.progress,
          Hu: this.collectionGroups,
          Ju: t
        };
      }
    };
    function Oc(t) {
      return {
        taskState: "Running",
        documentsLoaded: 0,
        bytesLoaded: 0,
        totalDocuments: t.totalDocuments,
        totalBytes: t.totalBytes
      };
    }
    var Fc = class {
      constructor(t) {
        this.key = t;
      }
    };
    var Bc = class {
      constructor(t) {
        this.key = t;
      }
    };
    var Lc = class {
      constructor(t, e) {
        this.query = t, this.Yu = e, this.Xu = null, this.hasCachedResults = false, /**
         * A flag whether the view is current with the backend. A view is considered
         * current after it has seen the current flag from the backend and did not
         * lose consistency within the watch stream (e.g. because of an existence
         * filter mismatch).
         */
        this.current = false, /** Documents in the view but not in the remote target */
        this.Zu = gs(), /** Document Keys that have local changes */
        this.mutatedKeys = gs(), this.tc = is(t), this.ec = new Ac(this.tc);
      }
      /**
       * The set of remote documents that the server has told us belongs to the target associated with
       * this view.
       */
      get nc() {
        return this.Yu;
      }
      /**
       * Iterates over a set of doc changes, applies the query limit, and computes
       * what the new results should be, what the changes were, and whether we may
       * need to go back to the local cache for more results. Does not make any
       * changes to the view.
       * @param docChanges - The doc changes to apply to this view.
       * @param previousChanges - If this is being called with a refill, then start
       *        with this set of docs and changes instead of the current view.
       * @returns a new set of docs, changes, and refill flag.
       */
      sc(t, e) {
        const n = e ? e.ic : new vc(), s = e ? e.ec : this.ec;
        let i = e ? e.mutatedKeys : this.mutatedKeys, r = s, o = false;
        const u = "F" === this.query.limitType && s.size === this.query.limit ? s.last() : null, c = "L" === this.query.limitType && s.size === this.query.limit ? s.first() : null;
        if (t.inorderTraversal((t2, e2) => {
          const a = s.get(t2), h = ns(this.query, e2) ? e2 : null, l = !!a && this.mutatedKeys.has(a.key), f = !!h && (h.hasLocalMutations || // We only consider committed mutations for documents that were
          // mutated during the lifetime of the view.
          this.mutatedKeys.has(h.key) && h.hasCommittedMutations);
          let d = false;
          if (a && h) {
            a.data.isEqual(h.data) ? l !== f && (n.track({
              type: 3,
              doc: h
            }), d = true) : this.rc(a, h) || (n.track({
              type: 2,
              doc: h
            }), d = true, (u && this.tc(h, u) > 0 || c && this.tc(h, c) < 0) && // This doc moved from inside the limit to outside the limit.
            // That means there may be some other doc in the local cache
            // that should be included instead.
            (o = true));
          } else
            !a && h ? (n.track({
              type: 0,
              doc: h
            }), d = true) : a && !h && (n.track({
              type: 1,
              doc: a
            }), d = true, (u || c) && // A doc was removed from a full limit query. We'll need to
            // requery from the local cache to see if we know about some other
            // doc that should be in the results.
            (o = true));
          d && (h ? (r = r.add(h), i = f ? i.add(t2) : i.delete(t2)) : (r = r.delete(t2), i = i.delete(t2)));
        }), null !== this.query.limit)
          for (; r.size > this.query.limit; ) {
            const t2 = "F" === this.query.limitType ? r.last() : r.first();
            r = r.delete(t2.key), i = i.delete(t2.key), n.track({
              type: 1,
              doc: t2
            });
          }
        return {
          ec: r,
          ic: n,
          zi: o,
          mutatedKeys: i
        };
      }
      rc(t, e) {
        return t.hasLocalMutations && e.hasCommittedMutations && !e.hasLocalMutations;
      }
      /**
       * Updates the view with the given ViewDocumentChanges and optionally updates
       * limbo docs and sync state from the provided target change.
       * @param docChanges - The set of changes to make to the view's docs.
       * @param updateLimboDocuments - Whether to update limbo documents based on
       *        this change.
       * @param targetChange - A target change to apply for computing limbo docs and
       *        sync state.
       * @returns A new ViewChange with the given docs, changes, and sync state.
       */
      // PORTING NOTE: The iOS/Android clients always compute limbo document changes.
      applyChanges(t, e, n) {
        const s = this.ec;
        this.ec = t.ec, this.mutatedKeys = t.mutatedKeys;
        const i = t.ic.xu();
        i.sort((t2, e2) => function(t3, e3) {
          const n2 = (t4) => {
            switch (t4) {
              case 0:
                return 1;
              case 2:
              case 3:
                return 2;
              case 1:
                return 0;
              default:
                return O();
            }
          };
          return n2(t3) - n2(e3);
        }(t2.type, e2.type) || this.tc(t2.doc, e2.doc)), this.oc(n);
        const r = e ? this.uc() : [], o = 0 === this.Zu.size && this.current ? 1 : 0, u = o !== this.Xu;
        if (this.Xu = o, 0 !== i.length || u) {
          return {
            snapshot: new Rc(
              this.query,
              t.ec,
              s,
              i,
              t.mutatedKeys,
              0 === o,
              u,
              /* excludesMetadataChanges= */
              false,
              !!n && n.resumeToken.approximateByteSize() > 0
            ),
            cc: r
          };
        }
        return {
          cc: r
        };
      }
      /**
       * Applies an OnlineState change to the view, potentially generating a
       * ViewChange if the view's syncState changes as a result.
       */
      Mu(t) {
        return this.current && "Offline" === t ? (
          // If we're offline, set `current` to false and then call applyChanges()
          // to refresh our syncState and generate a ViewChange as appropriate. We
          // are guaranteed to get a new TargetChange that sets `current` back to
          // true once the client is back online.
          (this.current = false, this.applyChanges(
            {
              ec: this.ec,
              ic: new vc(),
              mutatedKeys: this.mutatedKeys,
              zi: false
            },
            /* updateLimboDocuments= */
            false
          ))
        ) : {
          cc: []
        };
      }
      /**
       * Returns whether the doc for the given key should be in limbo.
       */
      ac(t) {
        return !this.Yu.has(t) && // The local store doesn't think it's a result, so it shouldn't be in limbo.
        (!!this.ec.has(t) && !this.ec.get(t).hasLocalMutations);
      }
      /**
       * Updates syncedDocuments, current, and limbo docs based on the given change.
       * Returns the list of changes to which docs are in limbo.
       */
      oc(t) {
        t && (t.addedDocuments.forEach((t2) => this.Yu = this.Yu.add(t2)), t.modifiedDocuments.forEach((t2) => {
        }), t.removedDocuments.forEach((t2) => this.Yu = this.Yu.delete(t2)), this.current = t.current);
      }
      uc() {
        if (!this.current)
          return [];
        const t = this.Zu;
        this.Zu = gs(), this.ec.forEach((t2) => {
          this.ac(t2.key) && (this.Zu = this.Zu.add(t2.key));
        });
        const e = [];
        return t.forEach((t2) => {
          this.Zu.has(t2) || e.push(new Bc(t2));
        }), this.Zu.forEach((n) => {
          t.has(n) || e.push(new Fc(n));
        }), e;
      }
      /**
       * Update the in-memory state of the current view with the state read from
       * persistence.
       *
       * We update the query view whenever a client's primary status changes:
       * - When a client transitions from primary to secondary, it can miss
       *   LocalStorage updates and its query views may temporarily not be
       *   synchronized with the state on disk.
       * - For secondary to primary transitions, the client needs to update the list
       *   of `syncedDocuments` since secondary clients update their query views
       *   based purely on synthesized RemoteEvents.
       *
       * @param queryResult.documents - The documents that match the query according
       * to the LocalStore.
       * @param queryResult.remoteKeys - The keys of the documents that match the
       * query according to the backend.
       *
       * @returns The ViewChange that resulted from this synchronization.
       */
      // PORTING NOTE: Multi-tab only.
      hc(t) {
        this.Yu = t.ir, this.Zu = gs();
        const e = this.sc(t.documents);
        return this.applyChanges(
          e,
          /*updateLimboDocuments=*/
          true
        );
      }
      /**
       * Returns a view snapshot as if this query was just listened to. Contains
       * a document add for every existing document and the `fromCache` and
       * `hasPendingWrites` status of the already established view.
       */
      // PORTING NOTE: Multi-tab only.
      lc() {
        return Rc.fromInitialDocuments(this.query, this.ec, this.mutatedKeys, 0 === this.Xu, this.hasCachedResults);
      }
    };
    var qc = class {
      constructor(t, e, n) {
        this.query = t, this.targetId = e, this.view = n;
      }
    };
    var Uc = class {
      constructor(t) {
        this.key = t, /**
         * Set to true once we've received a document. This is used in
         * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to
         * decide whether it needs to manufacture a delete event for the target once
         * the target is CURRENT.
         */
        this.fc = false;
      }
    };
    var Kc = class {
      constructor(t, e, n, s, i, r) {
        this.localStore = t, this.remoteStore = e, this.eventManager = n, this.sharedClientState = s, this.currentUser = i, this.maxConcurrentLimboResolutions = r, this.dc = {}, this.wc = new os((t2) => ts(t2), Zn), this._c = /* @__PURE__ */ new Map(), /**
         * The keys of documents that are in limbo for which we haven't yet started a
         * limbo resolution query. The strings in this set are the result of calling
         * `key.path.canonicalString()` where `key` is a `DocumentKey` object.
         *
         * The `Set` type was chosen because it provides efficient lookup and removal
         * of arbitrary elements and it also maintains insertion order, providing the
         * desired queue-like FIFO semantics.
         */
        this.mc = /* @__PURE__ */ new Set(), /**
         * Keeps track of the target ID for each document that is in limbo with an
         * active target.
         */
        this.gc = new pe(ht.comparator), /**
         * Keeps track of the information about an active limbo resolution for each
         * active target ID that was started for the purpose of limbo resolution.
         */
        this.yc = /* @__PURE__ */ new Map(), this.Ic = new Oo(), /** Stores user completion handlers, indexed by User and BatchId. */
        this.Tc = {}, /** Stores user callbacks waiting for all pending writes to be acknowledged. */
        this.Ec = /* @__PURE__ */ new Map(), this.Ac = lo.Mn(), this.onlineState = "Unknown", // The primary state is set to `true` or `false` immediately after Firestore
        // startup. In the interim, a client should only be considered primary if
        // `isPrimary` is true.
        this.vc = void 0;
      }
      get isPrimaryClient() {
        return true === this.vc;
      }
    };
    async function Gc(t, e) {
      const n = pa(t);
      let s, i;
      const r = n.wc.get(e);
      if (r)
        s = r.targetId, n.sharedClientState.addLocalQueryTarget(s), i = r.view.lc();
      else {
        const t2 = await hu(n.localStore, Jn(e)), r2 = n.sharedClientState.addLocalQueryTarget(t2.targetId);
        s = t2.targetId, i = await Qc(n, e, s, "current" === r2, t2.resumeToken), n.isPrimaryClient && Hu(n.remoteStore, t2);
      }
      return i;
    }
    async function Qc(t, e, n, s, i) {
      t.Rc = (e2, n2, s2) => async function(t2, e3, n3, s3) {
        let i2 = e3.view.sc(n3);
        i2.zi && // The query has a limit and some docs were removed, so we need
        // to re-run the query against the local store to make sure we
        // didn't lose any good docs that had been past the limit.
        (i2 = await fu(
          t2.localStore,
          e3.query,
          /* usePreviousResults= */
          false
        ).then(({ documents: t3 }) => e3.view.sc(t3, i2)));
        const r2 = s3 && s3.targetChanges.get(e3.targetId), o2 = e3.view.applyChanges(
          i2,
          /* updateLimboDocuments= */
          t2.isPrimaryClient,
          r2
        );
        return ia(t2, e3.targetId, o2.cc), o2.snapshot;
      }(t, e2, n2, s2);
      const r = await fu(
        t.localStore,
        e,
        /* usePreviousResults= */
        true
      ), o = new Lc(e, r.ir), u = o.sc(r.documents), c = gi.createSynthesizedTargetChangeForCurrentChange(n, s && "Offline" !== t.onlineState, i), a = o.applyChanges(
        u,
        /* updateLimboDocuments= */
        t.isPrimaryClient,
        c
      );
      ia(t, n, a.cc);
      const h = new qc(e, n, o);
      return t.wc.set(e, h), t._c.has(n) ? t._c.get(n).push(e) : t._c.set(n, [e]), a.snapshot;
    }
    async function jc(t, e) {
      const n = L(t), s = n.wc.get(e), i = n._c.get(s.targetId);
      if (i.length > 1)
        return n._c.set(s.targetId, i.filter((t2) => !Zn(t2, e))), void n.wc.delete(e);
      if (n.isPrimaryClient) {
        n.sharedClientState.removeLocalQueryTarget(s.targetId);
        n.sharedClientState.isActiveQueryTarget(s.targetId) || await lu(
          n.localStore,
          s.targetId,
          /*keepPersistedTargetData=*/
          false
        ).then(() => {
          n.sharedClientState.clearQueryState(s.targetId), Ju(n.remoteStore, s.targetId), na(n, s.targetId);
        }).catch(vt);
      } else
        na(n, s.targetId), await lu(
          n.localStore,
          s.targetId,
          /*keepPersistedTargetData=*/
          true
        );
    }
    async function zc(t, e, n) {
      const s = Ia(t);
      try {
        const t2 = await function(t3, e2) {
          const n2 = L(t3), s2 = it.now(), i = e2.reduce((t4, e3) => t4.add(e3.key), gs());
          let r, o;
          return n2.persistence.runTransaction("Locally write mutations", "readwrite", (t4) => {
            let u = cs(), c = gs();
            return n2.Zi.getEntries(t4, i).next((t5) => {
              u = t5, u.forEach((t6, e3) => {
                e3.isValidDocument() || (c = c.add(t6));
              });
            }).next(() => n2.localDocuments.getOverlayedDocuments(t4, u)).next((i2) => {
              r = i2;
              const o2 = [];
              for (const t5 of e2) {
                const e3 = Gs(t5, r.get(t5.key).overlayedDocument);
                null != e3 && // NOTE: The base state should only be applied if there's some
                // existing document to override, so use a Precondition of
                // exists=true
                o2.push(new zs(t5.key, e3, cn(e3.value.mapValue), Fs.exists(true)));
              }
              return n2.mutationQueue.addMutationBatch(t4, s2, o2, e2);
            }).next((e3) => {
              o = e3;
              const s3 = e3.applyToLocalDocumentSet(r, c);
              return n2.documentOverlayCache.saveOverlays(t4, e3.batchId, s3);
            });
          }).then(() => ({
            batchId: o.batchId,
            changes: ls(r)
          }));
        }(s.localStore, e);
        s.sharedClientState.addPendingMutation(t2.batchId), function(t3, e2, n2) {
          let s2 = t3.Tc[t3.currentUser.toKey()];
          s2 || (s2 = new pe(et));
          s2 = s2.insert(e2, n2), t3.Tc[t3.currentUser.toKey()] = s2;
        }(s, t2.batchId, n), await ua(s, t2.changes), await cc(s.remoteStore);
      } catch (t2) {
        const e2 = Ec(t2, "Failed to persist write");
        n.reject(e2);
      }
    }
    async function Wc(t, e) {
      const n = L(t);
      try {
        const t2 = await uu(n.localStore, e);
        e.targetChanges.forEach((t3, e2) => {
          const s = n.yc.get(e2);
          s && // Since this is a limbo resolution lookup, it's for a single document
          // and it could be added, modified, or removed, but not a combination.
          (F(t3.addedDocuments.size + t3.modifiedDocuments.size + t3.removedDocuments.size <= 1), t3.addedDocuments.size > 0 ? s.fc = true : t3.modifiedDocuments.size > 0 ? F(s.fc) : t3.removedDocuments.size > 0 && (F(s.fc), s.fc = false));
        }), await ua(n, t2, e);
      } catch (t2) {
        await vt(t2);
      }
    }
    function Hc(t, e, n) {
      const s = L(t);
      if (s.isPrimaryClient && 0 === n || !s.isPrimaryClient && 1 === n) {
        const t2 = [];
        s.wc.forEach((n2, s2) => {
          const i = s2.view.Mu(e);
          i.snapshot && t2.push(i.snapshot);
        }), function(t3, e2) {
          const n2 = L(t3);
          n2.onlineState = e2;
          let s2 = false;
          n2.queries.forEach((t4, n3) => {
            for (const t5 of n3.listeners)
              t5.Mu(e2) && (s2 = true);
          }), s2 && xc(n2);
        }(s.eventManager, e), t2.length && s.dc.nu(t2), s.onlineState = e, s.isPrimaryClient && s.sharedClientState.setOnlineState(e);
      }
    }
    async function Jc(t, e, n) {
      const s = L(t);
      s.sharedClientState.updateQueryState(e, "rejected", n);
      const i = s.yc.get(e), r = i && i.key;
      if (r) {
        let t2 = new pe(ht.comparator);
        t2 = t2.insert(r, an.newNoDocument(r, rt.min()));
        const n2 = gs().add(r), i2 = new mi(
          rt.min(),
          /* targetChanges= */
          /* @__PURE__ */ new Map(),
          /* targetMismatches= */
          new pe(et),
          t2,
          n2
        );
        await Wc(s, i2), // Since this query failed, we won't want to manually unlisten to it.
        // We only remove it from bookkeeping after we successfully applied the
        // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to
        // this query when the RemoteStore restarts the Watch stream, which should
        // re-trigger the target failure.
        s.gc = s.gc.remove(r), s.yc.delete(e), oa(s);
      } else
        await lu(
          s.localStore,
          e,
          /* keepPersistedTargetData */
          false
        ).then(() => na(s, e, n)).catch(vt);
    }
    async function Yc(t, e) {
      const n = L(t), s = e.batch.batchId;
      try {
        const t2 = await ru(n.localStore, e);
        ea(
          n,
          s,
          /*error=*/
          null
        ), ta(n, s), n.sharedClientState.updateMutationState(s, "acknowledged"), await ua(n, t2);
      } catch (t2) {
        await vt(t2);
      }
    }
    async function Xc(t, e, n) {
      const s = L(t);
      try {
        const t2 = await function(t3, e2) {
          const n2 = L(t3);
          return n2.persistence.runTransaction("Reject batch", "readwrite-primary", (t4) => {
            let s2;
            return n2.mutationQueue.lookupMutationBatch(t4, e2).next((e3) => (F(null !== e3), s2 = e3.keys(), n2.mutationQueue.removeMutationBatch(t4, e3))).next(() => n2.mutationQueue.performConsistencyCheck(t4)).next(() => n2.documentOverlayCache.removeOverlaysForBatchId(t4, s2, e2)).next(() => n2.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(t4, s2)).next(() => n2.localDocuments.getDocuments(t4, s2));
          });
        }(s.localStore, e);
        ea(s, e, n), ta(s, e), s.sharedClientState.updateMutationState(e, "rejected", n), await ua(s, t2);
      } catch (n2) {
        await vt(n2);
      }
    }
    async function Zc(t, e) {
      const n = L(t);
      ec(n.remoteStore) || N("SyncEngine", "The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled.");
      try {
        const t2 = await function(t3) {
          const e2 = L(t3);
          return e2.persistence.runTransaction("Get highest unacknowledged batch id", "readonly", (t4) => e2.mutationQueue.getHighestUnacknowledgedBatchId(t4));
        }(n.localStore);
        if (-1 === t2)
          return void e.resolve();
        const s = n.Ec.get(t2) || [];
        s.push(e), n.Ec.set(t2, s);
      } catch (t2) {
        const n2 = Ec(t2, "Initialization of waitForPendingWrites() operation failed");
        e.reject(n2);
      }
    }
    function ta(t, e) {
      (t.Ec.get(e) || []).forEach((t2) => {
        t2.resolve();
      }), t.Ec.delete(e);
    }
    function ea(t, e, n) {
      const s = L(t);
      let i = s.Tc[s.currentUser.toKey()];
      if (i) {
        const t2 = i.get(e);
        t2 && (n ? t2.reject(n) : t2.resolve(), i = i.remove(e)), s.Tc[s.currentUser.toKey()] = i;
      }
    }
    function na(t, e, n = null) {
      t.sharedClientState.removeLocalQueryTarget(e);
      for (const s of t._c.get(e))
        t.wc.delete(s), n && t.dc.Pc(s, n);
      if (t._c.delete(e), t.isPrimaryClient) {
        t.Ic.Is(e).forEach((e2) => {
          t.Ic.containsKey(e2) || // We removed the last reference for this key
          sa(t, e2);
        });
      }
    }
    function sa(t, e) {
      t.mc.delete(e.path.canonicalString());
      const n = t.gc.get(e);
      null !== n && (Ju(t.remoteStore, n), t.gc = t.gc.remove(e), t.yc.delete(n), oa(t));
    }
    function ia(t, e, n) {
      for (const s of n)
        if (s instanceof Fc)
          t.Ic.addReference(s.key, e), ra(t, s);
        else if (s instanceof Bc) {
          N("SyncEngine", "Document no longer in limbo: " + s.key), t.Ic.removeReference(s.key, e);
          t.Ic.containsKey(s.key) || // We removed the last reference for this key
          sa(t, s.key);
        } else
          O();
    }
    function ra(t, e) {
      const n = e.key, s = n.path.canonicalString();
      t.gc.get(n) || t.mc.has(s) || (N("SyncEngine", "New document in limbo: " + n), t.mc.add(s), oa(t));
    }
    function oa(t) {
      for (; t.mc.size > 0 && t.gc.size < t.maxConcurrentLimboResolutions; ) {
        const e = t.mc.values().next().value;
        t.mc.delete(e);
        const n = new ht(ut.fromString(e)), s = t.Ac.next();
        t.yc.set(s, new Uc(n)), t.gc = t.gc.insert(n, s), Hu(t.remoteStore, new cr(Jn(Gn(n.path)), s, "TargetPurposeLimboResolution", Ot.ct));
      }
    }
    async function ua(t, e, n) {
      const s = L(t), i = [], r = [], o = [];
      s.wc.isEmpty() || (s.wc.forEach((t2, u) => {
        o.push(s.Rc(u, e, n).then((t3) => {
          if (
            // If there are changes, or we are handling a global snapshot, notify
            // secondary clients to update query state.
            (t3 || n) && s.isPrimaryClient && s.sharedClientState.updateQueryState(u.targetId, (null == t3 ? void 0 : t3.fromCache) ? "not-current" : "current"), t3
          ) {
            i.push(t3);
            const e2 = tu.Li(u.targetId, t3);
            r.push(e2);
          }
        }));
      }), await Promise.all(o), s.dc.nu(i), await async function(t2, e2) {
        const n2 = L(t2);
        try {
          await n2.persistence.runTransaction("notifyLocalViewChanges", "readwrite", (t3) => Rt.forEach(e2, (e3) => Rt.forEach(e3.Fi, (s2) => n2.persistence.referenceDelegate.addReference(t3, e3.targetId, s2)).next(() => Rt.forEach(e3.Bi, (s2) => n2.persistence.referenceDelegate.removeReference(t3, e3.targetId, s2)))));
        } catch (t3) {
          if (!Dt(t3))
            throw t3;
          N("LocalStore", "Failed to update sequence numbers: " + t3);
        }
        for (const t3 of e2) {
          const e3 = t3.targetId;
          if (!t3.fromCache) {
            const t4 = n2.Ji.get(e3), s2 = t4.snapshotVersion, i2 = t4.withLastLimboFreeSnapshotVersion(s2);
            n2.Ji = n2.Ji.insert(e3, i2);
          }
        }
      }(s.localStore, r));
    }
    async function ca(t, e) {
      const n = L(t);
      if (!n.currentUser.isEqual(e)) {
        N("SyncEngine", "User change. New user:", e.toKey());
        const t2 = await iu(n.localStore, e);
        n.currentUser = e, // Fails tasks waiting for pending writes requested by previous user.
        function(t3, e2) {
          t3.Ec.forEach((t4) => {
            t4.forEach((t5) => {
              t5.reject(new U(q.CANCELLED, e2));
            });
          }), t3.Ec.clear();
        }(n, "'waitForPendingWrites' promise is rejected due to a user change."), // TODO(b/114226417): Consider calling this only in the primary tab.
        n.sharedClientState.handleUserChange(e, t2.removedBatchIds, t2.addedBatchIds), await ua(n, t2.er);
      }
    }
    function aa(t, e) {
      const n = L(t), s = n.yc.get(e);
      if (s && s.fc)
        return gs().add(s.key);
      {
        let t2 = gs();
        const s2 = n._c.get(e);
        if (!s2)
          return t2;
        for (const e2 of s2) {
          const s3 = n.wc.get(e2);
          t2 = t2.unionWith(s3.view.nc);
        }
        return t2;
      }
    }
    async function ha(t, e) {
      const n = L(t), s = await fu(
        n.localStore,
        e.query,
        /* usePreviousResults= */
        true
      ), i = e.view.hc(s);
      return n.isPrimaryClient && ia(n, e.targetId, i.cc), i;
    }
    async function la(t, e) {
      const n = L(t);
      return wu(n.localStore, e).then((t2) => ua(n, t2));
    }
    async function fa(t, e, n, s) {
      const i = L(t), r = await function(t2, e2) {
        const n2 = L(t2), s2 = L(n2.mutationQueue);
        return n2.persistence.runTransaction("Lookup mutation documents", "readonly", (t3) => s2.Sn(t3, e2).next((e3) => e3 ? n2.localDocuments.getDocuments(t3, e3) : Rt.resolve(null)));
      }(i.localStore, e);
      null !== r ? ("pending" === n ? (
        // If we are the primary client, we need to send this write to the
        // backend. Secondary clients will ignore these writes since their remote
        // connection is disabled.
        await cc(i.remoteStore)
      ) : "acknowledged" === n || "rejected" === n ? (
        // NOTE: Both these methods are no-ops for batches that originated from
        // other clients.
        (ea(i, e, s || null), ta(i, e), function(t2, e2) {
          L(L(t2).mutationQueue).Cn(e2);
        }(i.localStore, e))
      ) : O(), await ua(i, r)) : (
        // A throttled tab may not have seen the mutation before it was completed
        // and removed from the mutation queue, in which case we won't have cached
        // the affected documents. In this case we can safely ignore the update
        // since that means we didn't apply the mutation locally at all (if we
        // had, we would have cached the affected documents), and so we will just
        // see any resulting document changes via normal remote document updates
        // as applicable.
        N("SyncEngine", "Cannot apply mutation batch with id: " + e)
      );
    }
    async function da(t, e) {
      const n = L(t);
      if (pa(n), Ia(n), true === e && true !== n.vc) {
        const t2 = n.sharedClientState.getAllActiveQueryTargets(), e2 = await wa(n, t2.toArray());
        n.vc = true, await yc(n.remoteStore, true);
        for (const t3 of e2)
          Hu(n.remoteStore, t3);
      } else if (false === e && false !== n.vc) {
        const t2 = [];
        let e2 = Promise.resolve();
        n._c.forEach((s, i) => {
          n.sharedClientState.isLocalQueryTarget(i) ? t2.push(i) : e2 = e2.then(() => (na(n, i), lu(
            n.localStore,
            i,
            /*keepPersistedTargetData=*/
            true
          ))), Ju(n.remoteStore, i);
        }), await e2, await wa(n, t2), // PORTING NOTE: Multi-Tab only.
        function(t3) {
          const e3 = L(t3);
          e3.yc.forEach((t4, n2) => {
            Ju(e3.remoteStore, n2);
          }), e3.Ic.Ts(), e3.yc = /* @__PURE__ */ new Map(), e3.gc = new pe(ht.comparator);
        }(n), n.vc = false, await yc(n.remoteStore, false);
      }
    }
    async function wa(t, e, n) {
      const s = L(t), i = [], r = [];
      for (const t2 of e) {
        let e2;
        const n2 = s._c.get(t2);
        if (n2 && 0 !== n2.length) {
          e2 = await hu(s.localStore, Jn(n2[0]));
          for (const t3 of n2) {
            const e3 = s.wc.get(t3), n3 = await ha(s, e3);
            n3.snapshot && r.push(n3.snapshot);
          }
        } else {
          const n3 = await du(s.localStore, t2);
          e2 = await hu(s.localStore, n3), await Qc(
            s,
            _a(n3),
            t2,
            /*current=*/
            false,
            e2.resumeToken
          );
        }
        i.push(e2);
      }
      return s.dc.nu(r), i;
    }
    function _a(t) {
      return Kn(t.path, t.collectionGroup, t.orderBy, t.filters, t.limit, "F", t.startAt, t.endAt);
    }
    function ma(t) {
      const e = L(t);
      return L(L(e.localStore).persistence).$i();
    }
    async function ga(t, e, n, s) {
      const i = L(t);
      if (i.vc)
        return void N("SyncEngine", "Ignoring unexpected query state notification.");
      const r = i._c.get(e);
      if (r && r.length > 0)
        switch (n) {
          case "current":
          case "not-current": {
            const t2 = await wu(i.localStore, ss(r[0])), s2 = mi.createSynthesizedRemoteEventForCurrentChange(e, "current" === n, Ve.EMPTY_BYTE_STRING);
            await ua(i, t2, s2);
            break;
          }
          case "rejected":
            await lu(
              i.localStore,
              e,
              /* keepPersistedTargetData */
              true
            ), na(i, e, s);
            break;
          default:
            O();
        }
    }
    async function ya(t, e, n) {
      const s = pa(t);
      if (s.vc) {
        for (const t2 of e) {
          if (s._c.has(t2)) {
            N("SyncEngine", "Adding an already active target " + t2);
            continue;
          }
          const e2 = await du(s.localStore, t2), n2 = await hu(s.localStore, e2);
          await Qc(
            s,
            _a(e2),
            n2.targetId,
            /*current=*/
            false,
            n2.resumeToken
          ), Hu(s.remoteStore, n2);
        }
        for (const t2 of n)
          s._c.has(t2) && // Release queries that are still active.
          await lu(
            s.localStore,
            t2,
            /* keepPersistedTargetData */
            false
          ).then(() => {
            Ju(s.remoteStore, t2), na(s, t2);
          }).catch(vt);
      }
    }
    function pa(t) {
      const e = L(t);
      return e.remoteStore.remoteSyncer.applyRemoteEvent = Wc.bind(null, e), e.remoteStore.remoteSyncer.getRemoteKeysForTarget = aa.bind(null, e), e.remoteStore.remoteSyncer.rejectListen = Jc.bind(null, e), e.dc.nu = Dc.bind(null, e.eventManager), e.dc.Pc = Cc.bind(null, e.eventManager), e;
    }
    function Ia(t) {
      const e = L(t);
      return e.remoteStore.remoteSyncer.applySuccessfulWrite = Yc.bind(null, e), e.remoteStore.remoteSyncer.rejectFailedWrite = Xc.bind(null, e), e;
    }
    function Ta(t, e, n) {
      const s = L(t);
      /** Loads a bundle and returns the list of affected collection groups. */
      (async function(t2, e2, n2) {
        try {
          const s2 = await e2.getMetadata();
          if (await function(t3, e3) {
            const n3 = L(t3), s3 = Ni(e3.createTime);
            return n3.persistence.runTransaction("hasNewerBundle", "readonly", (t4) => n3.qs.getBundleMetadata(t4, e3.id)).then((t4) => !!t4 && t4.createTime.compareTo(s3) >= 0);
          }(t2.localStore, s2))
            return await e2.close(), n2._completeWith(function(t3) {
              return {
                taskState: "Success",
                documentsLoaded: t3.totalDocuments,
                bytesLoaded: t3.totalBytes,
                totalDocuments: t3.totalDocuments,
                totalBytes: t3.totalBytes
              };
            }(s2)), Promise.resolve(/* @__PURE__ */ new Set());
          n2._updateProgress(Oc(s2));
          const i = new $c(s2, t2.localStore, e2.serializer);
          let r = await e2.bc();
          for (; r; ) {
            const t3 = await i.zu(r);
            t3 && n2._updateProgress(t3), r = await e2.bc();
          }
          const o = await i.complete();
          return await ua(
            t2,
            o.Ju,
            /* remoteEvent */
            void 0
          ), // Save metadata, so loading the same bundle will skip.
          await function(t3, e3) {
            const n3 = L(t3);
            return n3.persistence.runTransaction("Save bundle", "readwrite", (t4) => n3.qs.saveBundleMetadata(t4, e3));
          }(t2.localStore, s2), n2._completeWith(o.progress), Promise.resolve(o.Hu);
        } catch (t3) {
          return M("SyncEngine", `Loading bundle failed with ${t3}`), n2._failWith(t3), Promise.resolve(/* @__PURE__ */ new Set());
        }
      })(s, e, n).then((t2) => {
        s.sharedClientState.notifyBundleLoaded(t2);
      });
    }
    var Ea = class {
      constructor() {
        this.synchronizeTabs = false;
      }
      async initialize(t) {
        this.serializer = Fu(t.databaseInfo.databaseId), this.sharedClientState = this.createSharedClientState(t), this.persistence = this.createPersistence(t), await this.persistence.start(), this.localStore = this.createLocalStore(t), this.gcScheduler = this.createGarbageCollectionScheduler(t, this.localStore), this.indexBackfillerScheduler = this.createIndexBackfillerScheduler(t, this.localStore);
      }
      createGarbageCollectionScheduler(t, e) {
        return null;
      }
      createIndexBackfillerScheduler(t, e) {
        return null;
      }
      createLocalStore(t) {
        return su(this.persistence, new eu(), t.initialUser, this.serializer);
      }
      createPersistence(t) {
        return new Ko(Qo.zs, this.serializer);
      }
      createSharedClientState(t) {
        return new bu();
      }
      async terminate() {
        this.gcScheduler && this.gcScheduler.stop(), await this.sharedClientState.shutdown(), await this.persistence.shutdown();
      }
    };
    var Aa = class extends Ea {
      constructor(t) {
        super(), this.cacheSizeBytes = t;
      }
      createGarbageCollectionScheduler(t, e) {
        F(this.persistence.referenceDelegate instanceof jo);
        const n = this.persistence.referenceDelegate.garbageCollector;
        return new po(n, t.asyncQueue, e);
      }
      createPersistence(t) {
        const e = void 0 !== this.cacheSizeBytes ? so.withCacheSize(this.cacheSizeBytes) : so.DEFAULT;
        return new Ko((t2) => jo.zs(t2, e), this.serializer);
      }
    };
    var va = class extends Ea {
      constructor(t, e, n) {
        super(), this.Vc = t, this.cacheSizeBytes = e, this.forceOwnership = n, this.synchronizeTabs = false;
      }
      async initialize(t) {
        await super.initialize(t), await this.Vc.initialize(this, t), // Enqueue writes from a previous session
        await Ia(this.Vc.syncEngine), await cc(this.Vc.remoteStore), // NOTE: This will immediately call the listener, so we make sure to
        // set it after localStore / remoteStore are started.
        await this.persistence.Ii(() => (this.gcScheduler && !this.gcScheduler.started && this.gcScheduler.start(), this.indexBackfillerScheduler && !this.indexBackfillerScheduler.started && this.indexBackfillerScheduler.start(), Promise.resolve()));
      }
      createLocalStore(t) {
        return su(this.persistence, new eu(), t.initialUser, this.serializer);
      }
      createGarbageCollectionScheduler(t, e) {
        const n = this.persistence.referenceDelegate.garbageCollector;
        return new po(n, t.asyncQueue, e);
      }
      createIndexBackfillerScheduler(t, e) {
        const n = new $t(e, this.persistence);
        return new Mt(t.asyncQueue, n);
      }
      createPersistence(t) {
        const e = Zo(t.databaseInfo.databaseId, t.databaseInfo.persistenceKey), n = void 0 !== this.cacheSizeBytes ? so.withCacheSize(this.cacheSizeBytes) : so.DEFAULT;
        return new Jo(this.synchronizeTabs, e, t.clientId, n, t.asyncQueue, $u(), Ou(), this.serializer, this.sharedClientState, !!this.forceOwnership);
      }
      createSharedClientState(t) {
        return new bu();
      }
    };
    var Ra = class extends va {
      constructor(t, e) {
        super(
          t,
          e,
          /* forceOwnership= */
          false
        ), this.Vc = t, this.cacheSizeBytes = e, this.synchronizeTabs = true;
      }
      async initialize(t) {
        await super.initialize(t);
        const e = this.Vc.syncEngine;
        this.sharedClientState instanceof Pu && (this.sharedClientState.syncEngine = {
          jr: fa.bind(null, e),
          zr: ga.bind(null, e),
          Wr: ya.bind(null, e),
          $i: ma.bind(null, e),
          Qr: la.bind(null, e)
        }, await this.sharedClientState.start()), // NOTE: This will immediately call the listener, so we make sure to
        // set it after localStore / remoteStore are started.
        await this.persistence.Ii(async (t2) => {
          await da(this.Vc.syncEngine, t2), this.gcScheduler && (t2 && !this.gcScheduler.started ? this.gcScheduler.start() : t2 || this.gcScheduler.stop()), this.indexBackfillerScheduler && (t2 && !this.indexBackfillerScheduler.started ? this.indexBackfillerScheduler.start() : t2 || this.indexBackfillerScheduler.stop());
        });
      }
      createSharedClientState(t) {
        const e = $u();
        if (!Pu.D(e))
          throw new U(q.UNIMPLEMENTED, "IndexedDB persistence is only available on platforms that support LocalStorage.");
        const n = Zo(t.databaseInfo.databaseId, t.databaseInfo.persistenceKey);
        return new Pu(e, t.asyncQueue, n, t.clientId, t.initialUser);
      }
    };
    var Pa = class {
      async initialize(t, e) {
        this.localStore || (this.localStore = t.localStore, this.sharedClientState = t.sharedClientState, this.datastore = this.createDatastore(e), this.remoteStore = this.createRemoteStore(e), this.eventManager = this.createEventManager(e), this.syncEngine = this.createSyncEngine(
          e,
          /* startAsPrimary=*/
          !t.synchronizeTabs
        ), this.sharedClientState.onlineStateHandler = (t2) => Hc(
          this.syncEngine,
          t2,
          1
          /* OnlineStateSource.SharedClientState */
        ), this.remoteStore.remoteSyncer.handleCredentialChange = ca.bind(null, this.syncEngine), await yc(this.remoteStore, this.syncEngine.isPrimaryClient));
      }
      createEventManager(t) {
        return new bc();
      }
      createDatastore(t) {
        const e = Fu(t.databaseInfo.databaseId), n = (s = t.databaseInfo, new Mu(s));
        var s;
        return function(t2, e2, n2, s2) {
          return new Ku(t2, e2, n2, s2);
        }(t.authCredentials, t.appCheckCredentials, n, e);
      }
      createRemoteStore(t) {
        return e = this.localStore, n = this.datastore, s = t.asyncQueue, i = (t2) => Hc(
          this.syncEngine,
          t2,
          0
          /* OnlineStateSource.RemoteStore */
        ), r = Su.D() ? new Su() : new Vu(), new ju(e, n, s, i, r);
        var e, n, s, i, r;
      }
      createSyncEngine(t, e) {
        return function(t2, e2, n, s, i, r, o) {
          const u = new Kc(t2, e2, n, s, i, r);
          return o && (u.vc = true), u;
        }(this.localStore, this.remoteStore, this.eventManager, this.sharedClientState, t.initialUser, t.maxConcurrentLimboResolutions, e);
      }
      terminate() {
        return async function(t) {
          const e = L(t);
          N("RemoteStore", "RemoteStore shutting down."), e.vu.add(
            5
            /* OfflineCause.Shutdown */
          ), await Wu(e), e.Pu.shutdown(), // Set the OnlineState to Unknown (rather than Offline) to avoid potentially
          // triggering spurious listener events with cached data, etc.
          e.bu.set(
            "Unknown"
            /* OnlineState.Unknown */
          );
        }(this.remoteStore);
      }
    };
    function ba(t, e = 10240) {
      let n = 0;
      return {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        async read() {
          if (n < t.byteLength) {
            const s = {
              value: t.slice(n, n + e),
              done: false
            };
            return n += e, s;
          }
          return {
            done: true
          };
        },
        async cancel() {
        },
        releaseLock() {
        },
        closed: Promise.resolve()
      };
    }
    var Va = class {
      constructor(t) {
        this.observer = t, /**
         * When set to true, will not raise future events. Necessary to deal with
         * async detachment of listener.
         */
        this.muted = false;
      }
      next(t) {
        this.observer.next && this.Sc(this.observer.next, t);
      }
      error(t) {
        this.observer.error ? this.Sc(this.observer.error, t) : k("Uncaught Error in snapshot listener:", t.toString());
      }
      Dc() {
        this.muted = true;
      }
      Sc(t, e) {
        this.muted || setTimeout(() => {
          this.muted || t(e);
        }, 0);
      }
    };
    var Sa = class {
      constructor(t, e) {
        this.Cc = t, this.serializer = e, /** Cached bundle metadata. */
        this.metadata = new K(), /**
         * Internal buffer to hold bundle content, accumulating incomplete element
         * content.
         */
        this.buffer = new Uint8Array(), this.xc = new TextDecoder("utf-8"), // Read the metadata (which is the first element).
        this.Nc().then((t2) => {
          t2 && t2.Qu() ? this.metadata.resolve(t2.Gu.metadata) : this.metadata.reject(new Error(`The first element of the bundle is not a metadata, it is
             ${JSON.stringify(null == t2 ? void 0 : t2.Gu)}`));
        }, (t2) => this.metadata.reject(t2));
      }
      close() {
        return this.Cc.cancel();
      }
      async getMetadata() {
        return this.metadata.promise;
      }
      async bc() {
        return await this.getMetadata(), this.Nc();
      }
      /**
       * Reads from the head of internal buffer, and pulling more data from
       * underlying stream if a complete element cannot be found, until an
       * element(including the prefixed length and the JSON string) is found.
       *
       * Once a complete element is read, it is dropped from internal buffer.
       *
       * Returns either the bundled element, or null if we have reached the end of
       * the stream.
       */
      async Nc() {
        const t = await this.kc();
        if (null === t)
          return null;
        const e = this.xc.decode(t), n = Number(e);
        isNaN(n) && this.Mc(`length string (${e}) is not valid number`);
        const s = await this.$c(n);
        return new kc(JSON.parse(s), t.length + n);
      }
      /** First index of '{' from the underlying buffer. */
      Oc() {
        return this.buffer.findIndex((t) => t === "{".charCodeAt(0));
      }
      /**
       * Reads from the beginning of the internal buffer, until the first '{', and
       * return the content.
       *
       * If reached end of the stream, returns a null.
       */
      async kc() {
        for (; this.Oc() < 0; ) {
          if (await this.Fc())
            break;
        }
        if (0 === this.buffer.length)
          return null;
        const t = this.Oc();
        t < 0 && this.Mc("Reached the end of bundle when a length string is expected.");
        const e = this.buffer.slice(0, t);
        return this.buffer = this.buffer.slice(t), e;
      }
      /**
       * Reads from a specified position from the internal buffer, for a specified
       * number of bytes, pulling more data from the underlying stream if needed.
       *
       * Returns a string decoded from the read bytes.
       */
      async $c(t) {
        for (; this.buffer.length < t; ) {
          await this.Fc() && this.Mc("Reached the end of bundle when more is expected.");
        }
        const e = this.xc.decode(this.buffer.slice(0, t));
        return this.buffer = this.buffer.slice(t), e;
      }
      Mc(t) {
        throw this.Cc.cancel(), new Error(`Invalid bundle format: ${t}`);
      }
      /**
       * Pulls more data from underlying stream to internal buffer.
       * Returns a boolean indicating whether the stream is finished.
       */
      async Fc() {
        const t = await this.Cc.read();
        if (!t.done) {
          const e = new Uint8Array(this.buffer.length + t.value.length);
          e.set(this.buffer), e.set(t.value, this.buffer.length), this.buffer = e;
        }
        return t.done;
      }
    };
    var Da = class {
      constructor(t) {
        this.datastore = t, // The version of each document that was read during this transaction.
        this.readVersions = /* @__PURE__ */ new Map(), this.mutations = [], this.committed = false, /**
         * A deferred usage error that occurred previously in this transaction that
         * will cause the transaction to fail once it actually commits.
         */
        this.lastWriteError = null, /**
         * Set of documents that have been written in the transaction.
         *
         * When there's more than one write to the same key in a transaction, any
         * writes after the first are handled differently.
         */
        this.writtenDocs = /* @__PURE__ */ new Set();
      }
      async lookup(t) {
        if (this.ensureCommitNotCalled(), this.mutations.length > 0)
          throw new U(q.INVALID_ARGUMENT, "Firestore transactions require all reads to be executed before all writes.");
        const e = await async function(t2, e2) {
          const n = L(t2), s = Li(n.serializer) + "/documents", i = {
            documents: e2.map((t3) => $i(n.serializer, t3))
          }, r = await n.vo("BatchGetDocuments", s, i, e2.length), o = /* @__PURE__ */ new Map();
          r.forEach((t3) => {
            const e3 = Gi(n.serializer, t3);
            o.set(e3.key.toString(), e3);
          });
          const u = [];
          return e2.forEach((t3) => {
            const e3 = o.get(t3.toString());
            F(!!e3), u.push(e3);
          }), u;
        }(this.datastore, t);
        return e.forEach((t2) => this.recordVersion(t2)), e;
      }
      set(t, e) {
        this.write(e.toMutation(t, this.precondition(t))), this.writtenDocs.add(t.toString());
      }
      update(t, e) {
        try {
          this.write(e.toMutation(t, this.preconditionForUpdate(t)));
        } catch (t2) {
          this.lastWriteError = t2;
        }
        this.writtenDocs.add(t.toString());
      }
      delete(t) {
        this.write(new Ys(t, this.precondition(t))), this.writtenDocs.add(t.toString());
      }
      async commit() {
        if (this.ensureCommitNotCalled(), this.lastWriteError)
          throw this.lastWriteError;
        const t = this.readVersions;
        this.mutations.forEach((e) => {
          t.delete(e.key.toString());
        }), // For each document that was read but not written to, we want to perform
        // a `verify` operation.
        t.forEach((t2, e) => {
          const n = ht.fromPath(e);
          this.mutations.push(new Xs(n, this.precondition(n)));
        }), await async function(t2, e) {
          const n = L(t2), s = Li(n.serializer) + "/documents", i = {
            writes: e.map((t3) => ji(n.serializer, t3))
          };
          await n.Io("Commit", s, i);
        }(this.datastore, this.mutations), this.committed = true;
      }
      recordVersion(t) {
        let e;
        if (t.isFoundDocument())
          e = t.version;
        else {
          if (!t.isNoDocument())
            throw O();
          e = rt.min();
        }
        const n = this.readVersions.get(t.key.toString());
        if (n) {
          if (!e.isEqual(n))
            throw new U(q.ABORTED, "Document version changed between two reads.");
        } else
          this.readVersions.set(t.key.toString(), e);
      }
      /**
       * Returns the version of this document when it was read in this transaction,
       * as a precondition, or no precondition if it was not read.
       */
      precondition(t) {
        const e = this.readVersions.get(t.toString());
        return !this.writtenDocs.has(t.toString()) && e ? e.isEqual(rt.min()) ? Fs.exists(false) : Fs.updateTime(e) : Fs.none();
      }
      /**
       * Returns the precondition for a document if the operation is an update.
       */
      preconditionForUpdate(t) {
        const e = this.readVersions.get(t.toString());
        if (!this.writtenDocs.has(t.toString()) && e) {
          if (e.isEqual(rt.min()))
            throw new U(q.INVALID_ARGUMENT, "Can't update a document that doesn't exist.");
          return Fs.updateTime(e);
        }
        return Fs.exists(true);
      }
      write(t) {
        this.ensureCommitNotCalled(), this.mutations.push(t);
      }
      ensureCommitNotCalled() {
      }
    };
    var Ca = class {
      constructor(t, e, n, s, i) {
        this.asyncQueue = t, this.datastore = e, this.options = n, this.updateFunction = s, this.deferred = i, this.Bc = n.maxAttempts, this.qo = new Bu(
          this.asyncQueue,
          "transaction_retry"
          /* TimerId.TransactionRetry */
        );
      }
      /** Runs the transaction and sets the result on deferred. */
      run() {
        this.Bc -= 1, this.Lc();
      }
      Lc() {
        this.qo.No(async () => {
          const t = new Da(this.datastore), e = this.qc(t);
          e && e.then((e2) => {
            this.asyncQueue.enqueueAndForget(() => t.commit().then(() => {
              this.deferred.resolve(e2);
            }).catch((t2) => {
              this.Uc(t2);
            }));
          }).catch((t2) => {
            this.Uc(t2);
          });
        });
      }
      qc(t) {
        try {
          const e = this.updateFunction(t);
          return !Ft(e) && e.catch && e.then ? e : (this.deferred.reject(Error("Transaction callback must return a Promise")), null);
        } catch (t2) {
          return this.deferred.reject(t2), null;
        }
      }
      Uc(t) {
        this.Bc > 0 && this.Kc(t) ? (this.Bc -= 1, this.asyncQueue.enqueueAndForget(() => (this.Lc(), Promise.resolve()))) : this.deferred.reject(t);
      }
      Kc(t) {
        if ("FirebaseError" === t.name) {
          const e = t.code;
          return "aborted" === e || "failed-precondition" === e || "already-exists" === e || !oi(e);
        }
        return false;
      }
    };
    var xa = class {
      constructor(t, e, n, s) {
        this.authCredentials = t, this.appCheckCredentials = e, this.asyncQueue = n, this.databaseInfo = s, this.user = V.UNAUTHENTICATED, this.clientId = tt.A(), this.authCredentialListener = () => Promise.resolve(), this.appCheckCredentialListener = () => Promise.resolve(), this.authCredentials.start(n, async (t2) => {
          N("FirestoreClient", "Received user=", t2.uid), await this.authCredentialListener(t2), this.user = t2;
        }), this.appCheckCredentials.start(n, (t2) => (N("FirestoreClient", "Received new app check token=", t2), this.appCheckCredentialListener(t2, this.user)));
      }
      async getConfiguration() {
        return {
          asyncQueue: this.asyncQueue,
          databaseInfo: this.databaseInfo,
          clientId: this.clientId,
          authCredentials: this.authCredentials,
          appCheckCredentials: this.appCheckCredentials,
          initialUser: this.user,
          maxConcurrentLimboResolutions: 100
        };
      }
      setCredentialChangeListener(t) {
        this.authCredentialListener = t;
      }
      setAppCheckTokenChangeListener(t) {
        this.appCheckCredentialListener = t;
      }
      /**
       * Checks that the client has not been terminated. Ensures that other methods on //
       * this class cannot be called after the client is terminated. //
       */
      verifyNotTerminated() {
        if (this.asyncQueue.isShuttingDown)
          throw new U(q.FAILED_PRECONDITION, "The client has already been terminated.");
      }
      terminate() {
        this.asyncQueue.enterRestrictedMode();
        const t = new K();
        return this.asyncQueue.enqueueAndForgetEvenWhileRestricted(async () => {
          try {
            this._onlineComponents && await this._onlineComponents.terminate(), this._offlineComponents && await this._offlineComponents.terminate(), // The credentials provider must be terminated after shutting down the
            // RemoteStore as it will prevent the RemoteStore from retrieving auth
            // tokens.
            this.authCredentials.shutdown(), this.appCheckCredentials.shutdown(), t.resolve();
          } catch (e) {
            const n = Ec(e, "Failed to shutdown persistence");
            t.reject(n);
          }
        }), t.promise;
      }
    };
    async function Na(t, e) {
      t.asyncQueue.verifyOperationInProgress(), N("FirestoreClient", "Initializing OfflineComponentProvider");
      const n = await t.getConfiguration();
      await e.initialize(n);
      let s = n.initialUser;
      t.setCredentialChangeListener(async (t2) => {
        s.isEqual(t2) || (await iu(e.localStore, t2), s = t2);
      }), // When a user calls clearPersistence() in one client, all other clients
      // need to be terminated to allow the delete to succeed.
      e.persistence.setDatabaseDeletedListener(() => t.terminate()), t._offlineComponents = e;
    }
    async function ka(t, e) {
      t.asyncQueue.verifyOperationInProgress();
      const n = await $a(t);
      N("FirestoreClient", "Initializing OnlineComponentProvider");
      const s = await t.getConfiguration();
      await e.initialize(n, s), // The CredentialChangeListener of the online component provider takes
      // precedence over the offline component provider.
      t.setCredentialChangeListener((t2) => gc(e.remoteStore, t2)), t.setAppCheckTokenChangeListener((t2, n2) => gc(e.remoteStore, n2)), t._onlineComponents = e;
    }
    function Ma(t) {
      return "FirebaseError" === t.name ? t.code === q.FAILED_PRECONDITION || t.code === q.UNIMPLEMENTED : !("undefined" != typeof DOMException && t instanceof DOMException) || // When the browser is out of quota we could get either quota exceeded
      // or an aborted error depending on whether the error happened during
      // schema migration.
      (22 === t.code || 20 === t.code || // Firefox Private Browsing mode disables IndexedDb and returns
      // INVALID_STATE for any usage.
      11 === t.code);
    }
    async function $a(t) {
      if (!t._offlineComponents)
        if (t._uninitializedComponentsProvider) {
          N("FirestoreClient", "Using user provided OfflineComponentProvider");
          try {
            await Na(t, t._uninitializedComponentsProvider._offline);
          } catch (e) {
            const n = e;
            if (!Ma(n))
              throw n;
            M("Error using user provided cache. Falling back to memory cache: " + n), await Na(t, new Ea());
          }
        } else
          N("FirestoreClient", "Using default OfflineComponentProvider"), await Na(t, new Ea());
      return t._offlineComponents;
    }
    async function Oa(t) {
      return t._onlineComponents || (t._uninitializedComponentsProvider ? (N("FirestoreClient", "Using user provided OnlineComponentProvider"), await ka(t, t._uninitializedComponentsProvider._online)) : (N("FirestoreClient", "Using default OnlineComponentProvider"), await ka(t, new Pa()))), t._onlineComponents;
    }
    function Fa(t) {
      return $a(t).then((t2) => t2.persistence);
    }
    function Ba(t) {
      return $a(t).then((t2) => t2.localStore);
    }
    function La(t) {
      return Oa(t).then((t2) => t2.remoteStore);
    }
    function qa(t) {
      return Oa(t).then((t2) => t2.syncEngine);
    }
    function Ua(t) {
      return Oa(t).then((t2) => t2.datastore);
    }
    async function Ka(t) {
      const e = await Oa(t), n = e.eventManager;
      return n.onListen = Gc.bind(null, e.syncEngine), n.onUnlisten = jc.bind(null, e.syncEngine), n;
    }
    function Ga(t) {
      return t.asyncQueue.enqueue(async () => {
        const e = await Fa(t), n = await La(t);
        return e.setNetworkEnabled(true), function(t2) {
          const e2 = L(t2);
          return e2.vu.delete(
            0
            /* OfflineCause.UserDisabled */
          ), zu(e2);
        }(n);
      });
    }
    function Qa(t) {
      return t.asyncQueue.enqueue(async () => {
        const e = await Fa(t), n = await La(t);
        return e.setNetworkEnabled(false), async function(t2) {
          const e2 = L(t2);
          e2.vu.add(
            0
            /* OfflineCause.UserDisabled */
          ), await Wu(e2), // Set the OnlineState to Offline so get()s return from cache, etc.
          e2.bu.set(
            "Offline"
            /* OnlineState.Offline */
          );
        }(n);
      });
    }
    function ja(t, e) {
      const n = new K();
      return t.asyncQueue.enqueueAndForget(async () => async function(t2, e2, n2) {
        try {
          const s = await function(t3, e3) {
            const n3 = L(t3);
            return n3.persistence.runTransaction("read document", "readonly", (t4) => n3.localDocuments.getDocument(t4, e3));
          }(t2, e2);
          s.isFoundDocument() ? n2.resolve(s) : s.isNoDocument() ? n2.resolve(null) : n2.reject(new U(q.UNAVAILABLE, "Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)"));
        } catch (t3) {
          const s = Ec(t3, `Failed to get document '${e2} from cache`);
          n2.reject(s);
        }
      }(await Ba(t), e, n)), n.promise;
    }
    function za(t, e, n = {}) {
      const s = new K();
      return t.asyncQueue.enqueueAndForget(async () => function(t2, e2, n2, s2, i) {
        const r = new Va({
          next: (r2) => {
            e2.enqueueAndForget(() => Sc(t2, o));
            const u = r2.docs.has(n2);
            !u && r2.fromCache ? (
              // TODO(dimond): If we're online and the document doesn't
              // exist then we resolve with a doc.exists set to false. If
              // we're offline however, we reject the Promise in this
              // case. Two options: 1) Cache the negative response from
              // the server so we can deliver that even when you're
              // offline 2) Actually reject the Promise in the online case
              // if the document doesn't exist.
              i.reject(new U(q.UNAVAILABLE, "Failed to get document because the client is offline."))
            ) : u && r2.fromCache && s2 && "server" === s2.source ? i.reject(new U(q.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')) : i.resolve(r2);
          },
          error: (t3) => i.reject(t3)
        }), o = new Nc(Gn(n2.path), r, {
          includeMetadataChanges: true,
          Ku: true
        });
        return Vc(t2, o);
      }(await Ka(t), t.asyncQueue, e, n, s)), s.promise;
    }
    function Wa(t, e) {
      const n = new K();
      return t.asyncQueue.enqueueAndForget(async () => async function(t2, e2, n2) {
        try {
          const s = await fu(
            t2,
            e2,
            /* usePreviousResults= */
            true
          ), i = new Lc(e2, s.ir), r = i.sc(s.documents), o = i.applyChanges(
            r,
            /* updateLimboDocuments= */
            false
          );
          n2.resolve(o.snapshot);
        } catch (t3) {
          const s = Ec(t3, `Failed to execute query '${e2} against cache`);
          n2.reject(s);
        }
      }(await Ba(t), e, n)), n.promise;
    }
    function Ha(t, e, n = {}) {
      const s = new K();
      return t.asyncQueue.enqueueAndForget(async () => function(t2, e2, n2, s2, i) {
        const r = new Va({
          next: (n3) => {
            e2.enqueueAndForget(() => Sc(t2, o)), n3.fromCache && "server" === s2.source ? i.reject(new U(q.UNAVAILABLE, 'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')) : i.resolve(n3);
          },
          error: (t3) => i.reject(t3)
        }), o = new Nc(n2, r, {
          includeMetadataChanges: true,
          Ku: true
        });
        return Vc(t2, o);
      }(await Ka(t), t.asyncQueue, e, n, s)), s.promise;
    }
    function Ja(t, e) {
      const n = new Va(e);
      return t.asyncQueue.enqueueAndForget(async () => function(t2, e2) {
        L(t2).ku.add(e2), // Immediately fire an initial event, indicating all existing listeners
        // are in-sync.
        e2.next();
      }(await Ka(t), n)), () => {
        n.Dc(), t.asyncQueue.enqueueAndForget(async () => function(t2, e2) {
          L(t2).ku.delete(e2);
        }(await Ka(t), n));
      };
    }
    function Ya(t, e, n, s) {
      const i = function(t2, e2) {
        let n2;
        n2 = "string" == typeof t2 ? hi().encode(t2) : t2;
        return function(t3, e3) {
          return new Sa(t3, e3);
        }(function(t3, e3) {
          if (t3 instanceof Uint8Array)
            return ba(t3, e3);
          if (t3 instanceof ArrayBuffer)
            return ba(new Uint8Array(t3), e3);
          if (t3 instanceof ReadableStream)
            return t3.getReader();
          throw new Error("Source of `toByteStreamReader` has to be a ArrayBuffer or ReadableStream");
        }(n2), e2);
      }(n, Fu(e));
      t.asyncQueue.enqueueAndForget(async () => {
        Ta(await qa(t), i, s);
      });
    }
    function Xa(t, e) {
      return t.asyncQueue.enqueue(async () => function(t2, e2) {
        const n = L(t2);
        return n.persistence.runTransaction("Get named query", "readonly", (t3) => n.qs.getNamedQuery(t3, e2));
      }(await Ba(t), e));
    }
    function Za(t, e) {
      return t.asyncQueue.enqueue(async () => async function(t2, e2) {
        const n = L(t2), s = n.indexManager, i = [];
        return n.persistence.runTransaction("Configure indexes", "readwrite", (t3) => s.getFieldIndexes(t3).next((n2) => (
          /**
          * @license
          * Copyright 2017 Google LLC
          *
          * Licensed under the Apache License, Version 2.0 (the "License");
          * you may not use this file except in compliance with the License.
          * You may obtain a copy of the License at
          *
          *   http://www.apache.org/licenses/LICENSE-2.0
          *
          * Unless required by applicable law or agreed to in writing, software
          * distributed under the License is distributed on an "AS IS" BASIS,
          * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          * See the License for the specific language governing permissions and
          * limitations under the License.
          */
          /**
          * Compares two array for equality using comparator. The method computes the
          * intersection and invokes `onAdd` for every element that is in `after` but not
          * `before`. `onRemove` is invoked for every element in `before` but missing
          * from `after`.
          *
          * The method creates a copy of both `before` and `after` and runs in O(n log
          * n), where n is the size of the two lists.
          *
          * @param before - The elements that exist in the original array.
          * @param after - The elements to diff against the original array.
          * @param comparator - The comparator for the elements in before and after.
          * @param onAdd - A function to invoke for every element that is part of `
          * after` but not `before`.
          * @param onRemove - A function to invoke for every element that is part of
          * `before` but not `after`.
          */
          function(t4, e3, n3, s2, i2) {
            t4 = [...t4], e3 = [...e3], t4.sort(n3), e3.sort(n3);
            const r = t4.length, o = e3.length;
            let u = 0, c = 0;
            for (; u < o && c < r; ) {
              const r2 = n3(t4[c], e3[u]);
              r2 < 0 ? (
                // The element was removed if the next element in our ordered
                // walkthrough is only in `before`.
                i2(t4[c++])
              ) : r2 > 0 ? (
                // The element was added if the next element in our ordered walkthrough
                // is only in `after`.
                s2(e3[u++])
              ) : (u++, c++);
            }
            for (; u < o; )
              s2(e3[u++]);
            for (; c < r; )
              i2(t4[c++]);
          }(n2, e2, wt, (e3) => {
            i.push(s.addFieldIndex(t3, e3));
          }, (e3) => {
            i.push(s.deleteFieldIndex(t3, e3));
          })
        )).next(() => Rt.waitFor(i)));
      }(await Ba(t), e));
    }
    function th(t) {
      const e = {};
      return void 0 !== t.timeoutSeconds && (e.timeoutSeconds = t.timeoutSeconds), e;
    }
    var eh = /* @__PURE__ */ new Map();
    function nh(t, e, n) {
      if (!n)
        throw new U(q.INVALID_ARGUMENT, `Function ${t}() cannot be called with an empty ${e}.`);
    }
    function sh(t, e, n, s) {
      if (true === e && true === s)
        throw new U(q.INVALID_ARGUMENT, `${t} and ${n} cannot be used together.`);
    }
    function ih(t) {
      if (!ht.isDocumentKey(t))
        throw new U(q.INVALID_ARGUMENT, `Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`);
    }
    function rh(t) {
      if (ht.isDocumentKey(t))
        throw new U(q.INVALID_ARGUMENT, `Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`);
    }
    function oh(t) {
      if (void 0 === t)
        return "undefined";
      if (null === t)
        return "null";
      if ("string" == typeof t)
        return t.length > 20 && (t = `${t.substring(0, 20)}...`), JSON.stringify(t);
      if ("number" == typeof t || "boolean" == typeof t)
        return "" + t;
      if ("object" == typeof t) {
        if (t instanceof Array)
          return "an array";
        {
          const e = (
            /** try to get the constructor name for an object. */
            function(t2) {
              if (t2.constructor)
                return t2.constructor.name;
              return null;
            }(t)
          );
          return e ? `a custom ${e} object` : "an object";
        }
      }
      return "function" == typeof t ? "a function" : O();
    }
    function uh(t, e) {
      if ("_delegate" in t && // Unwrap Compat types
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      (t = t._delegate), !(t instanceof e)) {
        if (e.name === t.constructor.name)
          throw new U(q.INVALID_ARGUMENT, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
        {
          const n = oh(t);
          throw new U(q.INVALID_ARGUMENT, `Expected type '${e.name}', but it was: ${n}`);
        }
      }
      return t;
    }
    function ch(t, e) {
      if (e <= 0)
        throw new U(q.INVALID_ARGUMENT, `Function ${t}() requires a positive number, but it was: ${e}.`);
    }
    var ah = class {
      constructor(t) {
        var e, n;
        if (void 0 === t.host) {
          if (void 0 !== t.ssl)
            throw new U(q.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
          this.host = "firestore.googleapis.com", this.ssl = true;
        } else
          this.host = t.host, this.ssl = null === (e = t.ssl) || void 0 === e || e;
        if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, this.cache = t.localCache, void 0 === t.cacheSizeBytes)
          this.cacheSizeBytes = 41943040;
        else {
          if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576)
            throw new U(q.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
          this.cacheSizeBytes = t.cacheSizeBytes;
        }
        sh("experimentalForceLongPolling", t.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", t.experimentalAutoDetectLongPolling), this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalForceLongPolling ? this.experimentalAutoDetectLongPolling = false : void 0 === t.experimentalAutoDetectLongPolling ? this.experimentalAutoDetectLongPolling = true : (
          // For backwards compatibility, coerce the value to boolean even though
          // the TypeScript compiler has narrowed the type to boolean already.
          // noinspection PointlessBooleanExpressionJS
          this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling
        ), this.experimentalLongPollingOptions = th(null !== (n = t.experimentalLongPollingOptions) && void 0 !== n ? n : {}), function(t2) {
          if (void 0 !== t2.timeoutSeconds) {
            if (isNaN(t2.timeoutSeconds))
              throw new U(q.INVALID_ARGUMENT, `invalid long polling timeout: ${t2.timeoutSeconds} (must not be NaN)`);
            if (t2.timeoutSeconds < 5)
              throw new U(q.INVALID_ARGUMENT, `invalid long polling timeout: ${t2.timeoutSeconds} (minimum allowed value is 5)`);
            if (t2.timeoutSeconds > 30)
              throw new U(q.INVALID_ARGUMENT, `invalid long polling timeout: ${t2.timeoutSeconds} (maximum allowed value is 30)`);
          }
        }(this.experimentalLongPollingOptions), this.useFetchStreams = !!t.useFetchStreams;
      }
      isEqual(t) {
        return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && (e = this.experimentalLongPollingOptions, n = t.experimentalLongPollingOptions, e.timeoutSeconds === n.timeoutSeconds) && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties && this.useFetchStreams === t.useFetchStreams;
        var e, n;
      }
    };
    var hh = class {
      /** @hideconstructor */
      constructor(t, e, n, s) {
        this._authCredentials = t, this._appCheckCredentials = e, this._databaseId = n, this._app = s, /**
         * Whether it's a Firestore or Firestore Lite instance.
         */
        this.type = "firestore-lite", this._persistenceKey = "(lite)", this._settings = new ah({}), this._settingsFrozen = false;
      }
      /**
       * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service
       * instance.
       */
      get app() {
        if (!this._app)
          throw new U(q.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
        return this._app;
      }
      get _initialized() {
        return this._settingsFrozen;
      }
      get _terminated() {
        return void 0 !== this._terminateTask;
      }
      _setSettings(t) {
        if (this._settingsFrozen)
          throw new U(q.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
        this._settings = new ah(t), void 0 !== t.credentials && (this._authCredentials = function(t2) {
          if (!t2)
            return new Q();
          switch (t2.type) {
            case "firstParty":
              return new H(t2.sessionIndex || "0", t2.iamToken || null, t2.authTokenFactory || null);
            case "provider":
              return t2.client;
            default:
              throw new U(q.INVALID_ARGUMENT, "makeAuthCredentialsProvider failed due to invalid credential type");
          }
        }(t.credentials));
      }
      _getSettings() {
        return this._settings;
      }
      _freezeSettings() {
        return this._settingsFrozen = true, this._settings;
      }
      _delete() {
        return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;
      }
      /** Returns a JSON-serializable representation of this `Firestore` instance. */
      toJSON() {
        return {
          app: this._app,
          databaseId: this._databaseId,
          settings: this._settings
        };
      }
      /**
       * Terminates all components used by this client. Subclasses can override
       * this method to clean up their own dependencies, but must also call this
       * method.
       *
       * Only ever called once.
       */
      _terminate() {
        return function(t) {
          const e = eh.get(t);
          e && (N("ComponentProvider", "Removing Datastore"), eh.delete(t), e.terminate());
        }(this), Promise.resolve();
      }
    };
    function lh(t, e, n, s = {}) {
      var i;
      const r = (t = uh(t, hh))._getSettings(), o = `${e}:${n}`;
      if ("firestore.googleapis.com" !== r.host && r.host !== o && M("Host has been set in both settings() and connectFirestoreEmulator(), emulator host will be used."), t._setSettings(Object.assign(Object.assign({}, r), {
        host: o,
        ssl: false
      })), s.mockUserToken) {
        let e2, n2;
        if ("string" == typeof s.mockUserToken)
          e2 = s.mockUserToken, n2 = V.MOCK_USER;
        else {
          e2 = util.createMockUserToken(s.mockUserToken, null === (i = t._app) || void 0 === i ? void 0 : i.options.projectId);
          const r2 = s.mockUserToken.sub || s.mockUserToken.user_id;
          if (!r2)
            throw new U(q.INVALID_ARGUMENT, "mockUserToken must contain 'sub' or 'user_id' field!");
          n2 = new V(r2);
        }
        t._authCredentials = new j(new G(e2, n2));
      }
    }
    var fh = class _fh {
      /** @hideconstructor */
      constructor(t, e, n) {
        this.converter = e, this._key = n, /** The type of this Firestore reference. */
        this.type = "document", this.firestore = t;
      }
      get _path() {
        return this._key.path;
      }
      /**
       * The document's identifier within its collection.
       */
      get id() {
        return this._key.path.lastSegment();
      }
      /**
       * A string representing the path of the referenced document (relative
       * to the root of the database).
       */
      get path() {
        return this._key.path.canonicalString();
      }
      /**
       * The collection this `DocumentReference` belongs to.
       */
      get parent() {
        return new wh(this.firestore, this.converter, this._key.path.popLast());
      }
      withConverter(t) {
        return new _fh(this.firestore, t, this._key);
      }
    };
    var dh = class _dh {
      // This is the lite version of the Query class in the main SDK.
      /** @hideconstructor protected */
      constructor(t, e, n) {
        this.converter = e, this._query = n, /** The type of this Firestore reference. */
        this.type = "query", this.firestore = t;
      }
      withConverter(t) {
        return new _dh(this.firestore, t, this._query);
      }
    };
    var wh = class _wh extends dh {
      /** @hideconstructor */
      constructor(t, e, n) {
        super(t, e, Gn(n)), this._path = n, /** The type of this Firestore reference. */
        this.type = "collection";
      }
      /** The collection's identifier. */
      get id() {
        return this._query.path.lastSegment();
      }
      /**
       * A string representing the path of the referenced collection (relative
       * to the root of the database).
       */
      get path() {
        return this._query.path.canonicalString();
      }
      /**
       * A reference to the containing `DocumentReference` if this is a
       * subcollection. If this isn't a subcollection, the reference is null.
       */
      get parent() {
        const t = this._path.popLast();
        return t.isEmpty() ? null : new fh(
          this.firestore,
          /* converter= */
          null,
          new ht(t)
        );
      }
      withConverter(t) {
        return new _wh(this.firestore, t, this._path);
      }
    };
    function _h(t, e, ...n) {
      if (t = util.getModularInstance(t), nh("collection", "path", e), t instanceof hh) {
        const s = ut.fromString(e, ...n);
        return rh(s), new wh(
          t,
          /* converter= */
          null,
          s
        );
      }
      {
        if (!(t instanceof fh || t instanceof wh))
          throw new U(q.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
        const s = t._path.child(ut.fromString(e, ...n));
        return rh(s), new wh(
          t.firestore,
          /* converter= */
          null,
          s
        );
      }
    }
    function mh(t, e) {
      if (t = uh(t, hh), nh("collectionGroup", "collection id", e), e.indexOf("/") >= 0)
        throw new U(q.INVALID_ARGUMENT, `Invalid collection ID '${e}' passed to function collectionGroup(). Collection IDs must not contain '/'.`);
      return new dh(
        t,
        /* converter= */
        null,
        function(t2) {
          return new Un(ut.emptyPath(), t2);
        }(e)
      );
    }
    function gh(t, e, ...n) {
      if (t = util.getModularInstance(t), // We allow omission of 'pathString' but explicitly prohibit passing in both
      // 'undefined' and 'null'.
      1 === arguments.length && (e = tt.A()), nh("doc", "path", e), t instanceof hh) {
        const s = ut.fromString(e, ...n);
        return ih(s), new fh(
          t,
          /* converter= */
          null,
          new ht(s)
        );
      }
      {
        if (!(t instanceof fh || t instanceof wh))
          throw new U(q.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
        const s = t._path.child(ut.fromString(e, ...n));
        return ih(s), new fh(t.firestore, t instanceof wh ? t.converter : null, new ht(s));
      }
    }
    function yh(t, e) {
      return t = util.getModularInstance(t), e = util.getModularInstance(e), (t instanceof fh || t instanceof wh) && (e instanceof fh || e instanceof wh) && (t.firestore === e.firestore && t.path === e.path && t.converter === e.converter);
    }
    function ph(t, e) {
      return t = util.getModularInstance(t), e = util.getModularInstance(e), t instanceof dh && e instanceof dh && (t.firestore === e.firestore && Zn(t._query, e._query) && t.converter === e.converter);
    }
    var Ih = class {
      constructor() {
        this.Gc = Promise.resolve(), // A list of retryable operations. Retryable operations are run in order and
        // retried with backoff.
        this.Qc = [], // Is this AsyncQueue being shut down? Once it is set to true, it will not
        // be changed again.
        this.jc = false, // Operations scheduled to be queued in the future. Operations are
        // automatically removed after they are run or canceled.
        this.zc = [], // visible for testing
        this.Wc = null, // Flag set while there's an outstanding AsyncQueue operation, used for
        // assertion sanity-checks.
        this.Hc = false, // Enabled during shutdown on Safari to prevent future access to IndexedDB.
        this.Jc = false, // List of TimerIds to fast-forward delays for.
        this.Yc = [], // Backoff timer used to schedule retries for retryable operations
        this.qo = new Bu(
          this,
          "async_queue_retry"
          /* TimerId.AsyncQueueRetry */
        ), // Visibility handler that triggers an immediate retry of all retryable
        // operations. Meant to speed up recovery when we regain file system access
        // after page comes into foreground.
        this.Xc = () => {
          const t2 = Ou();
          t2 && N("AsyncQueue", "Visibility state changed to " + t2.visibilityState), this.qo.Mo();
        };
        const t = Ou();
        t && "function" == typeof t.addEventListener && t.addEventListener("visibilitychange", this.Xc);
      }
      get isShuttingDown() {
        return this.jc;
      }
      /**
       * Adds a new operation to the queue without waiting for it to complete (i.e.
       * we ignore the Promise result).
       */
      enqueueAndForget(t) {
        this.enqueue(t);
      }
      enqueueAndForgetEvenWhileRestricted(t) {
        this.Zc(), // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.ta(t);
      }
      enterRestrictedMode(t) {
        if (!this.jc) {
          this.jc = true, this.Jc = t || false;
          const e = Ou();
          e && "function" == typeof e.removeEventListener && e.removeEventListener("visibilitychange", this.Xc);
        }
      }
      enqueue(t) {
        if (this.Zc(), this.jc)
          return new Promise(() => {
          });
        const e = new K();
        return this.ta(() => this.jc && this.Jc ? Promise.resolve() : (t().then(e.resolve, e.reject), e.promise)).then(() => e.promise);
      }
      enqueueRetryable(t) {
        this.enqueueAndForget(() => (this.Qc.push(t), this.ea()));
      }
      /**
       * Runs the next operation from the retryable queue. If the operation fails,
       * reschedules with backoff.
       */
      async ea() {
        if (0 !== this.Qc.length) {
          try {
            await this.Qc[0](), this.Qc.shift(), this.qo.reset();
          } catch (t) {
            if (!Dt(t))
              throw t;
            N("AsyncQueue", "Operation failed with retryable error: " + t);
          }
          this.Qc.length > 0 && // If there are additional operations, we re-schedule `retryNextOp()`.
          // This is necessary to run retryable operations that failed during
          // their initial attempt since we don't know whether they are already
          // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`
          // needs to  be re-run, we will run `op1`, `op1`, `op2` using the
          // already enqueued calls to `retryNextOp()`. `op3()` will then run in the
          // call scheduled here.
          // Since `backoffAndRun()` cancels an existing backoff and schedules a
          // new backoff on every call, there is only ever a single additional
          // operation in the queue.
          this.qo.No(() => this.ea());
        }
      }
      ta(t) {
        const e = this.Gc.then(() => (this.Hc = true, t().catch((t2) => {
          this.Wc = t2, this.Hc = false;
          const e2 = (
            /**
            * Chrome includes Error.message in Error.stack. Other browsers do not.
            * This returns expected output of message + stack when available.
            * @param error - Error or FirestoreError
            */
            function(t3) {
              let e3 = t3.message || "";
              t3.stack && (e3 = t3.stack.includes(t3.message) ? t3.stack : t3.message + "\n" + t3.stack);
              return e3;
            }(t2)
          );
          throw k("INTERNAL UNHANDLED ERROR: ", e2), t2;
        }).then((t2) => (this.Hc = false, t2))));
        return this.Gc = e, e;
      }
      enqueueAfterDelay(t, e, n) {
        this.Zc(), // Fast-forward delays for timerIds that have been overriden.
        this.Yc.indexOf(t) > -1 && (e = 0);
        const s = Tc.createAndSchedule(this, t, e, n, (t2) => this.na(t2));
        return this.zc.push(s), s;
      }
      Zc() {
        this.Wc && O();
      }
      verifyOperationInProgress() {
      }
      /**
       * Waits until all currently queued tasks are finished executing. Delayed
       * operations are not run.
       */
      async sa() {
        let t;
        do {
          t = this.Gc, await t;
        } while (t !== this.Gc);
      }
      /**
       * For Tests: Determine if a delayed operation with a particular TimerId
       * exists.
       */
      ia(t) {
        for (const e of this.zc)
          if (e.timerId === t)
            return true;
        return false;
      }
      /**
       * For Tests: Runs some or all delayed operations early.
       *
       * @param lastTimerId - Delayed operations up to and including this TimerId
       * will be drained. Pass TimerId.All to run all delayed operations.
       * @returns a Promise that resolves once all operations have been run.
       */
      ra(t) {
        return this.sa().then(() => {
          this.zc.sort((t2, e) => t2.targetTimeMs - e.targetTimeMs);
          for (const e of this.zc)
            if (e.skipDelay(), "all" !== t && e.timerId === t)
              break;
          return this.sa();
        });
      }
      /**
       * For Tests: Skip all subsequent delays for a timer id.
       */
      oa(t) {
        this.Yc.push(t);
      }
      /** Called once a DelayedOperation is run or canceled. */
      na(t) {
        const e = this.zc.indexOf(t);
        this.zc.splice(e, 1);
      }
    };
    function Th(t) {
      return function(t2, e) {
        if ("object" != typeof t2 || null === t2)
          return false;
        const n = t2;
        for (const t3 of e)
          if (t3 in n && "function" == typeof n[t3])
            return true;
        return false;
      }(t, ["next", "error", "complete"]);
    }
    var Eh = class {
      constructor() {
        this._progressObserver = {}, this._taskCompletionResolver = new K(), this._lastProgress = {
          taskState: "Running",
          totalBytes: 0,
          totalDocuments: 0,
          bytesLoaded: 0,
          documentsLoaded: 0
        };
      }
      /**
       * Registers functions to listen to bundle loading progress events.
       * @param next - Called when there is a progress update from bundle loading. Typically `next` calls occur
       *   each time a Firestore document is loaded from the bundle.
       * @param error - Called when an error occurs during bundle loading. The task aborts after reporting the
       *   error, and there should be no more updates after this.
       * @param complete - Called when the loading task is complete.
       */
      onProgress(t, e, n) {
        this._progressObserver = {
          next: t,
          error: e,
          complete: n
        };
      }
      /**
       * Implements the `Promise<LoadBundleTaskProgress>.catch` interface.
       *
       * @param onRejected - Called when an error occurs during bundle loading.
       */
      catch(t) {
        return this._taskCompletionResolver.promise.catch(t);
      }
      /**
       * Implements the `Promise<LoadBundleTaskProgress>.then` interface.
       *
       * @param onFulfilled - Called on the completion of the loading task with a final `LoadBundleTaskProgress` update.
       *   The update will always have its `taskState` set to `"Success"`.
       * @param onRejected - Called when an error occurs during bundle loading.
       */
      then(t, e) {
        return this._taskCompletionResolver.promise.then(t, e);
      }
      /**
       * Notifies all observers that bundle loading has completed, with a provided
       * `LoadBundleTaskProgress` object.
       *
       * @private
       */
      _completeWith(t) {
        this._updateProgress(t), this._progressObserver.complete && this._progressObserver.complete(), this._taskCompletionResolver.resolve(t);
      }
      /**
       * Notifies all observers that bundle loading has failed, with a provided
       * `Error` as the reason.
       *
       * @private
       */
      _failWith(t) {
        this._lastProgress.taskState = "Error", this._progressObserver.next && this._progressObserver.next(this._lastProgress), this._progressObserver.error && this._progressObserver.error(t), this._taskCompletionResolver.reject(t);
      }
      /**
       * Notifies a progress update of loading a bundle.
       * @param progress - The new progress.
       *
       * @private
       */
      _updateProgress(t) {
        this._lastProgress = t, this._progressObserver.next && this._progressObserver.next(t);
      }
    };
    var Ah = -1;
    var vh = class extends hh {
      /** @hideconstructor */
      constructor(t, e, n, s) {
        super(t, e, n, s), /**
         * Whether it's a {@link Firestore} or Firestore Lite instance.
         */
        this.type = "firestore", this._queue = new Ih(), this._persistenceKey = (null == s ? void 0 : s.name) || "[DEFAULT]";
      }
      _terminate() {
        return this._firestoreClient || // The client must be initialized to ensure that all subsequent API
        // usage throws an exception.
        Vh(this), this._firestoreClient.terminate();
      }
    };
    function Rh(t, e, n) {
      n || (n = "(default)");
      const s = app._getProvider(t, "firestore");
      if (s.isInitialized(n)) {
        const t2 = s.getImmediate({
          identifier: n
        }), i = s.getOptions(n);
        if (util.deepEqual(i, e))
          return t2;
        throw new U(q.FAILED_PRECONDITION, "initializeFirestore() has already been called with different options. To avoid this error, call initializeFirestore() with the same options as when it was originally called, or call getFirestore() to return the already initialized instance.");
      }
      if (void 0 !== e.cacheSizeBytes && void 0 !== e.localCache)
        throw new U(q.INVALID_ARGUMENT, "cache and cacheSizeBytes cannot be specified at the same time as cacheSizeBytes willbe deprecated. Instead, specify the cache size in the cache object");
      if (void 0 !== e.cacheSizeBytes && -1 !== e.cacheSizeBytes && e.cacheSizeBytes < 1048576)
        throw new U(q.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
      return s.initialize({
        options: e,
        instanceIdentifier: n
      });
    }
    function Ph(e, n) {
      const s = "object" == typeof e ? e : app.getApp(), i = "string" == typeof e ? e : n || "(default)", r = app._getProvider(s, "firestore").getImmediate({
        identifier: i
      });
      if (!r._initialized) {
        const t = util.getDefaultEmulatorHostnameAndPort("firestore");
        t && lh(r, ...t);
      }
      return r;
    }
    function bh(t) {
      return t._firestoreClient || Vh(t), t._firestoreClient.verifyNotTerminated(), t._firestoreClient;
    }
    function Vh(t) {
      var e, n, s;
      const i = t._freezeSettings(), r = function(t2, e2, n2, s2) {
        return new $e(t2, e2, n2, s2.host, s2.ssl, s2.experimentalForceLongPolling, s2.experimentalAutoDetectLongPolling, th(s2.experimentalLongPollingOptions), s2.useFetchStreams);
      }(t._databaseId, (null === (e = t._app) || void 0 === e ? void 0 : e.options.appId) || "", t._persistenceKey, i);
      t._firestoreClient = new xa(t._authCredentials, t._appCheckCredentials, t._queue, r), (null === (n = i.cache) || void 0 === n ? void 0 : n._offlineComponentProvider) && (null === (s = i.cache) || void 0 === s ? void 0 : s._onlineComponentProvider) && (t._firestoreClient._uninitializedComponentsProvider = {
        _offlineKind: i.cache.kind,
        _offline: i.cache._offlineComponentProvider,
        _online: i.cache._onlineComponentProvider
      });
    }
    function Sh(t, e) {
      Bh(t = uh(t, vh));
      const n = bh(t);
      if (n._uninitializedComponentsProvider)
        throw new U(q.FAILED_PRECONDITION, "SDK cache is already specified.");
      M("enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.");
      const s = t._freezeSettings(), i = new Pa();
      return Ch(n, i, new va(i, s.cacheSizeBytes, null == e ? void 0 : e.forceOwnership));
    }
    function Dh(t) {
      Bh(t = uh(t, vh));
      const e = bh(t);
      if (e._uninitializedComponentsProvider)
        throw new U(q.FAILED_PRECONDITION, "SDK cache is already specified.");
      M("enableMultiTabIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.");
      const n = t._freezeSettings(), s = new Pa();
      return Ch(e, s, new Ra(s, n.cacheSizeBytes));
    }
    function Ch(t, e, n) {
      const s = new K();
      return t.asyncQueue.enqueue(async () => {
        try {
          await Na(t, n), await ka(t, e), s.resolve();
        } catch (t2) {
          const e2 = t2;
          if (!Ma(e2))
            throw e2;
          M("Error enabling indexeddb cache. Falling back to memory cache: " + e2), s.reject(e2);
        }
      }).then(() => s.promise);
    }
    function xh(t) {
      if (t._initialized && !t._terminated)
        throw new U(q.FAILED_PRECONDITION, "Persistence can only be cleared before a Firestore instance is initialized or after it is terminated.");
      const e = new K();
      return t._queue.enqueueAndForgetEvenWhileRestricted(async () => {
        try {
          await async function(t2) {
            if (!bt.D())
              return Promise.resolve();
            const e2 = t2 + "main";
            await bt.delete(e2);
          }(Zo(t._databaseId, t._persistenceKey)), e.resolve();
        } catch (t2) {
          e.reject(t2);
        }
      }), e.promise;
    }
    function Nh(t) {
      return function(t2) {
        const e = new K();
        return t2.asyncQueue.enqueueAndForget(async () => Zc(await qa(t2), e)), e.promise;
      }(bh(t = uh(t, vh)));
    }
    function kh(t) {
      return Ga(bh(t = uh(t, vh)));
    }
    function Mh(t) {
      return Qa(bh(t = uh(t, vh)));
    }
    function $h(t) {
      return app._removeServiceInstance(t.app, "firestore", t._databaseId.database), t._delete();
    }
    function Oh(t, e) {
      const n = bh(t = uh(t, vh)), s = new Eh();
      return Ya(n, t._databaseId, e, s), s;
    }
    function Fh(t, e) {
      return Xa(bh(t = uh(t, vh)), e).then((e2) => e2 ? new dh(t, null, e2.query) : null);
    }
    function Bh(t) {
      if (t._initialized || t._terminated)
        throw new U(q.FAILED_PRECONDITION, "Firestore has already been started and persistence can no longer be enabled. You can only enable persistence before calling any other methods on a Firestore object.");
    }
    var Lh = class {
      /**
       * Create a new AggregateField<T>
       * @param _aggregateType Specifies the type of aggregation operation to perform.
       * @param _internalFieldPath Optionally specifies the field that is aggregated.
       * @internal
       */
      constructor(t = "count", e) {
        this._aggregateType = t, this._internalFieldPath = e, /** A type string to uniquely identify instances of this class. */
        this.type = "AggregateField";
      }
    };
    var qh = class {
      /** @hideconstructor */
      constructor(t, e, n) {
        this._userDataWriter = e, this._data = n, /** A type string to uniquely identify instances of this class. */
        this.type = "AggregateQuerySnapshot", this.query = t;
      }
      /**
       * Returns the results of the aggregations performed over the underlying
       * query.
       *
       * The keys of the returned object will be the same as those of the
       * `AggregateSpec` object specified to the aggregation method, and the values
       * will be the corresponding aggregation result.
       *
       * @returns The results of the aggregations performed over the underlying
       * query.
       */
      data() {
        return this._userDataWriter.convertObjectMap(this._data);
      }
    };
    var Uh = class _Uh {
      /** @hideconstructor */
      constructor(t) {
        this._byteString = t;
      }
      /**
       * Creates a new `Bytes` object from the given Base64 string, converting it to
       * bytes.
       *
       * @param base64 - The Base64 string used to create the `Bytes` object.
       */
      static fromBase64String(t) {
        try {
          return new _Uh(Ve.fromBase64String(t));
        } catch (t2) {
          throw new U(q.INVALID_ARGUMENT, "Failed to construct data from Base64 string: " + t2);
        }
      }
      /**
       * Creates a new `Bytes` object from the given Uint8Array.
       *
       * @param array - The Uint8Array used to create the `Bytes` object.
       */
      static fromUint8Array(t) {
        return new _Uh(Ve.fromUint8Array(t));
      }
      /**
       * Returns the underlying bytes as a Base64-encoded string.
       *
       * @returns The Base64-encoded string created from the `Bytes` object.
       */
      toBase64() {
        return this._byteString.toBase64();
      }
      /**
       * Returns the underlying bytes in a new `Uint8Array`.
       *
       * @returns The Uint8Array created from the `Bytes` object.
       */
      toUint8Array() {
        return this._byteString.toUint8Array();
      }
      /**
       * Returns a string representation of the `Bytes` object.
       *
       * @returns A string representation of the `Bytes` object.
       */
      toString() {
        return "Bytes(base64: " + this.toBase64() + ")";
      }
      /**
       * Returns true if this `Bytes` object is equal to the provided one.
       *
       * @param other - The `Bytes` object to compare against.
       * @returns true if this `Bytes` object is equal to the provided one.
       */
      isEqual(t) {
        return this._byteString.isEqual(t._byteString);
      }
    };
    var Kh = class {
      /**
       * Creates a `FieldPath` from the provided field names. If more than one field
       * name is provided, the path will point to a nested field in a document.
       *
       * @param fieldNames - A list of field names.
       */
      constructor(...t) {
        for (let e = 0; e < t.length; ++e)
          if (0 === t[e].length)
            throw new U(q.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
        this._internalPath = new at(t);
      }
      /**
       * Returns true if this `FieldPath` is equal to the provided one.
       *
       * @param other - The `FieldPath` to compare against.
       * @returns true if this `FieldPath` is equal to the provided one.
       */
      isEqual(t) {
        return this._internalPath.isEqual(t._internalPath);
      }
    };
    function Gh() {
      return new Kh("__name__");
    }
    var Qh = class {
      /**
       * @param _methodName - The public API endpoint that returns this class.
       * @hideconstructor
       */
      constructor(t) {
        this._methodName = t;
      }
    };
    var jh = class {
      /**
       * Creates a new immutable `GeoPoint` object with the provided latitude and
       * longitude values.
       * @param latitude - The latitude as number between -90 and 90.
       * @param longitude - The longitude as number between -180 and 180.
       */
      constructor(t, e) {
        if (!isFinite(t) || t < -90 || t > 90)
          throw new U(q.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + t);
        if (!isFinite(e) || e < -180 || e > 180)
          throw new U(q.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + e);
        this._lat = t, this._long = e;
      }
      /**
       * The latitude of this `GeoPoint` instance.
       */
      get latitude() {
        return this._lat;
      }
      /**
       * The longitude of this `GeoPoint` instance.
       */
      get longitude() {
        return this._long;
      }
      /**
       * Returns true if this `GeoPoint` is equal to the provided one.
       *
       * @param other - The `GeoPoint` to compare against.
       * @returns true if this `GeoPoint` is equal to the provided one.
       */
      isEqual(t) {
        return this._lat === t._lat && this._long === t._long;
      }
      /** Returns a JSON-serializable representation of this GeoPoint. */
      toJSON() {
        return {
          latitude: this._lat,
          longitude: this._long
        };
      }
      /**
       * Actually private to JS consumers of our API, so this function is prefixed
       * with an underscore.
       */
      _compareTo(t) {
        return et(this._lat, t._lat) || et(this._long, t._long);
      }
    };
    var zh = /^__.*__$/;
    var Wh = class {
      constructor(t, e, n) {
        this.data = t, this.fieldMask = e, this.fieldTransforms = n;
      }
      toMutation(t, e) {
        return null !== this.fieldMask ? new zs(t, this.data, this.fieldMask, e, this.fieldTransforms) : new js(t, this.data, e, this.fieldTransforms);
      }
    };
    var Hh = class {
      constructor(t, e, n) {
        this.data = t, this.fieldMask = e, this.fieldTransforms = n;
      }
      toMutation(t, e) {
        return new zs(t, this.data, this.fieldMask, e, this.fieldTransforms);
      }
    };
    function Jh(t) {
      switch (t) {
        case 0:
        case 2:
        case 1:
          return true;
        case 3:
        case 4:
          return false;
        default:
          throw O();
      }
    }
    var Yh = class _Yh {
      /**
       * Initializes a ParseContext with the given source and path.
       *
       * @param settings - The settings for the parser.
       * @param databaseId - The database ID of the Firestore instance.
       * @param serializer - The serializer to use to generate the Value proto.
       * @param ignoreUndefinedProperties - Whether to ignore undefined properties
       * rather than throw.
       * @param fieldTransforms - A mutable list of field transforms encountered
       * while parsing the data.
       * @param fieldMask - A mutable list of field paths encountered while parsing
       * the data.
       *
       * TODO(b/34871131): We don't support array paths right now, so path can be
       * null to indicate the context represents any location within an array (in
       * which case certain features will not work and errors will be somewhat
       * compromised).
       */
      constructor(t, e, n, s, i, r) {
        this.settings = t, this.databaseId = e, this.serializer = n, this.ignoreUndefinedProperties = s, // Minor hack: If fieldTransforms is undefined, we assume this is an
        // external call and we need to validate the entire path.
        void 0 === i && this.ua(), this.fieldTransforms = i || [], this.fieldMask = r || [];
      }
      get path() {
        return this.settings.path;
      }
      get ca() {
        return this.settings.ca;
      }
      /** Returns a new context with the specified settings overwritten. */
      aa(t) {
        return new _Yh(Object.assign(Object.assign({}, this.settings), t), this.databaseId, this.serializer, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);
      }
      ha(t) {
        var e;
        const n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), s = this.aa({
          path: n,
          la: false
        });
        return s.fa(t), s;
      }
      da(t) {
        var e;
        const n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), s = this.aa({
          path: n,
          la: false
        });
        return s.ua(), s;
      }
      wa(t) {
        return this.aa({
          path: void 0,
          la: true
        });
      }
      _a(t) {
        return gl(t, this.settings.methodName, this.settings.ma || false, this.path, this.settings.ga);
      }
      /** Returns 'true' if 'fieldPath' was traversed when creating this context. */
      contains(t) {
        return void 0 !== this.fieldMask.find((e) => t.isPrefixOf(e)) || void 0 !== this.fieldTransforms.find((e) => t.isPrefixOf(e.field));
      }
      ua() {
        if (this.path)
          for (let t = 0; t < this.path.length; t++)
            this.fa(this.path.get(t));
      }
      fa(t) {
        if (0 === t.length)
          throw this._a("Document fields must not be empty");
        if (Jh(this.ca) && zh.test(t))
          throw this._a('Document fields cannot begin and end with "__"');
      }
    };
    var Xh = class {
      constructor(t, e, n) {
        this.databaseId = t, this.ignoreUndefinedProperties = e, this.serializer = n || Fu(t);
      }
      /** Creates a new top-level parse context. */
      ya(t, e, n, s = false) {
        return new Yh({
          ca: t,
          methodName: e,
          ga: n,
          path: at.emptyPath(),
          la: false,
          ma: s
        }, this.databaseId, this.serializer, this.ignoreUndefinedProperties);
      }
    };
    function Zh(t) {
      const e = t._freezeSettings(), n = Fu(t._databaseId);
      return new Xh(t._databaseId, !!e.ignoreUndefinedProperties, n);
    }
    function tl(t, e, n, s, i, r = {}) {
      const o = t.ya(r.merge || r.mergeFields ? 2 : 0, e, n, i);
      dl("Data must be an object, but it was:", o, s);
      const u = ll(s, o);
      let c, a;
      if (r.merge)
        c = new Re(o.fieldMask), a = o.fieldTransforms;
      else if (r.mergeFields) {
        const t2 = [];
        for (const s2 of r.mergeFields) {
          const i2 = wl(e, s2, n);
          if (!o.contains(i2))
            throw new U(q.INVALID_ARGUMENT, `Field '${i2}' is specified in your field mask but missing from your input data.`);
          yl(t2, i2) || t2.push(i2);
        }
        c = new Re(t2), a = o.fieldTransforms.filter((t3) => c.covers(t3.field));
      } else
        c = null, a = o.fieldTransforms;
      return new Wh(new un(u), c, a);
    }
    var el = class _el extends Qh {
      _toFieldTransform(t) {
        if (2 !== t.ca)
          throw 1 === t.ca ? t._a(`${this._methodName}() can only appear at the top level of your update data`) : t._a(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);
        return t.fieldMask.push(t.path), null;
      }
      isEqual(t) {
        return t instanceof _el;
      }
    };
    function nl(t, e, n) {
      return new Yh({
        ca: 3,
        ga: e.settings.ga,
        methodName: t._methodName,
        la: n
      }, e.databaseId, e.serializer, e.ignoreUndefinedProperties);
    }
    var sl = class _sl extends Qh {
      _toFieldTransform(t) {
        return new Ms(t.path, new bs());
      }
      isEqual(t) {
        return t instanceof _sl;
      }
    };
    var il = class extends Qh {
      constructor(t, e) {
        super(t), this.pa = e;
      }
      _toFieldTransform(t) {
        const e = nl(
          this,
          t,
          /*array=*/
          true
        ), n = this.pa.map((t2) => hl(t2, e)), s = new Vs(n);
        return new Ms(t.path, s);
      }
      isEqual(t) {
        return this === t;
      }
    };
    var rl = class extends Qh {
      constructor(t, e) {
        super(t), this.pa = e;
      }
      _toFieldTransform(t) {
        const e = nl(
          this,
          t,
          /*array=*/
          true
        ), n = this.pa.map((t2) => hl(t2, e)), s = new Ds(n);
        return new Ms(t.path, s);
      }
      isEqual(t) {
        return this === t;
      }
    };
    var ol = class extends Qh {
      constructor(t, e) {
        super(t), this.Ia = e;
      }
      _toFieldTransform(t) {
        const e = new xs(t.serializer, Es(t.serializer, this.Ia));
        return new Ms(t.path, e);
      }
      isEqual(t) {
        return this === t;
      }
    };
    function ul(t, e, n, s) {
      const i = t.ya(1, e, n);
      dl("Data must be an object, but it was:", i, s);
      const r = [], o = un.empty();
      ge(s, (t2, s2) => {
        const u2 = ml(e, t2, n);
        s2 = util.getModularInstance(s2);
        const c = i.da(u2);
        if (s2 instanceof el)
          r.push(u2);
        else {
          const t3 = hl(s2, c);
          null != t3 && (r.push(u2), o.set(u2, t3));
        }
      });
      const u = new Re(r);
      return new Hh(o, u, i.fieldTransforms);
    }
    function cl(t, e, n, s, i, r) {
      const o = t.ya(1, e, n), u = [wl(e, s, n)], c = [i];
      if (r.length % 2 != 0)
        throw new U(q.INVALID_ARGUMENT, `Function ${e}() needs to be called with an even number of arguments that alternate between field names and values.`);
      for (let t2 = 0; t2 < r.length; t2 += 2)
        u.push(wl(e, r[t2])), c.push(r[t2 + 1]);
      const a = [], h = un.empty();
      for (let t2 = u.length - 1; t2 >= 0; --t2)
        if (!yl(a, u[t2])) {
          const e2 = u[t2];
          let n2 = c[t2];
          n2 = util.getModularInstance(n2);
          const s2 = o.da(e2);
          if (n2 instanceof el)
            a.push(e2);
          else {
            const t3 = hl(n2, s2);
            null != t3 && (a.push(e2), h.set(e2, t3));
          }
        }
      const l = new Re(a);
      return new Hh(h, l, o.fieldTransforms);
    }
    function al(t, e, n, s = false) {
      return hl(n, t.ya(s ? 4 : 3, e));
    }
    function hl(t, e) {
      if (fl(
        // Unwrap the API type from the Compat SDK. This will return the API type
        // from firestore-exp.
        t = util.getModularInstance(t)
      ))
        return dl("Unsupported field value:", e, t), ll(t, e);
      if (t instanceof Qh)
        return function(t2, e2) {
          if (!Jh(e2.ca))
            throw e2._a(`${t2._methodName}() can only be used with update() and set()`);
          if (!e2.path)
            throw e2._a(`${t2._methodName}() is not currently supported inside arrays`);
          const n = t2._toFieldTransform(e2);
          n && e2.fieldTransforms.push(n);
        }(t, e), null;
      if (void 0 === t && e.ignoreUndefinedProperties)
        return null;
      if (
        // If context.path is null we are inside an array and we don't support
        // field mask paths more granular than the top-level array.
        e.path && e.fieldMask.push(e.path), t instanceof Array
      ) {
        if (e.settings.la && 4 !== e.ca)
          throw e._a("Nested arrays are not supported");
        return function(t2, e2) {
          const n = [];
          let s = 0;
          for (const i of t2) {
            let t3 = hl(i, e2.wa(s));
            null == t3 && // Just include nulls in the array for fields being replaced with a
            // sentinel.
            (t3 = {
              nullValue: "NULL_VALUE"
            }), n.push(t3), s++;
          }
          return {
            arrayValue: {
              values: n
            }
          };
        }(t, e);
      }
      return function(t2, e2) {
        if (null === (t2 = util.getModularInstance(t2)))
          return {
            nullValue: "NULL_VALUE"
          };
        if ("number" == typeof t2)
          return Es(e2.serializer, t2);
        if ("boolean" == typeof t2)
          return {
            booleanValue: t2
          };
        if ("string" == typeof t2)
          return {
            stringValue: t2
          };
        if (t2 instanceof Date) {
          const n = it.fromDate(t2);
          return {
            timestampValue: Di(e2.serializer, n)
          };
        }
        if (t2 instanceof it) {
          const n = new it(t2.seconds, 1e3 * Math.floor(t2.nanoseconds / 1e3));
          return {
            timestampValue: Di(e2.serializer, n)
          };
        }
        if (t2 instanceof jh)
          return {
            geoPointValue: {
              latitude: t2.latitude,
              longitude: t2.longitude
            }
          };
        if (t2 instanceof Uh)
          return {
            bytesValue: Ci(e2.serializer, t2._byteString)
          };
        if (t2 instanceof fh) {
          const n = e2.databaseId, s = t2.firestore._databaseId;
          if (!s.isEqual(n))
            throw e2._a(`Document reference is for database ${s.projectId}/${s.database} but should be for database ${n.projectId}/${n.database}`);
          return {
            referenceValue: ki(t2.firestore._databaseId || e2.databaseId, t2._key.path)
          };
        }
        throw e2._a(`Unsupported field value: ${oh(t2)}`);
      }(t, e);
    }
    function ll(t, e) {
      const n = {};
      return ye(t) ? (
        // If we encounter an empty object, we explicitly add it to the update
        // mask to ensure that the server creates a map entry.
        e.path && e.path.length > 0 && e.fieldMask.push(e.path)
      ) : ge(t, (t2, s) => {
        const i = hl(s, e.ha(t2));
        null != i && (n[t2] = i);
      }), {
        mapValue: {
          fields: n
        }
      };
    }
    function fl(t) {
      return !("object" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof it || t instanceof jh || t instanceof Uh || t instanceof fh || t instanceof Qh);
    }
    function dl(t, e, n) {
      if (!fl(n) || !function(t2) {
        return "object" == typeof t2 && null !== t2 && (Object.getPrototypeOf(t2) === Object.prototype || null === Object.getPrototypeOf(t2));
      }(n)) {
        const s = oh(n);
        throw "an object" === s ? e._a(t + " a custom object") : e._a(t + " " + s);
      }
    }
    function wl(t, e, n) {
      if (
        // If required, replace the FieldPath Compat class with with the firestore-exp
        // FieldPath.
        (e = util.getModularInstance(e)) instanceof Kh
      )
        return e._internalPath;
      if ("string" == typeof e)
        return ml(t, e);
      throw gl(
        "Field path arguments must be of type string or ",
        t,
        /* hasConverter= */
        false,
        /* path= */
        void 0,
        n
      );
    }
    var _l = new RegExp("[~\\*/\\[\\]]");
    function ml(t, e, n) {
      if (e.search(_l) >= 0)
        throw gl(
          `Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`,
          t,
          /* hasConverter= */
          false,
          /* path= */
          void 0,
          n
        );
      try {
        return new Kh(...e.split("."))._internalPath;
      } catch (s) {
        throw gl(
          `Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`,
          t,
          /* hasConverter= */
          false,
          /* path= */
          void 0,
          n
        );
      }
    }
    function gl(t, e, n, s, i) {
      const r = s && !s.isEmpty(), o = void 0 !== i;
      let u = `Function ${e}() called with invalid data`;
      n && (u += " (via `toFirestore()`)"), u += ". ";
      let c = "";
      return (r || o) && (c += " (found", r && (c += ` in field ${s}`), o && (c += ` in document ${i}`), c += ")"), new U(q.INVALID_ARGUMENT, u + t + c);
    }
    function yl(t, e) {
      return t.some((t2) => t2.isEqual(e));
    }
    var pl = class {
      // Note: This class is stripped down version of the DocumentSnapshot in
      // the legacy SDK. The changes are:
      // - No support for SnapshotMetadata.
      // - No support for SnapshotOptions.
      /** @hideconstructor protected */
      constructor(t, e, n, s, i) {
        this._firestore = t, this._userDataWriter = e, this._key = n, this._document = s, this._converter = i;
      }
      /** Property of the `DocumentSnapshot` that provides the document's ID. */
      get id() {
        return this._key.path.lastSegment();
      }
      /**
       * The `DocumentReference` for the document included in the `DocumentSnapshot`.
       */
      get ref() {
        return new fh(this._firestore, this._converter, this._key);
      }
      /**
       * Signals whether or not the document at the snapshot's location exists.
       *
       * @returns true if the document exists.
       */
      exists() {
        return null !== this._document;
      }
      /**
       * Retrieves all fields in the document as an `Object`. Returns `undefined` if
       * the document doesn't exist.
       *
       * @returns An `Object` containing all fields in the document or `undefined`
       * if the document doesn't exist.
       */
      data() {
        if (this._document) {
          if (this._converter) {
            const t = new Il(
              this._firestore,
              this._userDataWriter,
              this._key,
              this._document,
              /* converter= */
              null
            );
            return this._converter.fromFirestore(t);
          }
          return this._userDataWriter.convertValue(this._document.data.value);
        }
      }
      /**
       * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
       * document or field doesn't exist.
       *
       * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
       * field.
       * @returns The data at the specified field location or undefined if no such
       * field exists in the document.
       */
      // We are using `any` here to avoid an explicit cast by our users.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      get(t) {
        if (this._document) {
          const e = this._document.data.field(Tl("DocumentSnapshot.get", t));
          if (null !== e)
            return this._userDataWriter.convertValue(e);
        }
      }
    };
    var Il = class extends pl {
      /**
       * Retrieves all fields in the document as an `Object`.
       *
       * @override
       * @returns An `Object` containing all fields in the document.
       */
      data() {
        return super.data();
      }
    };
    function Tl(t, e) {
      return "string" == typeof e ? ml(t, e) : e instanceof Kh ? e._internalPath : e._delegate._internalPath;
    }
    function El(t) {
      if ("L" === t.limitType && 0 === t.explicitOrderBy.length)
        throw new U(q.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
    }
    var Al = class {
    };
    var vl = class extends Al {
    };
    function Rl(t, e, ...n) {
      let s = [];
      e instanceof Al && s.push(e), s = s.concat(n), function(t2) {
        const e2 = t2.filter((t3) => t3 instanceof Vl).length, n2 = t2.filter((t3) => t3 instanceof Pl).length;
        if (e2 > 1 || e2 > 0 && n2 > 0)
          throw new U(q.INVALID_ARGUMENT, "InvalidQuery. When using composite filters, you cannot use more than one filter at the top level. Consider nesting the multiple filters within an `and(...)` statement. For example: change `query(query, where(...), or(...))` to `query(query, and(where(...), or(...)))`.");
      }(s);
      for (const e2 of s)
        t = e2._apply(t);
      return t;
    }
    var Pl = class _Pl extends vl {
      /**
       * @internal
       */
      constructor(t, e, n) {
        super(), this._field = t, this._op = e, this._value = n, /** The type of this query constraint */
        this.type = "where";
      }
      static _create(t, e, n) {
        return new _Pl(t, e, n);
      }
      _apply(t) {
        const e = this._parse(t);
        return Ql(t._query, e), new dh(t.firestore, t.converter, Yn(t._query, e));
      }
      _parse(t) {
        const e = Zh(t.firestore), n = function(t2, e2, n2, s, i, r, o) {
          let u;
          if (i.isKeyField()) {
            if ("array-contains" === r || "array-contains-any" === r)
              throw new U(q.INVALID_ARGUMENT, `Invalid Query. You can't perform '${r}' queries on documentId().`);
            if ("in" === r || "not-in" === r) {
              Gl(o, r);
              const e3 = [];
              for (const n3 of o)
                e3.push(Kl(s, t2, n3));
              u = {
                arrayValue: {
                  values: e3
                }
              };
            } else
              u = Kl(s, t2, o);
          } else
            "in" !== r && "not-in" !== r && "array-contains-any" !== r || Gl(o, r), u = al(
              n2,
              e2,
              o,
              /* allowArrays= */
              "in" === r || "not-in" === r
            );
          return mn.create(i, r, u);
        }(t._query, "where", e, t.firestore._databaseId, this._field, this._op, this._value);
        return n;
      }
    };
    function bl(t, e, n) {
      const s = e, i = Tl("where", t);
      return Pl._create(i, s, n);
    }
    var Vl = class _Vl extends Al {
      /**
       * @internal
       */
      constructor(t, e) {
        super(), this.type = t, this._queryConstraints = e;
      }
      static _create(t, e) {
        return new _Vl(t, e);
      }
      _parse(t) {
        const e = this._queryConstraints.map((e2) => e2._parse(t)).filter((t2) => t2.getFilters().length > 0);
        return 1 === e.length ? e[0] : gn.create(e, this._getOperator());
      }
      _apply(t) {
        const e = this._parse(t);
        return 0 === e.getFilters().length ? t : (function(t2, e2) {
          let n = t2;
          const s = e2.getFlattenedFilters();
          for (const t3 of s)
            Ql(n, t3), n = Yn(n, t3);
        }(t._query, e), new dh(t.firestore, t.converter, Yn(t._query, e)));
      }
      _getQueryConstraints() {
        return this._queryConstraints;
      }
      _getOperator() {
        return "and" === this.type ? "and" : "or";
      }
    };
    function Sl(...t) {
      return t.forEach((t2) => zl("or", t2)), Vl._create("or", t);
    }
    function Dl(...t) {
      return t.forEach((t2) => zl("and", t2)), Vl._create("and", t);
    }
    var Cl = class _Cl extends vl {
      /**
       * @internal
       */
      constructor(t, e) {
        super(), this._field = t, this._direction = e, /** The type of this query constraint */
        this.type = "orderBy";
      }
      static _create(t, e) {
        return new _Cl(t, e);
      }
      _apply(t) {
        const e = function(t2, e2, n) {
          if (null !== t2.startAt)
            throw new U(q.INVALID_ARGUMENT, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
          if (null !== t2.endAt)
            throw new U(q.INVALID_ARGUMENT, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
          const s = new dn(e2, n);
          return function(t3, e3) {
            if (null === jn(t3)) {
              const n2 = zn(t3);
              null !== n2 && jl(t3, n2, e3.field);
            }
          }(t2, s), s;
        }(t._query, this._field, this._direction);
        return new dh(t.firestore, t.converter, function(t2, e2) {
          const n = t2.explicitOrderBy.concat([e2]);
          return new Un(t2.path, t2.collectionGroup, n, t2.filters.slice(), t2.limit, t2.limitType, t2.startAt, t2.endAt);
        }(t._query, e));
      }
    };
    function xl(t, e = "asc") {
      const n = e, s = Tl("orderBy", t);
      return Cl._create(s, n);
    }
    var Nl = class _Nl extends vl {
      /**
       * @internal
       */
      constructor(t, e, n) {
        super(), this.type = t, this._limit = e, this._limitType = n;
      }
      static _create(t, e, n) {
        return new _Nl(t, e, n);
      }
      _apply(t) {
        return new dh(t.firestore, t.converter, Xn(t._query, this._limit, this._limitType));
      }
    };
    function kl(t) {
      return ch("limit", t), Nl._create(
        "limit",
        t,
        "F"
        /* LimitType.First */
      );
    }
    function Ml(t) {
      return ch("limitToLast", t), Nl._create(
        "limitToLast",
        t,
        "L"
        /* LimitType.Last */
      );
    }
    var $l = class _$l extends vl {
      /**
       * @internal
       */
      constructor(t, e, n) {
        super(), this.type = t, this._docOrFields = e, this._inclusive = n;
      }
      static _create(t, e, n) {
        return new _$l(t, e, n);
      }
      _apply(t) {
        const e = Ul(t, this.type, this._docOrFields, this._inclusive);
        return new dh(t.firestore, t.converter, function(t2, e2) {
          return new Un(t2.path, t2.collectionGroup, t2.explicitOrderBy.slice(), t2.filters.slice(), t2.limit, t2.limitType, e2, t2.endAt);
        }(t._query, e));
      }
    };
    function Ol(...t) {
      return $l._create(
        "startAt",
        t,
        /*inclusive=*/
        true
      );
    }
    function Fl(...t) {
      return $l._create(
        "startAfter",
        t,
        /*inclusive=*/
        false
      );
    }
    var Bl = class _Bl extends vl {
      /**
       * @internal
       */
      constructor(t, e, n) {
        super(), this.type = t, this._docOrFields = e, this._inclusive = n;
      }
      static _create(t, e, n) {
        return new _Bl(t, e, n);
      }
      _apply(t) {
        const e = Ul(t, this.type, this._docOrFields, this._inclusive);
        return new dh(t.firestore, t.converter, function(t2, e2) {
          return new Un(t2.path, t2.collectionGroup, t2.explicitOrderBy.slice(), t2.filters.slice(), t2.limit, t2.limitType, t2.startAt, e2);
        }(t._query, e));
      }
    };
    function Ll(...t) {
      return Bl._create(
        "endBefore",
        t,
        /*inclusive=*/
        false
      );
    }
    function ql(...t) {
      return Bl._create(
        "endAt",
        t,
        /*inclusive=*/
        true
      );
    }
    function Ul(t, e, n, s) {
      if (n[0] = util.getModularInstance(n[0]), n[0] instanceof pl)
        return function(t2, e2, n2, s2, i) {
          if (!s2)
            throw new U(q.NOT_FOUND, `Can't use a DocumentSnapshot that doesn't exist for ${n2}().`);
          const r = [];
          for (const n3 of Hn(t2))
            if (n3.field.isKeyField())
              r.push(We(e2, s2.key));
            else {
              const t3 = s2.data.field(n3.field);
              if (Ne(t3))
                throw new U(q.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a document for which the field "' + n3.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');
              if (null === t3) {
                const t4 = n3.field.canonicalString();
                throw new U(q.INVALID_ARGUMENT, `Invalid query. You are trying to start or end a query using a document for which the field '${t4}' (used as the orderBy) does not exist.`);
              }
              r.push(t3);
            }
          return new hn(r, i);
        }(t._query, t.firestore._databaseId, e, n[0]._document, s);
      {
        const i = Zh(t.firestore);
        return function(t2, e2, n2, s2, i2, r) {
          const o = t2.explicitOrderBy;
          if (i2.length > o.length)
            throw new U(q.INVALID_ARGUMENT, `Too many arguments provided to ${s2}(). The number of arguments must be less than or equal to the number of orderBy() clauses`);
          const u = [];
          for (let r2 = 0; r2 < i2.length; r2++) {
            const c = i2[r2];
            if (o[r2].field.isKeyField()) {
              if ("string" != typeof c)
                throw new U(q.INVALID_ARGUMENT, `Invalid query. Expected a string for document ID in ${s2}(), but got a ${typeof c}`);
              if (!Wn(t2) && -1 !== c.indexOf("/"))
                throw new U(q.INVALID_ARGUMENT, `Invalid query. When querying a collection and ordering by documentId(), the value passed to ${s2}() must be a plain document ID, but '${c}' contains a slash.`);
              const n3 = t2.path.child(ut.fromString(c));
              if (!ht.isDocumentKey(n3))
                throw new U(q.INVALID_ARGUMENT, `Invalid query. When querying a collection group and ordering by documentId(), the value passed to ${s2}() must result in a valid document path, but '${n3}' is not because it contains an odd number of segments.`);
              const i3 = new ht(n3);
              u.push(We(e2, i3));
            } else {
              const t3 = al(n2, s2, c);
              u.push(t3);
            }
          }
          return new hn(u, r);
        }(t._query, t.firestore._databaseId, i, e, n, s);
      }
    }
    function Kl(t, e, n) {
      if ("string" == typeof (n = util.getModularInstance(n))) {
        if ("" === n)
          throw new U(q.INVALID_ARGUMENT, "Invalid query. When querying with documentId(), you must provide a valid document ID, but it was an empty string.");
        if (!Wn(e) && -1 !== n.indexOf("/"))
          throw new U(q.INVALID_ARGUMENT, `Invalid query. When querying a collection by documentId(), you must provide a plain document ID, but '${n}' contains a '/' character.`);
        const s = e.path.child(ut.fromString(n));
        if (!ht.isDocumentKey(s))
          throw new U(q.INVALID_ARGUMENT, `Invalid query. When querying a collection group by documentId(), the value provided must result in a valid document path, but '${s}' is not because it has an odd number of segments (${s.length}).`);
        return We(t, new ht(s));
      }
      if (n instanceof fh)
        return We(t, n._key);
      throw new U(q.INVALID_ARGUMENT, `Invalid query. When querying with documentId(), you must provide a valid string or a DocumentReference, but it was: ${oh(n)}.`);
    }
    function Gl(t, e) {
      if (!Array.isArray(t) || 0 === t.length)
        throw new U(q.INVALID_ARGUMENT, `Invalid Query. A non-empty array is required for '${e.toString()}' filters.`);
    }
    function Ql(t, e) {
      if (e.isInequality()) {
        const n2 = zn(t), s = e.field;
        if (null !== n2 && !n2.isEqual(s))
          throw new U(q.INVALID_ARGUMENT, `Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have inequality filters on '${n2.toString()}' and '${s.toString()}'`);
        const i = jn(t);
        null !== i && jl(t, s, i);
      }
      const n = function(t2, e2) {
        for (const n2 of t2)
          for (const t3 of n2.getFlattenedFilters())
            if (e2.indexOf(t3.op) >= 0)
              return t3.op;
        return null;
      }(t.filters, function(t2) {
        switch (t2) {
          case "!=":
            return [
              "!=",
              "not-in"
              /* Operator.NOT_IN */
            ];
          case "array-contains-any":
          case "in":
            return [
              "not-in"
              /* Operator.NOT_IN */
            ];
          case "not-in":
            return [
              "array-contains-any",
              "in",
              "not-in",
              "!="
              /* Operator.NOT_EQUAL */
            ];
          default:
            return [];
        }
      }(e.op));
      if (null !== n)
        throw n === e.op ? new U(q.INVALID_ARGUMENT, `Invalid query. You cannot use more than one '${e.op.toString()}' filter.`) : new U(q.INVALID_ARGUMENT, `Invalid query. You cannot use '${e.op.toString()}' filters with '${n.toString()}' filters.`);
    }
    function jl(t, e, n) {
      if (!n.isEqual(e))
        throw new U(q.INVALID_ARGUMENT, `Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '${e.toString()}' and so you must also use '${e.toString()}' as your first argument to orderBy(), but your first orderBy() is on field '${n.toString()}' instead.`);
    }
    function zl(t, e) {
      if (!(e instanceof Pl || e instanceof Vl))
        throw new U(q.INVALID_ARGUMENT, `Function ${t}() requires AppliableConstraints created with a call to 'where(...)', 'or(...)', or 'and(...)'.`);
    }
    var Wl = class {
      convertValue(t, e = "none") {
        switch (Le(t)) {
          case 0:
            return null;
          case 1:
            return t.booleanValue;
          case 2:
            return Ce(t.integerValue || t.doubleValue);
          case 3:
            return this.convertTimestamp(t.timestampValue);
          case 4:
            return this.convertServerTimestamp(t, e);
          case 5:
            return t.stringValue;
          case 6:
            return this.convertBytes(xe(t.bytesValue));
          case 7:
            return this.convertReference(t.referenceValue);
          case 8:
            return this.convertGeoPoint(t.geoPointValue);
          case 9:
            return this.convertArray(t.arrayValue, e);
          case 10:
            return this.convertObject(t.mapValue, e);
          default:
            throw O();
        }
      }
      convertObject(t, e) {
        return this.convertObjectMap(t.fields, e);
      }
      /**
       * @internal
       */
      convertObjectMap(t, e = "none") {
        const n = {};
        return ge(t, (t2, s) => {
          n[t2] = this.convertValue(s, e);
        }), n;
      }
      convertGeoPoint(t) {
        return new jh(Ce(t.latitude), Ce(t.longitude));
      }
      convertArray(t, e) {
        return (t.values || []).map((t2) => this.convertValue(t2, e));
      }
      convertServerTimestamp(t, e) {
        switch (e) {
          case "previous":
            const n = ke(t);
            return null == n ? null : this.convertValue(n, e);
          case "estimate":
            return this.convertTimestamp(Me(t));
          default:
            return null;
        }
      }
      convertTimestamp(t) {
        const e = De(t);
        return new it(e.seconds, e.nanos);
      }
      convertDocumentKey(t, e) {
        const n = ut.fromString(t);
        F(ur(n));
        const s = new Oe(n.get(1), n.get(3)), i = new ht(n.popFirst(5));
        return s.isEqual(e) || // TODO(b/64130202): Somehow support foreign references.
        k(`Document ${i} contains a document reference within a different database (${s.projectId}/${s.database}) which is not supported. It will be treated as a reference in the current database (${e.projectId}/${e.database}) instead.`), i;
      }
    };
    function Hl(t, e, n) {
      let s;
      return s = t ? n && (n.merge || n.mergeFields) ? t.toFirestore(e, n) : t.toFirestore(e) : e, s;
    }
    var Jl = class extends Wl {
      constructor(t) {
        super(), this.firestore = t;
      }
      convertBytes(t) {
        return new Uh(t);
      }
      convertReference(t) {
        const e = this.convertDocumentKey(t, this.firestore._databaseId);
        return new fh(
          this.firestore,
          /* converter= */
          null,
          e
        );
      }
    };
    function Yl(t) {
      return new Lh("sum", wl("sum", t));
    }
    function Xl(t) {
      return new Lh("avg", wl("average", t));
    }
    function Zl() {
      return new Lh("count");
    }
    function tf(t, e) {
      var n, s;
      return t instanceof Lh && e instanceof Lh && t._aggregateType === e._aggregateType && (null === (n = t._internalFieldPath) || void 0 === n ? void 0 : n.canonicalString()) === (null === (s = e._internalFieldPath) || void 0 === s ? void 0 : s.canonicalString());
    }
    function ef(t, e) {
      return ph(t.query, e.query) && util.deepEqual(t.data(), e.data());
    }
    var nf = class {
      /** @hideconstructor */
      constructor(t, e) {
        this.hasPendingWrites = t, this.fromCache = e;
      }
      /**
       * Returns true if this `SnapshotMetadata` is equal to the provided one.
       *
       * @param other - The `SnapshotMetadata` to compare against.
       * @returns true if this `SnapshotMetadata` is equal to the provided one.
       */
      isEqual(t) {
        return this.hasPendingWrites === t.hasPendingWrites && this.fromCache === t.fromCache;
      }
    };
    var sf = class extends pl {
      /** @hideconstructor protected */
      constructor(t, e, n, s, i, r) {
        super(t, e, n, s, r), this._firestore = t, this._firestoreImpl = t, this.metadata = i;
      }
      /**
       * Returns whether or not the data exists. True if the document exists.
       */
      exists() {
        return super.exists();
      }
      /**
       * Retrieves all fields in the document as an `Object`. Returns `undefined` if
       * the document doesn't exist.
       *
       * By default, `serverTimestamp()` values that have not yet been
       * set to their final value will be returned as `null`. You can override
       * this by passing an options object.
       *
       * @param options - An options object to configure how data is retrieved from
       * the snapshot (for example the desired behavior for server timestamps that
       * have not yet been set to their final value).
       * @returns An `Object` containing all fields in the document or `undefined` if
       * the document doesn't exist.
       */
      data(t = {}) {
        if (this._document) {
          if (this._converter) {
            const e = new rf(
              this._firestore,
              this._userDataWriter,
              this._key,
              this._document,
              this.metadata,
              /* converter= */
              null
            );
            return this._converter.fromFirestore(e, t);
          }
          return this._userDataWriter.convertValue(this._document.data.value, t.serverTimestamps);
        }
      }
      /**
       * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
       * document or field doesn't exist.
       *
       * By default, a `serverTimestamp()` that has not yet been set to
       * its final value will be returned as `null`. You can override this by
       * passing an options object.
       *
       * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
       * field.
       * @param options - An options object to configure how the field is retrieved
       * from the snapshot (for example the desired behavior for server timestamps
       * that have not yet been set to their final value).
       * @returns The data at the specified field location or undefined if no such
       * field exists in the document.
       */
      // We are using `any` here to avoid an explicit cast by our users.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      get(t, e = {}) {
        if (this._document) {
          const n = this._document.data.field(Tl("DocumentSnapshot.get", t));
          if (null !== n)
            return this._userDataWriter.convertValue(n, e.serverTimestamps);
        }
      }
    };
    var rf = class extends sf {
      /**
       * Retrieves all fields in the document as an `Object`.
       *
       * By default, `serverTimestamp()` values that have not yet been
       * set to their final value will be returned as `null`. You can override
       * this by passing an options object.
       *
       * @override
       * @param options - An options object to configure how data is retrieved from
       * the snapshot (for example the desired behavior for server timestamps that
       * have not yet been set to their final value).
       * @returns An `Object` containing all fields in the document.
       */
      data(t = {}) {
        return super.data(t);
      }
    };
    var of = class {
      /** @hideconstructor */
      constructor(t, e, n, s) {
        this._firestore = t, this._userDataWriter = e, this._snapshot = s, this.metadata = new nf(s.hasPendingWrites, s.fromCache), this.query = n;
      }
      /** An array of all the documents in the `QuerySnapshot`. */
      get docs() {
        const t = [];
        return this.forEach((e) => t.push(e)), t;
      }
      /** The number of documents in the `QuerySnapshot`. */
      get size() {
        return this._snapshot.docs.size;
      }
      /** True if there are no documents in the `QuerySnapshot`. */
      get empty() {
        return 0 === this.size;
      }
      /**
       * Enumerates all of the documents in the `QuerySnapshot`.
       *
       * @param callback - A callback to be called with a `QueryDocumentSnapshot` for
       * each document in the snapshot.
       * @param thisArg - The `this` binding for the callback.
       */
      forEach(t, e) {
        this._snapshot.docs.forEach((n) => {
          t.call(e, new rf(this._firestore, this._userDataWriter, n.key, n, new nf(this._snapshot.mutatedKeys.has(n.key), this._snapshot.fromCache), this.query.converter));
        });
      }
      /**
       * Returns an array of the documents changes since the last snapshot. If this
       * is the first snapshot, all documents will be in the list as 'added'
       * changes.
       *
       * @param options - `SnapshotListenOptions` that control whether metadata-only
       * changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger
       * snapshot events.
       */
      docChanges(t = {}) {
        const e = !!t.includeMetadataChanges;
        if (e && this._snapshot.excludesMetadataChanges)
          throw new U(q.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
        return this._cachedChanges && this._cachedChangesIncludeMetadataChanges === e || (this._cachedChanges = /** Calculates the array of `DocumentChange`s for a given `ViewSnapshot`. */
        function(t2, e2) {
          if (t2._snapshot.oldDocs.isEmpty()) {
            let e3 = 0;
            return t2._snapshot.docChanges.map((n) => {
              const s = new rf(t2._firestore, t2._userDataWriter, n.doc.key, n.doc, new nf(t2._snapshot.mutatedKeys.has(n.doc.key), t2._snapshot.fromCache), t2.query.converter);
              return n.doc, {
                type: "added",
                doc: s,
                oldIndex: -1,
                newIndex: e3++
              };
            });
          }
          {
            let n = t2._snapshot.oldDocs;
            return t2._snapshot.docChanges.filter((t3) => e2 || 3 !== t3.type).map((e3) => {
              const s = new rf(t2._firestore, t2._userDataWriter, e3.doc.key, e3.doc, new nf(t2._snapshot.mutatedKeys.has(e3.doc.key), t2._snapshot.fromCache), t2.query.converter);
              let i = -1, r = -1;
              return 0 !== e3.type && (i = n.indexOf(e3.doc.key), n = n.delete(e3.doc.key)), 1 !== e3.type && (n = n.add(e3.doc), r = n.indexOf(e3.doc.key)), {
                type: uf(e3.type),
                doc: s,
                oldIndex: i,
                newIndex: r
              };
            });
          }
        }(this, e), this._cachedChangesIncludeMetadataChanges = e), this._cachedChanges;
      }
    };
    function uf(t) {
      switch (t) {
        case 0:
          return "added";
        case 2:
        case 3:
          return "modified";
        case 1:
          return "removed";
        default:
          return O();
      }
    }
    function cf(t, e) {
      return t instanceof sf && e instanceof sf ? t._firestore === e._firestore && t._key.isEqual(e._key) && (null === t._document ? null === e._document : t._document.isEqual(e._document)) && t._converter === e._converter : t instanceof of && e instanceof of && (t._firestore === e._firestore && ph(t.query, e.query) && t.metadata.isEqual(e.metadata) && t._snapshot.isEqual(e._snapshot));
    }
    function af(t) {
      t = uh(t, fh);
      const e = uh(t.firestore, vh);
      return za(bh(e), t._key).then((n) => Af(e, t, n));
    }
    var hf = class extends Wl {
      constructor(t) {
        super(), this.firestore = t;
      }
      convertBytes(t) {
        return new Uh(t);
      }
      convertReference(t) {
        const e = this.convertDocumentKey(t, this.firestore._databaseId);
        return new fh(
          this.firestore,
          /* converter= */
          null,
          e
        );
      }
    };
    function lf(t) {
      t = uh(t, fh);
      const e = uh(t.firestore, vh), n = bh(e), s = new hf(e);
      return ja(n, t._key).then((n2) => new sf(e, s, t._key, n2, new nf(
        null !== n2 && n2.hasLocalMutations,
        /* fromCache= */
        true
      ), t.converter));
    }
    function ff(t) {
      t = uh(t, fh);
      const e = uh(t.firestore, vh);
      return za(bh(e), t._key, {
        source: "server"
      }).then((n) => Af(e, t, n));
    }
    function df(t) {
      t = uh(t, dh);
      const e = uh(t.firestore, vh), n = bh(e), s = new hf(e);
      return El(t._query), Ha(n, t._query).then((n2) => new of(e, s, t, n2));
    }
    function wf(t) {
      t = uh(t, dh);
      const e = uh(t.firestore, vh), n = bh(e), s = new hf(e);
      return Wa(n, t._query).then((n2) => new of(e, s, t, n2));
    }
    function _f(t) {
      t = uh(t, dh);
      const e = uh(t.firestore, vh), n = bh(e), s = new hf(e);
      return Ha(n, t._query, {
        source: "server"
      }).then((n2) => new of(e, s, t, n2));
    }
    function mf(t, e, n) {
      t = uh(t, fh);
      const s = uh(t.firestore, vh), i = Hl(t.converter, e, n);
      return Ef(s, [tl(Zh(s), "setDoc", t._key, i, null !== t.converter, n).toMutation(t._key, Fs.none())]);
    }
    function gf(t, e, n, ...s) {
      t = uh(t, fh);
      const i = uh(t.firestore, vh), r = Zh(i);
      let o;
      o = "string" == typeof // For Compat types, we have to "extract" the underlying types before
      // performing validation.
      (e = util.getModularInstance(e)) || e instanceof Kh ? cl(r, "updateDoc", t._key, e, n, s) : ul(r, "updateDoc", t._key, e);
      return Ef(i, [o.toMutation(t._key, Fs.exists(true))]);
    }
    function yf(t) {
      return Ef(uh(t.firestore, vh), [new Ys(t._key, Fs.none())]);
    }
    function pf(t, e) {
      const n = uh(t.firestore, vh), s = gh(t), i = Hl(t.converter, e);
      return Ef(n, [tl(Zh(t.firestore), "addDoc", s._key, i, null !== t.converter, {}).toMutation(s._key, Fs.exists(false))]).then(() => s);
    }
    function If(t, ...e) {
      var n, s, i;
      t = util.getModularInstance(t);
      let r = {
        includeMetadataChanges: false
      }, o = 0;
      "object" != typeof e[o] || Th(e[o]) || (r = e[o], o++);
      const u = {
        includeMetadataChanges: r.includeMetadataChanges
      };
      if (Th(e[o])) {
        const t2 = e[o];
        e[o] = null === (n = t2.next) || void 0 === n ? void 0 : n.bind(t2), e[o + 1] = null === (s = t2.error) || void 0 === s ? void 0 : s.bind(t2), e[o + 2] = null === (i = t2.complete) || void 0 === i ? void 0 : i.bind(t2);
      }
      let c, a, h;
      if (t instanceof fh)
        a = uh(t.firestore, vh), h = Gn(t._key.path), c = {
          next: (n2) => {
            e[o] && e[o](Af(a, t, n2));
          },
          error: e[o + 1],
          complete: e[o + 2]
        };
      else {
        const n2 = uh(t, dh);
        a = uh(n2.firestore, vh), h = n2._query;
        const s2 = new hf(a);
        c = {
          next: (t2) => {
            e[o] && e[o](new of(a, s2, n2, t2));
          },
          error: e[o + 1],
          complete: e[o + 2]
        }, El(t._query);
      }
      return function(t2, e2, n2, s2) {
        const i2 = new Va(s2), r2 = new Nc(e2, i2, n2);
        return t2.asyncQueue.enqueueAndForget(async () => Vc(await Ka(t2), r2)), () => {
          i2.Dc(), t2.asyncQueue.enqueueAndForget(async () => Sc(await Ka(t2), r2));
        };
      }(bh(a), h, u, c);
    }
    function Tf(t, e) {
      return Ja(bh(t = uh(t, vh)), Th(e) ? e : {
        next: e
      });
    }
    function Ef(t, e) {
      return function(t2, e2) {
        const n = new K();
        return t2.asyncQueue.enqueueAndForget(async () => zc(await qa(t2), e2, n)), n.promise;
      }(bh(t), e);
    }
    function Af(t, e, n) {
      const s = n.docs.get(e._key), i = new hf(t);
      return new sf(t, i, e._key, s, new nf(n.hasPendingWrites, n.fromCache), e.converter);
    }
    function vf(t) {
      return Rf(t, {
        count: Zl()
      });
    }
    function Rf(t, e) {
      const n = uh(t.firestore, vh), s = bh(n), i = function(t2, e2) {
        const n2 = [];
        for (const s2 in t2)
          Object.prototype.hasOwnProperty.call(t2, s2) && n2.push(e2(t2[s2], s2, t2));
        return n2;
      }(e, (t2, e2) => new ni(e2, t2._aggregateType, t2._internalFieldPath));
      return function(t2, e2, n2) {
        const s2 = new K();
        return t2.asyncQueue.enqueueAndForget(async () => {
          try {
            const i2 = await Ua(t2);
            s2.resolve(Gu(i2, e2, n2));
          } catch (t3) {
            s2.reject(t3);
          }
        }), s2.promise;
      }(s, t._query, i).then((e2) => (
        /**
        * Converts the core aggregration result to an `AggregateQuerySnapshot`
        * that can be returned to the consumer.
        * @param query
        * @param aggregateResult Core aggregation result
        * @internal
        */
        function(t2, e3, n2) {
          const s2 = new hf(t2);
          return new qh(e3, s2, n2);
        }(n, t, e2)
      ));
    }
    var Pf = class {
      constructor(t) {
        this.kind = "memory", this._onlineComponentProvider = new Pa(), (null == t ? void 0 : t.garbageCollector) ? this._offlineComponentProvider = t.garbageCollector._offlineComponentProvider : this._offlineComponentProvider = new Ea();
      }
      toJSON() {
        return {
          kind: this.kind
        };
      }
    };
    var bf = class {
      constructor(t) {
        let e;
        this.kind = "persistent", (null == t ? void 0 : t.tabManager) ? (t.tabManager._initialize(t), e = t.tabManager) : (e = $f(void 0), e._initialize(t)), this._onlineComponentProvider = e._onlineComponentProvider, this._offlineComponentProvider = e._offlineComponentProvider;
      }
      toJSON() {
        return {
          kind: this.kind
        };
      }
    };
    var Vf = class {
      constructor() {
        this.kind = "memoryEager", this._offlineComponentProvider = new Ea();
      }
      toJSON() {
        return {
          kind: this.kind
        };
      }
    };
    var Sf = class {
      constructor(t) {
        this.kind = "memoryLru", this._offlineComponentProvider = new Aa(t);
      }
      toJSON() {
        return {
          kind: this.kind
        };
      }
    };
    function Df() {
      return new Vf();
    }
    function Cf(t) {
      return new Sf(null == t ? void 0 : t.cacheSizeBytes);
    }
    function xf(t) {
      return new Pf(t);
    }
    function Nf(t) {
      return new bf(t);
    }
    var kf = class {
      constructor(t) {
        this.forceOwnership = t, this.kind = "persistentSingleTab";
      }
      toJSON() {
        return {
          kind: this.kind
        };
      }
      /**
       * @internal
       */
      _initialize(t) {
        this._onlineComponentProvider = new Pa(), this._offlineComponentProvider = new va(this._onlineComponentProvider, null == t ? void 0 : t.cacheSizeBytes, this.forceOwnership);
      }
    };
    var Mf = class {
      constructor() {
        this.kind = "PersistentMultipleTab";
      }
      toJSON() {
        return {
          kind: this.kind
        };
      }
      /**
       * @internal
       */
      _initialize(t) {
        this._onlineComponentProvider = new Pa(), this._offlineComponentProvider = new Ra(this._onlineComponentProvider, null == t ? void 0 : t.cacheSizeBytes);
      }
    };
    function $f(t) {
      return new kf(null == t ? void 0 : t.forceOwnership);
    }
    function Of() {
      return new Mf();
    }
    var Ff = {
      maxAttempts: 5
    };
    var Bf = class {
      /** @hideconstructor */
      constructor(t, e) {
        this._firestore = t, this._commitHandler = e, this._mutations = [], this._committed = false, this._dataReader = Zh(t);
      }
      set(t, e, n) {
        this._verifyNotCommitted();
        const s = Lf(t, this._firestore), i = Hl(s.converter, e, n), r = tl(this._dataReader, "WriteBatch.set", s._key, i, null !== s.converter, n);
        return this._mutations.push(r.toMutation(s._key, Fs.none())), this;
      }
      update(t, e, n, ...s) {
        this._verifyNotCommitted();
        const i = Lf(t, this._firestore);
        let r;
        return r = "string" == typeof (e = util.getModularInstance(e)) || e instanceof Kh ? cl(this._dataReader, "WriteBatch.update", i._key, e, n, s) : ul(this._dataReader, "WriteBatch.update", i._key, e), this._mutations.push(r.toMutation(i._key, Fs.exists(true))), this;
      }
      /**
       * Deletes the document referred to by the provided {@link DocumentReference}.
       *
       * @param documentRef - A reference to the document to be deleted.
       * @returns This `WriteBatch` instance. Used for chaining method calls.
       */
      delete(t) {
        this._verifyNotCommitted();
        const e = Lf(t, this._firestore);
        return this._mutations = this._mutations.concat(new Ys(e._key, Fs.none())), this;
      }
      /**
       * Commits all of the writes in this write batch as a single atomic unit.
       *
       * The result of these writes will only be reflected in document reads that
       * occur after the returned promise resolves. If the client is offline, the
       * write fails. If you would like to see local modifications or buffer writes
       * until the client is online, use the full Firestore SDK.
       *
       * @returns A `Promise` resolved once all of the writes in the batch have been
       * successfully written to the backend as an atomic unit (note that it won't
       * resolve while you're offline).
       */
      commit() {
        return this._verifyNotCommitted(), this._committed = true, this._mutations.length > 0 ? this._commitHandler(this._mutations) : Promise.resolve();
      }
      _verifyNotCommitted() {
        if (this._committed)
          throw new U(q.FAILED_PRECONDITION, "A write batch can no longer be used after commit() has been called.");
      }
    };
    function Lf(t, e) {
      if ((t = util.getModularInstance(t)).firestore !== e)
        throw new U(q.INVALID_ARGUMENT, "Provided document reference is from a different Firestore instance.");
      return t;
    }
    var qf = class extends class {
      /** @hideconstructor */
      constructor(t, e) {
        this._firestore = t, this._transaction = e, this._dataReader = Zh(t);
      }
      /**
       * Reads the document referenced by the provided {@link DocumentReference}.
       *
       * @param documentRef - A reference to the document to be read.
       * @returns A `DocumentSnapshot` with the read data.
       */
      get(t) {
        const e = Lf(t, this._firestore), n = new Jl(this._firestore);
        return this._transaction.lookup([e._key]).then((t2) => {
          if (!t2 || 1 !== t2.length)
            return O();
          const s = t2[0];
          if (s.isFoundDocument())
            return new pl(this._firestore, n, s.key, s, e.converter);
          if (s.isNoDocument())
            return new pl(this._firestore, n, e._key, null, e.converter);
          throw O();
        });
      }
      set(t, e, n) {
        const s = Lf(t, this._firestore), i = Hl(s.converter, e, n), r = tl(this._dataReader, "Transaction.set", s._key, i, null !== s.converter, n);
        return this._transaction.set(s._key, r), this;
      }
      update(t, e, n, ...s) {
        const i = Lf(t, this._firestore);
        let r;
        return r = "string" == typeof (e = util.getModularInstance(e)) || e instanceof Kh ? cl(this._dataReader, "Transaction.update", i._key, e, n, s) : ul(this._dataReader, "Transaction.update", i._key, e), this._transaction.update(i._key, r), this;
      }
      /**
       * Deletes the document referred to by the provided {@link DocumentReference}.
       *
       * @param documentRef - A reference to the document to be deleted.
       * @returns This `Transaction` instance. Used for chaining method calls.
       */
      delete(t) {
        const e = Lf(t, this._firestore);
        return this._transaction.delete(e._key), this;
      }
    } {
      // This class implements the same logic as the Transaction API in the Lite SDK
      // but is subclassed in order to return its own DocumentSnapshot types.
      /** @hideconstructor */
      constructor(t, e) {
        super(t, e), this._firestore = t;
      }
      /**
       * Reads the document referenced by the provided {@link DocumentReference}.
       *
       * @param documentRef - A reference to the document to be read.
       * @returns A `DocumentSnapshot` with the read data.
       */
      get(t) {
        const e = Lf(t, this._firestore), n = new hf(this._firestore);
        return super.get(t).then((t2) => new sf(this._firestore, n, e._key, t2._document, new nf(
          /* hasPendingWrites= */
          false,
          /* fromCache= */
          false
        ), e.converter));
      }
    };
    function Uf(t, e, n) {
      t = uh(t, vh);
      const s = Object.assign(Object.assign({}, Ff), n);
      !function(t2) {
        if (t2.maxAttempts < 1)
          throw new U(q.INVALID_ARGUMENT, "Max attempts must be at least 1");
      }(s);
      return function(t2, e2, n2) {
        const s2 = new K();
        return t2.asyncQueue.enqueueAndForget(async () => {
          const i = await Ua(t2);
          new Ca(t2.asyncQueue, i, n2, e2, s2).run();
        }), s2.promise;
      }(bh(t), (n2) => e(new qf(t, n2)), s);
    }
    function Kf() {
      return new el("deleteField");
    }
    function Gf() {
      return new sl("serverTimestamp");
    }
    function Qf(...t) {
      return new il("arrayUnion", t);
    }
    function jf(...t) {
      return new rl("arrayRemove", t);
    }
    function zf(t) {
      return new ol("increment", t);
    }
    function Wf(t) {
      return bh(t = uh(t, vh)), new Bf(t, (e) => Ef(t, e));
    }
    function Hf(t, e) {
      var n;
      const s = bh(t = uh(t, vh));
      if (!s._uninitializedComponentsProvider || "memory" === (null === (n = s._uninitializedComponentsProvider) || void 0 === n ? void 0 : n._offlineKind))
        return M("Cannot enable indexes when persistence is disabled"), Promise.resolve();
      const i = function(t2) {
        const e2 = "string" == typeof t2 ? function(t3) {
          try {
            return JSON.parse(t3);
          } catch (t4) {
            throw new U(q.INVALID_ARGUMENT, "Failed to parse JSON: " + (null == t4 ? void 0 : t4.message));
          }
        }(t2) : t2, n2 = [];
        if (Array.isArray(e2.indexes))
          for (const t3 of e2.indexes) {
            const e3 = Jf(t3, "collectionGroup"), s2 = [];
            if (Array.isArray(t3.fields))
              for (const e4 of t3.fields) {
                const t4 = ml("setIndexConfiguration", Jf(e4, "fieldPath"));
                "CONTAINS" === e4.arrayConfig ? s2.push(new _t(
                  t4,
                  2
                  /* IndexKind.CONTAINS */
                )) : "ASCENDING" === e4.order ? s2.push(new _t(
                  t4,
                  0
                  /* IndexKind.ASCENDING */
                )) : "DESCENDING" === e4.order && s2.push(new _t(
                  t4,
                  1
                  /* IndexKind.DESCENDING */
                ));
              }
            n2.push(new lt(lt.UNKNOWN_ID, e3, s2, gt.empty()));
          }
        return n2;
      }(e);
      return Za(s, i);
    }
    function Jf(t, e) {
      if ("string" != typeof t[e])
        throw new U(q.INVALID_ARGUMENT, "Missing string value for: " + e);
      return t[e];
    }
    !function(t, e = true) {
      !function(t2) {
        S = t2;
      }(app.SDK_VERSION), app._registerComponent(new component.Component("firestore", (t2, { instanceIdentifier: n, options: s }) => {
        const i = t2.getProvider("app").getImmediate(), r = new vh(new z(t2.getProvider("auth-internal")), new Y(t2.getProvider("app-check-internal")), function(t3, e2) {
          if (!Object.prototype.hasOwnProperty.apply(t3.options, ["projectId"]))
            throw new U(q.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
          return new Oe(t3.options.projectId, e2);
        }(i, n), i);
        return s = Object.assign({
          useFetchStreams: e
        }, s), r._setSettings(s), r;
      }, "PUBLIC").setMultipleInstances(true)), app.registerVersion(b, "3.13.0", t), // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation
      app.registerVersion(b, "3.13.0", "cjs2017");
    }();
    exports.AbstractUserDataWriter = Wl;
    exports.AggregateField = Lh;
    exports.AggregateQuerySnapshot = qh;
    exports.Bytes = Uh;
    exports.CACHE_SIZE_UNLIMITED = Ah;
    exports.CollectionReference = wh;
    exports.DocumentReference = fh;
    exports.DocumentSnapshot = sf;
    exports.FieldPath = Kh;
    exports.FieldValue = Qh;
    exports.Firestore = vh;
    exports.FirestoreError = U;
    exports.GeoPoint = jh;
    exports.LoadBundleTask = Eh;
    exports.Query = dh;
    exports.QueryCompositeFilterConstraint = Vl;
    exports.QueryConstraint = vl;
    exports.QueryDocumentSnapshot = rf;
    exports.QueryEndAtConstraint = Bl;
    exports.QueryFieldFilterConstraint = Pl;
    exports.QueryLimitConstraint = Nl;
    exports.QueryOrderByConstraint = Cl;
    exports.QuerySnapshot = of;
    exports.QueryStartAtConstraint = $l;
    exports.SnapshotMetadata = nf;
    exports.Timestamp = it;
    exports.Transaction = qf;
    exports.WriteBatch = Bf;
    exports._DatabaseId = Oe;
    exports._DocumentKey = ht;
    exports._EmptyAppCheckTokenProvider = X;
    exports._EmptyAuthCredentialsProvider = Q;
    exports._FieldPath = at;
    exports._TestingHooks = ci;
    exports._cast = uh;
    exports._debugAssert = B;
    exports._isBase64Available = be;
    exports._logWarn = M;
    exports._validateIsNotUsedTogether = sh;
    exports.addDoc = pf;
    exports.aggregateFieldEqual = tf;
    exports.aggregateQuerySnapshotEqual = ef;
    exports.and = Dl;
    exports.arrayRemove = jf;
    exports.arrayUnion = Qf;
    exports.average = Xl;
    exports.clearIndexedDbPersistence = xh;
    exports.collection = _h;
    exports.collectionGroup = mh;
    exports.connectFirestoreEmulator = lh;
    exports.count = Zl;
    exports.deleteDoc = yf;
    exports.deleteField = Kf;
    exports.disableNetwork = Mh;
    exports.doc = gh;
    exports.documentId = Gh;
    exports.enableIndexedDbPersistence = Sh;
    exports.enableMultiTabIndexedDbPersistence = Dh;
    exports.enableNetwork = kh;
    exports.endAt = ql;
    exports.endBefore = Ll;
    exports.ensureFirestoreConfigured = bh;
    exports.executeWrite = Ef;
    exports.getAggregateFromServer = Rf;
    exports.getCountFromServer = vf;
    exports.getDoc = af;
    exports.getDocFromCache = lf;
    exports.getDocFromServer = ff;
    exports.getDocs = df;
    exports.getDocsFromCache = wf;
    exports.getDocsFromServer = _f;
    exports.getFirestore = Ph;
    exports.increment = zf;
    exports.initializeFirestore = Rh;
    exports.limit = kl;
    exports.limitToLast = Ml;
    exports.loadBundle = Oh;
    exports.memoryEagerGarbageCollector = Df;
    exports.memoryLocalCache = xf;
    exports.memoryLruGarbageCollector = Cf;
    exports.namedQuery = Fh;
    exports.onSnapshot = If;
    exports.onSnapshotsInSync = Tf;
    exports.or = Sl;
    exports.orderBy = xl;
    exports.persistentLocalCache = Nf;
    exports.persistentMultipleTabManager = Of;
    exports.persistentSingleTabManager = $f;
    exports.query = Rl;
    exports.queryEqual = ph;
    exports.refEqual = yh;
    exports.runTransaction = Uf;
    exports.serverTimestamp = Gf;
    exports.setDoc = mf;
    exports.setIndexConfiguration = Hf;
    exports.setLogLevel = x;
    exports.snapshotEqual = cf;
    exports.startAfter = Fl;
    exports.startAt = Ol;
    exports.sum = Yl;
    exports.terminate = $h;
    exports.updateDoc = gf;
    exports.waitForPendingWrites = Nh;
    exports.where = bl;
    exports.writeBatch = Wf;
  }
});

// node_modules/firebase/firestore/dist/index.cjs.js
var require_index_cjs10 = __commonJS({
  "node_modules/firebase/firestore/dist/index.cjs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var firestore = require_index_cjs9();
    Object.keys(firestore).forEach(function(k) {
      if (k !== "default" && !exports.hasOwnProperty(k))
        Object.defineProperty(exports, k, {
          enumerable: true,
          get: function() {
            return firestore[k];
          }
        });
    });
  }
});

// node_modules/react-admin-firebase/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/react-admin-firebase/dist/index.js"(exports) {
    var e = require_lodash();
    var r = require_index_cjs6();
    var t = require_path_browserify();
    var n = require_index_cjs7();
    var o = require_index_cjs8();
    var i = require_index_cjs10();
    function a(e2) {
      return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
    }
    var s = a(t);
    function u(r2, t2, n2) {
      r2.sort(function(r3, o2) {
        var i2 = e.get(r3, t2), a2 = e.get(o2, t2), s2 = "asc" === n2;
        return Number.isFinite(i2) && Number.isFinite(a2) ? c(i2, a2, s2) : "string" == typeof i2 && "string" == typeof a2 ? c(i2.toLowerCase(), a2.toLowerCase(), s2) : i2 instanceof Date && a2 instanceof Date ? c(i2, a2, s2) : c(!!i2, !!a2, s2);
      });
    }
    function c(e2, r2, t2) {
      return e2 > r2 ? t2 ? 1 : -1 : e2 < r2 ? t2 ? -1 : 1 : 0;
    }
    function l(r2, t2) {
      if (!t2 || e.isEmpty(t2))
        return r2;
      var n2 = [];
      return Object.keys(t2).map(function(e2) {
        var r3 = function(e3, r4) {
          if (!r4 || "string" == typeof r4 || "number" == typeof r4 || "boolean" == typeof r4)
            return [{ searchField: e3, searchValue: r4 }];
          var t3 = {};
          return t3[e3] = r4, function(e4) {
            var r5 = [];
            return function e5(t4, n3) {
              for (var o2 in n3 = n3 || "", t4)
                if (t4.hasOwnProperty(o2)) {
                  var i2 = t4 && t4[o2], a2 = n3 ? n3 + "." + o2 : o2;
                  "object" == typeof i2 || i2 instanceof Array ? e5(i2, a2) : r5.push({ searchField: a2, searchValue: i2 });
                }
            }(e4, null), r5;
          }(t3);
        }(e2, t2[e2]);
        n2.push.apply(n2, r3);
      }), r2.filter(function(r3) {
        return n2.reduce(function(t3, n3) {
          var o2 = function(r4, t4, n4) {
            var o3 = e.get(r4, t4);
            return !o3 && !n4 || !!o3 && ("string" == typeof n4 ? o3.toString().toLowerCase().includes(n4.toLowerCase()) : "boolean" == typeof n4 || "number" == typeof n4 ? o3 === n4 : !!Array.isArray(n4) && n4.includes(o3));
          }(r3, n3.searchField, n3.searchValue);
          return o2 && t3;
        }, true);
      });
    }
    function f() {
      return f = Object.assign ? Object.assign.bind() : function(e2) {
        for (var r2 = 1; r2 < arguments.length; r2++) {
          var t2 = arguments[r2];
          for (var n2 in t2)
            Object.prototype.hasOwnProperty.call(t2, n2) && (e2[n2] = t2[n2]);
        }
        return e2;
      }, f.apply(this, arguments);
    }
    function d(e2, r2) {
      (null == r2 || r2 > e2.length) && (r2 = e2.length);
      for (var t2 = 0, n2 = new Array(r2); t2 < r2; t2++)
        n2[t2] = e2[t2];
      return n2;
    }
    var h = function() {
      return null;
    };
    var v = function() {
      function e2(e3, r3) {
        this.title = void 0, this.cacheEnabledKey = void 0, this.title = e3, this.cacheEnabledKey = r3;
      }
      var r2, t2, n2 = e2.prototype;
      return n2.isEnabled = function() {
        return !!localStorage.getItem(this.cacheEnabledKey);
      }, n2.SetEnabled = function(e3) {
        e3 ? localStorage.setItem(this.cacheEnabledKey, "true") : localStorage.removeItem(this.cacheEnabledKey);
      }, r2 = e2, (t2 = [{ key: "log", get: function() {
        return this.isEnabled() ? console.log.bind(console, this.title) : h;
      } }, { key: "warn", get: function() {
        return this.isEnabled() ? console.warn.bind(console, this.title) : h;
      } }, { key: "error", get: function() {
        return this.isEnabled() ? console.error.bind(console, this.title) : h;
      } }]) && function(e3, r3) {
        for (var t3 = 0; t3 < r3.length; t3++) {
          var n3 = r3[t3];
          n3.enumerable = n3.enumerable || false, n3.configurable = true, "value" in n3 && (n3.writable = true), Object.defineProperty(e3, "symbol" == typeof (o2 = function(e4, r4) {
            if ("object" != typeof e4 || null === e4)
              return e4;
            var t4 = e4[Symbol.toPrimitive];
            if (void 0 !== t4) {
              var n4 = t4.call(e4, "string");
              if ("object" != typeof n4)
                return n4;
              throw new TypeError("@@toPrimitive must return a primitive value.");
            }
            return String(e4);
          }(n3.key)) ? o2 : String(o2), n3);
        }
        var o2;
      }(r2.prototype, t2), Object.defineProperty(r2, "prototype", { writable: false }), e2;
    }();
    var m = new v("💸firestore-costs:", "LOGGING_FIRESTORE_COSTS_ENABLED");
    var p = "firecosts-single-reads";
    var g = new v("🔥raf:", "LOGGING_ENABLED");
    var P = g.log;
    var y = g.error;
    var b = g.warn;
    function w(e2, r2, t2) {
      var n2 = document.getElementById("eventMonitor");
      if (n2) {
        var o2 = new CustomEvent(e2, { detail: { fileName: r2, data: t2 } });
        n2.dispatchEvent(o2);
      } else
        P("eventMonitor not found to dispatch event " + e2 + " for " + r2);
    }
    var D = "___REF_FULLPATH_";
    function j(e2) {
      var r2 = { parsedDoc: {}, refdocs: [] };
      return !e2 || "object" != typeof e2 || (Object.keys(e2).map(function(t2) {
        e2[t2] = R(e2[t2], t2, r2);
      }), r2.parsedDoc = e2), r2;
    }
    function R(e2, r2, t2) {
      if (!e2)
        return e2;
      if ("object" != typeof e2)
        return e2;
      if (e2.toDate && "function" == typeof e2.toDate)
        return e2.toDate();
      if (Array.isArray(e2))
        return e2.map(function(e3, n3) {
          return R(e3, r2 + "." + n3, t2);
        });
      if (L(e2)) {
        var n2 = e2;
        return t2.refdocs.push({ fieldPath: r2, refDocPath: n2.path }), n2.id;
      }
      return "object" == typeof e2 ? (Object.keys(e2).map(function(r3) {
        e2[r3] = R(e2[r3], r3, t2);
      }), e2) : e2;
    }
    function L(e2) {
      return "string" == typeof e2.id && "object" == typeof e2.firestore && "object" == typeof e2.parent && "string" == typeof e2.path;
    }
    var F = function t2(n2, o2) {
      try {
        var i2, a2 = function(e2) {
          if (i2)
            return e2;
          var r2 = Array.isArray(o2);
          return r2 ? Promise.all(o2.map(function(e3, r3) {
            return Promise.resolve(t2(n2, e3)).then(function(e4) {
              o2[r3] = e4;
            });
          })) : L(o2) ? o2 : r2 || "object" != typeof o2 ? void 0 : Promise.all(Object.keys(o2).map(function(e3) {
            try {
              return Promise.resolve(t2(n2, o2[e3])).then(function(r3) {
                o2[e3] = r3;
              });
            } catch (e4) {
              return Promise.reject(e4);
            }
          }));
        };
        if (!o2 || "object" != typeof o2)
          return Promise.resolve(o2);
        var s2 = e.has(o2, "src"), u2 = function() {
          if (s2)
            return function(e2, t3) {
              try {
                var a3 = Promise.resolve(r.getDownloadURL(r.ref(n2.storage(), o2.src))).then(function(e3) {
                  var r2 = f({}, o2, { src: e3 });
                  return i2 = 1, r2;
                });
              } catch (e3) {
                return t3(e3);
              }
              return a3 && a3.then ? a3.then(void 0, t3) : a3;
            }(0, function(e2) {
              return y("Error when getting download URL", { error: e2 }), i2 = 1, o2;
            });
        }();
        return Promise.resolve(u2 && u2.then ? u2.then(a2) : a2(u2));
      } catch (e2) {
        return Promise.reject(e2);
      }
    };
    function T(r2) {
      if (!r2)
        return b("parseFireStoreDocument: no doc", { doc: r2 }), {};
      var t2 = j(r2.data()), n2 = function(r3, t3) {
        return t3.map(function(t4) {
          e.set(r3, D + t4.fieldPath, t4.refDocPath);
        }), r3;
      }(t2.parsedDoc, t2.refdocs);
      return f({ id: r2.id }, n2);
    }
    function A(e2, r2) {
      if (!e2)
        return r2 + "";
      if (!r2)
        throw new Error("Resource name must be a string of length greater than 0 characters");
      var t2 = "string" == typeof e2 ? e2 : e2(), n2 = s.default.join("/", t2, "/", r2, "/");
      if ((n2.split("/").length - 1) % 2)
        throw new Error('The rootRef path must point to a "document"\n    not a "collection"e.g. /collection/document/ or\n    /collection/document/collection/document/');
      return n2.slice(1, -1);
    }
    function G() {
      return s.default.join.apply(s.default, [].slice.call(arguments));
    }
    function E(e2) {
      var r2 = { uploads: [], refdocs: [], parsedDoc: {} };
      return !e2 || "object" != typeof e2 || (Object.keys(e2).map(function(t2) {
        S(e2[t2], t2, r2);
      }), r2.parsedDoc = e2), r2;
    }
    function S(e2, r2, t2) {
      return e2 ? "string" == typeof r2 && r2.includes(D) ? void t2.refdocs.push({ fieldDotsPath: r2, refPath: e2 }) : "object" != typeof e2 ? e2 : e2.toDate && "function" == typeof e2.toDate ? e2.toDate() : Array.isArray(e2) ? e2.map(function(e3, n2) {
        return S(e3, r2 + "." + n2, t2);
      }) : e2 && e2.hasOwnProperty("rawFile") ? (t2.uploads.push({ fieldDotsPath: r2, fieldSlashesPath: r2.split(".").join("/"), rawFile: e2.rawFile }), void delete e2.rawFile) : (Object.keys(e2).map(function(n2) {
        S(e2[n2], r2 + "." + n2, t2);
      }), e2) : e2;
    }
    var U = function() {
      function e2(e3, t3) {
        this._app = void 0, this._firestore = void 0, this._storage = void 0, this._auth = void 0, this.options = void 0;
        var a2 = e3 || {};
        this.options = a2, this._app = window._app = function(e4, r2) {
          if (r2.app)
            return r2.app;
          var t4 = n.getApps();
          return null != t4 && t4.length ? n.getApp() : n.initializeApp(e4);
        }(t3, a2), this._firestore = i.getFirestore(this._app), this._storage = r.getStorage(this._app), this._auth = o.getAuth(this._app);
      }
      var t2 = e2.prototype;
      return t2.dbGetCollection = function(e3) {
        return i.collection(this._firestore, e3);
      }, t2.dbCreateBatch = function() {
        return i.writeBatch(this._firestore);
      }, t2.dbMakeNewId = function() {
        return i.doc(i.collection(this._firestore, "collections")).id;
      }, t2.OnUserLogout = function(e3) {
        this._auth.onAuthStateChanged(function(r2) {
          var t3 = !r2;
          P("FirebaseWrapper.OnUserLogout", { user: r2, isLoggedOut: t3 }), t3 && e3(r2);
        });
      }, t2.putFile = function(e3, t3) {
        var n2 = r.uploadBytesResumable(r.ref(this._storage, e3), t3), o2 = new Promise(function(e4, r2) {
          return n2.then(e4).catch(r2);
        }), i2 = o2.then(function(e4) {
          return r.getDownloadURL(e4.ref);
        }).then(function(e4) {
          return e4;
        });
        return { task: n2, taskResult: o2, downloadUrl: i2 };
      }, t2.getStorageDownloadUrl = function(e3) {
        try {
          return Promise.resolve(r.getDownloadURL(r.ref(this._storage, e3)));
        } catch (e4) {
          return Promise.reject(e4);
        }
      }, t2.serverTimestamp = function() {
        return i.serverTimestamp();
      }, t2.authSetPersistence = function(e3) {
        try {
          var r2;
          switch (e3) {
            case "local":
              r2 = o.browserLocalPersistence;
              break;
            case "none":
              r2 = o.inMemoryPersistence;
              break;
            default:
              r2 = o.browserSessionPersistence;
          }
          return P("setPersistence", { persistenceInput: e3, persistenceResolved: r2 }), Promise.resolve(this._auth.setPersistence(r2).catch(function(e4) {
            return console.error(e4);
          }));
        } catch (e4) {
          return Promise.reject(e4);
        }
      }, t2.authSigninEmailPassword = function(e3, r2) {
        try {
          return Promise.resolve(o.signInWithEmailAndPassword(this._auth, e3, r2));
        } catch (e4) {
          return Promise.reject(e4);
        }
      }, t2.authSignOut = function() {
        try {
          return Promise.resolve(o.signOut(this._auth));
        } catch (e3) {
          return Promise.reject(e3);
        }
      }, t2.authGetUserLoggedIn = function() {
        try {
          var e3 = this;
          return Promise.resolve(new Promise(function(r2, t3) {
            var n2 = e3._auth;
            if (n2.currentUser)
              return r2(n2.currentUser);
            var i2 = o.onAuthStateChanged(e3._auth, function(e4) {
              i2(), e4 ? r2(e4) : t3();
            });
          }));
        } catch (e4) {
          return Promise.reject(e4);
        }
      }, t2.GetUserLogin = function() {
        try {
          return Promise.resolve(this.authGetUserLoggedIn());
        } catch (e3) {
          return Promise.reject(e3);
        }
      }, t2.auth = function() {
        return this._auth;
      }, t2.storage = function() {
        return this._storage;
      }, t2.GetApp = function() {
        return this._app;
      }, t2.db = function() {
        return this._firestore;
      }, e2;
    }();
    function I(e2, r2) {
      try {
        var t2 = e2();
      } catch (e3) {
        return r2(e3);
      }
      return t2 && t2.then ? t2.then(void 0, r2) : t2;
    }
    var k = function() {
      function e2(e3, r3) {
        this.fireWrapper = void 0;
        var t2 = r3 || {};
        P("Auth Client: initializing...", { firebaseConfig: e3, options: t2 }), this.fireWrapper = new U(t2, e3), t2.persistence && this.setPersistence(t2.persistence);
      }
      var r2 = e2.prototype;
      return r2.setPersistence = function(e3) {
        return this.fireWrapper.authSetPersistence(e3);
      }, r2.HandleAuthLogin = function(e3) {
        try {
          var r3 = this, t2 = e3.username, n2 = e3.password;
          return Promise.resolve(t2 && n2 ? I(function() {
            return Promise.resolve(r3.fireWrapper.authSigninEmailPassword(t2, n2)).then(function(e4) {
              return P("HandleAuthLogin: user sucessfully logged in", { user: e4 }), e4;
            });
          }, function() {
            throw P("HandleAuthLogin: invalid credentials", { params: e3 }), new Error("Login error: invalid credentials");
          }) : r3.getUserLogin());
        } catch (e4) {
          return Promise.reject(e4);
        }
      }, r2.HandleAuthLogout = function() {
        return this.fireWrapper.authSignOut();
      }, r2.HandleAuthError = function(e3) {
        return P("HandleAuthLogin: invalid credentials", { errorHttp: e3 }), "ok" === function(e4) {
          if (e4 >= 200 && e4 < 300)
            return "ok";
          switch (e4) {
            case 401:
            case 403:
              return "unauthenticated";
            default:
              return "ok";
          }
        }(!!e3 && e3.status) ? (P("API is actually authenticated"), Promise.resolve()) : (b("Received authentication error from API"), Promise.reject());
      }, r2.HandleAuthCheck = function() {
        try {
          return Promise.resolve(this.getUserLogin());
        } catch (e3) {
          return Promise.reject(e3);
        }
      }, r2.getUserLogin = function() {
        return this.fireWrapper.authGetUserLoggedIn();
      }, r2.HandleGetPermissions = function() {
        try {
          var e3 = this;
          return Promise.resolve(I(function() {
            return Promise.resolve(e3.getUserLogin()).then(function(e4) {
              return Promise.resolve(e4.getIdTokenResult()).then(function(e5) {
                return e5.claims;
              });
            });
          }, function(e4) {
            return P("HandleGetPermission: no user is logged in or tokenResult error", { e: e4 }), null;
          }));
        } catch (e4) {
          return Promise.reject(e4);
        }
      }, r2.HandleGetIdentity = function() {
        try {
          var e3 = this;
          return Promise.resolve(I(function() {
            return Promise.resolve(e3.getUserLogin()).then(function(e4) {
              var r3 = e4.displayName, t2 = e4.photoURL;
              return { id: e4.uid, fullName: "" + (null != r3 ? r3 : ""), avatar: "" + (null != t2 ? t2 : "") };
            });
          }, function(e4) {
            return P("HandleGetIdentity: no user is logged in", { e: e4 }), null;
          }));
        } catch (e4) {
          return Promise.reject(e4);
        }
      }, r2.HandleGetJWTAuthTime = function() {
        try {
          var e3 = this;
          return Promise.resolve(I(function() {
            return Promise.resolve(e3.getUserLogin()).then(function(e4) {
              return Promise.resolve(e4.getIdTokenResult()).then(function(e5) {
                return e5.authTime;
              });
            });
          }, function(e4) {
            return P("HandleGetJWTAuthTime: no user is logged in or tokenResult error", { e: e4 }), null;
          }));
        } catch (e4) {
          return Promise.reject(e4);
        }
      }, r2.HandleGetJWTExpirationTime = function() {
        try {
          var e3 = this;
          return Promise.resolve(I(function() {
            return Promise.resolve(e3.getUserLogin()).then(function(e4) {
              return Promise.resolve(e4.getIdTokenResult()).then(function(e5) {
                return e5.expirationTime;
              });
            });
          }, function(e4) {
            return P("HandleGetJWTExpirationTime: no user is logged in or tokenResult error", { e: e4 }), null;
          }));
        } catch (e4) {
          return Promise.reject(e4);
        }
      }, r2.HandleGetJWTSignInProvider = function() {
        try {
          var e3 = this;
          return Promise.resolve(I(function() {
            return Promise.resolve(e3.getUserLogin()).then(function(e4) {
              return Promise.resolve(e4.getIdTokenResult()).then(function(e5) {
                return e5.signInProvider;
              });
            });
          }, function(e4) {
            return P("HandleGetJWTSignInProvider: no user is logged in or tokenResult error", { e: e4 }), null;
          }));
        } catch (e4) {
          return Promise.reject(e4);
        }
      }, r2.HandleGetJWTIssuedAtTime = function() {
        try {
          var e3 = this;
          return Promise.resolve(I(function() {
            return Promise.resolve(e3.getUserLogin()).then(function(e4) {
              return Promise.resolve(e4.getIdTokenResult()).then(function(e5) {
                return e5.issuedAtTime;
              });
            });
          }, function(e4) {
            return P("HandleGetJWTIssuedAtTime: no user is logged in or tokenResult error", { e: e4 }), null;
          }));
        } catch (e4) {
          return Promise.reject(e4);
        }
      }, r2.HandleGetJWTToken = function() {
        try {
          var e3 = this;
          return Promise.resolve(I(function() {
            return Promise.resolve(e3.getUserLogin()).then(function(e4) {
              return Promise.resolve(e4.getIdTokenResult()).then(function(e5) {
                return e5.token;
              });
            });
          }, function(e4) {
            return P("HandleGetJWTToken: no user is logged in or tokenResult error", { e: e4 }), null;
          }));
        } catch (e4) {
          return Promise.reject(e4);
        }
      }, e2;
    }();
    var _ = function() {
      function e2(e3, r3, t2) {
        var n2 = this;
        this.fireWrapper = void 0, this.options = void 0, this.flogger = void 0, this.resources = {}, this.fireWrapper = e3, this.options = r3, this.flogger = t2, this.fireWrapper.OnUserLogout(function() {
          n2.resources = {};
        });
      }
      var r2 = e2.prototype;
      return r2.TryGetResource = function(e3, r3, t2) {
        try {
          var n2 = function() {
            return o2.TryGetResourcePromise(e3, t2);
          }, o2 = this, i2 = function() {
            if (r3)
              return Promise.resolve(o2.RefreshResource(e3, t2)).then(function() {
              });
          }();
          return Promise.resolve(i2 && i2.then ? i2.then(n2) : n2());
        } catch (e4) {
          return Promise.reject(e4);
        }
      }, r2.GetResource = function(e3) {
        var r3 = this.resources[e3];
        if (!r3)
          throw new Error(`react-admin-firebase: Can't find resource: "` + e3 + '"');
        return r3;
      }, r2.TryGetResourcePromise = function(e3, r3) {
        try {
          var t2 = this;
          return P("resourceManager.TryGetResourcePromise", { relativePath: e3, collectionQuery: r3 }), Promise.resolve(t2.initPath(e3)).then(function() {
            var r4 = t2.resources[e3];
            if (!r4)
              throw new Error('react-admin-firebase: Cant find resource: "' + e3 + '"');
            return r4;
          });
        } catch (e4) {
          return Promise.reject(e4);
        }
      }, r2.RefreshResource = function(e3, r3) {
        try {
          var t2, n2, o2 = this;
          if (null != (t2 = o2.options) && null != (n2 = t2.lazyLoading) && n2.enabled)
            throw b("resourceManager.RefreshResource", { warn: "RefreshResource is not available in lazy loading mode" }), new Error("react-admin-firebase: RefreshResource is not available in lazy loading mode");
          return P("resourceManager.RefreshResource", { relativePath: e3, collectionQuery: r3 }), Promise.resolve(o2.initPath(e3)).then(function() {
            var t3 = o2.resources[e3], n3 = t3.collection, a2 = o2.applyQuery(n3, r3);
            return Promise.resolve(i.getDocs(a2)).then(function(e4) {
              e4.forEach(function(e5) {
                return t3.list.push(T(e5));
              }), o2.flogger.logDocument(e4.docs.length)(), P("resourceManager.RefreshResource", { newDocs: e4, resource: t3, collectionPath: n3.path });
            });
          });
        } catch (e4) {
          return Promise.reject(e4);
        }
      }, r2.GetSingleDoc = function(e3, r3) {
        try {
          var t2 = this;
          return Promise.resolve(t2.initPath(e3)).then(function() {
            var n2 = t2.GetResource(e3);
            return t2.flogger.logDocument(1)(), Promise.resolve(i.getDoc(i.doc(n2.collection, r3))).then(function(t3) {
              if (!t3.exists)
                throw new Error("react-admin-firebase: No id found matching: " + r3);
              var o2 = T(t3);
              return P("resourceManager.GetSingleDoc", { relativePath: e3, resource: n2, docId: r3, docSnap: t3, result: o2 }), o2;
            });
          });
        } catch (e4) {
          return Promise.reject(e4);
        }
      }, r2.initPath = function(e3) {
        try {
          var r3 = this, t2 = A(r3.options && r3.options.rootRef, e3), n2 = !!r3.resources[e3];
          if (P("resourceManager.initPath()", { absolutePath: t2, hasBeenInited: n2 }), n2)
            return P("resourceManager.initPath() has been initialized already..."), Promise.resolve();
          var o2 = r3.fireWrapper.dbGetCollection(t2), i2 = { collection: o2, list: [], path: e3, pathAbsolute: t2 };
          return r3.resources[e3] = i2, P("resourceManager.initPath() setting resource...", { resource: i2, allResources: r3.resources, collection: o2, collectionPath: o2.path }), Promise.resolve();
        } catch (e4) {
          return Promise.reject(e4);
        }
      }, r2.getUserIdentifier = function() {
        try {
          var e3 = this;
          return Promise.resolve(e3.options.associateUsersById ? e3.getCurrentUserId() : e3.getCurrentUserEmail());
        } catch (e4) {
          return Promise.reject(e4);
        }
      }, r2.getCurrentUserEmail = function() {
        try {
          return Promise.resolve(this.fireWrapper.authGetUserLoggedIn()).then(function(e3) {
            return e3 ? e3.email : "annonymous user";
          });
        } catch (e3) {
          return Promise.reject(e3);
        }
      }, r2.getCurrentUserId = function() {
        try {
          return Promise.resolve(this.fireWrapper.authGetUserLoggedIn()).then(function(e3) {
            return e3 ? e3.uid : "annonymous user";
          });
        } catch (e3) {
          return Promise.reject(e3);
        }
      }, r2.applyQuery = function(e3, r3) {
        var t2 = r3 ? r3(e3) : e3;
        return P("resourceManager.applyQuery() ...", { collection: e3, collectionQuery: (r3 || "-").toString(), collRef: t2 }), t2;
      }, e2;
    }();
    var C = function() {
      function r2(e2, r3, t3) {
        this.fireWrapper = void 0, this.options = void 0, this.flogger = void 0, this.rm = void 0, this.fireWrapper = e2, this.options = r3, this.flogger = t3, this.rm = new _(this.fireWrapper, this.options, this.flogger);
      }
      var t2 = r2.prototype;
      return t2.checkRemoveIdField = function(e2, r3) {
        this.options.dontAddIdFieldToDoc || (e2.id = r3);
      }, t2.transformToDb = function(e2, r3, t3) {
        return "function" == typeof this.options.transformToDb ? this.options.transformToDb(e2, r3, t3) : r3;
      }, t2.parseDataAndUpload = function(r3, t3, n2) {
        try {
          var o2 = this;
          if (!n2)
            return Promise.resolve(n2);
          var a2 = i.doc(r3.collection, t3).path, s2 = E(n2);
          return Promise.resolve(Promise.all(s2.uploads.map(function(r4) {
            try {
              var t4 = function(e2, r5, t5, n3) {
                var o3 = e2 instanceof File ? e2.name.split(".") : [], i2 = null != o3 && o3.length ? "." + o3.pop() : "";
                return n3 ? G(r5, t5, e2.name) : G(r5, t5 + i2);
              }(r4.rawFile, a2, r4.fieldDotsPath, !!o2.options.useFileNamesInStorage);
              return Promise.resolve(o2.saveFile(t4, r4.rawFile)).then(function(t5) {
                e.set(n2, r4.fieldDotsPath + ".src", t5);
              });
            } catch (e2) {
              return Promise.reject(e2);
            }
          }))).then(function() {
            return n2;
          });
        } catch (e2) {
          return Promise.reject(e2);
        }
      }, t2.addCreatedByFields = function(e2) {
        try {
          var r3 = this;
          return Promise.resolve(function(e3, r4, t3, n2) {
            try {
              return n2.disableMeta ? Promise.resolve() : Promise.resolve(t3.getUserIdentifier()).then(function(t4) {
                var o2 = function(e4) {
                  if (e4.renameMetaFields && e4.renameMetaFields.created_at)
                    return e4.renameMetaFields.created_at;
                  var r5 = e4.metaFieldCasing, t5 = "createdate";
                  return r5 ? "camel" === r5 ? "createDate" : "snake" === r5 ? "create_date" : "pascal" === r5 ? "CreateDate" : "kebab" === r5 ? "create-date" : t5 : t5;
                }(n2), i2 = function(e4) {
                  if (e4.renameMetaFields && e4.renameMetaFields.created_by)
                    return e4.renameMetaFields.created_by;
                  var r5 = e4.metaFieldCasing, t5 = "createdby";
                  return r5 ? "camel" === r5 ? "createdBy" : "snake" === r5 ? "created_by" : "pascal" === r5 ? "CreatedBy" : "kebab" === r5 ? "created-by" : t5 : t5;
                }(n2);
                e3[o2] = r4.serverTimestamp(), e3[i2] = t4;
              });
            } catch (e4) {
              return Promise.reject(e4);
            }
          }(e2, r3.fireWrapper, r3.rm, r3.options));
        } catch (e3) {
          return Promise.reject(e3);
        }
      }, t2.addUpdatedByFields = function(e2) {
        try {
          var r3 = this;
          return Promise.resolve(function(e3, r4, t3, n2) {
            try {
              return n2.disableMeta ? Promise.resolve() : Promise.resolve(t3.getUserIdentifier()).then(function(t4) {
                var o2 = function(e4) {
                  if (e4.renameMetaFields && e4.renameMetaFields.updated_at)
                    return e4.renameMetaFields.updated_at;
                  var r5 = e4.metaFieldCasing, t5 = "lastupdate";
                  return r5 ? "camel" === r5 ? "lastUpdate" : "snake" === r5 ? "last_update" : "pascal" === r5 ? "LastUpdate" : "kebab" === r5 ? "last-update" : t5 : t5;
                }(n2), i2 = function(e4) {
                  if (e4.renameMetaFields && e4.renameMetaFields.updated_by)
                    return e4.renameMetaFields.updated_by;
                  var r5 = e4.metaFieldCasing, t5 = "updatedby";
                  return r5 ? "camel" === r5 ? "updatedBy" : "snake" === r5 ? "updated_by" : "pascal" === r5 ? "UpdatedBy" : "kebab" === r5 ? "updated-by" : t5 : t5;
                }(n2);
                e3[o2] = r4.serverTimestamp(), e3[i2] = t4;
              });
            } catch (e4) {
              return Promise.reject(e4);
            }
          }(e2, r3.fireWrapper, r3.rm, r3.options));
        } catch (e3) {
          return Promise.reject(e3);
        }
      }, t2.saveFile = function(r3, t3) {
        try {
          var n2 = this;
          return P("saveFile() saving file...", { storagePath: r3, rawFile: t3 }), Promise.resolve(function(e2, o2) {
            try {
              var i2 = (s2 = (a2 = n2.fireWrapper.putFile(r3, t3)).task, u2 = a2.taskResult, c2 = a2.downloadUrl, w("FILE_UPLOAD_WILL_START", l2 = t3.name), s2.on("state_changed", function(e3) {
                var r4 = e3.bytesTransferred / e3.totalBytes * 100;
                switch (P("Upload is " + r4 + "% done"), w("FILE_UPLOAD_PROGRESS", l2, r4), e3.state) {
                  case "paused":
                    P("Upload is paused"), w("FILE_UPLOAD_PAUSED", l2);
                    break;
                  case "running":
                    P("Upload is running"), w("FILE_UPLOAD_RUNNING", l2);
                    break;
                  case "cancelled":
                    P("Upload has been canceled"), w("FILE_UPLOAD_CANCELED", l2);
                }
              }), Promise.resolve(Promise.all([c2, u2])).then(function(e3) {
                var t4 = e3[0];
                return w("FILE_UPLOAD_COMPLETE", l2), w("FILE_SAVED", l2), P("saveFile() saved file", { storagePath: r3, taskResult: u2, getDownloadURL: t4 }), n2.options.relativeFilePaths ? r3 : t4;
              }));
            } catch (e3) {
              return o2(e3);
            }
            var a2, s2, u2, c2, l2;
            return i2 && i2.then ? i2.then(void 0, o2) : i2;
          }(0, function(r4) {
            "storage/unknown" === e.get(r4, "code") ? y('saveFile() error saving file, No bucket found! Try clicking "Get Started" in firebase -> storage', { storageError: r4 }) : y("saveFile() error saving file", { storageError: r4 });
          }));
        } catch (e2) {
          return Promise.reject(e2);
        }
      }, r2;
    }();
    function M(e2, r2, t2) {
      if (!e2.s) {
        if (t2 instanceof O) {
          if (!t2.s)
            return void (t2.o = M.bind(null, e2, r2));
          1 & r2 && (r2 = t2.s), t2 = t2.v;
        }
        if (t2 && t2.then)
          return void t2.then(M.bind(null, e2, r2), M.bind(null, e2, 2));
        e2.s = r2, e2.v = t2;
        const n2 = e2.o;
        n2 && n2(e2);
      }
    }
    var O = function() {
      function e2() {
      }
      return e2.prototype.then = function(r2, t2) {
        var n2 = new e2(), o2 = this.s;
        if (o2) {
          var i2 = 1 & o2 ? r2 : t2;
          if (i2) {
            try {
              M(n2, 1, i2(this.v));
            } catch (e3) {
              M(n2, 2, e3);
            }
            return n2;
          }
          return this;
        }
        return this.o = function(e3) {
          try {
            var o3 = e3.v;
            1 & e3.s ? M(n2, 1, r2 ? r2(o3) : o3) : t2 ? M(n2, 1, t2(o3)) : M(n2, 2, o3);
          } catch (e4) {
            M(n2, 2, e4);
          }
        }, n2;
      }, e2;
    }();
    function W(e2) {
      return e2 instanceof O && 1 & e2.s;
    }
    var N = function(e2, r2, t2, n2) {
      try {
        var o2 = btoa(JSON.stringify(f({}, r2, { resourceName: t2 }))), a2 = localStorage.getItem(o2);
        return a2 ? Promise.resolve(i.getDoc(i.doc(e2, a2))).then(function(e3) {
          return n2.logDocument(1)(), !!e3.exists() && e3;
        }) : Promise.resolve(false);
      } catch (e3) {
        return Promise.reject(e3);
      }
    };
    var H = function(e2, r2, t2, n2, o2) {
      void 0 === o2 && (o2 = B);
      try {
        var a2 = function(r3) {
          return { noPagination: i.query.apply(void 0, [e2].concat([].concat(s2, u2))), withPagination: i.query.apply(void 0, [e2].concat([].concat(s2, u2, r3))) };
        }, s2 = o2.filters ? (c2 = r2.filter, Object.entries(c2).flatMap(function(e3) {
          var r3 = e3[0], t3 = e3[1];
          return Array.isArray(t3) ? [i.where(r3, "array-contains-any", t3)] : 1 === Object.keys(c2).length && isNaN(t3) ? [i.where(r3, ">=", t3), i.where(r3, "<", t3 + "z")] : [i.where(r3, "==", t3)];
        })) : [], u2 = o2.sort ? function(e3) {
          if (null != e3 && "id" !== e3.field) {
            var r3 = e3.field, t3 = e3.order.toLocaleLowerCase();
            return [i.orderBy(r3, t3)];
          }
          return [];
        }(r2.sort) : [];
        return Promise.resolve(o2.pagination ? Promise.resolve(function(e3, r3, t3, n3, o3) {
          try {
            var a3 = t3.pagination, s3 = a3.perPage;
            return 1 === a3.page ? Promise.resolve([i.limit(s3)]) : Promise.resolve(N(e3, t3, n3, o3)).then(function(a4) {
              function u3() {
                return [i.startAfter(a4), i.limit(s3)];
              }
              var c3 = function() {
                if (!a4)
                  return Promise.resolve(function(e4, r4, t4, n4, o4) {
                    try {
                      var a5 = function() {
                        var t5 = (u4 - d2) * c4, n5 = i.query.apply(void 0, [e4].concat([].concat(r4, 1 === d2 ? [i.limit(t5)] : [i.startAfter(l2), i.limit(t5)])));
                        return Promise.resolve(i.getDocs(n5)).then(function(e5) {
                          var r5 = e5.docs.length;
                          return o4.logDocument(r5)(), e5.docs[r5 - 1];
                        });
                      }, s4 = t4.pagination, u4 = s4.page, c4 = s4.perPage, l2 = false, d2 = u4 - 1, h2 = f({}, t4, { pagination: f({}, t4.pagination) }), v2 = function(e5, r5, t5) {
                        for (var n5; ; ) {
                          var o5 = e5();
                          if (W(o5) && (o5 = o5.v), !o5)
                            return i2;
                          if (o5.then) {
                            n5 = 0;
                            break;
                          }
                          var i2 = t5();
                          if (i2 && i2.then) {
                            if (!W(i2)) {
                              n5 = 1;
                              break;
                            }
                            i2 = i2.s;
                          }
                          if (r5) {
                            var a6 = r5();
                            if (a6 && a6.then && !W(a6)) {
                              n5 = 2;
                              break;
                            }
                          }
                        }
                        var s5 = new O(), u5 = M.bind(null, s5, 2);
                        return (0 === n5 ? o5.then(l3) : 1 === n5 ? i2.then(c5) : a6.then(f2)).then(void 0, u5), s5;
                        function c5(n6) {
                          i2 = n6;
                          do {
                            if (r5 && (a6 = r5()) && a6.then && !W(a6))
                              return void a6.then(f2).then(void 0, u5);
                            if (!(o5 = e5()) || W(o5) && !o5.v)
                              return void M(s5, 1, i2);
                            if (o5.then)
                              return void o5.then(l3).then(void 0, u5);
                            W(i2 = t5()) && (i2 = i2.v);
                          } while (!i2 || !i2.then);
                          i2.then(c5).then(void 0, u5);
                        }
                        function l3(e6) {
                          e6 ? (i2 = t5()) && i2.then ? i2.then(c5).then(void 0, u5) : c5(i2) : M(s5, 1, i2);
                        }
                        function f2() {
                          (o5 = e5()) ? o5.then ? o5.then(l3).then(void 0, u5) : l3(o5) : M(s5, 1, i2);
                        }
                      }(function() {
                        return !l2 && d2 > 1;
                      }, void 0, function() {
                        return d2--, h2.pagination.page = d2, console.log("getting query cursor currentPage=", d2), Promise.resolve(N(e4, h2, n4, o4)).then(function(e5) {
                          l2 = e5;
                        });
                      });
                      return Promise.resolve(v2 && v2.then ? v2.then(a5) : a5());
                    } catch (e5) {
                      return Promise.reject(e5);
                    }
                  }(e3, r3, t3, n3, o3)).then(function(e4) {
                    a4 = e4;
                  });
              }();
              return c3 && c3.then ? c3.then(u3) : u3();
            });
          } catch (e4) {
            return Promise.reject(e4);
          }
        }(e2, [].concat(s2, u2), r2, t2, n2)).then(a2) : a2([]));
      } catch (e3) {
        return Promise.reject(e3);
      }
      var c2;
    };
    var B = { filters: true, sort: true, pagination: true };
    function J(e2, r2) {
      return f({}, e2, { filter: r2 ? f({ deleted: false }, e2.filter) : e2.filter });
    }
    function x(e2, r2, t2) {
      if (!e2.s) {
        if (t2 instanceof z) {
          if (!t2.s)
            return void (t2.o = x.bind(null, e2, r2));
          1 & r2 && (r2 = t2.s), t2 = t2.v;
        }
        if (t2 && t2.then)
          return void t2.then(x.bind(null, e2, r2), x.bind(null, e2, 2));
        e2.s = r2, e2.v = t2;
        const n2 = e2.o;
        n2 && n2(e2);
      }
    }
    var z = function() {
      function e2() {
      }
      return e2.prototype.then = function(r2, t2) {
        var n2 = new e2(), o2 = this.s;
        if (o2) {
          var i2 = 1 & o2 ? r2 : t2;
          if (i2) {
            try {
              x(n2, 1, i2(this.v));
            } catch (e3) {
              x(n2, 2, e3);
            }
            return n2;
          }
          return this;
        }
        return this.o = function(e3) {
          try {
            var o3 = e3.v;
            1 & e3.s ? x(n2, 1, r2 ? r2(o3) : o3) : t2 ? x(n2, 1, t2(o3)) : x(n2, 2, o3);
          } catch (e4) {
            x(n2, 2, e4);
          }
        }, n2;
      }, e2;
    }();
    function q(e2, r2, t2) {
      var n2 = [];
      for (var o2 in e2)
        n2.push(o2);
      return function(e3, r3, t3) {
        var n3, o3, i2 = -1;
        return function a2(s2) {
          try {
            for (; ++i2 < e3.length && (!t3 || !t3()); )
              if ((s2 = r3(i2)) && s2.then) {
                if (!((u2 = s2) instanceof z && 1 & u2.s))
                  return void s2.then(a2, o3 || (o3 = x.bind(null, n3 = new z(), 2)));
                s2 = s2.v;
              }
            n3 ? x(n3, 1, s2) : n3 = s2;
          } catch (e4) {
            x(n3 || (n3 = new z()), 2, e4);
          }
          var u2;
        }(), n3;
      }(n2, function(e3) {
        return r2(n2[e3]);
      }, t2);
    }
    var Q = function() {
      function e2(e3, r3, t2) {
        this.options = void 0, this.rm = void 0, this.client = void 0, this.options = e3, this.rm = r3, this.client = t2;
      }
      var r2 = e2.prototype;
      return r2.apiGetList = function(e3, r3) {
        try {
          var t2 = this;
          return Promise.resolve(t2.tryGetResource(e3)).then(function(n2) {
            var o2 = J(r3, !!t2.options.softDelete);
            return P("apiGetListLazy", { resourceName: e3, params: o2 }), Promise.resolve(H(n2.collection, o2, e3, t2.client.flogger)).then(function(r4) {
              var a2 = r4.noPagination;
              return Promise.resolve(i.getDocs(r4.withPagination)).then(function(r5) {
                var s2 = r5.docs.length;
                if (!s2)
                  return P("apiGetListLazy", { message: "There are not records for given query" }), { data: [], total: 0 };
                t2.client.flogger.logDocument(s2)();
                var u2 = r5.docs.map(function(e4) {
                  return T(e4);
                });
                return function(e4, r6, t3) {
                  var n3 = btoa(JSON.stringify(f({}, r6, { resourceName: t3 })));
                  localStorage.setItem(n3, e4.id);
                  var o3 = "ra-firebase-cursor-keys_" + t3, i2 = localStorage.getItem(o3);
                  if (i2) {
                    var a3 = JSON.parse(i2).concat(n3);
                    localStorage.setItem(o3, JSON.stringify(a3));
                  } else
                    localStorage.setItem(o3, JSON.stringify([n3]));
                }(r5.docs[r5.docs.length - 1], function(e4) {
                  return f({}, e4, { pagination: f({}, e4.pagination, { page: e4.pagination.page + 1 }) });
                }(o2), e3), Promise.resolve(i.getCountFromServer(a2)).then(function(e4) {
                  var r6;
                  function o3(t3) {
                    return r6 ? t3 : (P("apiGetListLazy result", { docs: u2, resource: n2, collectionPath: n2.collection.path }), { data: u2, total: e4.data().count });
                  }
                  var i2 = function() {
                    if (t2.options.relativeFilePaths)
                      return Promise.resolve(Promise.all(u2.map(function(e5) {
                        try {
                          var r7 = q(e5, function(r8) {
                            return Promise.resolve(F(t2.client.fireWrapper, e5[r8])).then(function(t3) {
                              e5[r8] = t3;
                            });
                          });
                          return Promise.resolve(r7 && r7.then ? r7.then(function() {
                            return e5;
                          }) : e5);
                        } catch (e6) {
                          return Promise.reject(e6);
                        }
                      }))).then(function(t3) {
                        P("apiGetListLazy result", { docs: t3, resource: n2, collectionPath: n2.collection.path });
                        var o4 = { data: t3, total: e4.data().count };
                        return r6 = 1, o4;
                      });
                  }();
                  return i2 && i2.then ? i2.then(o3) : o3(i2);
                });
              });
            });
          });
        } catch (e4) {
          return Promise.reject(e4);
        }
      }, r2.apiGetManyReference = function(e3, r3) {
        try {
          var t2 = this;
          return Promise.resolve(t2.tryGetResource(e3)).then(function(n2) {
            var o2;
            P("apiGetManyReferenceLazy", { resourceName: e3, resource: n2, reactAdminParams: r3 });
            var a2 = f({}, r3.filter, ((o2 = {})[r3.target] = r3.id, o2)), s2 = J(f({}, r3, { filter: a2 }), !!t2.options.softDelete);
            return Promise.resolve(H(n2.collection, s2, e3, t2.client.flogger)).then(function(e4) {
              return Promise.resolve(i.getDocs(e4.withPagination)).then(function(e5) {
                var r4;
                function o3(e6) {
                  return r4 ? e6 : (P("apiGetManyReferenceLazy result", { docs: i2, resource: n2, collectionPath: n2.collection.path }), { data: i2, total: i2.length });
                }
                t2.client.flogger.logDocument(e5.docs.length)();
                var i2 = e5.docs.map(T), a3 = function() {
                  if (t2.options.relativeFilePaths)
                    return Promise.resolve(Promise.all(i2.map(function(e6) {
                      try {
                        var r5 = q(e6, function(r6) {
                          return Promise.resolve(F(t2.client.fireWrapper, e6[r6])).then(function(t3) {
                            e6[r6] = t3;
                          });
                        });
                        return Promise.resolve(r5 && r5.then ? r5.then(function() {
                          return e6;
                        }) : e6);
                      } catch (e7) {
                        return Promise.reject(e7);
                      }
                    }))).then(function(e6) {
                      return P("apiGetManyReferenceLazy result", { docs: e6, resource: n2, collectionPath: n2.collection.path }), r4 = 1, { data: e6, total: i2.length };
                    });
                }();
                return a3 && a3.then ? a3.then(o3) : o3(a3);
              });
            });
          });
        } catch (e4) {
          return Promise.reject(e4);
        }
      }, r2.tryGetResource = function(e3, r3) {
        try {
          return Promise.resolve(this.rm.TryGetResourcePromise(e3, r3));
        } catch (e4) {
          return Promise.reject(e4);
        }
      }, e2;
    }();
    exports.FirebaseAuthProvider = function(e2, r2) {
      !function(e3, r3) {
        if (!(e3 || r3 && r3.app))
          throw new Error("Please pass the Firebase firebaseConfig object or options.app to the FirebaseAuthProvider");
      }(e2, r2), g.SetEnabled(!(null == r2 || !r2.logging));
      var t2 = new k(e2, r2);
      return { login: function(e3) {
        return t2.HandleAuthLogin(e3);
      }, logout: function() {
        return t2.HandleAuthLogout();
      }, checkAuth: function() {
        return t2.HandleAuthCheck();
      }, checkError: function(e3) {
        return t2.HandleAuthError(e3);
      }, getPermissions: function() {
        return t2.HandleGetPermissions();
      }, getIdentity: function() {
        return t2.HandleGetIdentity();
      }, getAuthUser: function() {
        return t2.getUserLogin();
      }, getJWTAuthTime: function() {
        return t2.HandleGetJWTAuthTime();
      }, getJWTExpirationTime: function() {
        return t2.HandleGetJWTExpirationTime();
      }, getJWTSignInProvider: function() {
        return t2.HandleGetJWTSignInProvider();
      }, getJWTClaims: function() {
        return t2.HandleGetPermissions();
      }, getJWTToken: function() {
        return t2.HandleGetJWTToken();
      } };
    }, exports.FirebaseDataProvider = function(e2, r2) {
      var t2, n2, o2 = function(e3) {
        try {
          var r3;
          return Promise.resolve(function(t3, n3) {
            try {
              var o3 = Promise.resolve(e3()).then(function(e4) {
                return r3 = e4;
              });
            } catch (e4) {
              return n3(e4);
            }
            return o3 && o3.then ? o3.then(void 0, n3) : o3;
          }(0, function(e4) {
            var t3 = (e4 || "").toString(), n3 = function(e5) {
              var r4 = /\[code\=([\w-]*)/g.exec(e5), t4 = Array.isArray(r4) && r4[1];
              switch (t4 || y("unknown StatusCode ", { statusTxt: e5 }), t4) {
                case "unauthenticated":
                  return 401;
                case "permission-denied":
                  return 403;
                case "internal":
                  return 0;
                case "invalid-argument":
                  return 400;
                case "not-found":
                  return 404;
                case "aborted":
                  return 409;
                case "resource-exhausted":
                  return 429;
                case "cancelled":
                  return 499;
                case "internal":
                  return 500;
                case "unimplemented":
                  return 501;
                case "unavailable":
                  return 503;
                case "deadline-exceeded":
                  return 504;
                default:
                  return 200;
              }
            }(t3), o3 = { status: n3, message: t3, json: r3 };
            throw y("DataProvider:", e4, { errorMsg: t3, code: n3, errorObj: o3 }), o3;
          }));
        } catch (e4) {
          return Promise.reject(e4);
        }
      }, a2 = r2 || {};
      !function(e3, r3) {
        if (!(e3 || r3 && r3.app))
          throw new Error("Please pass the Firebase firebaseConfig object or options.app to the FirebaseAuthProvider");
        r3 && r3.rootRef && A(r3.rootRef, "test");
      }(e2, a2);
      var s2 = function(e3) {
        return { SetEnabled: function(e4) {
          m.SetEnabled(e4);
        }, ResetCount: function(e4) {
          e4 && localStorage.removeItem(p);
        }, logDocument: function(r3) {
          if (null == e3 || null == (t3 = e3.lazyLoading) || !t3.enabled)
            return h;
          var t3, n3 = function(e4) {
            void 0 === e4 && (e4 = 1);
            var r4 = localStorage.getItem(p) || "", t4 = (parseInt(r4) || 0) + e4;
            return localStorage.setItem(p, t4 + ""), t4;
          }(r3);
          return m.log.bind(console, "+" + r3 + " (session total=" + n3 + " documents read)");
        } };
      }(a2);
      g.SetEnabled(!(null == a2 || !a2.logging)), s2.SetEnabled(!(null == a2 || null == (t2 = a2.firestoreCostsLogger) || !t2.enabled)), s2.ResetCount(!(null != a2 && null != (n2 = a2.firestoreCostsLogger) && n2.persistCount)), P("Creating FirebaseDataProvider", { firebaseConfig: e2, options: a2 });
      var c2 = new U(r2, e2), v2 = new C(c2, a2, s2);
      return { app: c2.GetApp(), getList: function(e3, r3) {
        return o2(function() {
          return function(e4, r4, t3) {
            try {
              var n3;
              P("GetList", { resourceName: e4, params: r4 });
              var o3 = t3.rm, i2 = t3.fireWrapper, a3 = t3.options;
              if (null != a3 && null != (n3 = a3.lazyLoading) && n3.enabled) {
                var s3 = new Q(a3, o3, t3);
                return Promise.resolve(s3.apiGetList(e4, r4));
              }
              var c3 = r4.filter || {}, f2 = c3.collectionQuery;
              return delete c3.collectionQuery, Promise.resolve(o3.TryGetResource(e4, "REFRESH", f2)).then(function(e5) {
                var t4;
                function n4(e6) {
                  return t4 ? e6 : { data: v3, total: m2 };
                }
                var o4 = e5.list;
                if (null != r4.sort) {
                  var s4 = r4.sort;
                  u(o4, s4.field, "ASC" === s4.order ? "asc" : "desc");
                }
                var f3 = o4;
                a3.softDelete && !Object.keys(c3).includes("deleted") && (f3 = o4.filter(function(e6) {
                  return !e6.deleted;
                }));
                var d2 = l(f3, c3), h2 = (r4.pagination.page - 1) * r4.pagination.perPage, v3 = d2.slice(h2, h2 + r4.pagination.perPage), m2 = d2.length, p2 = function() {
                  if (a3.relativeFilePaths)
                    return Promise.resolve(Promise.all(v3.map(function(e6) {
                      return F(i2, e6);
                    }))).then(function(e6) {
                      return t4 = 1, { data: e6, total: m2 };
                    });
                }();
                return p2 && p2.then ? p2.then(n4) : n4(p2);
              });
            } catch (e5) {
              return Promise.reject(e5);
            }
          }(e3, r3, v2);
        });
      }, getOne: function(e3, r3) {
        return o2(function() {
          return function(e4, r4, t3) {
            try {
              P("GetOne", { resourceName: e4, params: r4 });
              var n3 = t3.rm;
              return Promise.resolve(function(o3, i2) {
                try {
                  var a3 = Promise.resolve(n3.GetSingleDoc(e4, r4.id + "")).then(function(e5) {
                    return t3.flogger.logDocument(1)(), { data: e5 };
                  });
                } catch (e5) {
                  return i2();
                }
                return a3 && a3.then ? a3.then(void 0, i2) : a3;
              }(0, function() {
                throw new Error("Error getting id: " + r4.id + " from collection: " + e4);
              }));
            } catch (e5) {
              return Promise.reject(e5);
            }
          }(e3, r3, v2);
        });
      }, getMany: function(e3, r3) {
        return o2(function() {
          return function(e4, r4, t3) {
            try {
              var n3 = t3.options, o3 = t3.fireWrapper;
              return Promise.resolve(t3.rm.TryGetResource(e4)).then(function(a3) {
                var s3 = r4.ids;
                return P("GetMany", { resourceName: e4, resource: a3, params: r4, ids: s3 }), Promise.resolve(Promise.all(s3.map(function(e5) {
                  return i.getDoc(i.doc(a3.collection, "string" == typeof e5 ? e5 : e5.___refid));
                }))).then(function(e5) {
                  var r5;
                  function i2(e6) {
                    return r5 ? e6 : { data: u2 };
                  }
                  t3.flogger.logDocument(s3.length)();
                  var a4 = e5.map(function(e6) {
                    return f({}, e6.data(), { id: e6.id });
                  }), u2 = n3.softDelete ? a4.filter(function(e6) {
                    return !e6.deleted;
                  }) : a4, c3 = function() {
                    if (n3.relativeFilePaths)
                      return Promise.resolve(Promise.all(u2.map(function(e6) {
                        return F(o3, e6);
                      }))).then(function(e6) {
                        return r5 = 1, { data: e6 };
                      });
                  }();
                  return c3 && c3.then ? c3.then(i2) : i2(c3);
                });
              });
            } catch (e5) {
              return Promise.reject(e5);
            }
          }(e3, r3, v2);
        });
      }, getManyReference: function(e3, r3) {
        return o2(function() {
          return function(e4, r4, t3) {
            try {
              var n3 = t3.rm, o3 = t3.options, i2 = t3.fireWrapper;
              P("GetManyReference", { resourceName: e4, params: r4 });
              var a3 = r4.filter || {};
              return Promise.resolve(n3.TryGetResource(e4, "REFRESH", a3.collectionQuery)).then(function(t4) {
                var n4;
                function s3(e5) {
                  return n4 ? e5 : { data: b2, total: w2 };
                }
                delete a3.collectionQuery, P("apiGetManyReference", { resourceName: e4, resource: t4, params: r4 });
                var c3 = t4.list, f2 = r4.target, d2 = r4.id, h2 = c3;
                o3.softDelete && (h2 = c3.filter(function(e5) {
                  return !e5.deleted;
                }));
                var v3 = l(h2, a3), m2 = {};
                m2[f2] = d2;
                var p2 = l(v3, m2);
                if (null != r4.sort) {
                  var g2 = r4.sort;
                  u(p2, g2.field, "ASC" === g2.order ? "asc" : "desc");
                }
                var y2 = (r4.pagination.page - 1) * r4.pagination.perPage, b2 = p2.slice(y2, y2 + r4.pagination.perPage), w2 = p2.length, D2 = function() {
                  if (o3.relativeFilePaths)
                    return Promise.resolve(Promise.all(p2.map(function(e5) {
                      return F(i2, e5);
                    }))).then(function(e5) {
                      return n4 = 1, { data: e5, total: w2 };
                    });
                }();
                return D2 && D2.then ? D2.then(s3) : s3(D2);
              });
            } catch (e5) {
              return Promise.reject(e5);
            }
          }(e3, r3, v2);
        });
      }, update: function(e3, r3) {
        return o2(function() {
          return function(e4, r4, t3) {
            try {
              var n3 = t3.rm;
              P("Update", { resourceName: e4, params: r4 });
              var o3 = r4.id + "";
              return delete r4.data.id, Promise.resolve(n3.TryGetResource(e4)).then(function(n4) {
                return P("Update", { resourceName: e4, resource: n4, params: r4 }), Promise.resolve(t3.parseDataAndUpload(n4, o3, r4.data)).then(function(r5) {
                  var a3 = f({}, r5);
                  return t3.checkRemoveIdField(a3, o3), Promise.resolve(t3.addUpdatedByFields(a3)).then(function() {
                    var s3 = t3.transformToDb(e4, a3, o3);
                    return Promise.resolve(i.updateDoc(i.doc(n4.collection, o3), s3)).then(function() {
                      return { data: f({}, r5, { id: o3 }) };
                    });
                  });
                });
              });
            } catch (e5) {
              return Promise.reject(e5);
            }
          }(e3, r3, v2);
        });
      }, updateMany: function(e3, r3) {
        return o2(function() {
          return function(e4, r4, t3) {
            try {
              var n3 = t3.rm;
              return P("UpdateMany", { resourceName: e4, params: r4 }), delete r4.data.id, Promise.resolve(n3.TryGetResource(e4)).then(function(n4) {
                return P("UpdateMany", { resourceName: e4, resource: n4, params: r4 }), Promise.resolve(Promise.all(r4.ids.map(function(o3) {
                  try {
                    var a3 = o3 + "";
                    return Promise.resolve(t3.parseDataAndUpload(n4, a3, r4.data)).then(function(r5) {
                      var o4 = f({}, r5);
                      return t3.checkRemoveIdField(o4, a3), Promise.resolve(t3.addUpdatedByFields(o4)).then(function() {
                        var s3 = t3.transformToDb(e4, o4, a3);
                        return Promise.resolve(i.updateDoc(i.doc(n4.collection, a3), s3)).then(function() {
                          return f({}, r5, { id: a3 });
                        });
                      });
                    });
                  } catch (e5) {
                    return Promise.reject(e5);
                  }
                }))).then(function(e5) {
                  return { data: e5 };
                });
              });
            } catch (e5) {
              return Promise.reject(e5);
            }
          }(e3, r3, v2);
        });
      }, create: function(e3, r3) {
        return o2(function() {
          return function(e4, r4, t3) {
            try {
              var n3 = t3.fireWrapper;
              return Promise.resolve(t3.rm.TryGetResource(e4)).then(function(o3) {
                var a3;
                function s3(s4) {
                  if (a3)
                    return s4;
                  var u3 = n3.dbMakeNewId();
                  return Promise.resolve(t3.parseDataAndUpload(o3, u3, r4.data)).then(function(r5) {
                    var n4 = f({}, r5);
                    return t3.checkRemoveIdField(n4, u3), Promise.resolve(t3.addCreatedByFields(n4)).then(function() {
                      return Promise.resolve(t3.addUpdatedByFields(n4)).then(function() {
                        var r6 = t3.transformToDb(e4, n4, u3);
                        return Promise.resolve(i.setDoc(i.doc(o3.collection, u3), r6, { merge: false })).then(function() {
                          return { data: f({}, r6, { id: u3 }) };
                        });
                      });
                    });
                  });
                }
                P("Create", { resourceName: e4, resource: o3, params: r4 });
                var u2 = r4.data && r4.data.id;
                P("Create", { hasOverridenDocId: u2 });
                var c3 = function() {
                  if (u2) {
                    var n4 = r4.data.id;
                    return Promise.resolve(i.getDoc(i.doc(o3.collection, n4))).then(function(s4) {
                      if (s4.exists())
                        throw new Error('the id:"' + n4 + `" already exists, please use a unique string if overriding the 'id' field`);
                      return Promise.resolve(t3.parseDataAndUpload(o3, n4, r4.data)).then(function(r5) {
                        if (!n4)
                          throw new Error("id must be a valid string");
                        var s5 = f({}, r5);
                        return t3.checkRemoveIdField(s5, n4), Promise.resolve(t3.addCreatedByFields(s5)).then(function() {
                          return Promise.resolve(t3.addUpdatedByFields(s5)).then(function() {
                            var r6 = t3.transformToDb(e4, s5, n4);
                            return P("Create", { docObj: s5 }), Promise.resolve(i.setDoc(i.doc(o3.collection, n4), r6, { merge: false })).then(function() {
                              var e5 = { data: f({}, r6, { id: n4 }) };
                              return a3 = 1, e5;
                            });
                          });
                        });
                      });
                    });
                  }
                }();
                return c3 && c3.then ? c3.then(s3) : s3(c3);
              });
            } catch (e5) {
              return Promise.reject(e5);
            }
          }(e3, r3, v2);
        });
      }, delete: function(e3, r3) {
        return o2(function() {
          return function(e4, r4, t3) {
            try {
              var n3 = t3.rm;
              return t3.options.softDelete ? Promise.resolve(function(e5, r5, t4) {
                try {
                  var n4 = r5.id + "";
                  return Promise.resolve(t4.rm.TryGetResource(e5)).then(function(o3) {
                    P("DeleteSoft", { resourceName: e5, resource: o3, params: r5 });
                    var a3 = { deleted: true };
                    return Promise.resolve(t4.addUpdatedByFields(a3)).then(function() {
                      return i.updateDoc(i.doc(o3.collection, n4), a3).catch(function(e6) {
                        y("DeleteSoft error", { error: e6 });
                      }), { data: r5.previousData };
                    });
                  });
                } catch (e6) {
                  return Promise.reject(e6);
                }
              }(e4, r4, t3)) : Promise.resolve(n3.TryGetResource(e4)).then(function(t4) {
                var n4;
                function o3(e5) {
                  return n4 ? e5 : { data: r4.previousData };
                }
                P("apiDelete", { resourceName: e4, resource: t4, params: r4 });
                var a3 = function(e5, n5) {
                  try {
                    var o4 = Promise.resolve(i.deleteDoc(i.doc(t4.collection, r4.id + ""))).then(function() {
                    });
                  } catch (e6) {
                    return n5(e6);
                  }
                  return o4 && o4.then ? o4.then(void 0, n5) : o4;
                }(0, function(e5) {
                  throw new Error(e5);
                });
                return a3 && a3.then ? a3.then(o3) : o3(a3);
              });
            } catch (e5) {
              return Promise.reject(e5);
            }
          }(e3, r3, v2);
        });
      }, deleteMany: function(e3, r3) {
        return o2(function() {
          return function(e4, r4, t3) {
            try {
              var n3 = t3.rm, o3 = t3.fireWrapper;
              return t3.options.softDelete ? Promise.resolve(function(e5, r5, t4) {
                try {
                  return Promise.resolve(t4.rm.TryGetResource(e5)).then(function(n4) {
                    return P("DeleteManySoft", { resourceName: e5, resource: n4, params: r5 }), Promise.resolve(Promise.all(r5.ids.map(function(e6) {
                      try {
                        var r6 = e6 + "", o4 = { deleted: true };
                        return Promise.resolve(t4.addUpdatedByFields(o4)).then(function() {
                          return i.updateDoc(i.doc(n4.collection, r6), o4).catch(function(e7) {
                            y("apiSoftDeleteMany error", { error: e7 });
                          }), r6;
                        });
                      } catch (e7) {
                        return Promise.reject(e7);
                      }
                    }))).then(function(e6) {
                      return { data: e6 };
                    });
                  });
                } catch (e6) {
                  return Promise.reject(e6);
                }
              }(e4, r4, t3)) : Promise.resolve(n3.TryGetResource(e4)).then(function(t4) {
                var n4;
                function a3(e5) {
                  return n4 ? e5 : { data: u2 };
                }
                P("DeleteMany", { resourceName: e4, resource: t4, params: r4 });
                for (var s3, u2 = [], c3 = o3.dbCreateBatch(), l2 = function(e5, r5) {
                  var t5 = "undefined" != typeof Symbol && e5[Symbol.iterator] || e5["@@iterator"];
                  if (t5)
                    return (t5 = t5.call(e5)).next.bind(t5);
                  if (Array.isArray(e5) || (t5 = function(e6, r6) {
                    if (e6) {
                      if ("string" == typeof e6)
                        return d(e6, r6);
                      var t6 = Object.prototype.toString.call(e6).slice(8, -1);
                      return "Object" === t6 && e6.constructor && (t6 = e6.constructor.name), "Map" === t6 || "Set" === t6 ? Array.from(e6) : "Arguments" === t6 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t6) ? d(e6, r6) : void 0;
                    }
                  }(e5))) {
                    t5 && (e5 = t5);
                    var n5 = 0;
                    return function() {
                      return n5 >= e5.length ? { done: true } : { done: false, value: e5[n5++] };
                    };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }(r4.ids); !(s3 = l2()).done; ) {
                  var f2 = s3.value, h2 = i.doc(t4.collection, f2 + "");
                  c3.delete(h2), u2.push(f2);
                }
                var v3 = function(e5, r5) {
                  try {
                    var t5 = Promise.resolve(c3.commit()).then(function() {
                    });
                  } catch (e6) {
                    return r5(e6);
                  }
                  return t5 && t5.then ? t5.then(void 0, r5) : t5;
                }(0, function(e5) {
                  throw new Error(e5);
                });
                return v3 && v3.then ? v3.then(a3) : a3(v3);
              });
            } catch (e5) {
              return Promise.reject(e5);
            }
          }(e3, r3, v2);
        });
      } };
    };
  }
});
export default require_dist2();
/*! Bundled license information:

lodash/lodash.js:
  (**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   *)

@firebase/util/dist/index.cjs.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2022 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/component/dist/index.cjs.js:
  (**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/logger/dist/index.cjs.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/app/dist/index.cjs.js:
  (**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/storage/dist/index.cjs.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2022 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

firebase/app/dist/index.cjs.js:
  (**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/auth/dist/browser-cjs/index-5ca0aadd.js:
  (**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2022 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2020 Google LLC.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/firestore/dist/index.cjs.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
  * @license
  * Copyright 2020 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)
  (**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2018 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2022 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2023 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
  * @license
  * Copyright 2017 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)
*/
//# sourceMappingURL=react-admin-firebase.js.map
